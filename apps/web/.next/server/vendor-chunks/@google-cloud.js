/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@google-cloud";
exports.ids = ["vendor-chunks/@google-cloud"];
exports.modules = {

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/protos/firestore_v1_proto_api.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/protos/firestore_v1_proto_api.js ***!
  \*************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(e=>{ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0})(function(r){var e,t,o,n,C,i=r.util,a=r.roots.firestore_v1||(r.roots.firestore_v1={});function V(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function L(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function U(e){if(this.queries=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function B(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function J(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Q(e){if(this.aggregateFields={},e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function M(e){if(this.fields={},e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function s(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function G(e){if(this.values=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function q(e){if(this.fields={},e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Y(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function W(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function z(e){if(this.fieldPaths=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function H(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function K(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function X(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Z(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function l(e,t,o){r.rpc.Service.call(this,e,t,o)}function $(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function u(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ee(e){if(this.documents=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function te(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function oe(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function re(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function p(e){if(this.documents=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ne(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ie(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ae(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function se(e){if(this.writes=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function le(e){if(this.writeResults=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ue(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function c(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function g(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function f(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function pe(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function d(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ce(e){if(this.partitions=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ge(e){if(this.writes=[],this.labels={},e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function fe(e){if(this.writeResults=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function de(e){if(this.labels={},e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function y(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function m(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ye(e){if(this.documents=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function me(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function be(e){if(this.targetIds=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Oe(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function he(e){if(this.collectionIds=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ve(e){if(this.writes=[],this.labels={},e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Te(e){if(this.writeResults=[],this.status=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function b(e){if(this.from=[],this.orderBy=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Se(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function je(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ee(e){if(this.filters=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function we(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ne(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Pe(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Re(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function De(e){if(this.fields=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function O(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ie(e){if(this.aggregations=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function h(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ae(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ke(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function xe(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Fe(e){if(this.values=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function _e(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ce(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ve(e){if(this.indexesUsed=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Le(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function v(e){if(this.updateTransforms=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ue(e){if(this.fieldTransforms=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function T(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Be(e){if(this.transformResults=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Je(e){if(this.targetIds=[],this.removedTargetIds=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Qe(e){if(this.removedTargetIds=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Me(e){if(this.removedTargetIds=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ge(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function qe(e){if(this.rules=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function S(e){if(this.additionalBindings=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ye(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function We(e){if(this.destinations=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function j(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function E(e){if(this.methodSettings=[],this.codeownerGithubTeams=[],this.librarySettings=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ze(e){if(this.serviceClassNames={},e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function He(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ke(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Xe(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ze(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function $e(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function et(e){if(this.renamedServices={},this.renamedResources={},this.ignoredResources=[],this.forcedNamespaceAliases=[],this.handwrittenSignatures=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function tt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ot(e){if(this.renamedServices={},e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function rt(e){if(this.autoPopulatedFields=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function nt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function it(e){if(this.methods=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function w(e){if(this.pattern=[],this.style=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function at(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function st(e){if(this.file=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function N(e){if(this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function P(e){if(this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function lt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ut(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function pt(e){if(this.uninterpretedOption=[],this.declaration=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ct(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function R(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function gt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ft(e){if(this.value=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function dt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function yt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function mt(e){if(this.method=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function bt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function D(e){if(this.uninterpretedOption=[],this[\".google.api.resourceDefinition\"]=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function I(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function A(e){if(this.targets=[],this.editionDefaults=[],this.uninterpretedOption=[],this[\".google.api.fieldBehavior\"]=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ot(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function ht(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function vt(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Tt(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function St(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function k(e){if(this.uninterpretedOption=[],this[\".google.api.methodSignature\"]=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function x(e){if(this.name=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function jt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function F(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Et(e){if(this.defaults=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function wt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Nt(e){if(this.location=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Pt(e){if(this.path=[],this.span=[],this.leadingDetachedComments=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Rt(e){if(this.annotation=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Dt(e){if(this.path=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function It(e){if(this.fields={},e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function _(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function At(e){if(this.values=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function kt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function xt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ft(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function _t(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ct(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Vt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Lt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Ut(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Bt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Jt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Qt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Mt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Gt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function qt(e){if(this.paths=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Yt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Wt(e){if(this.details=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function zt(e,t,o){r.rpc.Service.call(this,e,t,o)}function Ht(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Kt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Xt(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function Zt(e){if(this.operations=[],e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function $t(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function eo(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function to(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}function oo(e){if(e)for(var t=Object.keys(e),o=0;o<t.length;++o)null!=e[t[o]]&&(this[t[o]]=e[t[o]])}return a.firestore=((o={}).BundledQuery=(V.prototype.parent=\"\",V.prototype.structuredQuery=null,V.prototype.limitType=0,Object.defineProperty(V.prototype,\"queryType\",{get:i.oneOfGetter(t=[\"structuredQuery\"]),set:i.oneOfSetter(t)}),V.fromObject=function(e){if(e instanceof a.firestore.BundledQuery)return e;var t=new a.firestore.BundledQuery;if(null!=e.parent&&(t.parent=String(e.parent)),null!=e.structuredQuery){if(\"object\"!=typeof e.structuredQuery)throw TypeError(\".firestore.BundledQuery.structuredQuery: object expected\");t.structuredQuery=a.google.firestore.v1.StructuredQuery.fromObject(e.structuredQuery)}switch(e.limitType){default:\"number\"==typeof e.limitType&&(t.limitType=e.limitType);break;case\"FIRST\":case 0:t.limitType=0;break;case\"LAST\":case 1:t.limitType=1}return t},V.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.parent=\"\",o.limitType=t.enums===String?\"FIRST\":0),null!=e.parent&&e.hasOwnProperty(\"parent\")&&(o.parent=e.parent),null!=e.structuredQuery&&e.hasOwnProperty(\"structuredQuery\")&&(o.structuredQuery=a.google.firestore.v1.StructuredQuery.toObject(e.structuredQuery,t),t.oneofs)&&(o.queryType=\"structuredQuery\"),null!=e.limitType&&e.hasOwnProperty(\"limitType\")&&(o.limitType=t.enums!==String||void 0===a.firestore.BundledQuery.LimitType[e.limitType]?e.limitType:a.firestore.BundledQuery.LimitType[e.limitType]),o},V.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},V.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/firestore.BundledQuery\"},V.LimitType=(t={},(C=Object.create(t))[t[0]=\"FIRST\"]=\"FIRST\",C[t[1]=\"LAST\"]=\"LAST\",C),V),o.NamedQuery=(L.prototype.name=\"\",L.prototype.bundledQuery=null,L.prototype.readTime=null,L.fromObject=function(e){if(e instanceof a.firestore.NamedQuery)return e;var t=new a.firestore.NamedQuery;if(null!=e.name&&(t.name=String(e.name)),null!=e.bundledQuery){if(\"object\"!=typeof e.bundledQuery)throw TypeError(\".firestore.NamedQuery.bundledQuery: object expected\");t.bundledQuery=a.firestore.BundledQuery.fromObject(e.bundledQuery)}if(null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".firestore.NamedQuery.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}return t},L.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.name=\"\",o.bundledQuery=null,o.readTime=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),null!=e.bundledQuery&&e.hasOwnProperty(\"bundledQuery\")&&(o.bundledQuery=a.firestore.BundledQuery.toObject(e.bundledQuery,t)),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t)),o},L.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},L.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/firestore.NamedQuery\"},L),o.BundledDocumentMetadata=(U.prototype.name=\"\",U.prototype.readTime=null,U.prototype.exists=!1,U.prototype.queries=i.emptyArray,U.fromObject=function(e){if(e instanceof a.firestore.BundledDocumentMetadata)return e;var t=new a.firestore.BundledDocumentMetadata;if(null!=e.name&&(t.name=String(e.name)),null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".firestore.BundledDocumentMetadata.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}if(null!=e.exists&&(t.exists=Boolean(e.exists)),e.queries){if(!Array.isArray(e.queries))throw TypeError(\".firestore.BundledDocumentMetadata.queries: array expected\");t.queries=[];for(var o=0;o<e.queries.length;++o)t.queries[o]=String(e.queries[o])}return t},U.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.queries=[]),t.defaults&&(o.name=\"\",o.readTime=null,o.exists=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t)),null!=e.exists&&e.hasOwnProperty(\"exists\")&&(o.exists=e.exists),e.queries&&e.queries.length){o.queries=[];for(var r=0;r<e.queries.length;++r)o.queries[r]=e.queries[r]}return o},U.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},U.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/firestore.BundledDocumentMetadata\"},U),o.BundleMetadata=(B.prototype.id=\"\",B.prototype.createTime=null,B.prototype.version=0,B.prototype.totalDocuments=0,B.prototype.totalBytes=i.Long?i.Long.fromBits(0,0,!0):0,B.fromObject=function(e){if(e instanceof a.firestore.BundleMetadata)return e;var t=new a.firestore.BundleMetadata;if(null!=e.id&&(t.id=String(e.id)),null!=e.createTime){if(\"object\"!=typeof e.createTime)throw TypeError(\".firestore.BundleMetadata.createTime: object expected\");t.createTime=a.google.protobuf.Timestamp.fromObject(e.createTime)}return null!=e.version&&(t.version=e.version>>>0),null!=e.totalDocuments&&(t.totalDocuments=e.totalDocuments>>>0),null!=e.totalBytes&&(i.Long?(t.totalBytes=i.Long.fromValue(e.totalBytes)).unsigned=!0:\"string\"==typeof e.totalBytes?t.totalBytes=parseInt(e.totalBytes,10):\"number\"==typeof e.totalBytes?t.totalBytes=e.totalBytes:\"object\"==typeof e.totalBytes&&(t.totalBytes=new i.LongBits(e.totalBytes.low>>>0,e.totalBytes.high>>>0).toNumber(!0))),t},B.toObject=function(e,t){var o,r={};return(t=t||{}).defaults&&(r.id=\"\",r.createTime=null,r.version=0,r.totalDocuments=0,i.Long?(o=new i.Long(0,0,!0),r.totalBytes=t.longs===String?o.toString():t.longs===Number?o.toNumber():o):r.totalBytes=t.longs===String?\"0\":0),null!=e.id&&e.hasOwnProperty(\"id\")&&(r.id=e.id),null!=e.createTime&&e.hasOwnProperty(\"createTime\")&&(r.createTime=a.google.protobuf.Timestamp.toObject(e.createTime,t)),null!=e.version&&e.hasOwnProperty(\"version\")&&(r.version=e.version),null!=e.totalDocuments&&e.hasOwnProperty(\"totalDocuments\")&&(r.totalDocuments=e.totalDocuments),null!=e.totalBytes&&e.hasOwnProperty(\"totalBytes\")&&(\"number\"==typeof e.totalBytes?r.totalBytes=t.longs===String?String(e.totalBytes):e.totalBytes:r.totalBytes=t.longs===String?i.Long.prototype.toString.call(e.totalBytes):t.longs===Number?new i.LongBits(e.totalBytes.low>>>0,e.totalBytes.high>>>0).toNumber(!0):e.totalBytes),r},B.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},B.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/firestore.BundleMetadata\"},B),o.BundleElement=(J.prototype.metadata=null,J.prototype.namedQuery=null,J.prototype.documentMetadata=null,J.prototype.document=null,Object.defineProperty(J.prototype,\"elementType\",{get:i.oneOfGetter(t=[\"metadata\",\"namedQuery\",\"documentMetadata\",\"document\"]),set:i.oneOfSetter(t)}),J.fromObject=function(e){if(e instanceof a.firestore.BundleElement)return e;var t=new a.firestore.BundleElement;if(null!=e.metadata){if(\"object\"!=typeof e.metadata)throw TypeError(\".firestore.BundleElement.metadata: object expected\");t.metadata=a.firestore.BundleMetadata.fromObject(e.metadata)}if(null!=e.namedQuery){if(\"object\"!=typeof e.namedQuery)throw TypeError(\".firestore.BundleElement.namedQuery: object expected\");t.namedQuery=a.firestore.NamedQuery.fromObject(e.namedQuery)}if(null!=e.documentMetadata){if(\"object\"!=typeof e.documentMetadata)throw TypeError(\".firestore.BundleElement.documentMetadata: object expected\");t.documentMetadata=a.firestore.BundledDocumentMetadata.fromObject(e.documentMetadata)}if(null!=e.document){if(\"object\"!=typeof e.document)throw TypeError(\".firestore.BundleElement.document: object expected\");t.document=a.google.firestore.v1.Document.fromObject(e.document)}return t},J.toObject=function(e,t){t=t||{};var o={};return null!=e.metadata&&e.hasOwnProperty(\"metadata\")&&(o.metadata=a.firestore.BundleMetadata.toObject(e.metadata,t),t.oneofs)&&(o.elementType=\"metadata\"),null!=e.namedQuery&&e.hasOwnProperty(\"namedQuery\")&&(o.namedQuery=a.firestore.NamedQuery.toObject(e.namedQuery,t),t.oneofs)&&(o.elementType=\"namedQuery\"),null!=e.documentMetadata&&e.hasOwnProperty(\"documentMetadata\")&&(o.documentMetadata=a.firestore.BundledDocumentMetadata.toObject(e.documentMetadata,t),t.oneofs)&&(o.elementType=\"documentMetadata\"),null!=e.document&&e.hasOwnProperty(\"document\")&&(o.document=a.google.firestore.v1.Document.toObject(e.document,t),t.oneofs)&&(o.elementType=\"document\"),o},J.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},J.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/firestore.BundleElement\"},J),o),a.google=((C={}).firestore=((t={}).v1=((o={}).AggregationResult=(Q.prototype.aggregateFields=i.emptyObject,Q.fromObject=function(e){if(e instanceof a.google.firestore.v1.AggregationResult)return e;var t=new a.google.firestore.v1.AggregationResult;if(e.aggregateFields){if(\"object\"!=typeof e.aggregateFields)throw TypeError(\".google.firestore.v1.AggregationResult.aggregateFields: object expected\");t.aggregateFields={};for(var o=Object.keys(e.aggregateFields),r=0;r<o.length;++r){if(\"object\"!=typeof e.aggregateFields[o[r]])throw TypeError(\".google.firestore.v1.AggregationResult.aggregateFields: object expected\");t.aggregateFields[o[r]]=a.google.firestore.v1.Value.fromObject(e.aggregateFields[o[r]])}}return t},Q.toObject=function(e,t){var o,r={};if(((t=t||{}).objects||t.defaults)&&(r.aggregateFields={}),e.aggregateFields&&(o=Object.keys(e.aggregateFields)).length){r.aggregateFields={};for(var n=0;n<o.length;++n)r.aggregateFields[o[n]]=a.google.firestore.v1.Value.toObject(e.aggregateFields[o[n]],t)}return r},Q.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Q.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.AggregationResult\"},Q),o.Document=(M.prototype.name=\"\",M.prototype.fields=i.emptyObject,M.prototype.createTime=null,M.prototype.updateTime=null,M.fromObject=function(e){if(e instanceof a.google.firestore.v1.Document)return e;var t=new a.google.firestore.v1.Document;if(null!=e.name&&(t.name=String(e.name)),e.fields){if(\"object\"!=typeof e.fields)throw TypeError(\".google.firestore.v1.Document.fields: object expected\");t.fields={};for(var o=Object.keys(e.fields),r=0;r<o.length;++r){if(\"object\"!=typeof e.fields[o[r]])throw TypeError(\".google.firestore.v1.Document.fields: object expected\");t.fields[o[r]]=a.google.firestore.v1.Value.fromObject(e.fields[o[r]])}}if(null!=e.createTime){if(\"object\"!=typeof e.createTime)throw TypeError(\".google.firestore.v1.Document.createTime: object expected\");t.createTime=a.google.protobuf.Timestamp.fromObject(e.createTime)}if(null!=e.updateTime){if(\"object\"!=typeof e.updateTime)throw TypeError(\".google.firestore.v1.Document.updateTime: object expected\");t.updateTime=a.google.protobuf.Timestamp.fromObject(e.updateTime)}return t},M.toObject=function(e,t){var o,r={};if(((t=t||{}).objects||t.defaults)&&(r.fields={}),t.defaults&&(r.name=\"\",r.createTime=null,r.updateTime=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(r.name=e.name),e.fields&&(o=Object.keys(e.fields)).length){r.fields={};for(var n=0;n<o.length;++n)r.fields[o[n]]=a.google.firestore.v1.Value.toObject(e.fields[o[n]],t)}return null!=e.createTime&&e.hasOwnProperty(\"createTime\")&&(r.createTime=a.google.protobuf.Timestamp.toObject(e.createTime,t)),null!=e.updateTime&&e.hasOwnProperty(\"updateTime\")&&(r.updateTime=a.google.protobuf.Timestamp.toObject(e.updateTime,t)),r},M.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},M.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.Document\"},M),o.Value=(s.prototype.nullValue=null,s.prototype.booleanValue=null,s.prototype.integerValue=null,s.prototype.doubleValue=null,s.prototype.timestampValue=null,s.prototype.stringValue=null,s.prototype.bytesValue=null,s.prototype.referenceValue=null,s.prototype.geoPointValue=null,s.prototype.arrayValue=null,s.prototype.mapValue=null,Object.defineProperty(s.prototype,\"valueType\",{get:i.oneOfGetter(n=[\"nullValue\",\"booleanValue\",\"integerValue\",\"doubleValue\",\"timestampValue\",\"stringValue\",\"bytesValue\",\"referenceValue\",\"geoPointValue\",\"arrayValue\",\"mapValue\"]),set:i.oneOfSetter(n)}),s.fromObject=function(e){if(e instanceof a.google.firestore.v1.Value)return e;var t=new a.google.firestore.v1.Value;switch(e.nullValue){default:\"number\"==typeof e.nullValue&&(t.nullValue=e.nullValue);break;case\"NULL_VALUE\":case 0:t.nullValue=0}if(null!=e.booleanValue&&(t.booleanValue=Boolean(e.booleanValue)),null!=e.integerValue&&(i.Long?(t.integerValue=i.Long.fromValue(e.integerValue)).unsigned=!1:\"string\"==typeof e.integerValue?t.integerValue=parseInt(e.integerValue,10):\"number\"==typeof e.integerValue?t.integerValue=e.integerValue:\"object\"==typeof e.integerValue&&(t.integerValue=new i.LongBits(e.integerValue.low>>>0,e.integerValue.high>>>0).toNumber())),null!=e.doubleValue&&(t.doubleValue=Number(e.doubleValue)),null!=e.timestampValue){if(\"object\"!=typeof e.timestampValue)throw TypeError(\".google.firestore.v1.Value.timestampValue: object expected\");t.timestampValue=a.google.protobuf.Timestamp.fromObject(e.timestampValue)}if(null!=e.stringValue&&(t.stringValue=String(e.stringValue)),null!=e.bytesValue&&(\"string\"==typeof e.bytesValue?i.base64.decode(e.bytesValue,t.bytesValue=i.newBuffer(i.base64.length(e.bytesValue)),0):0<=e.bytesValue.length&&(t.bytesValue=e.bytesValue)),null!=e.referenceValue&&(t.referenceValue=String(e.referenceValue)),null!=e.geoPointValue){if(\"object\"!=typeof e.geoPointValue)throw TypeError(\".google.firestore.v1.Value.geoPointValue: object expected\");t.geoPointValue=a.google.type.LatLng.fromObject(e.geoPointValue)}if(null!=e.arrayValue){if(\"object\"!=typeof e.arrayValue)throw TypeError(\".google.firestore.v1.Value.arrayValue: object expected\");t.arrayValue=a.google.firestore.v1.ArrayValue.fromObject(e.arrayValue)}if(null!=e.mapValue){if(\"object\"!=typeof e.mapValue)throw TypeError(\".google.firestore.v1.Value.mapValue: object expected\");t.mapValue=a.google.firestore.v1.MapValue.fromObject(e.mapValue)}return t},s.toObject=function(e,t){t=t||{};var o={};return null!=e.booleanValue&&e.hasOwnProperty(\"booleanValue\")&&(o.booleanValue=e.booleanValue,t.oneofs)&&(o.valueType=\"booleanValue\"),null!=e.integerValue&&e.hasOwnProperty(\"integerValue\")&&(\"number\"==typeof e.integerValue?o.integerValue=t.longs===String?String(e.integerValue):e.integerValue:o.integerValue=t.longs===String?i.Long.prototype.toString.call(e.integerValue):t.longs===Number?new i.LongBits(e.integerValue.low>>>0,e.integerValue.high>>>0).toNumber():e.integerValue,t.oneofs)&&(o.valueType=\"integerValue\"),null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&(o.doubleValue=t.json&&!isFinite(e.doubleValue)?String(e.doubleValue):e.doubleValue,t.oneofs)&&(o.valueType=\"doubleValue\"),null!=e.referenceValue&&e.hasOwnProperty(\"referenceValue\")&&(o.referenceValue=e.referenceValue,t.oneofs)&&(o.valueType=\"referenceValue\"),null!=e.mapValue&&e.hasOwnProperty(\"mapValue\")&&(o.mapValue=a.google.firestore.v1.MapValue.toObject(e.mapValue,t),t.oneofs)&&(o.valueType=\"mapValue\"),null!=e.geoPointValue&&e.hasOwnProperty(\"geoPointValue\")&&(o.geoPointValue=a.google.type.LatLng.toObject(e.geoPointValue,t),t.oneofs)&&(o.valueType=\"geoPointValue\"),null!=e.arrayValue&&e.hasOwnProperty(\"arrayValue\")&&(o.arrayValue=a.google.firestore.v1.ArrayValue.toObject(e.arrayValue,t),t.oneofs)&&(o.valueType=\"arrayValue\"),null!=e.timestampValue&&e.hasOwnProperty(\"timestampValue\")&&(o.timestampValue=a.google.protobuf.Timestamp.toObject(e.timestampValue,t),t.oneofs)&&(o.valueType=\"timestampValue\"),null!=e.nullValue&&e.hasOwnProperty(\"nullValue\")&&(o.nullValue=t.enums!==String||void 0===a.google.protobuf.NullValue[e.nullValue]?e.nullValue:a.google.protobuf.NullValue[e.nullValue],t.oneofs)&&(o.valueType=\"nullValue\"),null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&(o.stringValue=e.stringValue,t.oneofs)&&(o.valueType=\"stringValue\"),null!=e.bytesValue&&e.hasOwnProperty(\"bytesValue\")&&(o.bytesValue=t.bytes===String?i.base64.encode(e.bytesValue,0,e.bytesValue.length):t.bytes===Array?Array.prototype.slice.call(e.bytesValue):e.bytesValue,t.oneofs)&&(o.valueType=\"bytesValue\"),o},s.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},s.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.Value\"},s),o.ArrayValue=(G.prototype.values=i.emptyArray,G.fromObject=function(e){if(e instanceof a.google.firestore.v1.ArrayValue)return e;var t=new a.google.firestore.v1.ArrayValue;if(e.values){if(!Array.isArray(e.values))throw TypeError(\".google.firestore.v1.ArrayValue.values: array expected\");t.values=[];for(var o=0;o<e.values.length;++o){if(\"object\"!=typeof e.values[o])throw TypeError(\".google.firestore.v1.ArrayValue.values: object expected\");t.values[o]=a.google.firestore.v1.Value.fromObject(e.values[o])}}return t},G.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.values=[]),e.values&&e.values.length){o.values=[];for(var r=0;r<e.values.length;++r)o.values[r]=a.google.firestore.v1.Value.toObject(e.values[r],t)}return o},G.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},G.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.ArrayValue\"},G),o.MapValue=(q.prototype.fields=i.emptyObject,q.fromObject=function(e){if(e instanceof a.google.firestore.v1.MapValue)return e;var t=new a.google.firestore.v1.MapValue;if(e.fields){if(\"object\"!=typeof e.fields)throw TypeError(\".google.firestore.v1.MapValue.fields: object expected\");t.fields={};for(var o=Object.keys(e.fields),r=0;r<o.length;++r){if(\"object\"!=typeof e.fields[o[r]])throw TypeError(\".google.firestore.v1.MapValue.fields: object expected\");t.fields[o[r]]=a.google.firestore.v1.Value.fromObject(e.fields[o[r]])}}return t},q.toObject=function(e,t){var o,r={};if(((t=t||{}).objects||t.defaults)&&(r.fields={}),e.fields&&(o=Object.keys(e.fields)).length){r.fields={};for(var n=0;n<o.length;++n)r.fields[o[n]]=a.google.firestore.v1.Value.toObject(e.fields[o[n]],t)}return r},q.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},q.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.MapValue\"},q),o.BitSequence=(Y.prototype.bitmap=i.newBuffer([]),Y.prototype.padding=0,Y.fromObject=function(e){var t;return e instanceof a.google.firestore.v1.BitSequence?e:(t=new a.google.firestore.v1.BitSequence,null!=e.bitmap&&(\"string\"==typeof e.bitmap?i.base64.decode(e.bitmap,t.bitmap=i.newBuffer(i.base64.length(e.bitmap)),0):0<=e.bitmap.length&&(t.bitmap=e.bitmap)),null!=e.padding&&(t.padding=0|e.padding),t)},Y.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(t.bytes===String?o.bitmap=\"\":(o.bitmap=[],t.bytes!==Array&&(o.bitmap=i.newBuffer(o.bitmap))),o.padding=0),null!=e.bitmap&&e.hasOwnProperty(\"bitmap\")&&(o.bitmap=t.bytes===String?i.base64.encode(e.bitmap,0,e.bitmap.length):t.bytes===Array?Array.prototype.slice.call(e.bitmap):e.bitmap),null!=e.padding&&e.hasOwnProperty(\"padding\")&&(o.padding=e.padding),o},Y.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Y.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.BitSequence\"},Y),o.BloomFilter=(W.prototype.bits=null,W.prototype.hashCount=0,W.fromObject=function(e){if(e instanceof a.google.firestore.v1.BloomFilter)return e;var t=new a.google.firestore.v1.BloomFilter;if(null!=e.bits){if(\"object\"!=typeof e.bits)throw TypeError(\".google.firestore.v1.BloomFilter.bits: object expected\");t.bits=a.google.firestore.v1.BitSequence.fromObject(e.bits)}return null!=e.hashCount&&(t.hashCount=0|e.hashCount),t},W.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.bits=null,o.hashCount=0),null!=e.bits&&e.hasOwnProperty(\"bits\")&&(o.bits=a.google.firestore.v1.BitSequence.toObject(e.bits,t)),null!=e.hashCount&&e.hasOwnProperty(\"hashCount\")&&(o.hashCount=e.hashCount),o},W.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},W.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.BloomFilter\"},W),o.DocumentMask=(z.prototype.fieldPaths=i.emptyArray,z.fromObject=function(e){if(e instanceof a.google.firestore.v1.DocumentMask)return e;var t=new a.google.firestore.v1.DocumentMask;if(e.fieldPaths){if(!Array.isArray(e.fieldPaths))throw TypeError(\".google.firestore.v1.DocumentMask.fieldPaths: array expected\");t.fieldPaths=[];for(var o=0;o<e.fieldPaths.length;++o)t.fieldPaths[o]=String(e.fieldPaths[o])}return t},z.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.fieldPaths=[]),e.fieldPaths&&e.fieldPaths.length){o.fieldPaths=[];for(var r=0;r<e.fieldPaths.length;++r)o.fieldPaths[r]=e.fieldPaths[r]}return o},z.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},z.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.DocumentMask\"},z),o.Precondition=(H.prototype.exists=null,H.prototype.updateTime=null,Object.defineProperty(H.prototype,\"conditionType\",{get:i.oneOfGetter(n=[\"exists\",\"updateTime\"]),set:i.oneOfSetter(n)}),H.fromObject=function(e){if(e instanceof a.google.firestore.v1.Precondition)return e;var t=new a.google.firestore.v1.Precondition;if(null!=e.exists&&(t.exists=Boolean(e.exists)),null!=e.updateTime){if(\"object\"!=typeof e.updateTime)throw TypeError(\".google.firestore.v1.Precondition.updateTime: object expected\");t.updateTime=a.google.protobuf.Timestamp.fromObject(e.updateTime)}return t},H.toObject=function(e,t){t=t||{};var o={};return null!=e.exists&&e.hasOwnProperty(\"exists\")&&(o.exists=e.exists,t.oneofs)&&(o.conditionType=\"exists\"),null!=e.updateTime&&e.hasOwnProperty(\"updateTime\")&&(o.updateTime=a.google.protobuf.Timestamp.toObject(e.updateTime,t),t.oneofs)&&(o.conditionType=\"updateTime\"),o},H.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},H.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.Precondition\"},H),o.TransactionOptions=(K.prototype.readOnly=null,K.prototype.readWrite=null,Object.defineProperty(K.prototype,\"mode\",{get:i.oneOfGetter(n=[\"readOnly\",\"readWrite\"]),set:i.oneOfSetter(n)}),K.fromObject=function(e){if(e instanceof a.google.firestore.v1.TransactionOptions)return e;var t=new a.google.firestore.v1.TransactionOptions;if(null!=e.readOnly){if(\"object\"!=typeof e.readOnly)throw TypeError(\".google.firestore.v1.TransactionOptions.readOnly: object expected\");t.readOnly=a.google.firestore.v1.TransactionOptions.ReadOnly.fromObject(e.readOnly)}if(null!=e.readWrite){if(\"object\"!=typeof e.readWrite)throw TypeError(\".google.firestore.v1.TransactionOptions.readWrite: object expected\");t.readWrite=a.google.firestore.v1.TransactionOptions.ReadWrite.fromObject(e.readWrite)}return t},K.toObject=function(e,t){t=t||{};var o={};return null!=e.readOnly&&e.hasOwnProperty(\"readOnly\")&&(o.readOnly=a.google.firestore.v1.TransactionOptions.ReadOnly.toObject(e.readOnly,t),t.oneofs)&&(o.mode=\"readOnly\"),null!=e.readWrite&&e.hasOwnProperty(\"readWrite\")&&(o.readWrite=a.google.firestore.v1.TransactionOptions.ReadWrite.toObject(e.readWrite,t),t.oneofs)&&(o.mode=\"readWrite\"),o},K.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},K.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.TransactionOptions\"},K.ReadWrite=(X.prototype.retryTransaction=i.newBuffer([]),X.fromObject=function(e){var t;return e instanceof a.google.firestore.v1.TransactionOptions.ReadWrite?e:(t=new a.google.firestore.v1.TransactionOptions.ReadWrite,null!=e.retryTransaction&&(\"string\"==typeof e.retryTransaction?i.base64.decode(e.retryTransaction,t.retryTransaction=i.newBuffer(i.base64.length(e.retryTransaction)),0):0<=e.retryTransaction.length&&(t.retryTransaction=e.retryTransaction)),t)},X.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(t.bytes===String?o.retryTransaction=\"\":(o.retryTransaction=[],t.bytes!==Array&&(o.retryTransaction=i.newBuffer(o.retryTransaction)))),null!=e.retryTransaction&&e.hasOwnProperty(\"retryTransaction\")&&(o.retryTransaction=t.bytes===String?i.base64.encode(e.retryTransaction,0,e.retryTransaction.length):t.bytes===Array?Array.prototype.slice.call(e.retryTransaction):e.retryTransaction),o},X.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},X.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.TransactionOptions.ReadWrite\"},X),K.ReadOnly=(Z.prototype.readTime=null,Object.defineProperty(Z.prototype,\"consistencySelector\",{get:i.oneOfGetter(n=[\"readTime\"]),set:i.oneOfSetter(n)}),Z.fromObject=function(e){if(e instanceof a.google.firestore.v1.TransactionOptions.ReadOnly)return e;var t=new a.google.firestore.v1.TransactionOptions.ReadOnly;if(null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.TransactionOptions.ReadOnly.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}return t},Z.toObject=function(e,t){t=t||{};var o={};return null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t),t.oneofs)&&(o.consistencySelector=\"readTime\"),o},Z.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Z.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.TransactionOptions.ReadOnly\"},Z),K),o.Firestore=((l.prototype=Object.create(r.rpc.Service.prototype)).constructor=l,Object.defineProperty(l.prototype.getDocument=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.GetDocumentRequest,a.google.firestore.v1.Document,t,o)},\"name\",{value:\"GetDocument\"}),Object.defineProperty(l.prototype.listDocuments=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.ListDocumentsRequest,a.google.firestore.v1.ListDocumentsResponse,t,o)},\"name\",{value:\"ListDocuments\"}),Object.defineProperty(l.prototype.updateDocument=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.UpdateDocumentRequest,a.google.firestore.v1.Document,t,o)},\"name\",{value:\"UpdateDocument\"}),Object.defineProperty(l.prototype.deleteDocument=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.DeleteDocumentRequest,a.google.protobuf.Empty,t,o)},\"name\",{value:\"DeleteDocument\"}),Object.defineProperty(l.prototype.batchGetDocuments=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.BatchGetDocumentsRequest,a.google.firestore.v1.BatchGetDocumentsResponse,t,o)},\"name\",{value:\"BatchGetDocuments\"}),Object.defineProperty(l.prototype.beginTransaction=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.BeginTransactionRequest,a.google.firestore.v1.BeginTransactionResponse,t,o)},\"name\",{value:\"BeginTransaction\"}),Object.defineProperty(l.prototype.commit=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.CommitRequest,a.google.firestore.v1.CommitResponse,t,o)},\"name\",{value:\"Commit\"}),Object.defineProperty(l.prototype.rollback=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.RollbackRequest,a.google.protobuf.Empty,t,o)},\"name\",{value:\"Rollback\"}),Object.defineProperty(l.prototype.runQuery=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.RunQueryRequest,a.google.firestore.v1.RunQueryResponse,t,o)},\"name\",{value:\"RunQuery\"}),Object.defineProperty(l.prototype.runAggregationQuery=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.RunAggregationQueryRequest,a.google.firestore.v1.RunAggregationQueryResponse,t,o)},\"name\",{value:\"RunAggregationQuery\"}),Object.defineProperty(l.prototype.partitionQuery=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.PartitionQueryRequest,a.google.firestore.v1.PartitionQueryResponse,t,o)},\"name\",{value:\"PartitionQuery\"}),Object.defineProperty(l.prototype.write=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.WriteRequest,a.google.firestore.v1.WriteResponse,t,o)},\"name\",{value:\"Write\"}),Object.defineProperty(l.prototype.listen=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.ListenRequest,a.google.firestore.v1.ListenResponse,t,o)},\"name\",{value:\"Listen\"}),Object.defineProperty(l.prototype.listCollectionIds=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.ListCollectionIdsRequest,a.google.firestore.v1.ListCollectionIdsResponse,t,o)},\"name\",{value:\"ListCollectionIds\"}),Object.defineProperty(l.prototype.batchWrite=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.BatchWriteRequest,a.google.firestore.v1.BatchWriteResponse,t,o)},\"name\",{value:\"BatchWrite\"}),Object.defineProperty(l.prototype.createDocument=function e(t,o){return this.rpcCall(e,a.google.firestore.v1.CreateDocumentRequest,a.google.firestore.v1.Document,t,o)},\"name\",{value:\"CreateDocument\"}),l),o.GetDocumentRequest=($.prototype.name=\"\",$.prototype.mask=null,$.prototype.transaction=null,$.prototype.readTime=null,Object.defineProperty($.prototype,\"consistencySelector\",{get:i.oneOfGetter(n=[\"transaction\",\"readTime\"]),set:i.oneOfSetter(n)}),$.fromObject=function(e){if(e instanceof a.google.firestore.v1.GetDocumentRequest)return e;var t=new a.google.firestore.v1.GetDocumentRequest;if(null!=e.name&&(t.name=String(e.name)),null!=e.mask){if(\"object\"!=typeof e.mask)throw TypeError(\".google.firestore.v1.GetDocumentRequest.mask: object expected\");t.mask=a.google.firestore.v1.DocumentMask.fromObject(e.mask)}if(null!=e.transaction&&(\"string\"==typeof e.transaction?i.base64.decode(e.transaction,t.transaction=i.newBuffer(i.base64.length(e.transaction)),0):0<=e.transaction.length&&(t.transaction=e.transaction)),null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.GetDocumentRequest.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}return t},$.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.name=\"\",o.mask=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),null!=e.mask&&e.hasOwnProperty(\"mask\")&&(o.mask=a.google.firestore.v1.DocumentMask.toObject(e.mask,t)),null!=e.transaction&&e.hasOwnProperty(\"transaction\")&&(o.transaction=t.bytes===String?i.base64.encode(e.transaction,0,e.transaction.length):t.bytes===Array?Array.prototype.slice.call(e.transaction):e.transaction,t.oneofs)&&(o.consistencySelector=\"transaction\"),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t),t.oneofs)&&(o.consistencySelector=\"readTime\"),o},$.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},$.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.GetDocumentRequest\"},$),o.ListDocumentsRequest=(u.prototype.parent=\"\",u.prototype.collectionId=\"\",u.prototype.pageSize=0,u.prototype.pageToken=\"\",u.prototype.orderBy=\"\",u.prototype.mask=null,u.prototype.transaction=null,u.prototype.readTime=null,u.prototype.showMissing=!1,Object.defineProperty(u.prototype,\"consistencySelector\",{get:i.oneOfGetter(n=[\"transaction\",\"readTime\"]),set:i.oneOfSetter(n)}),u.fromObject=function(e){if(e instanceof a.google.firestore.v1.ListDocumentsRequest)return e;var t=new a.google.firestore.v1.ListDocumentsRequest;if(null!=e.parent&&(t.parent=String(e.parent)),null!=e.collectionId&&(t.collectionId=String(e.collectionId)),null!=e.pageSize&&(t.pageSize=0|e.pageSize),null!=e.pageToken&&(t.pageToken=String(e.pageToken)),null!=e.orderBy&&(t.orderBy=String(e.orderBy)),null!=e.mask){if(\"object\"!=typeof e.mask)throw TypeError(\".google.firestore.v1.ListDocumentsRequest.mask: object expected\");t.mask=a.google.firestore.v1.DocumentMask.fromObject(e.mask)}if(null!=e.transaction&&(\"string\"==typeof e.transaction?i.base64.decode(e.transaction,t.transaction=i.newBuffer(i.base64.length(e.transaction)),0):0<=e.transaction.length&&(t.transaction=e.transaction)),null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.ListDocumentsRequest.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}return null!=e.showMissing&&(t.showMissing=Boolean(e.showMissing)),t},u.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.parent=\"\",o.collectionId=\"\",o.pageSize=0,o.pageToken=\"\",o.orderBy=\"\",o.mask=null,o.showMissing=!1),null!=e.parent&&e.hasOwnProperty(\"parent\")&&(o.parent=e.parent),null!=e.collectionId&&e.hasOwnProperty(\"collectionId\")&&(o.collectionId=e.collectionId),null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&(o.pageSize=e.pageSize),null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&(o.pageToken=e.pageToken),null!=e.orderBy&&e.hasOwnProperty(\"orderBy\")&&(o.orderBy=e.orderBy),null!=e.mask&&e.hasOwnProperty(\"mask\")&&(o.mask=a.google.firestore.v1.DocumentMask.toObject(e.mask,t)),null!=e.transaction&&e.hasOwnProperty(\"transaction\")&&(o.transaction=t.bytes===String?i.base64.encode(e.transaction,0,e.transaction.length):t.bytes===Array?Array.prototype.slice.call(e.transaction):e.transaction,t.oneofs)&&(o.consistencySelector=\"transaction\"),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t),t.oneofs)&&(o.consistencySelector=\"readTime\"),null!=e.showMissing&&e.hasOwnProperty(\"showMissing\")&&(o.showMissing=e.showMissing),o},u.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},u.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.ListDocumentsRequest\"},u),o.ListDocumentsResponse=(ee.prototype.documents=i.emptyArray,ee.prototype.nextPageToken=\"\",ee.fromObject=function(e){if(e instanceof a.google.firestore.v1.ListDocumentsResponse)return e;var t=new a.google.firestore.v1.ListDocumentsResponse;if(e.documents){if(!Array.isArray(e.documents))throw TypeError(\".google.firestore.v1.ListDocumentsResponse.documents: array expected\");t.documents=[];for(var o=0;o<e.documents.length;++o){if(\"object\"!=typeof e.documents[o])throw TypeError(\".google.firestore.v1.ListDocumentsResponse.documents: object expected\");t.documents[o]=a.google.firestore.v1.Document.fromObject(e.documents[o])}}return null!=e.nextPageToken&&(t.nextPageToken=String(e.nextPageToken)),t},ee.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.documents=[]),t.defaults&&(o.nextPageToken=\"\"),e.documents&&e.documents.length){o.documents=[];for(var r=0;r<e.documents.length;++r)o.documents[r]=a.google.firestore.v1.Document.toObject(e.documents[r],t)}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&(o.nextPageToken=e.nextPageToken),o},ee.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ee.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.ListDocumentsResponse\"},ee),o.CreateDocumentRequest=(te.prototype.parent=\"\",te.prototype.collectionId=\"\",te.prototype.documentId=\"\",te.prototype.document=null,te.prototype.mask=null,te.fromObject=function(e){if(e instanceof a.google.firestore.v1.CreateDocumentRequest)return e;var t=new a.google.firestore.v1.CreateDocumentRequest;if(null!=e.parent&&(t.parent=String(e.parent)),null!=e.collectionId&&(t.collectionId=String(e.collectionId)),null!=e.documentId&&(t.documentId=String(e.documentId)),null!=e.document){if(\"object\"!=typeof e.document)throw TypeError(\".google.firestore.v1.CreateDocumentRequest.document: object expected\");t.document=a.google.firestore.v1.Document.fromObject(e.document)}if(null!=e.mask){if(\"object\"!=typeof e.mask)throw TypeError(\".google.firestore.v1.CreateDocumentRequest.mask: object expected\");t.mask=a.google.firestore.v1.DocumentMask.fromObject(e.mask)}return t},te.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.parent=\"\",o.collectionId=\"\",o.documentId=\"\",o.document=null,o.mask=null),null!=e.parent&&e.hasOwnProperty(\"parent\")&&(o.parent=e.parent),null!=e.collectionId&&e.hasOwnProperty(\"collectionId\")&&(o.collectionId=e.collectionId),null!=e.documentId&&e.hasOwnProperty(\"documentId\")&&(o.documentId=e.documentId),null!=e.document&&e.hasOwnProperty(\"document\")&&(o.document=a.google.firestore.v1.Document.toObject(e.document,t)),null!=e.mask&&e.hasOwnProperty(\"mask\")&&(o.mask=a.google.firestore.v1.DocumentMask.toObject(e.mask,t)),o},te.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},te.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.CreateDocumentRequest\"},te),o.UpdateDocumentRequest=(oe.prototype.document=null,oe.prototype.updateMask=null,oe.prototype.mask=null,oe.prototype.currentDocument=null,oe.fromObject=function(e){if(e instanceof a.google.firestore.v1.UpdateDocumentRequest)return e;var t=new a.google.firestore.v1.UpdateDocumentRequest;if(null!=e.document){if(\"object\"!=typeof e.document)throw TypeError(\".google.firestore.v1.UpdateDocumentRequest.document: object expected\");t.document=a.google.firestore.v1.Document.fromObject(e.document)}if(null!=e.updateMask){if(\"object\"!=typeof e.updateMask)throw TypeError(\".google.firestore.v1.UpdateDocumentRequest.updateMask: object expected\");t.updateMask=a.google.firestore.v1.DocumentMask.fromObject(e.updateMask)}if(null!=e.mask){if(\"object\"!=typeof e.mask)throw TypeError(\".google.firestore.v1.UpdateDocumentRequest.mask: object expected\");t.mask=a.google.firestore.v1.DocumentMask.fromObject(e.mask)}if(null!=e.currentDocument){if(\"object\"!=typeof e.currentDocument)throw TypeError(\".google.firestore.v1.UpdateDocumentRequest.currentDocument: object expected\");t.currentDocument=a.google.firestore.v1.Precondition.fromObject(e.currentDocument)}return t},oe.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.document=null,o.updateMask=null,o.mask=null,o.currentDocument=null),null!=e.document&&e.hasOwnProperty(\"document\")&&(o.document=a.google.firestore.v1.Document.toObject(e.document,t)),null!=e.updateMask&&e.hasOwnProperty(\"updateMask\")&&(o.updateMask=a.google.firestore.v1.DocumentMask.toObject(e.updateMask,t)),null!=e.mask&&e.hasOwnProperty(\"mask\")&&(o.mask=a.google.firestore.v1.DocumentMask.toObject(e.mask,t)),null!=e.currentDocument&&e.hasOwnProperty(\"currentDocument\")&&(o.currentDocument=a.google.firestore.v1.Precondition.toObject(e.currentDocument,t)),o},oe.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},oe.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.UpdateDocumentRequest\"},oe),o.DeleteDocumentRequest=(re.prototype.name=\"\",re.prototype.currentDocument=null,re.fromObject=function(e){if(e instanceof a.google.firestore.v1.DeleteDocumentRequest)return e;var t=new a.google.firestore.v1.DeleteDocumentRequest;if(null!=e.name&&(t.name=String(e.name)),null!=e.currentDocument){if(\"object\"!=typeof e.currentDocument)throw TypeError(\".google.firestore.v1.DeleteDocumentRequest.currentDocument: object expected\");t.currentDocument=a.google.firestore.v1.Precondition.fromObject(e.currentDocument)}return t},re.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.name=\"\",o.currentDocument=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),null!=e.currentDocument&&e.hasOwnProperty(\"currentDocument\")&&(o.currentDocument=a.google.firestore.v1.Precondition.toObject(e.currentDocument,t)),o},re.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},re.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.DeleteDocumentRequest\"},re),o.BatchGetDocumentsRequest=(p.prototype.database=\"\",p.prototype.documents=i.emptyArray,p.prototype.mask=null,p.prototype.transaction=null,p.prototype.newTransaction=null,p.prototype.readTime=null,Object.defineProperty(p.prototype,\"consistencySelector\",{get:i.oneOfGetter(n=[\"transaction\",\"newTransaction\",\"readTime\"]),set:i.oneOfSetter(n)}),p.fromObject=function(e){if(e instanceof a.google.firestore.v1.BatchGetDocumentsRequest)return e;var t=new a.google.firestore.v1.BatchGetDocumentsRequest;if(null!=e.database&&(t.database=String(e.database)),e.documents){if(!Array.isArray(e.documents))throw TypeError(\".google.firestore.v1.BatchGetDocumentsRequest.documents: array expected\");t.documents=[];for(var o=0;o<e.documents.length;++o)t.documents[o]=String(e.documents[o])}if(null!=e.mask){if(\"object\"!=typeof e.mask)throw TypeError(\".google.firestore.v1.BatchGetDocumentsRequest.mask: object expected\");t.mask=a.google.firestore.v1.DocumentMask.fromObject(e.mask)}if(null!=e.transaction&&(\"string\"==typeof e.transaction?i.base64.decode(e.transaction,t.transaction=i.newBuffer(i.base64.length(e.transaction)),0):0<=e.transaction.length&&(t.transaction=e.transaction)),null!=e.newTransaction){if(\"object\"!=typeof e.newTransaction)throw TypeError(\".google.firestore.v1.BatchGetDocumentsRequest.newTransaction: object expected\");t.newTransaction=a.google.firestore.v1.TransactionOptions.fromObject(e.newTransaction)}if(null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.BatchGetDocumentsRequest.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}return t},p.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.documents=[]),t.defaults&&(o.database=\"\",o.mask=null),null!=e.database&&e.hasOwnProperty(\"database\")&&(o.database=e.database),e.documents&&e.documents.length){o.documents=[];for(var r=0;r<e.documents.length;++r)o.documents[r]=e.documents[r]}return null!=e.mask&&e.hasOwnProperty(\"mask\")&&(o.mask=a.google.firestore.v1.DocumentMask.toObject(e.mask,t)),null!=e.transaction&&e.hasOwnProperty(\"transaction\")&&(o.transaction=t.bytes===String?i.base64.encode(e.transaction,0,e.transaction.length):t.bytes===Array?Array.prototype.slice.call(e.transaction):e.transaction,t.oneofs)&&(o.consistencySelector=\"transaction\"),null!=e.newTransaction&&e.hasOwnProperty(\"newTransaction\")&&(o.newTransaction=a.google.firestore.v1.TransactionOptions.toObject(e.newTransaction,t),t.oneofs)&&(o.consistencySelector=\"newTransaction\"),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t),t.oneofs)&&(o.consistencySelector=\"readTime\"),o},p.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},p.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.BatchGetDocumentsRequest\"},p),o.BatchGetDocumentsResponse=(ne.prototype.found=null,ne.prototype.missing=null,ne.prototype.transaction=i.newBuffer([]),ne.prototype.readTime=null,Object.defineProperty(ne.prototype,\"result\",{get:i.oneOfGetter(n=[\"found\",\"missing\"]),set:i.oneOfSetter(n)}),ne.fromObject=function(e){if(e instanceof a.google.firestore.v1.BatchGetDocumentsResponse)return e;var t=new a.google.firestore.v1.BatchGetDocumentsResponse;if(null!=e.found){if(\"object\"!=typeof e.found)throw TypeError(\".google.firestore.v1.BatchGetDocumentsResponse.found: object expected\");t.found=a.google.firestore.v1.Document.fromObject(e.found)}if(null!=e.missing&&(t.missing=String(e.missing)),null!=e.transaction&&(\"string\"==typeof e.transaction?i.base64.decode(e.transaction,t.transaction=i.newBuffer(i.base64.length(e.transaction)),0):0<=e.transaction.length&&(t.transaction=e.transaction)),null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.BatchGetDocumentsResponse.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}return t},ne.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(t.bytes===String?o.transaction=\"\":(o.transaction=[],t.bytes!==Array&&(o.transaction=i.newBuffer(o.transaction))),o.readTime=null),null!=e.found&&e.hasOwnProperty(\"found\")&&(o.found=a.google.firestore.v1.Document.toObject(e.found,t),t.oneofs)&&(o.result=\"found\"),null!=e.missing&&e.hasOwnProperty(\"missing\")&&(o.missing=e.missing,t.oneofs)&&(o.result=\"missing\"),null!=e.transaction&&e.hasOwnProperty(\"transaction\")&&(o.transaction=t.bytes===String?i.base64.encode(e.transaction,0,e.transaction.length):t.bytes===Array?Array.prototype.slice.call(e.transaction):e.transaction),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t)),o},ne.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ne.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.BatchGetDocumentsResponse\"},ne),o.BeginTransactionRequest=(ie.prototype.database=\"\",ie.prototype.options=null,ie.fromObject=function(e){if(e instanceof a.google.firestore.v1.BeginTransactionRequest)return e;var t=new a.google.firestore.v1.BeginTransactionRequest;if(null!=e.database&&(t.database=String(e.database)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.firestore.v1.BeginTransactionRequest.options: object expected\");t.options=a.google.firestore.v1.TransactionOptions.fromObject(e.options)}return t},ie.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.database=\"\",o.options=null),null!=e.database&&e.hasOwnProperty(\"database\")&&(o.database=e.database),null!=e.options&&e.hasOwnProperty(\"options\")&&(o.options=a.google.firestore.v1.TransactionOptions.toObject(e.options,t)),o},ie.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ie.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.BeginTransactionRequest\"},ie),o.BeginTransactionResponse=(ae.prototype.transaction=i.newBuffer([]),ae.fromObject=function(e){var t;return e instanceof a.google.firestore.v1.BeginTransactionResponse?e:(t=new a.google.firestore.v1.BeginTransactionResponse,null!=e.transaction&&(\"string\"==typeof e.transaction?i.base64.decode(e.transaction,t.transaction=i.newBuffer(i.base64.length(e.transaction)),0):0<=e.transaction.length&&(t.transaction=e.transaction)),t)},ae.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(t.bytes===String?o.transaction=\"\":(o.transaction=[],t.bytes!==Array&&(o.transaction=i.newBuffer(o.transaction)))),null!=e.transaction&&e.hasOwnProperty(\"transaction\")&&(o.transaction=t.bytes===String?i.base64.encode(e.transaction,0,e.transaction.length):t.bytes===Array?Array.prototype.slice.call(e.transaction):e.transaction),o},ae.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ae.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.BeginTransactionResponse\"},ae),o.CommitRequest=(se.prototype.database=\"\",se.prototype.writes=i.emptyArray,se.prototype.transaction=i.newBuffer([]),se.fromObject=function(e){if(e instanceof a.google.firestore.v1.CommitRequest)return e;var t=new a.google.firestore.v1.CommitRequest;if(null!=e.database&&(t.database=String(e.database)),e.writes){if(!Array.isArray(e.writes))throw TypeError(\".google.firestore.v1.CommitRequest.writes: array expected\");t.writes=[];for(var o=0;o<e.writes.length;++o){if(\"object\"!=typeof e.writes[o])throw TypeError(\".google.firestore.v1.CommitRequest.writes: object expected\");t.writes[o]=a.google.firestore.v1.Write.fromObject(e.writes[o])}}return null!=e.transaction&&(\"string\"==typeof e.transaction?i.base64.decode(e.transaction,t.transaction=i.newBuffer(i.base64.length(e.transaction)),0):0<=e.transaction.length&&(t.transaction=e.transaction)),t},se.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.writes=[]),t.defaults&&(o.database=\"\",t.bytes===String?o.transaction=\"\":(o.transaction=[],t.bytes!==Array&&(o.transaction=i.newBuffer(o.transaction)))),null!=e.database&&e.hasOwnProperty(\"database\")&&(o.database=e.database),e.writes&&e.writes.length){o.writes=[];for(var r=0;r<e.writes.length;++r)o.writes[r]=a.google.firestore.v1.Write.toObject(e.writes[r],t)}return null!=e.transaction&&e.hasOwnProperty(\"transaction\")&&(o.transaction=t.bytes===String?i.base64.encode(e.transaction,0,e.transaction.length):t.bytes===Array?Array.prototype.slice.call(e.transaction):e.transaction),o},se.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},se.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.CommitRequest\"},se),o.CommitResponse=(le.prototype.writeResults=i.emptyArray,le.prototype.commitTime=null,le.fromObject=function(e){if(e instanceof a.google.firestore.v1.CommitResponse)return e;var t=new a.google.firestore.v1.CommitResponse;if(e.writeResults){if(!Array.isArray(e.writeResults))throw TypeError(\".google.firestore.v1.CommitResponse.writeResults: array expected\");t.writeResults=[];for(var o=0;o<e.writeResults.length;++o){if(\"object\"!=typeof e.writeResults[o])throw TypeError(\".google.firestore.v1.CommitResponse.writeResults: object expected\");t.writeResults[o]=a.google.firestore.v1.WriteResult.fromObject(e.writeResults[o])}}if(null!=e.commitTime){if(\"object\"!=typeof e.commitTime)throw TypeError(\".google.firestore.v1.CommitResponse.commitTime: object expected\");t.commitTime=a.google.protobuf.Timestamp.fromObject(e.commitTime)}return t},le.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.writeResults=[]),t.defaults&&(o.commitTime=null),e.writeResults&&e.writeResults.length){o.writeResults=[];for(var r=0;r<e.writeResults.length;++r)o.writeResults[r]=a.google.firestore.v1.WriteResult.toObject(e.writeResults[r],t)}return null!=e.commitTime&&e.hasOwnProperty(\"commitTime\")&&(o.commitTime=a.google.protobuf.Timestamp.toObject(e.commitTime,t)),o},le.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},le.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.CommitResponse\"},le),o.RollbackRequest=(ue.prototype.database=\"\",ue.prototype.transaction=i.newBuffer([]),ue.fromObject=function(e){var t;return e instanceof a.google.firestore.v1.RollbackRequest?e:(t=new a.google.firestore.v1.RollbackRequest,null!=e.database&&(t.database=String(e.database)),null!=e.transaction&&(\"string\"==typeof e.transaction?i.base64.decode(e.transaction,t.transaction=i.newBuffer(i.base64.length(e.transaction)),0):0<=e.transaction.length&&(t.transaction=e.transaction)),t)},ue.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.database=\"\",t.bytes===String?o.transaction=\"\":(o.transaction=[],t.bytes!==Array&&(o.transaction=i.newBuffer(o.transaction)))),null!=e.database&&e.hasOwnProperty(\"database\")&&(o.database=e.database),null!=e.transaction&&e.hasOwnProperty(\"transaction\")&&(o.transaction=t.bytes===String?i.base64.encode(e.transaction,0,e.transaction.length):t.bytes===Array?Array.prototype.slice.call(e.transaction):e.transaction),o},ue.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ue.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.RollbackRequest\"},ue),o.RunQueryRequest=(c.prototype.parent=\"\",c.prototype.structuredQuery=null,c.prototype.transaction=null,c.prototype.newTransaction=null,c.prototype.readTime=null,c.prototype.explainOptions=null,Object.defineProperty(c.prototype,\"queryType\",{get:i.oneOfGetter(n=[\"structuredQuery\"]),set:i.oneOfSetter(n)}),Object.defineProperty(c.prototype,\"consistencySelector\",{get:i.oneOfGetter(n=[\"transaction\",\"newTransaction\",\"readTime\"]),set:i.oneOfSetter(n)}),c.fromObject=function(e){if(e instanceof a.google.firestore.v1.RunQueryRequest)return e;var t=new a.google.firestore.v1.RunQueryRequest;if(null!=e.parent&&(t.parent=String(e.parent)),null!=e.structuredQuery){if(\"object\"!=typeof e.structuredQuery)throw TypeError(\".google.firestore.v1.RunQueryRequest.structuredQuery: object expected\");t.structuredQuery=a.google.firestore.v1.StructuredQuery.fromObject(e.structuredQuery)}if(null!=e.transaction&&(\"string\"==typeof e.transaction?i.base64.decode(e.transaction,t.transaction=i.newBuffer(i.base64.length(e.transaction)),0):0<=e.transaction.length&&(t.transaction=e.transaction)),null!=e.newTransaction){if(\"object\"!=typeof e.newTransaction)throw TypeError(\".google.firestore.v1.RunQueryRequest.newTransaction: object expected\");t.newTransaction=a.google.firestore.v1.TransactionOptions.fromObject(e.newTransaction)}if(null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.RunQueryRequest.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}if(null!=e.explainOptions){if(\"object\"!=typeof e.explainOptions)throw TypeError(\".google.firestore.v1.RunQueryRequest.explainOptions: object expected\");t.explainOptions=a.google.firestore.v1.ExplainOptions.fromObject(e.explainOptions)}return t},c.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.parent=\"\",o.explainOptions=null),null!=e.parent&&e.hasOwnProperty(\"parent\")&&(o.parent=e.parent),null!=e.structuredQuery&&e.hasOwnProperty(\"structuredQuery\")&&(o.structuredQuery=a.google.firestore.v1.StructuredQuery.toObject(e.structuredQuery,t),t.oneofs)&&(o.queryType=\"structuredQuery\"),null!=e.transaction&&e.hasOwnProperty(\"transaction\")&&(o.transaction=t.bytes===String?i.base64.encode(e.transaction,0,e.transaction.length):t.bytes===Array?Array.prototype.slice.call(e.transaction):e.transaction,t.oneofs)&&(o.consistencySelector=\"transaction\"),null!=e.newTransaction&&e.hasOwnProperty(\"newTransaction\")&&(o.newTransaction=a.google.firestore.v1.TransactionOptions.toObject(e.newTransaction,t),t.oneofs)&&(o.consistencySelector=\"newTransaction\"),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t),t.oneofs)&&(o.consistencySelector=\"readTime\"),null!=e.explainOptions&&e.hasOwnProperty(\"explainOptions\")&&(o.explainOptions=a.google.firestore.v1.ExplainOptions.toObject(e.explainOptions,t)),o},c.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},c.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.RunQueryRequest\"},c),o.RunQueryResponse=(g.prototype.transaction=i.newBuffer([]),g.prototype.document=null,g.prototype.readTime=null,g.prototype.skippedResults=0,g.prototype.done=null,g.prototype.explainMetrics=null,Object.defineProperty(g.prototype,\"continuationSelector\",{get:i.oneOfGetter(n=[\"done\"]),set:i.oneOfSetter(n)}),g.fromObject=function(e){if(e instanceof a.google.firestore.v1.RunQueryResponse)return e;var t=new a.google.firestore.v1.RunQueryResponse;if(null!=e.transaction&&(\"string\"==typeof e.transaction?i.base64.decode(e.transaction,t.transaction=i.newBuffer(i.base64.length(e.transaction)),0):0<=e.transaction.length&&(t.transaction=e.transaction)),null!=e.document){if(\"object\"!=typeof e.document)throw TypeError(\".google.firestore.v1.RunQueryResponse.document: object expected\");t.document=a.google.firestore.v1.Document.fromObject(e.document)}if(null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.RunQueryResponse.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}if(null!=e.skippedResults&&(t.skippedResults=0|e.skippedResults),null!=e.done&&(t.done=Boolean(e.done)),null!=e.explainMetrics){if(\"object\"!=typeof e.explainMetrics)throw TypeError(\".google.firestore.v1.RunQueryResponse.explainMetrics: object expected\");t.explainMetrics=a.google.firestore.v1.ExplainMetrics.fromObject(e.explainMetrics)}return t},g.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.document=null,t.bytes===String?o.transaction=\"\":(o.transaction=[],t.bytes!==Array&&(o.transaction=i.newBuffer(o.transaction))),o.readTime=null,o.skippedResults=0,o.explainMetrics=null),null!=e.document&&e.hasOwnProperty(\"document\")&&(o.document=a.google.firestore.v1.Document.toObject(e.document,t)),null!=e.transaction&&e.hasOwnProperty(\"transaction\")&&(o.transaction=t.bytes===String?i.base64.encode(e.transaction,0,e.transaction.length):t.bytes===Array?Array.prototype.slice.call(e.transaction):e.transaction),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t)),null!=e.skippedResults&&e.hasOwnProperty(\"skippedResults\")&&(o.skippedResults=e.skippedResults),null!=e.done&&e.hasOwnProperty(\"done\")&&(o.done=e.done,t.oneofs)&&(o.continuationSelector=\"done\"),null!=e.explainMetrics&&e.hasOwnProperty(\"explainMetrics\")&&(o.explainMetrics=a.google.firestore.v1.ExplainMetrics.toObject(e.explainMetrics,t)),o},g.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},g.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.RunQueryResponse\"},g),o.RunAggregationQueryRequest=(f.prototype.parent=\"\",f.prototype.structuredAggregationQuery=null,f.prototype.transaction=null,f.prototype.newTransaction=null,f.prototype.readTime=null,f.prototype.explainOptions=null,Object.defineProperty(f.prototype,\"queryType\",{get:i.oneOfGetter(n=[\"structuredAggregationQuery\"]),set:i.oneOfSetter(n)}),Object.defineProperty(f.prototype,\"consistencySelector\",{get:i.oneOfGetter(n=[\"transaction\",\"newTransaction\",\"readTime\"]),set:i.oneOfSetter(n)}),f.fromObject=function(e){if(e instanceof a.google.firestore.v1.RunAggregationQueryRequest)return e;var t=new a.google.firestore.v1.RunAggregationQueryRequest;if(null!=e.parent&&(t.parent=String(e.parent)),null!=e.structuredAggregationQuery){if(\"object\"!=typeof e.structuredAggregationQuery)throw TypeError(\".google.firestore.v1.RunAggregationQueryRequest.structuredAggregationQuery: object expected\");t.structuredAggregationQuery=a.google.firestore.v1.StructuredAggregationQuery.fromObject(e.structuredAggregationQuery)}if(null!=e.transaction&&(\"string\"==typeof e.transaction?i.base64.decode(e.transaction,t.transaction=i.newBuffer(i.base64.length(e.transaction)),0):0<=e.transaction.length&&(t.transaction=e.transaction)),null!=e.newTransaction){if(\"object\"!=typeof e.newTransaction)throw TypeError(\".google.firestore.v1.RunAggregationQueryRequest.newTransaction: object expected\");t.newTransaction=a.google.firestore.v1.TransactionOptions.fromObject(e.newTransaction)}if(null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.RunAggregationQueryRequest.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}if(null!=e.explainOptions){if(\"object\"!=typeof e.explainOptions)throw TypeError(\".google.firestore.v1.RunAggregationQueryRequest.explainOptions: object expected\");t.explainOptions=a.google.firestore.v1.ExplainOptions.fromObject(e.explainOptions)}return t},f.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.parent=\"\",o.explainOptions=null),null!=e.parent&&e.hasOwnProperty(\"parent\")&&(o.parent=e.parent),null!=e.structuredAggregationQuery&&e.hasOwnProperty(\"structuredAggregationQuery\")&&(o.structuredAggregationQuery=a.google.firestore.v1.StructuredAggregationQuery.toObject(e.structuredAggregationQuery,t),t.oneofs)&&(o.queryType=\"structuredAggregationQuery\"),null!=e.transaction&&e.hasOwnProperty(\"transaction\")&&(o.transaction=t.bytes===String?i.base64.encode(e.transaction,0,e.transaction.length):t.bytes===Array?Array.prototype.slice.call(e.transaction):e.transaction,t.oneofs)&&(o.consistencySelector=\"transaction\"),null!=e.newTransaction&&e.hasOwnProperty(\"newTransaction\")&&(o.newTransaction=a.google.firestore.v1.TransactionOptions.toObject(e.newTransaction,t),t.oneofs)&&(o.consistencySelector=\"newTransaction\"),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t),t.oneofs)&&(o.consistencySelector=\"readTime\"),null!=e.explainOptions&&e.hasOwnProperty(\"explainOptions\")&&(o.explainOptions=a.google.firestore.v1.ExplainOptions.toObject(e.explainOptions,t)),o},f.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},f.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.RunAggregationQueryRequest\"},f),o.RunAggregationQueryResponse=(pe.prototype.result=null,pe.prototype.transaction=i.newBuffer([]),pe.prototype.readTime=null,pe.prototype.explainMetrics=null,pe.fromObject=function(e){if(e instanceof a.google.firestore.v1.RunAggregationQueryResponse)return e;var t=new a.google.firestore.v1.RunAggregationQueryResponse;if(null!=e.result){if(\"object\"!=typeof e.result)throw TypeError(\".google.firestore.v1.RunAggregationQueryResponse.result: object expected\");t.result=a.google.firestore.v1.AggregationResult.fromObject(e.result)}if(null!=e.transaction&&(\"string\"==typeof e.transaction?i.base64.decode(e.transaction,t.transaction=i.newBuffer(i.base64.length(e.transaction)),0):0<=e.transaction.length&&(t.transaction=e.transaction)),null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.RunAggregationQueryResponse.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}if(null!=e.explainMetrics){if(\"object\"!=typeof e.explainMetrics)throw TypeError(\".google.firestore.v1.RunAggregationQueryResponse.explainMetrics: object expected\");t.explainMetrics=a.google.firestore.v1.ExplainMetrics.fromObject(e.explainMetrics)}return t},pe.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.result=null,t.bytes===String?o.transaction=\"\":(o.transaction=[],t.bytes!==Array&&(o.transaction=i.newBuffer(o.transaction))),o.readTime=null,o.explainMetrics=null),null!=e.result&&e.hasOwnProperty(\"result\")&&(o.result=a.google.firestore.v1.AggregationResult.toObject(e.result,t)),null!=e.transaction&&e.hasOwnProperty(\"transaction\")&&(o.transaction=t.bytes===String?i.base64.encode(e.transaction,0,e.transaction.length):t.bytes===Array?Array.prototype.slice.call(e.transaction):e.transaction),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t)),null!=e.explainMetrics&&e.hasOwnProperty(\"explainMetrics\")&&(o.explainMetrics=a.google.firestore.v1.ExplainMetrics.toObject(e.explainMetrics,t)),o},pe.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},pe.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.RunAggregationQueryResponse\"},pe),o.PartitionQueryRequest=(d.prototype.parent=\"\",d.prototype.structuredQuery=null,d.prototype.partitionCount=i.Long?i.Long.fromBits(0,0,!1):0,d.prototype.pageToken=\"\",d.prototype.pageSize=0,d.prototype.readTime=null,Object.defineProperty(d.prototype,\"queryType\",{get:i.oneOfGetter(n=[\"structuredQuery\"]),set:i.oneOfSetter(n)}),Object.defineProperty(d.prototype,\"consistencySelector\",{get:i.oneOfGetter(n=[\"readTime\"]),set:i.oneOfSetter(n)}),d.fromObject=function(e){if(e instanceof a.google.firestore.v1.PartitionQueryRequest)return e;var t=new a.google.firestore.v1.PartitionQueryRequest;if(null!=e.parent&&(t.parent=String(e.parent)),null!=e.structuredQuery){if(\"object\"!=typeof e.structuredQuery)throw TypeError(\".google.firestore.v1.PartitionQueryRequest.structuredQuery: object expected\");t.structuredQuery=a.google.firestore.v1.StructuredQuery.fromObject(e.structuredQuery)}if(null!=e.partitionCount&&(i.Long?(t.partitionCount=i.Long.fromValue(e.partitionCount)).unsigned=!1:\"string\"==typeof e.partitionCount?t.partitionCount=parseInt(e.partitionCount,10):\"number\"==typeof e.partitionCount?t.partitionCount=e.partitionCount:\"object\"==typeof e.partitionCount&&(t.partitionCount=new i.LongBits(e.partitionCount.low>>>0,e.partitionCount.high>>>0).toNumber())),null!=e.pageToken&&(t.pageToken=String(e.pageToken)),null!=e.pageSize&&(t.pageSize=0|e.pageSize),null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.PartitionQueryRequest.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}return t},d.toObject=function(e,t){var o,r={};return(t=t||{}).defaults&&(r.parent=\"\",i.Long?(o=new i.Long(0,0,!1),r.partitionCount=t.longs===String?o.toString():t.longs===Number?o.toNumber():o):r.partitionCount=t.longs===String?\"0\":0,r.pageToken=\"\",r.pageSize=0),null!=e.parent&&e.hasOwnProperty(\"parent\")&&(r.parent=e.parent),null!=e.structuredQuery&&e.hasOwnProperty(\"structuredQuery\")&&(r.structuredQuery=a.google.firestore.v1.StructuredQuery.toObject(e.structuredQuery,t),t.oneofs)&&(r.queryType=\"structuredQuery\"),null!=e.partitionCount&&e.hasOwnProperty(\"partitionCount\")&&(\"number\"==typeof e.partitionCount?r.partitionCount=t.longs===String?String(e.partitionCount):e.partitionCount:r.partitionCount=t.longs===String?i.Long.prototype.toString.call(e.partitionCount):t.longs===Number?new i.LongBits(e.partitionCount.low>>>0,e.partitionCount.high>>>0).toNumber():e.partitionCount),null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&(r.pageToken=e.pageToken),null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&(r.pageSize=e.pageSize),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(r.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t),t.oneofs)&&(r.consistencySelector=\"readTime\"),r},d.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},d.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.PartitionQueryRequest\"},d),o.PartitionQueryResponse=(ce.prototype.partitions=i.emptyArray,ce.prototype.nextPageToken=\"\",ce.fromObject=function(e){if(e instanceof a.google.firestore.v1.PartitionQueryResponse)return e;var t=new a.google.firestore.v1.PartitionQueryResponse;if(e.partitions){if(!Array.isArray(e.partitions))throw TypeError(\".google.firestore.v1.PartitionQueryResponse.partitions: array expected\");t.partitions=[];for(var o=0;o<e.partitions.length;++o){if(\"object\"!=typeof e.partitions[o])throw TypeError(\".google.firestore.v1.PartitionQueryResponse.partitions: object expected\");t.partitions[o]=a.google.firestore.v1.Cursor.fromObject(e.partitions[o])}}return null!=e.nextPageToken&&(t.nextPageToken=String(e.nextPageToken)),t},ce.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.partitions=[]),t.defaults&&(o.nextPageToken=\"\"),e.partitions&&e.partitions.length){o.partitions=[];for(var r=0;r<e.partitions.length;++r)o.partitions[r]=a.google.firestore.v1.Cursor.toObject(e.partitions[r],t)}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&(o.nextPageToken=e.nextPageToken),o},ce.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ce.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.PartitionQueryResponse\"},ce),o.WriteRequest=(ge.prototype.database=\"\",ge.prototype.streamId=\"\",ge.prototype.writes=i.emptyArray,ge.prototype.streamToken=i.newBuffer([]),ge.prototype.labels=i.emptyObject,ge.fromObject=function(e){if(e instanceof a.google.firestore.v1.WriteRequest)return e;var t=new a.google.firestore.v1.WriteRequest;if(null!=e.database&&(t.database=String(e.database)),null!=e.streamId&&(t.streamId=String(e.streamId)),e.writes){if(!Array.isArray(e.writes))throw TypeError(\".google.firestore.v1.WriteRequest.writes: array expected\");t.writes=[];for(var o=0;o<e.writes.length;++o){if(\"object\"!=typeof e.writes[o])throw TypeError(\".google.firestore.v1.WriteRequest.writes: object expected\");t.writes[o]=a.google.firestore.v1.Write.fromObject(e.writes[o])}}if(null!=e.streamToken&&(\"string\"==typeof e.streamToken?i.base64.decode(e.streamToken,t.streamToken=i.newBuffer(i.base64.length(e.streamToken)),0):0<=e.streamToken.length&&(t.streamToken=e.streamToken)),e.labels){if(\"object\"!=typeof e.labels)throw TypeError(\".google.firestore.v1.WriteRequest.labels: object expected\");t.labels={};for(var r=Object.keys(e.labels),o=0;o<r.length;++o)t.labels[r[o]]=String(e.labels[r[o]])}return t},ge.toObject=function(e,t){var o,r={};if(((t=t||{}).arrays||t.defaults)&&(r.writes=[]),(t.objects||t.defaults)&&(r.labels={}),t.defaults&&(r.database=\"\",r.streamId=\"\",t.bytes===String?r.streamToken=\"\":(r.streamToken=[],t.bytes!==Array&&(r.streamToken=i.newBuffer(r.streamToken)))),null!=e.database&&e.hasOwnProperty(\"database\")&&(r.database=e.database),null!=e.streamId&&e.hasOwnProperty(\"streamId\")&&(r.streamId=e.streamId),e.writes&&e.writes.length){r.writes=[];for(var n=0;n<e.writes.length;++n)r.writes[n]=a.google.firestore.v1.Write.toObject(e.writes[n],t)}if(null!=e.streamToken&&e.hasOwnProperty(\"streamToken\")&&(r.streamToken=t.bytes===String?i.base64.encode(e.streamToken,0,e.streamToken.length):t.bytes===Array?Array.prototype.slice.call(e.streamToken):e.streamToken),e.labels&&(o=Object.keys(e.labels)).length){r.labels={};for(n=0;n<o.length;++n)r.labels[o[n]]=e.labels[o[n]]}return r},ge.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ge.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.WriteRequest\"},ge),o.WriteResponse=(fe.prototype.streamId=\"\",fe.prototype.streamToken=i.newBuffer([]),fe.prototype.writeResults=i.emptyArray,fe.prototype.commitTime=null,fe.fromObject=function(e){if(e instanceof a.google.firestore.v1.WriteResponse)return e;var t=new a.google.firestore.v1.WriteResponse;if(null!=e.streamId&&(t.streamId=String(e.streamId)),null!=e.streamToken&&(\"string\"==typeof e.streamToken?i.base64.decode(e.streamToken,t.streamToken=i.newBuffer(i.base64.length(e.streamToken)),0):0<=e.streamToken.length&&(t.streamToken=e.streamToken)),e.writeResults){if(!Array.isArray(e.writeResults))throw TypeError(\".google.firestore.v1.WriteResponse.writeResults: array expected\");t.writeResults=[];for(var o=0;o<e.writeResults.length;++o){if(\"object\"!=typeof e.writeResults[o])throw TypeError(\".google.firestore.v1.WriteResponse.writeResults: object expected\");t.writeResults[o]=a.google.firestore.v1.WriteResult.fromObject(e.writeResults[o])}}if(null!=e.commitTime){if(\"object\"!=typeof e.commitTime)throw TypeError(\".google.firestore.v1.WriteResponse.commitTime: object expected\");t.commitTime=a.google.protobuf.Timestamp.fromObject(e.commitTime)}return t},fe.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.writeResults=[]),t.defaults&&(o.streamId=\"\",t.bytes===String?o.streamToken=\"\":(o.streamToken=[],t.bytes!==Array&&(o.streamToken=i.newBuffer(o.streamToken))),o.commitTime=null),null!=e.streamId&&e.hasOwnProperty(\"streamId\")&&(o.streamId=e.streamId),null!=e.streamToken&&e.hasOwnProperty(\"streamToken\")&&(o.streamToken=t.bytes===String?i.base64.encode(e.streamToken,0,e.streamToken.length):t.bytes===Array?Array.prototype.slice.call(e.streamToken):e.streamToken),e.writeResults&&e.writeResults.length){o.writeResults=[];for(var r=0;r<e.writeResults.length;++r)o.writeResults[r]=a.google.firestore.v1.WriteResult.toObject(e.writeResults[r],t)}return null!=e.commitTime&&e.hasOwnProperty(\"commitTime\")&&(o.commitTime=a.google.protobuf.Timestamp.toObject(e.commitTime,t)),o},fe.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},fe.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.WriteResponse\"},fe),o.ListenRequest=(de.prototype.database=\"\",de.prototype.addTarget=null,de.prototype.removeTarget=null,de.prototype.labels=i.emptyObject,Object.defineProperty(de.prototype,\"targetChange\",{get:i.oneOfGetter(n=[\"addTarget\",\"removeTarget\"]),set:i.oneOfSetter(n)}),de.fromObject=function(e){if(e instanceof a.google.firestore.v1.ListenRequest)return e;var t=new a.google.firestore.v1.ListenRequest;if(null!=e.database&&(t.database=String(e.database)),null!=e.addTarget){if(\"object\"!=typeof e.addTarget)throw TypeError(\".google.firestore.v1.ListenRequest.addTarget: object expected\");t.addTarget=a.google.firestore.v1.Target.fromObject(e.addTarget)}if(null!=e.removeTarget&&(t.removeTarget=0|e.removeTarget),e.labels){if(\"object\"!=typeof e.labels)throw TypeError(\".google.firestore.v1.ListenRequest.labels: object expected\");t.labels={};for(var o=Object.keys(e.labels),r=0;r<o.length;++r)t.labels[o[r]]=String(e.labels[o[r]])}return t},de.toObject=function(e,t){var o,r={};if(((t=t||{}).objects||t.defaults)&&(r.labels={}),t.defaults&&(r.database=\"\"),null!=e.database&&e.hasOwnProperty(\"database\")&&(r.database=e.database),null!=e.addTarget&&e.hasOwnProperty(\"addTarget\")&&(r.addTarget=a.google.firestore.v1.Target.toObject(e.addTarget,t),t.oneofs)&&(r.targetChange=\"addTarget\"),null!=e.removeTarget&&e.hasOwnProperty(\"removeTarget\")&&(r.removeTarget=e.removeTarget,t.oneofs)&&(r.targetChange=\"removeTarget\"),e.labels&&(o=Object.keys(e.labels)).length){r.labels={};for(var n=0;n<o.length;++n)r.labels[o[n]]=e.labels[o[n]]}return r},de.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},de.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.ListenRequest\"},de),o.ListenResponse=(y.prototype.targetChange=null,y.prototype.documentChange=null,y.prototype.documentDelete=null,y.prototype.documentRemove=null,y.prototype.filter=null,Object.defineProperty(y.prototype,\"responseType\",{get:i.oneOfGetter(n=[\"targetChange\",\"documentChange\",\"documentDelete\",\"documentRemove\",\"filter\"]),set:i.oneOfSetter(n)}),y.fromObject=function(e){if(e instanceof a.google.firestore.v1.ListenResponse)return e;var t=new a.google.firestore.v1.ListenResponse;if(null!=e.targetChange){if(\"object\"!=typeof e.targetChange)throw TypeError(\".google.firestore.v1.ListenResponse.targetChange: object expected\");t.targetChange=a.google.firestore.v1.TargetChange.fromObject(e.targetChange)}if(null!=e.documentChange){if(\"object\"!=typeof e.documentChange)throw TypeError(\".google.firestore.v1.ListenResponse.documentChange: object expected\");t.documentChange=a.google.firestore.v1.DocumentChange.fromObject(e.documentChange)}if(null!=e.documentDelete){if(\"object\"!=typeof e.documentDelete)throw TypeError(\".google.firestore.v1.ListenResponse.documentDelete: object expected\");t.documentDelete=a.google.firestore.v1.DocumentDelete.fromObject(e.documentDelete)}if(null!=e.documentRemove){if(\"object\"!=typeof e.documentRemove)throw TypeError(\".google.firestore.v1.ListenResponse.documentRemove: object expected\");t.documentRemove=a.google.firestore.v1.DocumentRemove.fromObject(e.documentRemove)}if(null!=e.filter){if(\"object\"!=typeof e.filter)throw TypeError(\".google.firestore.v1.ListenResponse.filter: object expected\");t.filter=a.google.firestore.v1.ExistenceFilter.fromObject(e.filter)}return t},y.toObject=function(e,t){t=t||{};var o={};return null!=e.targetChange&&e.hasOwnProperty(\"targetChange\")&&(o.targetChange=a.google.firestore.v1.TargetChange.toObject(e.targetChange,t),t.oneofs)&&(o.responseType=\"targetChange\"),null!=e.documentChange&&e.hasOwnProperty(\"documentChange\")&&(o.documentChange=a.google.firestore.v1.DocumentChange.toObject(e.documentChange,t),t.oneofs)&&(o.responseType=\"documentChange\"),null!=e.documentDelete&&e.hasOwnProperty(\"documentDelete\")&&(o.documentDelete=a.google.firestore.v1.DocumentDelete.toObject(e.documentDelete,t),t.oneofs)&&(o.responseType=\"documentDelete\"),null!=e.filter&&e.hasOwnProperty(\"filter\")&&(o.filter=a.google.firestore.v1.ExistenceFilter.toObject(e.filter,t),t.oneofs)&&(o.responseType=\"filter\"),null!=e.documentRemove&&e.hasOwnProperty(\"documentRemove\")&&(o.documentRemove=a.google.firestore.v1.DocumentRemove.toObject(e.documentRemove,t),t.oneofs)&&(o.responseType=\"documentRemove\"),o},y.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},y.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.ListenResponse\"},y),o.Target=(m.prototype.query=null,m.prototype.documents=null,m.prototype.resumeToken=null,m.prototype.readTime=null,m.prototype.targetId=0,m.prototype.once=!1,m.prototype.expectedCount=null,Object.defineProperty(m.prototype,\"targetType\",{get:i.oneOfGetter(n=[\"query\",\"documents\"]),set:i.oneOfSetter(n)}),Object.defineProperty(m.prototype,\"resumeType\",{get:i.oneOfGetter(n=[\"resumeToken\",\"readTime\"]),set:i.oneOfSetter(n)}),m.fromObject=function(e){if(e instanceof a.google.firestore.v1.Target)return e;var t=new a.google.firestore.v1.Target;if(null!=e.query){if(\"object\"!=typeof e.query)throw TypeError(\".google.firestore.v1.Target.query: object expected\");t.query=a.google.firestore.v1.Target.QueryTarget.fromObject(e.query)}if(null!=e.documents){if(\"object\"!=typeof e.documents)throw TypeError(\".google.firestore.v1.Target.documents: object expected\");t.documents=a.google.firestore.v1.Target.DocumentsTarget.fromObject(e.documents)}if(null!=e.resumeToken&&(\"string\"==typeof e.resumeToken?i.base64.decode(e.resumeToken,t.resumeToken=i.newBuffer(i.base64.length(e.resumeToken)),0):0<=e.resumeToken.length&&(t.resumeToken=e.resumeToken)),null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.Target.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}if(null!=e.targetId&&(t.targetId=0|e.targetId),null!=e.once&&(t.once=Boolean(e.once)),null!=e.expectedCount){if(\"object\"!=typeof e.expectedCount)throw TypeError(\".google.firestore.v1.Target.expectedCount: object expected\");t.expectedCount=a.google.protobuf.Int32Value.fromObject(e.expectedCount)}return t},m.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.targetId=0,o.once=!1,o.expectedCount=null),null!=e.query&&e.hasOwnProperty(\"query\")&&(o.query=a.google.firestore.v1.Target.QueryTarget.toObject(e.query,t),t.oneofs)&&(o.targetType=\"query\"),null!=e.documents&&e.hasOwnProperty(\"documents\")&&(o.documents=a.google.firestore.v1.Target.DocumentsTarget.toObject(e.documents,t),t.oneofs)&&(o.targetType=\"documents\"),null!=e.resumeToken&&e.hasOwnProperty(\"resumeToken\")&&(o.resumeToken=t.bytes===String?i.base64.encode(e.resumeToken,0,e.resumeToken.length):t.bytes===Array?Array.prototype.slice.call(e.resumeToken):e.resumeToken,t.oneofs)&&(o.resumeType=\"resumeToken\"),null!=e.targetId&&e.hasOwnProperty(\"targetId\")&&(o.targetId=e.targetId),null!=e.once&&e.hasOwnProperty(\"once\")&&(o.once=e.once),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t),t.oneofs)&&(o.resumeType=\"readTime\"),null!=e.expectedCount&&e.hasOwnProperty(\"expectedCount\")&&(o.expectedCount=a.google.protobuf.Int32Value.toObject(e.expectedCount,t)),o},m.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},m.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.Target\"},m.DocumentsTarget=(ye.prototype.documents=i.emptyArray,ye.fromObject=function(e){if(e instanceof a.google.firestore.v1.Target.DocumentsTarget)return e;var t=new a.google.firestore.v1.Target.DocumentsTarget;if(e.documents){if(!Array.isArray(e.documents))throw TypeError(\".google.firestore.v1.Target.DocumentsTarget.documents: array expected\");t.documents=[];for(var o=0;o<e.documents.length;++o)t.documents[o]=String(e.documents[o])}return t},ye.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.documents=[]),e.documents&&e.documents.length){o.documents=[];for(var r=0;r<e.documents.length;++r)o.documents[r]=e.documents[r]}return o},ye.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ye.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.Target.DocumentsTarget\"},ye),m.QueryTarget=(me.prototype.parent=\"\",me.prototype.structuredQuery=null,Object.defineProperty(me.prototype,\"queryType\",{get:i.oneOfGetter(n=[\"structuredQuery\"]),set:i.oneOfSetter(n)}),me.fromObject=function(e){if(e instanceof a.google.firestore.v1.Target.QueryTarget)return e;var t=new a.google.firestore.v1.Target.QueryTarget;if(null!=e.parent&&(t.parent=String(e.parent)),null!=e.structuredQuery){if(\"object\"!=typeof e.structuredQuery)throw TypeError(\".google.firestore.v1.Target.QueryTarget.structuredQuery: object expected\");t.structuredQuery=a.google.firestore.v1.StructuredQuery.fromObject(e.structuredQuery)}return t},me.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.parent=\"\"),null!=e.parent&&e.hasOwnProperty(\"parent\")&&(o.parent=e.parent),null!=e.structuredQuery&&e.hasOwnProperty(\"structuredQuery\")&&(o.structuredQuery=a.google.firestore.v1.StructuredQuery.toObject(e.structuredQuery,t),t.oneofs)&&(o.queryType=\"structuredQuery\"),o},me.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},me.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.Target.QueryTarget\"},me),m),o.TargetChange=(be.prototype.targetChangeType=0,be.prototype.targetIds=i.emptyArray,be.prototype.cause=null,be.prototype.resumeToken=i.newBuffer([]),be.prototype.readTime=null,be.fromObject=function(e){if(e instanceof a.google.firestore.v1.TargetChange)return e;var t=new a.google.firestore.v1.TargetChange;switch(e.targetChangeType){default:\"number\"==typeof e.targetChangeType&&(t.targetChangeType=e.targetChangeType);break;case\"NO_CHANGE\":case 0:t.targetChangeType=0;break;case\"ADD\":case 1:t.targetChangeType=1;break;case\"REMOVE\":case 2:t.targetChangeType=2;break;case\"CURRENT\":case 3:t.targetChangeType=3;break;case\"RESET\":case 4:t.targetChangeType=4}if(e.targetIds){if(!Array.isArray(e.targetIds))throw TypeError(\".google.firestore.v1.TargetChange.targetIds: array expected\");t.targetIds=[];for(var o=0;o<e.targetIds.length;++o)t.targetIds[o]=0|e.targetIds[o]}if(null!=e.cause){if(\"object\"!=typeof e.cause)throw TypeError(\".google.firestore.v1.TargetChange.cause: object expected\");t.cause=a.google.rpc.Status.fromObject(e.cause)}if(null!=e.resumeToken&&(\"string\"==typeof e.resumeToken?i.base64.decode(e.resumeToken,t.resumeToken=i.newBuffer(i.base64.length(e.resumeToken)),0):0<=e.resumeToken.length&&(t.resumeToken=e.resumeToken)),null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.TargetChange.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}return t},be.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.targetIds=[]),t.defaults&&(o.targetChangeType=t.enums===String?\"NO_CHANGE\":0,o.cause=null,t.bytes===String?o.resumeToken=\"\":(o.resumeToken=[],t.bytes!==Array&&(o.resumeToken=i.newBuffer(o.resumeToken))),o.readTime=null),null!=e.targetChangeType&&e.hasOwnProperty(\"targetChangeType\")&&(o.targetChangeType=t.enums!==String||void 0===a.google.firestore.v1.TargetChange.TargetChangeType[e.targetChangeType]?e.targetChangeType:a.google.firestore.v1.TargetChange.TargetChangeType[e.targetChangeType]),e.targetIds&&e.targetIds.length){o.targetIds=[];for(var r=0;r<e.targetIds.length;++r)o.targetIds[r]=e.targetIds[r]}return null!=e.cause&&e.hasOwnProperty(\"cause\")&&(o.cause=a.google.rpc.Status.toObject(e.cause,t)),null!=e.resumeToken&&e.hasOwnProperty(\"resumeToken\")&&(o.resumeToken=t.bytes===String?i.base64.encode(e.resumeToken,0,e.resumeToken.length):t.bytes===Array?Array.prototype.slice.call(e.resumeToken):e.resumeToken),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t)),o},be.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},be.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.TargetChange\"},be.TargetChangeType=(n={},(e=Object.create(n))[n[0]=\"NO_CHANGE\"]=\"NO_CHANGE\",e[n[1]=\"ADD\"]=\"ADD\",e[n[2]=\"REMOVE\"]=\"REMOVE\",e[n[3]=\"CURRENT\"]=\"CURRENT\",e[n[4]=\"RESET\"]=\"RESET\",e),be),o.ListCollectionIdsRequest=(Oe.prototype.parent=\"\",Oe.prototype.pageSize=0,Oe.prototype.pageToken=\"\",Oe.prototype.readTime=null,Object.defineProperty(Oe.prototype,\"consistencySelector\",{get:i.oneOfGetter(n=[\"readTime\"]),set:i.oneOfSetter(n)}),Oe.fromObject=function(e){if(e instanceof a.google.firestore.v1.ListCollectionIdsRequest)return e;var t=new a.google.firestore.v1.ListCollectionIdsRequest;if(null!=e.parent&&(t.parent=String(e.parent)),null!=e.pageSize&&(t.pageSize=0|e.pageSize),null!=e.pageToken&&(t.pageToken=String(e.pageToken)),null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.ListCollectionIdsRequest.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}return t},Oe.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.parent=\"\",o.pageSize=0,o.pageToken=\"\"),null!=e.parent&&e.hasOwnProperty(\"parent\")&&(o.parent=e.parent),null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&(o.pageSize=e.pageSize),null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&(o.pageToken=e.pageToken),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t),t.oneofs)&&(o.consistencySelector=\"readTime\"),o},Oe.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Oe.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.ListCollectionIdsRequest\"},Oe),o.ListCollectionIdsResponse=(he.prototype.collectionIds=i.emptyArray,he.prototype.nextPageToken=\"\",he.fromObject=function(e){if(e instanceof a.google.firestore.v1.ListCollectionIdsResponse)return e;var t=new a.google.firestore.v1.ListCollectionIdsResponse;if(e.collectionIds){if(!Array.isArray(e.collectionIds))throw TypeError(\".google.firestore.v1.ListCollectionIdsResponse.collectionIds: array expected\");t.collectionIds=[];for(var o=0;o<e.collectionIds.length;++o)t.collectionIds[o]=String(e.collectionIds[o])}return null!=e.nextPageToken&&(t.nextPageToken=String(e.nextPageToken)),t},he.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.collectionIds=[]),t.defaults&&(o.nextPageToken=\"\"),e.collectionIds&&e.collectionIds.length){o.collectionIds=[];for(var r=0;r<e.collectionIds.length;++r)o.collectionIds[r]=e.collectionIds[r]}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&(o.nextPageToken=e.nextPageToken),o},he.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},he.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.ListCollectionIdsResponse\"},he),o.BatchWriteRequest=(ve.prototype.database=\"\",ve.prototype.writes=i.emptyArray,ve.prototype.labels=i.emptyObject,ve.fromObject=function(e){if(e instanceof a.google.firestore.v1.BatchWriteRequest)return e;var t=new a.google.firestore.v1.BatchWriteRequest;if(null!=e.database&&(t.database=String(e.database)),e.writes){if(!Array.isArray(e.writes))throw TypeError(\".google.firestore.v1.BatchWriteRequest.writes: array expected\");t.writes=[];for(var o=0;o<e.writes.length;++o){if(\"object\"!=typeof e.writes[o])throw TypeError(\".google.firestore.v1.BatchWriteRequest.writes: object expected\");t.writes[o]=a.google.firestore.v1.Write.fromObject(e.writes[o])}}if(e.labels){if(\"object\"!=typeof e.labels)throw TypeError(\".google.firestore.v1.BatchWriteRequest.labels: object expected\");t.labels={};for(var r=Object.keys(e.labels),o=0;o<r.length;++o)t.labels[r[o]]=String(e.labels[r[o]])}return t},ve.toObject=function(e,t){var o,r={};if(((t=t||{}).arrays||t.defaults)&&(r.writes=[]),(t.objects||t.defaults)&&(r.labels={}),t.defaults&&(r.database=\"\"),null!=e.database&&e.hasOwnProperty(\"database\")&&(r.database=e.database),e.writes&&e.writes.length){r.writes=[];for(var n=0;n<e.writes.length;++n)r.writes[n]=a.google.firestore.v1.Write.toObject(e.writes[n],t)}if(e.labels&&(o=Object.keys(e.labels)).length){r.labels={};for(n=0;n<o.length;++n)r.labels[o[n]]=e.labels[o[n]]}return r},ve.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ve.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.BatchWriteRequest\"},ve),o.BatchWriteResponse=(Te.prototype.writeResults=i.emptyArray,Te.prototype.status=i.emptyArray,Te.fromObject=function(e){if(e instanceof a.google.firestore.v1.BatchWriteResponse)return e;var t=new a.google.firestore.v1.BatchWriteResponse;if(e.writeResults){if(!Array.isArray(e.writeResults))throw TypeError(\".google.firestore.v1.BatchWriteResponse.writeResults: array expected\");t.writeResults=[];for(var o=0;o<e.writeResults.length;++o){if(\"object\"!=typeof e.writeResults[o])throw TypeError(\".google.firestore.v1.BatchWriteResponse.writeResults: object expected\");t.writeResults[o]=a.google.firestore.v1.WriteResult.fromObject(e.writeResults[o])}}if(e.status){if(!Array.isArray(e.status))throw TypeError(\".google.firestore.v1.BatchWriteResponse.status: array expected\");t.status=[];for(o=0;o<e.status.length;++o){if(\"object\"!=typeof e.status[o])throw TypeError(\".google.firestore.v1.BatchWriteResponse.status: object expected\");t.status[o]=a.google.rpc.Status.fromObject(e.status[o])}}return t},Te.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.writeResults=[],o.status=[]),e.writeResults&&e.writeResults.length){o.writeResults=[];for(var r=0;r<e.writeResults.length;++r)o.writeResults[r]=a.google.firestore.v1.WriteResult.toObject(e.writeResults[r],t)}if(e.status&&e.status.length){o.status=[];for(r=0;r<e.status.length;++r)o.status[r]=a.google.rpc.Status.toObject(e.status[r],t)}return o},Te.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Te.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.BatchWriteResponse\"},Te),o.StructuredQuery=(b.prototype.select=null,b.prototype.from=i.emptyArray,b.prototype.where=null,b.prototype.orderBy=i.emptyArray,b.prototype.startAt=null,b.prototype.endAt=null,b.prototype.offset=0,b.prototype.limit=null,b.prototype.findNearest=null,b.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredQuery)return e;var t=new a.google.firestore.v1.StructuredQuery;if(null!=e.select){if(\"object\"!=typeof e.select)throw TypeError(\".google.firestore.v1.StructuredQuery.select: object expected\");t.select=a.google.firestore.v1.StructuredQuery.Projection.fromObject(e.select)}if(e.from){if(!Array.isArray(e.from))throw TypeError(\".google.firestore.v1.StructuredQuery.from: array expected\");t.from=[];for(var o=0;o<e.from.length;++o){if(\"object\"!=typeof e.from[o])throw TypeError(\".google.firestore.v1.StructuredQuery.from: object expected\");t.from[o]=a.google.firestore.v1.StructuredQuery.CollectionSelector.fromObject(e.from[o])}}if(null!=e.where){if(\"object\"!=typeof e.where)throw TypeError(\".google.firestore.v1.StructuredQuery.where: object expected\");t.where=a.google.firestore.v1.StructuredQuery.Filter.fromObject(e.where)}if(e.orderBy){if(!Array.isArray(e.orderBy))throw TypeError(\".google.firestore.v1.StructuredQuery.orderBy: array expected\");t.orderBy=[];for(o=0;o<e.orderBy.length;++o){if(\"object\"!=typeof e.orderBy[o])throw TypeError(\".google.firestore.v1.StructuredQuery.orderBy: object expected\");t.orderBy[o]=a.google.firestore.v1.StructuredQuery.Order.fromObject(e.orderBy[o])}}if(null!=e.startAt){if(\"object\"!=typeof e.startAt)throw TypeError(\".google.firestore.v1.StructuredQuery.startAt: object expected\");t.startAt=a.google.firestore.v1.Cursor.fromObject(e.startAt)}if(null!=e.endAt){if(\"object\"!=typeof e.endAt)throw TypeError(\".google.firestore.v1.StructuredQuery.endAt: object expected\");t.endAt=a.google.firestore.v1.Cursor.fromObject(e.endAt)}if(null!=e.offset&&(t.offset=0|e.offset),null!=e.limit){if(\"object\"!=typeof e.limit)throw TypeError(\".google.firestore.v1.StructuredQuery.limit: object expected\");t.limit=a.google.protobuf.Int32Value.fromObject(e.limit)}if(null!=e.findNearest){if(\"object\"!=typeof e.findNearest)throw TypeError(\".google.firestore.v1.StructuredQuery.findNearest: object expected\");t.findNearest=a.google.firestore.v1.StructuredQuery.FindNearest.fromObject(e.findNearest)}return t},b.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.from=[],o.orderBy=[]),t.defaults&&(o.select=null,o.where=null,o.limit=null,o.offset=0,o.startAt=null,o.endAt=null,o.findNearest=null),null!=e.select&&e.hasOwnProperty(\"select\")&&(o.select=a.google.firestore.v1.StructuredQuery.Projection.toObject(e.select,t)),e.from&&e.from.length){o.from=[];for(var r=0;r<e.from.length;++r)o.from[r]=a.google.firestore.v1.StructuredQuery.CollectionSelector.toObject(e.from[r],t)}if(null!=e.where&&e.hasOwnProperty(\"where\")&&(o.where=a.google.firestore.v1.StructuredQuery.Filter.toObject(e.where,t)),e.orderBy&&e.orderBy.length){o.orderBy=[];for(r=0;r<e.orderBy.length;++r)o.orderBy[r]=a.google.firestore.v1.StructuredQuery.Order.toObject(e.orderBy[r],t)}return null!=e.limit&&e.hasOwnProperty(\"limit\")&&(o.limit=a.google.protobuf.Int32Value.toObject(e.limit,t)),null!=e.offset&&e.hasOwnProperty(\"offset\")&&(o.offset=e.offset),null!=e.startAt&&e.hasOwnProperty(\"startAt\")&&(o.startAt=a.google.firestore.v1.Cursor.toObject(e.startAt,t)),null!=e.endAt&&e.hasOwnProperty(\"endAt\")&&(o.endAt=a.google.firestore.v1.Cursor.toObject(e.endAt,t)),null!=e.findNearest&&e.hasOwnProperty(\"findNearest\")&&(o.findNearest=a.google.firestore.v1.StructuredQuery.FindNearest.toObject(e.findNearest,t)),o},b.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},b.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredQuery\"},b.CollectionSelector=(Se.prototype.collectionId=\"\",Se.prototype.allDescendants=!1,Se.fromObject=function(e){var t;return e instanceof a.google.firestore.v1.StructuredQuery.CollectionSelector?e:(t=new a.google.firestore.v1.StructuredQuery.CollectionSelector,null!=e.collectionId&&(t.collectionId=String(e.collectionId)),null!=e.allDescendants&&(t.allDescendants=Boolean(e.allDescendants)),t)},Se.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.collectionId=\"\",o.allDescendants=!1),null!=e.collectionId&&e.hasOwnProperty(\"collectionId\")&&(o.collectionId=e.collectionId),null!=e.allDescendants&&e.hasOwnProperty(\"allDescendants\")&&(o.allDescendants=e.allDescendants),o},Se.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Se.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredQuery.CollectionSelector\"},Se),b.Filter=(je.prototype.compositeFilter=null,je.prototype.fieldFilter=null,je.prototype.unaryFilter=null,Object.defineProperty(je.prototype,\"filterType\",{get:i.oneOfGetter(e=[\"compositeFilter\",\"fieldFilter\",\"unaryFilter\"]),set:i.oneOfSetter(e)}),je.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredQuery.Filter)return e;var t=new a.google.firestore.v1.StructuredQuery.Filter;if(null!=e.compositeFilter){if(\"object\"!=typeof e.compositeFilter)throw TypeError(\".google.firestore.v1.StructuredQuery.Filter.compositeFilter: object expected\");t.compositeFilter=a.google.firestore.v1.StructuredQuery.CompositeFilter.fromObject(e.compositeFilter)}if(null!=e.fieldFilter){if(\"object\"!=typeof e.fieldFilter)throw TypeError(\".google.firestore.v1.StructuredQuery.Filter.fieldFilter: object expected\");t.fieldFilter=a.google.firestore.v1.StructuredQuery.FieldFilter.fromObject(e.fieldFilter)}if(null!=e.unaryFilter){if(\"object\"!=typeof e.unaryFilter)throw TypeError(\".google.firestore.v1.StructuredQuery.Filter.unaryFilter: object expected\");t.unaryFilter=a.google.firestore.v1.StructuredQuery.UnaryFilter.fromObject(e.unaryFilter)}return t},je.toObject=function(e,t){t=t||{};var o={};return null!=e.compositeFilter&&e.hasOwnProperty(\"compositeFilter\")&&(o.compositeFilter=a.google.firestore.v1.StructuredQuery.CompositeFilter.toObject(e.compositeFilter,t),t.oneofs)&&(o.filterType=\"compositeFilter\"),null!=e.fieldFilter&&e.hasOwnProperty(\"fieldFilter\")&&(o.fieldFilter=a.google.firestore.v1.StructuredQuery.FieldFilter.toObject(e.fieldFilter,t),t.oneofs)&&(o.filterType=\"fieldFilter\"),null!=e.unaryFilter&&e.hasOwnProperty(\"unaryFilter\")&&(o.unaryFilter=a.google.firestore.v1.StructuredQuery.UnaryFilter.toObject(e.unaryFilter,t),t.oneofs)&&(o.filterType=\"unaryFilter\"),o},je.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},je.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredQuery.Filter\"},je),b.CompositeFilter=(Ee.prototype.op=0,Ee.prototype.filters=i.emptyArray,Ee.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredQuery.CompositeFilter)return e;var t=new a.google.firestore.v1.StructuredQuery.CompositeFilter;switch(e.op){default:\"number\"==typeof e.op&&(t.op=e.op);break;case\"OPERATOR_UNSPECIFIED\":case 0:t.op=0;break;case\"AND\":case 1:t.op=1;break;case\"OR\":case 2:t.op=2}if(e.filters){if(!Array.isArray(e.filters))throw TypeError(\".google.firestore.v1.StructuredQuery.CompositeFilter.filters: array expected\");t.filters=[];for(var o=0;o<e.filters.length;++o){if(\"object\"!=typeof e.filters[o])throw TypeError(\".google.firestore.v1.StructuredQuery.CompositeFilter.filters: object expected\");t.filters[o]=a.google.firestore.v1.StructuredQuery.Filter.fromObject(e.filters[o])}}return t},Ee.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.filters=[]),t.defaults&&(o.op=t.enums===String?\"OPERATOR_UNSPECIFIED\":0),null!=e.op&&e.hasOwnProperty(\"op\")&&(o.op=t.enums!==String||void 0===a.google.firestore.v1.StructuredQuery.CompositeFilter.Operator[e.op]?e.op:a.google.firestore.v1.StructuredQuery.CompositeFilter.Operator[e.op]),e.filters&&e.filters.length){o.filters=[];for(var r=0;r<e.filters.length;++r)o.filters[r]=a.google.firestore.v1.StructuredQuery.Filter.toObject(e.filters[r],t)}return o},Ee.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ee.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredQuery.CompositeFilter\"},Ee.Operator=(e={},(n=Object.create(e))[e[0]=\"OPERATOR_UNSPECIFIED\"]=\"OPERATOR_UNSPECIFIED\",n[e[1]=\"AND\"]=\"AND\",n[e[2]=\"OR\"]=\"OR\",n),Ee),b.FieldFilter=(we.prototype.field=null,we.prototype.op=0,we.prototype.value=null,we.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredQuery.FieldFilter)return e;var t=new a.google.firestore.v1.StructuredQuery.FieldFilter;if(null!=e.field){if(\"object\"!=typeof e.field)throw TypeError(\".google.firestore.v1.StructuredQuery.FieldFilter.field: object expected\");t.field=a.google.firestore.v1.StructuredQuery.FieldReference.fromObject(e.field)}switch(e.op){default:\"number\"==typeof e.op&&(t.op=e.op);break;case\"OPERATOR_UNSPECIFIED\":case 0:t.op=0;break;case\"LESS_THAN\":case 1:t.op=1;break;case\"LESS_THAN_OR_EQUAL\":case 2:t.op=2;break;case\"GREATER_THAN\":case 3:t.op=3;break;case\"GREATER_THAN_OR_EQUAL\":case 4:t.op=4;break;case\"EQUAL\":case 5:t.op=5;break;case\"NOT_EQUAL\":case 6:t.op=6;break;case\"ARRAY_CONTAINS\":case 7:t.op=7;break;case\"IN\":case 8:t.op=8;break;case\"ARRAY_CONTAINS_ANY\":case 9:t.op=9;break;case\"NOT_IN\":case 10:t.op=10}if(null!=e.value){if(\"object\"!=typeof e.value)throw TypeError(\".google.firestore.v1.StructuredQuery.FieldFilter.value: object expected\");t.value=a.google.firestore.v1.Value.fromObject(e.value)}return t},we.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.field=null,o.op=t.enums===String?\"OPERATOR_UNSPECIFIED\":0,o.value=null),null!=e.field&&e.hasOwnProperty(\"field\")&&(o.field=a.google.firestore.v1.StructuredQuery.FieldReference.toObject(e.field,t)),null!=e.op&&e.hasOwnProperty(\"op\")&&(o.op=t.enums!==String||void 0===a.google.firestore.v1.StructuredQuery.FieldFilter.Operator[e.op]?e.op:a.google.firestore.v1.StructuredQuery.FieldFilter.Operator[e.op]),null!=e.value&&e.hasOwnProperty(\"value\")&&(o.value=a.google.firestore.v1.Value.toObject(e.value,t)),o},we.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},we.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredQuery.FieldFilter\"},we.Operator=(e={},(n=Object.create(e))[e[0]=\"OPERATOR_UNSPECIFIED\"]=\"OPERATOR_UNSPECIFIED\",n[e[1]=\"LESS_THAN\"]=\"LESS_THAN\",n[e[2]=\"LESS_THAN_OR_EQUAL\"]=\"LESS_THAN_OR_EQUAL\",n[e[3]=\"GREATER_THAN\"]=\"GREATER_THAN\",n[e[4]=\"GREATER_THAN_OR_EQUAL\"]=\"GREATER_THAN_OR_EQUAL\",n[e[5]=\"EQUAL\"]=\"EQUAL\",n[e[6]=\"NOT_EQUAL\"]=\"NOT_EQUAL\",n[e[7]=\"ARRAY_CONTAINS\"]=\"ARRAY_CONTAINS\",n[e[8]=\"IN\"]=\"IN\",n[e[9]=\"ARRAY_CONTAINS_ANY\"]=\"ARRAY_CONTAINS_ANY\",n[e[10]=\"NOT_IN\"]=\"NOT_IN\",n),we),b.UnaryFilter=(Ne.prototype.op=0,Ne.prototype.field=null,Object.defineProperty(Ne.prototype,\"operandType\",{get:i.oneOfGetter(e=[\"field\"]),set:i.oneOfSetter(e)}),Ne.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredQuery.UnaryFilter)return e;var t=new a.google.firestore.v1.StructuredQuery.UnaryFilter;switch(e.op){default:\"number\"==typeof e.op&&(t.op=e.op);break;case\"OPERATOR_UNSPECIFIED\":case 0:t.op=0;break;case\"IS_NAN\":case 2:t.op=2;break;case\"IS_NULL\":case 3:t.op=3;break;case\"IS_NOT_NAN\":case 4:t.op=4;break;case\"IS_NOT_NULL\":case 5:t.op=5}if(null!=e.field){if(\"object\"!=typeof e.field)throw TypeError(\".google.firestore.v1.StructuredQuery.UnaryFilter.field: object expected\");t.field=a.google.firestore.v1.StructuredQuery.FieldReference.fromObject(e.field)}return t},Ne.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.op=t.enums===String?\"OPERATOR_UNSPECIFIED\":0),null!=e.op&&e.hasOwnProperty(\"op\")&&(o.op=t.enums!==String||void 0===a.google.firestore.v1.StructuredQuery.UnaryFilter.Operator[e.op]?e.op:a.google.firestore.v1.StructuredQuery.UnaryFilter.Operator[e.op]),null!=e.field&&e.hasOwnProperty(\"field\")&&(o.field=a.google.firestore.v1.StructuredQuery.FieldReference.toObject(e.field,t),t.oneofs)&&(o.operandType=\"field\"),o},Ne.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ne.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredQuery.UnaryFilter\"},Ne.Operator=(e={},(n=Object.create(e))[e[0]=\"OPERATOR_UNSPECIFIED\"]=\"OPERATOR_UNSPECIFIED\",n[e[2]=\"IS_NAN\"]=\"IS_NAN\",n[e[3]=\"IS_NULL\"]=\"IS_NULL\",n[e[4]=\"IS_NOT_NAN\"]=\"IS_NOT_NAN\",n[e[5]=\"IS_NOT_NULL\"]=\"IS_NOT_NULL\",n),Ne),b.Order=(Pe.prototype.field=null,Pe.prototype.direction=0,Pe.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredQuery.Order)return e;var t=new a.google.firestore.v1.StructuredQuery.Order;if(null!=e.field){if(\"object\"!=typeof e.field)throw TypeError(\".google.firestore.v1.StructuredQuery.Order.field: object expected\");t.field=a.google.firestore.v1.StructuredQuery.FieldReference.fromObject(e.field)}switch(e.direction){default:\"number\"==typeof e.direction&&(t.direction=e.direction);break;case\"DIRECTION_UNSPECIFIED\":case 0:t.direction=0;break;case\"ASCENDING\":case 1:t.direction=1;break;case\"DESCENDING\":case 2:t.direction=2}return t},Pe.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.field=null,o.direction=t.enums===String?\"DIRECTION_UNSPECIFIED\":0),null!=e.field&&e.hasOwnProperty(\"field\")&&(o.field=a.google.firestore.v1.StructuredQuery.FieldReference.toObject(e.field,t)),null!=e.direction&&e.hasOwnProperty(\"direction\")&&(o.direction=t.enums!==String||void 0===a.google.firestore.v1.StructuredQuery.Direction[e.direction]?e.direction:a.google.firestore.v1.StructuredQuery.Direction[e.direction]),o},Pe.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Pe.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredQuery.Order\"},Pe),b.Direction=(e={},(n=Object.create(e))[e[0]=\"DIRECTION_UNSPECIFIED\"]=\"DIRECTION_UNSPECIFIED\",n[e[1]=\"ASCENDING\"]=\"ASCENDING\",n[e[2]=\"DESCENDING\"]=\"DESCENDING\",n),b.FieldReference=(Re.prototype.fieldPath=\"\",Re.fromObject=function(e){var t;return e instanceof a.google.firestore.v1.StructuredQuery.FieldReference?e:(t=new a.google.firestore.v1.StructuredQuery.FieldReference,null!=e.fieldPath&&(t.fieldPath=String(e.fieldPath)),t)},Re.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.fieldPath=\"\"),null!=e.fieldPath&&e.hasOwnProperty(\"fieldPath\")&&(o.fieldPath=e.fieldPath),o},Re.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Re.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredQuery.FieldReference\"},Re),b.Projection=(De.prototype.fields=i.emptyArray,De.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredQuery.Projection)return e;var t=new a.google.firestore.v1.StructuredQuery.Projection;if(e.fields){if(!Array.isArray(e.fields))throw TypeError(\".google.firestore.v1.StructuredQuery.Projection.fields: array expected\");t.fields=[];for(var o=0;o<e.fields.length;++o){if(\"object\"!=typeof e.fields[o])throw TypeError(\".google.firestore.v1.StructuredQuery.Projection.fields: object expected\");t.fields[o]=a.google.firestore.v1.StructuredQuery.FieldReference.fromObject(e.fields[o])}}return t},De.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.fields=[]),e.fields&&e.fields.length){o.fields=[];for(var r=0;r<e.fields.length;++r)o.fields[r]=a.google.firestore.v1.StructuredQuery.FieldReference.toObject(e.fields[r],t)}return o},De.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},De.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredQuery.Projection\"},De),b.FindNearest=(O.prototype.vectorField=null,O.prototype.queryVector=null,O.prototype.distanceMeasure=0,O.prototype.limit=null,O.prototype.distanceResultField=\"\",O.prototype.distanceThreshold=null,O.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredQuery.FindNearest)return e;var t=new a.google.firestore.v1.StructuredQuery.FindNearest;if(null!=e.vectorField){if(\"object\"!=typeof e.vectorField)throw TypeError(\".google.firestore.v1.StructuredQuery.FindNearest.vectorField: object expected\");t.vectorField=a.google.firestore.v1.StructuredQuery.FieldReference.fromObject(e.vectorField)}if(null!=e.queryVector){if(\"object\"!=typeof e.queryVector)throw TypeError(\".google.firestore.v1.StructuredQuery.FindNearest.queryVector: object expected\");t.queryVector=a.google.firestore.v1.Value.fromObject(e.queryVector)}switch(e.distanceMeasure){default:\"number\"==typeof e.distanceMeasure&&(t.distanceMeasure=e.distanceMeasure);break;case\"DISTANCE_MEASURE_UNSPECIFIED\":case 0:t.distanceMeasure=0;break;case\"EUCLIDEAN\":case 1:t.distanceMeasure=1;break;case\"COSINE\":case 2:t.distanceMeasure=2;break;case\"DOT_PRODUCT\":case 3:t.distanceMeasure=3}if(null!=e.limit){if(\"object\"!=typeof e.limit)throw TypeError(\".google.firestore.v1.StructuredQuery.FindNearest.limit: object expected\");t.limit=a.google.protobuf.Int32Value.fromObject(e.limit)}if(null!=e.distanceResultField&&(t.distanceResultField=String(e.distanceResultField)),null!=e.distanceThreshold){if(\"object\"!=typeof e.distanceThreshold)throw TypeError(\".google.firestore.v1.StructuredQuery.FindNearest.distanceThreshold: object expected\");t.distanceThreshold=a.google.protobuf.DoubleValue.fromObject(e.distanceThreshold)}return t},O.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.vectorField=null,o.queryVector=null,o.distanceMeasure=t.enums===String?\"DISTANCE_MEASURE_UNSPECIFIED\":0,o.limit=null,o.distanceResultField=\"\",o.distanceThreshold=null),null!=e.vectorField&&e.hasOwnProperty(\"vectorField\")&&(o.vectorField=a.google.firestore.v1.StructuredQuery.FieldReference.toObject(e.vectorField,t)),null!=e.queryVector&&e.hasOwnProperty(\"queryVector\")&&(o.queryVector=a.google.firestore.v1.Value.toObject(e.queryVector,t)),null!=e.distanceMeasure&&e.hasOwnProperty(\"distanceMeasure\")&&(o.distanceMeasure=t.enums!==String||void 0===a.google.firestore.v1.StructuredQuery.FindNearest.DistanceMeasure[e.distanceMeasure]?e.distanceMeasure:a.google.firestore.v1.StructuredQuery.FindNearest.DistanceMeasure[e.distanceMeasure]),null!=e.limit&&e.hasOwnProperty(\"limit\")&&(o.limit=a.google.protobuf.Int32Value.toObject(e.limit,t)),null!=e.distanceResultField&&e.hasOwnProperty(\"distanceResultField\")&&(o.distanceResultField=e.distanceResultField),null!=e.distanceThreshold&&e.hasOwnProperty(\"distanceThreshold\")&&(o.distanceThreshold=a.google.protobuf.DoubleValue.toObject(e.distanceThreshold,t)),o},O.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},O.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredQuery.FindNearest\"},O.DistanceMeasure=(e={},(n=Object.create(e))[e[0]=\"DISTANCE_MEASURE_UNSPECIFIED\"]=\"DISTANCE_MEASURE_UNSPECIFIED\",n[e[1]=\"EUCLIDEAN\"]=\"EUCLIDEAN\",n[e[2]=\"COSINE\"]=\"COSINE\",n[e[3]=\"DOT_PRODUCT\"]=\"DOT_PRODUCT\",n),O),b),o.StructuredAggregationQuery=(Ie.prototype.structuredQuery=null,Ie.prototype.aggregations=i.emptyArray,Object.defineProperty(Ie.prototype,\"queryType\",{get:i.oneOfGetter(e=[\"structuredQuery\"]),set:i.oneOfSetter(e)}),Ie.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredAggregationQuery)return e;var t=new a.google.firestore.v1.StructuredAggregationQuery;if(null!=e.structuredQuery){if(\"object\"!=typeof e.structuredQuery)throw TypeError(\".google.firestore.v1.StructuredAggregationQuery.structuredQuery: object expected\");t.structuredQuery=a.google.firestore.v1.StructuredQuery.fromObject(e.structuredQuery)}if(e.aggregations){if(!Array.isArray(e.aggregations))throw TypeError(\".google.firestore.v1.StructuredAggregationQuery.aggregations: array expected\");t.aggregations=[];for(var o=0;o<e.aggregations.length;++o){if(\"object\"!=typeof e.aggregations[o])throw TypeError(\".google.firestore.v1.StructuredAggregationQuery.aggregations: object expected\");t.aggregations[o]=a.google.firestore.v1.StructuredAggregationQuery.Aggregation.fromObject(e.aggregations[o])}}return t},Ie.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.aggregations=[]),null!=e.structuredQuery&&e.hasOwnProperty(\"structuredQuery\")&&(o.structuredQuery=a.google.firestore.v1.StructuredQuery.toObject(e.structuredQuery,t),t.oneofs)&&(o.queryType=\"structuredQuery\"),e.aggregations&&e.aggregations.length){o.aggregations=[];for(var r=0;r<e.aggregations.length;++r)o.aggregations[r]=a.google.firestore.v1.StructuredAggregationQuery.Aggregation.toObject(e.aggregations[r],t)}return o},Ie.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ie.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredAggregationQuery\"},Ie.Aggregation=(h.prototype.count=null,h.prototype.sum=null,h.prototype.avg=null,h.prototype.alias=\"\",Object.defineProperty(h.prototype,\"operator\",{get:i.oneOfGetter(e=[\"count\",\"sum\",\"avg\"]),set:i.oneOfSetter(e)}),h.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredAggregationQuery.Aggregation)return e;var t=new a.google.firestore.v1.StructuredAggregationQuery.Aggregation;if(null!=e.count){if(\"object\"!=typeof e.count)throw TypeError(\".google.firestore.v1.StructuredAggregationQuery.Aggregation.count: object expected\");t.count=a.google.firestore.v1.StructuredAggregationQuery.Aggregation.Count.fromObject(e.count)}if(null!=e.sum){if(\"object\"!=typeof e.sum)throw TypeError(\".google.firestore.v1.StructuredAggregationQuery.Aggregation.sum: object expected\");t.sum=a.google.firestore.v1.StructuredAggregationQuery.Aggregation.Sum.fromObject(e.sum)}if(null!=e.avg){if(\"object\"!=typeof e.avg)throw TypeError(\".google.firestore.v1.StructuredAggregationQuery.Aggregation.avg: object expected\");t.avg=a.google.firestore.v1.StructuredAggregationQuery.Aggregation.Avg.fromObject(e.avg)}return null!=e.alias&&(t.alias=String(e.alias)),t},h.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.alias=\"\"),null!=e.count&&e.hasOwnProperty(\"count\")&&(o.count=a.google.firestore.v1.StructuredAggregationQuery.Aggregation.Count.toObject(e.count,t),t.oneofs)&&(o.operator=\"count\"),null!=e.sum&&e.hasOwnProperty(\"sum\")&&(o.sum=a.google.firestore.v1.StructuredAggregationQuery.Aggregation.Sum.toObject(e.sum,t),t.oneofs)&&(o.operator=\"sum\"),null!=e.avg&&e.hasOwnProperty(\"avg\")&&(o.avg=a.google.firestore.v1.StructuredAggregationQuery.Aggregation.Avg.toObject(e.avg,t),t.oneofs)&&(o.operator=\"avg\"),null!=e.alias&&e.hasOwnProperty(\"alias\")&&(o.alias=e.alias),o},h.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},h.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredAggregationQuery.Aggregation\"},h.Count=(Ae.prototype.upTo=null,Ae.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredAggregationQuery.Aggregation.Count)return e;var t=new a.google.firestore.v1.StructuredAggregationQuery.Aggregation.Count;if(null!=e.upTo){if(\"object\"!=typeof e.upTo)throw TypeError(\".google.firestore.v1.StructuredAggregationQuery.Aggregation.Count.upTo: object expected\");t.upTo=a.google.protobuf.Int64Value.fromObject(e.upTo)}return t},Ae.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.upTo=null),null!=e.upTo&&e.hasOwnProperty(\"upTo\")&&(o.upTo=a.google.protobuf.Int64Value.toObject(e.upTo,t)),o},Ae.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ae.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredAggregationQuery.Aggregation.Count\"},Ae),h.Sum=(ke.prototype.field=null,ke.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredAggregationQuery.Aggregation.Sum)return e;var t=new a.google.firestore.v1.StructuredAggregationQuery.Aggregation.Sum;if(null!=e.field){if(\"object\"!=typeof e.field)throw TypeError(\".google.firestore.v1.StructuredAggregationQuery.Aggregation.Sum.field: object expected\");t.field=a.google.firestore.v1.StructuredQuery.FieldReference.fromObject(e.field)}return t},ke.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.field=null),null!=e.field&&e.hasOwnProperty(\"field\")&&(o.field=a.google.firestore.v1.StructuredQuery.FieldReference.toObject(e.field,t)),o},ke.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ke.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredAggregationQuery.Aggregation.Sum\"},ke),h.Avg=(xe.prototype.field=null,xe.fromObject=function(e){if(e instanceof a.google.firestore.v1.StructuredAggregationQuery.Aggregation.Avg)return e;var t=new a.google.firestore.v1.StructuredAggregationQuery.Aggregation.Avg;if(null!=e.field){if(\"object\"!=typeof e.field)throw TypeError(\".google.firestore.v1.StructuredAggregationQuery.Aggregation.Avg.field: object expected\");t.field=a.google.firestore.v1.StructuredQuery.FieldReference.fromObject(e.field)}return t},xe.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.field=null),null!=e.field&&e.hasOwnProperty(\"field\")&&(o.field=a.google.firestore.v1.StructuredQuery.FieldReference.toObject(e.field,t)),o},xe.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},xe.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.StructuredAggregationQuery.Aggregation.Avg\"},xe),h),Ie),o.Cursor=(Fe.prototype.values=i.emptyArray,Fe.prototype.before=!1,Fe.fromObject=function(e){if(e instanceof a.google.firestore.v1.Cursor)return e;var t=new a.google.firestore.v1.Cursor;if(e.values){if(!Array.isArray(e.values))throw TypeError(\".google.firestore.v1.Cursor.values: array expected\");t.values=[];for(var o=0;o<e.values.length;++o){if(\"object\"!=typeof e.values[o])throw TypeError(\".google.firestore.v1.Cursor.values: object expected\");t.values[o]=a.google.firestore.v1.Value.fromObject(e.values[o])}}return null!=e.before&&(t.before=Boolean(e.before)),t},Fe.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.values=[]),t.defaults&&(o.before=!1),e.values&&e.values.length){o.values=[];for(var r=0;r<e.values.length;++r)o.values[r]=a.google.firestore.v1.Value.toObject(e.values[r],t)}return null!=e.before&&e.hasOwnProperty(\"before\")&&(o.before=e.before),o},Fe.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Fe.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.Cursor\"},Fe),o.ExplainOptions=(_e.prototype.analyze=!1,_e.fromObject=function(e){var t;return e instanceof a.google.firestore.v1.ExplainOptions?e:(t=new a.google.firestore.v1.ExplainOptions,null!=e.analyze&&(t.analyze=Boolean(e.analyze)),t)},_e.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.analyze=!1),null!=e.analyze&&e.hasOwnProperty(\"analyze\")&&(o.analyze=e.analyze),o},_e.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},_e.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.ExplainOptions\"},_e),o.ExplainMetrics=(Ce.prototype.planSummary=null,Ce.prototype.executionStats=null,Ce.fromObject=function(e){if(e instanceof a.google.firestore.v1.ExplainMetrics)return e;var t=new a.google.firestore.v1.ExplainMetrics;if(null!=e.planSummary){if(\"object\"!=typeof e.planSummary)throw TypeError(\".google.firestore.v1.ExplainMetrics.planSummary: object expected\");t.planSummary=a.google.firestore.v1.PlanSummary.fromObject(e.planSummary)}if(null!=e.executionStats){if(\"object\"!=typeof e.executionStats)throw TypeError(\".google.firestore.v1.ExplainMetrics.executionStats: object expected\");t.executionStats=a.google.firestore.v1.ExecutionStats.fromObject(e.executionStats)}return t},Ce.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.planSummary=null,o.executionStats=null),null!=e.planSummary&&e.hasOwnProperty(\"planSummary\")&&(o.planSummary=a.google.firestore.v1.PlanSummary.toObject(e.planSummary,t)),null!=e.executionStats&&e.hasOwnProperty(\"executionStats\")&&(o.executionStats=a.google.firestore.v1.ExecutionStats.toObject(e.executionStats,t)),o},Ce.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ce.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.ExplainMetrics\"},Ce),o.PlanSummary=(Ve.prototype.indexesUsed=i.emptyArray,Ve.fromObject=function(e){if(e instanceof a.google.firestore.v1.PlanSummary)return e;var t=new a.google.firestore.v1.PlanSummary;if(e.indexesUsed){if(!Array.isArray(e.indexesUsed))throw TypeError(\".google.firestore.v1.PlanSummary.indexesUsed: array expected\");t.indexesUsed=[];for(var o=0;o<e.indexesUsed.length;++o){if(\"object\"!=typeof e.indexesUsed[o])throw TypeError(\".google.firestore.v1.PlanSummary.indexesUsed: object expected\");t.indexesUsed[o]=a.google.protobuf.Struct.fromObject(e.indexesUsed[o])}}return t},Ve.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.indexesUsed=[]),e.indexesUsed&&e.indexesUsed.length){o.indexesUsed=[];for(var r=0;r<e.indexesUsed.length;++r)o.indexesUsed[r]=a.google.protobuf.Struct.toObject(e.indexesUsed[r],t)}return o},Ve.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ve.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.PlanSummary\"},Ve),o.ExecutionStats=(Le.prototype.resultsReturned=i.Long?i.Long.fromBits(0,0,!1):0,Le.prototype.executionDuration=null,Le.prototype.readOperations=i.Long?i.Long.fromBits(0,0,!1):0,Le.prototype.debugStats=null,Le.fromObject=function(e){if(e instanceof a.google.firestore.v1.ExecutionStats)return e;var t=new a.google.firestore.v1.ExecutionStats;if(null!=e.resultsReturned&&(i.Long?(t.resultsReturned=i.Long.fromValue(e.resultsReturned)).unsigned=!1:\"string\"==typeof e.resultsReturned?t.resultsReturned=parseInt(e.resultsReturned,10):\"number\"==typeof e.resultsReturned?t.resultsReturned=e.resultsReturned:\"object\"==typeof e.resultsReturned&&(t.resultsReturned=new i.LongBits(e.resultsReturned.low>>>0,e.resultsReturned.high>>>0).toNumber())),null!=e.executionDuration){if(\"object\"!=typeof e.executionDuration)throw TypeError(\".google.firestore.v1.ExecutionStats.executionDuration: object expected\");t.executionDuration=a.google.protobuf.Duration.fromObject(e.executionDuration)}if(null!=e.readOperations&&(i.Long?(t.readOperations=i.Long.fromValue(e.readOperations)).unsigned=!1:\"string\"==typeof e.readOperations?t.readOperations=parseInt(e.readOperations,10):\"number\"==typeof e.readOperations?t.readOperations=e.readOperations:\"object\"==typeof e.readOperations&&(t.readOperations=new i.LongBits(e.readOperations.low>>>0,e.readOperations.high>>>0).toNumber())),null!=e.debugStats){if(\"object\"!=typeof e.debugStats)throw TypeError(\".google.firestore.v1.ExecutionStats.debugStats: object expected\");t.debugStats=a.google.protobuf.Struct.fromObject(e.debugStats)}return t},Le.toObject=function(e,t){var o,r={};return(t=t||{}).defaults&&(i.Long?(o=new i.Long(0,0,!1),r.resultsReturned=t.longs===String?o.toString():t.longs===Number?o.toNumber():o):r.resultsReturned=t.longs===String?\"0\":0,r.executionDuration=null,i.Long?(o=new i.Long(0,0,!1),r.readOperations=t.longs===String?o.toString():t.longs===Number?o.toNumber():o):r.readOperations=t.longs===String?\"0\":0,r.debugStats=null),null!=e.resultsReturned&&e.hasOwnProperty(\"resultsReturned\")&&(\"number\"==typeof e.resultsReturned?r.resultsReturned=t.longs===String?String(e.resultsReturned):e.resultsReturned:r.resultsReturned=t.longs===String?i.Long.prototype.toString.call(e.resultsReturned):t.longs===Number?new i.LongBits(e.resultsReturned.low>>>0,e.resultsReturned.high>>>0).toNumber():e.resultsReturned),null!=e.executionDuration&&e.hasOwnProperty(\"executionDuration\")&&(r.executionDuration=a.google.protobuf.Duration.toObject(e.executionDuration,t)),null!=e.readOperations&&e.hasOwnProperty(\"readOperations\")&&(\"number\"==typeof e.readOperations?r.readOperations=t.longs===String?String(e.readOperations):e.readOperations:r.readOperations=t.longs===String?i.Long.prototype.toString.call(e.readOperations):t.longs===Number?new i.LongBits(e.readOperations.low>>>0,e.readOperations.high>>>0).toNumber():e.readOperations),null!=e.debugStats&&e.hasOwnProperty(\"debugStats\")&&(r.debugStats=a.google.protobuf.Struct.toObject(e.debugStats,t)),r},Le.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Le.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.ExecutionStats\"},Le),o.Write=(v.prototype.update=null,v.prototype.delete=null,v.prototype.transform=null,v.prototype.updateMask=null,v.prototype.updateTransforms=i.emptyArray,v.prototype.currentDocument=null,Object.defineProperty(v.prototype,\"operation\",{get:i.oneOfGetter(n=[\"update\",\"delete\",\"transform\"]),set:i.oneOfSetter(n)}),v.fromObject=function(e){if(e instanceof a.google.firestore.v1.Write)return e;var t=new a.google.firestore.v1.Write;if(null!=e.update){if(\"object\"!=typeof e.update)throw TypeError(\".google.firestore.v1.Write.update: object expected\");t.update=a.google.firestore.v1.Document.fromObject(e.update)}if(null!=e.delete&&(t.delete=String(e.delete)),null!=e.transform){if(\"object\"!=typeof e.transform)throw TypeError(\".google.firestore.v1.Write.transform: object expected\");t.transform=a.google.firestore.v1.DocumentTransform.fromObject(e.transform)}if(null!=e.updateMask){if(\"object\"!=typeof e.updateMask)throw TypeError(\".google.firestore.v1.Write.updateMask: object expected\");t.updateMask=a.google.firestore.v1.DocumentMask.fromObject(e.updateMask)}if(e.updateTransforms){if(!Array.isArray(e.updateTransforms))throw TypeError(\".google.firestore.v1.Write.updateTransforms: array expected\");t.updateTransforms=[];for(var o=0;o<e.updateTransforms.length;++o){if(\"object\"!=typeof e.updateTransforms[o])throw TypeError(\".google.firestore.v1.Write.updateTransforms: object expected\");t.updateTransforms[o]=a.google.firestore.v1.DocumentTransform.FieldTransform.fromObject(e.updateTransforms[o])}}if(null!=e.currentDocument){if(\"object\"!=typeof e.currentDocument)throw TypeError(\".google.firestore.v1.Write.currentDocument: object expected\");t.currentDocument=a.google.firestore.v1.Precondition.fromObject(e.currentDocument)}return t},v.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.updateTransforms=[]),t.defaults&&(o.updateMask=null,o.currentDocument=null),null!=e.update&&e.hasOwnProperty(\"update\")&&(o.update=a.google.firestore.v1.Document.toObject(e.update,t),t.oneofs)&&(o.operation=\"update\"),null!=e.delete&&e.hasOwnProperty(\"delete\")&&(o.delete=e.delete,t.oneofs)&&(o.operation=\"delete\"),null!=e.updateMask&&e.hasOwnProperty(\"updateMask\")&&(o.updateMask=a.google.firestore.v1.DocumentMask.toObject(e.updateMask,t)),null!=e.currentDocument&&e.hasOwnProperty(\"currentDocument\")&&(o.currentDocument=a.google.firestore.v1.Precondition.toObject(e.currentDocument,t)),null!=e.transform&&e.hasOwnProperty(\"transform\")&&(o.transform=a.google.firestore.v1.DocumentTransform.toObject(e.transform,t),t.oneofs)&&(o.operation=\"transform\"),e.updateTransforms&&e.updateTransforms.length){o.updateTransforms=[];for(var r=0;r<e.updateTransforms.length;++r)o.updateTransforms[r]=a.google.firestore.v1.DocumentTransform.FieldTransform.toObject(e.updateTransforms[r],t)}return o},v.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},v.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.Write\"},v),o.DocumentTransform=(Ue.prototype.document=\"\",Ue.prototype.fieldTransforms=i.emptyArray,Ue.fromObject=function(e){if(e instanceof a.google.firestore.v1.DocumentTransform)return e;var t=new a.google.firestore.v1.DocumentTransform;if(null!=e.document&&(t.document=String(e.document)),e.fieldTransforms){if(!Array.isArray(e.fieldTransforms))throw TypeError(\".google.firestore.v1.DocumentTransform.fieldTransforms: array expected\");t.fieldTransforms=[];for(var o=0;o<e.fieldTransforms.length;++o){if(\"object\"!=typeof e.fieldTransforms[o])throw TypeError(\".google.firestore.v1.DocumentTransform.fieldTransforms: object expected\");t.fieldTransforms[o]=a.google.firestore.v1.DocumentTransform.FieldTransform.fromObject(e.fieldTransforms[o])}}return t},Ue.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.fieldTransforms=[]),t.defaults&&(o.document=\"\"),null!=e.document&&e.hasOwnProperty(\"document\")&&(o.document=e.document),e.fieldTransforms&&e.fieldTransforms.length){o.fieldTransforms=[];for(var r=0;r<e.fieldTransforms.length;++r)o.fieldTransforms[r]=a.google.firestore.v1.DocumentTransform.FieldTransform.toObject(e.fieldTransforms[r],t)}return o},Ue.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ue.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.DocumentTransform\"},Ue.FieldTransform=(T.prototype.fieldPath=\"\",T.prototype.setToServerValue=null,T.prototype.increment=null,T.prototype.maximum=null,T.prototype.minimum=null,T.prototype.appendMissingElements=null,T.prototype.removeAllFromArray=null,Object.defineProperty(T.prototype,\"transformType\",{get:i.oneOfGetter(e=[\"setToServerValue\",\"increment\",\"maximum\",\"minimum\",\"appendMissingElements\",\"removeAllFromArray\"]),set:i.oneOfSetter(e)}),T.fromObject=function(e){if(e instanceof a.google.firestore.v1.DocumentTransform.FieldTransform)return e;var t=new a.google.firestore.v1.DocumentTransform.FieldTransform;switch(null!=e.fieldPath&&(t.fieldPath=String(e.fieldPath)),e.setToServerValue){default:\"number\"==typeof e.setToServerValue&&(t.setToServerValue=e.setToServerValue);break;case\"SERVER_VALUE_UNSPECIFIED\":case 0:t.setToServerValue=0;break;case\"REQUEST_TIME\":case 1:t.setToServerValue=1}if(null!=e.increment){if(\"object\"!=typeof e.increment)throw TypeError(\".google.firestore.v1.DocumentTransform.FieldTransform.increment: object expected\");t.increment=a.google.firestore.v1.Value.fromObject(e.increment)}if(null!=e.maximum){if(\"object\"!=typeof e.maximum)throw TypeError(\".google.firestore.v1.DocumentTransform.FieldTransform.maximum: object expected\");t.maximum=a.google.firestore.v1.Value.fromObject(e.maximum)}if(null!=e.minimum){if(\"object\"!=typeof e.minimum)throw TypeError(\".google.firestore.v1.DocumentTransform.FieldTransform.minimum: object expected\");t.minimum=a.google.firestore.v1.Value.fromObject(e.minimum)}if(null!=e.appendMissingElements){if(\"object\"!=typeof e.appendMissingElements)throw TypeError(\".google.firestore.v1.DocumentTransform.FieldTransform.appendMissingElements: object expected\");t.appendMissingElements=a.google.firestore.v1.ArrayValue.fromObject(e.appendMissingElements)}if(null!=e.removeAllFromArray){if(\"object\"!=typeof e.removeAllFromArray)throw TypeError(\".google.firestore.v1.DocumentTransform.FieldTransform.removeAllFromArray: object expected\");t.removeAllFromArray=a.google.firestore.v1.ArrayValue.fromObject(e.removeAllFromArray)}return t},T.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.fieldPath=\"\"),null!=e.fieldPath&&e.hasOwnProperty(\"fieldPath\")&&(o.fieldPath=e.fieldPath),null!=e.setToServerValue&&e.hasOwnProperty(\"setToServerValue\")&&(o.setToServerValue=t.enums!==String||void 0===a.google.firestore.v1.DocumentTransform.FieldTransform.ServerValue[e.setToServerValue]?e.setToServerValue:a.google.firestore.v1.DocumentTransform.FieldTransform.ServerValue[e.setToServerValue],t.oneofs)&&(o.transformType=\"setToServerValue\"),null!=e.increment&&e.hasOwnProperty(\"increment\")&&(o.increment=a.google.firestore.v1.Value.toObject(e.increment,t),t.oneofs)&&(o.transformType=\"increment\"),null!=e.maximum&&e.hasOwnProperty(\"maximum\")&&(o.maximum=a.google.firestore.v1.Value.toObject(e.maximum,t),t.oneofs)&&(o.transformType=\"maximum\"),null!=e.minimum&&e.hasOwnProperty(\"minimum\")&&(o.minimum=a.google.firestore.v1.Value.toObject(e.minimum,t),t.oneofs)&&(o.transformType=\"minimum\"),null!=e.appendMissingElements&&e.hasOwnProperty(\"appendMissingElements\")&&(o.appendMissingElements=a.google.firestore.v1.ArrayValue.toObject(e.appendMissingElements,t),t.oneofs)&&(o.transformType=\"appendMissingElements\"),null!=e.removeAllFromArray&&e.hasOwnProperty(\"removeAllFromArray\")&&(o.removeAllFromArray=a.google.firestore.v1.ArrayValue.toObject(e.removeAllFromArray,t),t.oneofs)&&(o.transformType=\"removeAllFromArray\"),o},T.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},T.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.DocumentTransform.FieldTransform\"},T.ServerValue=(e={},(n=Object.create(e))[e[0]=\"SERVER_VALUE_UNSPECIFIED\"]=\"SERVER_VALUE_UNSPECIFIED\",n[e[1]=\"REQUEST_TIME\"]=\"REQUEST_TIME\",n),T),Ue),o.WriteResult=(Be.prototype.updateTime=null,Be.prototype.transformResults=i.emptyArray,Be.fromObject=function(e){if(e instanceof a.google.firestore.v1.WriteResult)return e;var t=new a.google.firestore.v1.WriteResult;if(null!=e.updateTime){if(\"object\"!=typeof e.updateTime)throw TypeError(\".google.firestore.v1.WriteResult.updateTime: object expected\");t.updateTime=a.google.protobuf.Timestamp.fromObject(e.updateTime)}if(e.transformResults){if(!Array.isArray(e.transformResults))throw TypeError(\".google.firestore.v1.WriteResult.transformResults: array expected\");t.transformResults=[];for(var o=0;o<e.transformResults.length;++o){if(\"object\"!=typeof e.transformResults[o])throw TypeError(\".google.firestore.v1.WriteResult.transformResults: object expected\");t.transformResults[o]=a.google.firestore.v1.Value.fromObject(e.transformResults[o])}}return t},Be.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.transformResults=[]),t.defaults&&(o.updateTime=null),null!=e.updateTime&&e.hasOwnProperty(\"updateTime\")&&(o.updateTime=a.google.protobuf.Timestamp.toObject(e.updateTime,t)),e.transformResults&&e.transformResults.length){o.transformResults=[];for(var r=0;r<e.transformResults.length;++r)o.transformResults[r]=a.google.firestore.v1.Value.toObject(e.transformResults[r],t)}return o},Be.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Be.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.WriteResult\"},Be),o.DocumentChange=(Je.prototype.document=null,Je.prototype.targetIds=i.emptyArray,Je.prototype.removedTargetIds=i.emptyArray,Je.fromObject=function(e){if(e instanceof a.google.firestore.v1.DocumentChange)return e;var t=new a.google.firestore.v1.DocumentChange;if(null!=e.document){if(\"object\"!=typeof e.document)throw TypeError(\".google.firestore.v1.DocumentChange.document: object expected\");t.document=a.google.firestore.v1.Document.fromObject(e.document)}if(e.targetIds){if(!Array.isArray(e.targetIds))throw TypeError(\".google.firestore.v1.DocumentChange.targetIds: array expected\");t.targetIds=[];for(var o=0;o<e.targetIds.length;++o)t.targetIds[o]=0|e.targetIds[o]}if(e.removedTargetIds){if(!Array.isArray(e.removedTargetIds))throw TypeError(\".google.firestore.v1.DocumentChange.removedTargetIds: array expected\");t.removedTargetIds=[];for(o=0;o<e.removedTargetIds.length;++o)t.removedTargetIds[o]=0|e.removedTargetIds[o]}return t},Je.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.targetIds=[],o.removedTargetIds=[]),t.defaults&&(o.document=null),null!=e.document&&e.hasOwnProperty(\"document\")&&(o.document=a.google.firestore.v1.Document.toObject(e.document,t)),e.targetIds&&e.targetIds.length){o.targetIds=[];for(var r=0;r<e.targetIds.length;++r)o.targetIds[r]=e.targetIds[r]}if(e.removedTargetIds&&e.removedTargetIds.length){o.removedTargetIds=[];for(r=0;r<e.removedTargetIds.length;++r)o.removedTargetIds[r]=e.removedTargetIds[r]}return o},Je.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Je.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.DocumentChange\"},Je),o.DocumentDelete=(Qe.prototype.document=\"\",Qe.prototype.removedTargetIds=i.emptyArray,Qe.prototype.readTime=null,Qe.fromObject=function(e){if(e instanceof a.google.firestore.v1.DocumentDelete)return e;var t=new a.google.firestore.v1.DocumentDelete;if(null!=e.document&&(t.document=String(e.document)),e.removedTargetIds){if(!Array.isArray(e.removedTargetIds))throw TypeError(\".google.firestore.v1.DocumentDelete.removedTargetIds: array expected\");t.removedTargetIds=[];for(var o=0;o<e.removedTargetIds.length;++o)t.removedTargetIds[o]=0|e.removedTargetIds[o]}if(null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.DocumentDelete.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}return t},Qe.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.removedTargetIds=[]),t.defaults&&(o.document=\"\",o.readTime=null),null!=e.document&&e.hasOwnProperty(\"document\")&&(o.document=e.document),null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t)),e.removedTargetIds&&e.removedTargetIds.length){o.removedTargetIds=[];for(var r=0;r<e.removedTargetIds.length;++r)o.removedTargetIds[r]=e.removedTargetIds[r]}return o},Qe.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Qe.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.DocumentDelete\"},Qe),o.DocumentRemove=(Me.prototype.document=\"\",Me.prototype.removedTargetIds=i.emptyArray,Me.prototype.readTime=null,Me.fromObject=function(e){if(e instanceof a.google.firestore.v1.DocumentRemove)return e;var t=new a.google.firestore.v1.DocumentRemove;if(null!=e.document&&(t.document=String(e.document)),e.removedTargetIds){if(!Array.isArray(e.removedTargetIds))throw TypeError(\".google.firestore.v1.DocumentRemove.removedTargetIds: array expected\");t.removedTargetIds=[];for(var o=0;o<e.removedTargetIds.length;++o)t.removedTargetIds[o]=0|e.removedTargetIds[o]}if(null!=e.readTime){if(\"object\"!=typeof e.readTime)throw TypeError(\".google.firestore.v1.DocumentRemove.readTime: object expected\");t.readTime=a.google.protobuf.Timestamp.fromObject(e.readTime)}return t},Me.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.removedTargetIds=[]),t.defaults&&(o.document=\"\",o.readTime=null),null!=e.document&&e.hasOwnProperty(\"document\")&&(o.document=e.document),e.removedTargetIds&&e.removedTargetIds.length){o.removedTargetIds=[];for(var r=0;r<e.removedTargetIds.length;++r)o.removedTargetIds[r]=e.removedTargetIds[r]}return null!=e.readTime&&e.hasOwnProperty(\"readTime\")&&(o.readTime=a.google.protobuf.Timestamp.toObject(e.readTime,t)),o},Me.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Me.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.DocumentRemove\"},Me),o.ExistenceFilter=(Ge.prototype.targetId=0,Ge.prototype.count=0,Ge.prototype.unchangedNames=null,Ge.fromObject=function(e){if(e instanceof a.google.firestore.v1.ExistenceFilter)return e;var t=new a.google.firestore.v1.ExistenceFilter;if(null!=e.targetId&&(t.targetId=0|e.targetId),null!=e.count&&(t.count=0|e.count),null!=e.unchangedNames){if(\"object\"!=typeof e.unchangedNames)throw TypeError(\".google.firestore.v1.ExistenceFilter.unchangedNames: object expected\");t.unchangedNames=a.google.firestore.v1.BloomFilter.fromObject(e.unchangedNames)}return t},Ge.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.targetId=0,o.count=0,o.unchangedNames=null),null!=e.targetId&&e.hasOwnProperty(\"targetId\")&&(o.targetId=e.targetId),null!=e.count&&e.hasOwnProperty(\"count\")&&(o.count=e.count),null!=e.unchangedNames&&e.hasOwnProperty(\"unchangedNames\")&&(o.unchangedNames=a.google.firestore.v1.BloomFilter.toObject(e.unchangedNames,t)),o},Ge.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ge.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.firestore.v1.ExistenceFilter\"},Ge),o),t),C.api=((e={}).FieldBehavior=(n={},(o=Object.create(n))[n[0]=\"FIELD_BEHAVIOR_UNSPECIFIED\"]=\"FIELD_BEHAVIOR_UNSPECIFIED\",o[n[1]=\"OPTIONAL\"]=\"OPTIONAL\",o[n[2]=\"REQUIRED\"]=\"REQUIRED\",o[n[3]=\"OUTPUT_ONLY\"]=\"OUTPUT_ONLY\",o[n[4]=\"INPUT_ONLY\"]=\"INPUT_ONLY\",o[n[5]=\"IMMUTABLE\"]=\"IMMUTABLE\",o[n[6]=\"UNORDERED_LIST\"]=\"UNORDERED_LIST\",o[n[7]=\"NON_EMPTY_DEFAULT\"]=\"NON_EMPTY_DEFAULT\",o[n[8]=\"IDENTIFIER\"]=\"IDENTIFIER\",o),e.Http=(qe.prototype.rules=i.emptyArray,qe.prototype.fullyDecodeReservedExpansion=!1,qe.fromObject=function(e){if(e instanceof a.google.api.Http)return e;var t=new a.google.api.Http;if(e.rules){if(!Array.isArray(e.rules))throw TypeError(\".google.api.Http.rules: array expected\");t.rules=[];for(var o=0;o<e.rules.length;++o){if(\"object\"!=typeof e.rules[o])throw TypeError(\".google.api.Http.rules: object expected\");t.rules[o]=a.google.api.HttpRule.fromObject(e.rules[o])}}return null!=e.fullyDecodeReservedExpansion&&(t.fullyDecodeReservedExpansion=Boolean(e.fullyDecodeReservedExpansion)),t},qe.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.rules=[]),t.defaults&&(o.fullyDecodeReservedExpansion=!1),e.rules&&e.rules.length){o.rules=[];for(var r=0;r<e.rules.length;++r)o.rules[r]=a.google.api.HttpRule.toObject(e.rules[r],t)}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&(o.fullyDecodeReservedExpansion=e.fullyDecodeReservedExpansion),o},qe.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},qe.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.Http\"},qe),e.HttpRule=(S.prototype.selector=\"\",S.prototype.get=null,S.prototype.put=null,S.prototype.post=null,S.prototype.delete=null,S.prototype.patch=null,S.prototype.custom=null,S.prototype.body=\"\",S.prototype.responseBody=\"\",S.prototype.additionalBindings=i.emptyArray,Object.defineProperty(S.prototype,\"pattern\",{get:i.oneOfGetter(n=[\"get\",\"put\",\"post\",\"delete\",\"patch\",\"custom\"]),set:i.oneOfSetter(n)}),S.fromObject=function(e){if(e instanceof a.google.api.HttpRule)return e;var t=new a.google.api.HttpRule;if(null!=e.selector&&(t.selector=String(e.selector)),null!=e.get&&(t.get=String(e.get)),null!=e.put&&(t.put=String(e.put)),null!=e.post&&(t.post=String(e.post)),null!=e.delete&&(t.delete=String(e.delete)),null!=e.patch&&(t.patch=String(e.patch)),null!=e.custom){if(\"object\"!=typeof e.custom)throw TypeError(\".google.api.HttpRule.custom: object expected\");t.custom=a.google.api.CustomHttpPattern.fromObject(e.custom)}if(null!=e.body&&(t.body=String(e.body)),null!=e.responseBody&&(t.responseBody=String(e.responseBody)),e.additionalBindings){if(!Array.isArray(e.additionalBindings))throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");t.additionalBindings=[];for(var o=0;o<e.additionalBindings.length;++o){if(\"object\"!=typeof e.additionalBindings[o])throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");t.additionalBindings[o]=a.google.api.HttpRule.fromObject(e.additionalBindings[o])}}return t},S.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.additionalBindings=[]),t.defaults&&(o.selector=\"\",o.body=\"\",o.responseBody=\"\"),null!=e.selector&&e.hasOwnProperty(\"selector\")&&(o.selector=e.selector),null!=e.get&&e.hasOwnProperty(\"get\")&&(o.get=e.get,t.oneofs)&&(o.pattern=\"get\"),null!=e.put&&e.hasOwnProperty(\"put\")&&(o.put=e.put,t.oneofs)&&(o.pattern=\"put\"),null!=e.post&&e.hasOwnProperty(\"post\")&&(o.post=e.post,t.oneofs)&&(o.pattern=\"post\"),null!=e.delete&&e.hasOwnProperty(\"delete\")&&(o.delete=e.delete,t.oneofs)&&(o.pattern=\"delete\"),null!=e.patch&&e.hasOwnProperty(\"patch\")&&(o.patch=e.patch,t.oneofs)&&(o.pattern=\"patch\"),null!=e.body&&e.hasOwnProperty(\"body\")&&(o.body=e.body),null!=e.custom&&e.hasOwnProperty(\"custom\")&&(o.custom=a.google.api.CustomHttpPattern.toObject(e.custom,t),t.oneofs)&&(o.pattern=\"custom\"),e.additionalBindings&&e.additionalBindings.length){o.additionalBindings=[];for(var r=0;r<e.additionalBindings.length;++r)o.additionalBindings[r]=a.google.api.HttpRule.toObject(e.additionalBindings[r],t)}return null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&(o.responseBody=e.responseBody),o},S.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},S.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.HttpRule\"},S),e.CustomHttpPattern=(Ye.prototype.kind=\"\",Ye.prototype.path=\"\",Ye.fromObject=function(e){var t;return e instanceof a.google.api.CustomHttpPattern?e:(t=new a.google.api.CustomHttpPattern,null!=e.kind&&(t.kind=String(e.kind)),null!=e.path&&(t.path=String(e.path)),t)},Ye.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.kind=\"\",o.path=\"\"),null!=e.kind&&e.hasOwnProperty(\"kind\")&&(o.kind=e.kind),null!=e.path&&e.hasOwnProperty(\"path\")&&(o.path=e.path),o},Ye.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ye.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.CustomHttpPattern\"},Ye),e.CommonLanguageSettings=(We.prototype.referenceDocsUri=\"\",We.prototype.destinations=i.emptyArray,We.prototype.selectiveGapicGeneration=null,We.fromObject=function(e){if(e instanceof a.google.api.CommonLanguageSettings)return e;var t=new a.google.api.CommonLanguageSettings;if(null!=e.referenceDocsUri&&(t.referenceDocsUri=String(e.referenceDocsUri)),e.destinations){if(!Array.isArray(e.destinations))throw TypeError(\".google.api.CommonLanguageSettings.destinations: array expected\");t.destinations=[];for(var o=0;o<e.destinations.length;++o)switch(e.destinations[o]){default:if(\"number\"==typeof e.destinations[o]){t.destinations[o]=e.destinations[o];break}case\"CLIENT_LIBRARY_DESTINATION_UNSPECIFIED\":case 0:t.destinations[o]=0;break;case\"GITHUB\":case 10:t.destinations[o]=10;break;case\"PACKAGE_MANAGER\":case 20:t.destinations[o]=20}}if(null!=e.selectiveGapicGeneration){if(\"object\"!=typeof e.selectiveGapicGeneration)throw TypeError(\".google.api.CommonLanguageSettings.selectiveGapicGeneration: object expected\");t.selectiveGapicGeneration=a.google.api.SelectiveGapicGeneration.fromObject(e.selectiveGapicGeneration)}return t},We.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.destinations=[]),t.defaults&&(o.referenceDocsUri=\"\",o.selectiveGapicGeneration=null),null!=e.referenceDocsUri&&e.hasOwnProperty(\"referenceDocsUri\")&&(o.referenceDocsUri=e.referenceDocsUri),e.destinations&&e.destinations.length){o.destinations=[];for(var r=0;r<e.destinations.length;++r)o.destinations[r]=t.enums!==String||void 0===a.google.api.ClientLibraryDestination[e.destinations[r]]?e.destinations[r]:a.google.api.ClientLibraryDestination[e.destinations[r]]}return null!=e.selectiveGapicGeneration&&e.hasOwnProperty(\"selectiveGapicGeneration\")&&(o.selectiveGapicGeneration=a.google.api.SelectiveGapicGeneration.toObject(e.selectiveGapicGeneration,t)),o},We.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},We.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.CommonLanguageSettings\"},We),e.ClientLibrarySettings=(j.prototype.version=\"\",j.prototype.launchStage=0,j.prototype.restNumericEnums=!1,j.prototype.javaSettings=null,j.prototype.cppSettings=null,j.prototype.phpSettings=null,j.prototype.pythonSettings=null,j.prototype.nodeSettings=null,j.prototype.dotnetSettings=null,j.prototype.rubySettings=null,j.prototype.goSettings=null,j.fromObject=function(e){if(e instanceof a.google.api.ClientLibrarySettings)return e;var t=new a.google.api.ClientLibrarySettings;switch(null!=e.version&&(t.version=String(e.version)),e.launchStage){default:\"number\"==typeof e.launchStage&&(t.launchStage=e.launchStage);break;case\"LAUNCH_STAGE_UNSPECIFIED\":case 0:t.launchStage=0;break;case\"UNIMPLEMENTED\":case 6:t.launchStage=6;break;case\"PRELAUNCH\":case 7:t.launchStage=7;break;case\"EARLY_ACCESS\":case 1:t.launchStage=1;break;case\"ALPHA\":case 2:t.launchStage=2;break;case\"BETA\":case 3:t.launchStage=3;break;case\"GA\":case 4:t.launchStage=4;break;case\"DEPRECATED\":case 5:t.launchStage=5}if(null!=e.restNumericEnums&&(t.restNumericEnums=Boolean(e.restNumericEnums)),null!=e.javaSettings){if(\"object\"!=typeof e.javaSettings)throw TypeError(\".google.api.ClientLibrarySettings.javaSettings: object expected\");t.javaSettings=a.google.api.JavaSettings.fromObject(e.javaSettings)}if(null!=e.cppSettings){if(\"object\"!=typeof e.cppSettings)throw TypeError(\".google.api.ClientLibrarySettings.cppSettings: object expected\");t.cppSettings=a.google.api.CppSettings.fromObject(e.cppSettings)}if(null!=e.phpSettings){if(\"object\"!=typeof e.phpSettings)throw TypeError(\".google.api.ClientLibrarySettings.phpSettings: object expected\");t.phpSettings=a.google.api.PhpSettings.fromObject(e.phpSettings)}if(null!=e.pythonSettings){if(\"object\"!=typeof e.pythonSettings)throw TypeError(\".google.api.ClientLibrarySettings.pythonSettings: object expected\");t.pythonSettings=a.google.api.PythonSettings.fromObject(e.pythonSettings)}if(null!=e.nodeSettings){if(\"object\"!=typeof e.nodeSettings)throw TypeError(\".google.api.ClientLibrarySettings.nodeSettings: object expected\");t.nodeSettings=a.google.api.NodeSettings.fromObject(e.nodeSettings)}if(null!=e.dotnetSettings){if(\"object\"!=typeof e.dotnetSettings)throw TypeError(\".google.api.ClientLibrarySettings.dotnetSettings: object expected\");t.dotnetSettings=a.google.api.DotnetSettings.fromObject(e.dotnetSettings)}if(null!=e.rubySettings){if(\"object\"!=typeof e.rubySettings)throw TypeError(\".google.api.ClientLibrarySettings.rubySettings: object expected\");t.rubySettings=a.google.api.RubySettings.fromObject(e.rubySettings)}if(null!=e.goSettings){if(\"object\"!=typeof e.goSettings)throw TypeError(\".google.api.ClientLibrarySettings.goSettings: object expected\");t.goSettings=a.google.api.GoSettings.fromObject(e.goSettings)}return t},j.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.version=\"\",o.launchStage=t.enums===String?\"LAUNCH_STAGE_UNSPECIFIED\":0,o.restNumericEnums=!1,o.javaSettings=null,o.cppSettings=null,o.phpSettings=null,o.pythonSettings=null,o.nodeSettings=null,o.dotnetSettings=null,o.rubySettings=null,o.goSettings=null),null!=e.version&&e.hasOwnProperty(\"version\")&&(o.version=e.version),null!=e.launchStage&&e.hasOwnProperty(\"launchStage\")&&(o.launchStage=t.enums!==String||void 0===a.google.api.LaunchStage[e.launchStage]?e.launchStage:a.google.api.LaunchStage[e.launchStage]),null!=e.restNumericEnums&&e.hasOwnProperty(\"restNumericEnums\")&&(o.restNumericEnums=e.restNumericEnums),null!=e.javaSettings&&e.hasOwnProperty(\"javaSettings\")&&(o.javaSettings=a.google.api.JavaSettings.toObject(e.javaSettings,t)),null!=e.cppSettings&&e.hasOwnProperty(\"cppSettings\")&&(o.cppSettings=a.google.api.CppSettings.toObject(e.cppSettings,t)),null!=e.phpSettings&&e.hasOwnProperty(\"phpSettings\")&&(o.phpSettings=a.google.api.PhpSettings.toObject(e.phpSettings,t)),null!=e.pythonSettings&&e.hasOwnProperty(\"pythonSettings\")&&(o.pythonSettings=a.google.api.PythonSettings.toObject(e.pythonSettings,t)),null!=e.nodeSettings&&e.hasOwnProperty(\"nodeSettings\")&&(o.nodeSettings=a.google.api.NodeSettings.toObject(e.nodeSettings,t)),null!=e.dotnetSettings&&e.hasOwnProperty(\"dotnetSettings\")&&(o.dotnetSettings=a.google.api.DotnetSettings.toObject(e.dotnetSettings,t)),null!=e.rubySettings&&e.hasOwnProperty(\"rubySettings\")&&(o.rubySettings=a.google.api.RubySettings.toObject(e.rubySettings,t)),null!=e.goSettings&&e.hasOwnProperty(\"goSettings\")&&(o.goSettings=a.google.api.GoSettings.toObject(e.goSettings,t)),o},j.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},j.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.ClientLibrarySettings\"},j),e.Publishing=(E.prototype.methodSettings=i.emptyArray,E.prototype.newIssueUri=\"\",E.prototype.documentationUri=\"\",E.prototype.apiShortName=\"\",E.prototype.githubLabel=\"\",E.prototype.codeownerGithubTeams=i.emptyArray,E.prototype.docTagPrefix=\"\",E.prototype.organization=0,E.prototype.librarySettings=i.emptyArray,E.prototype.protoReferenceDocumentationUri=\"\",E.prototype.restReferenceDocumentationUri=\"\",E.fromObject=function(e){if(e instanceof a.google.api.Publishing)return e;var t=new a.google.api.Publishing;if(e.methodSettings){if(!Array.isArray(e.methodSettings))throw TypeError(\".google.api.Publishing.methodSettings: array expected\");t.methodSettings=[];for(var o=0;o<e.methodSettings.length;++o){if(\"object\"!=typeof e.methodSettings[o])throw TypeError(\".google.api.Publishing.methodSettings: object expected\");t.methodSettings[o]=a.google.api.MethodSettings.fromObject(e.methodSettings[o])}}if(null!=e.newIssueUri&&(t.newIssueUri=String(e.newIssueUri)),null!=e.documentationUri&&(t.documentationUri=String(e.documentationUri)),null!=e.apiShortName&&(t.apiShortName=String(e.apiShortName)),null!=e.githubLabel&&(t.githubLabel=String(e.githubLabel)),e.codeownerGithubTeams){if(!Array.isArray(e.codeownerGithubTeams))throw TypeError(\".google.api.Publishing.codeownerGithubTeams: array expected\");t.codeownerGithubTeams=[];for(o=0;o<e.codeownerGithubTeams.length;++o)t.codeownerGithubTeams[o]=String(e.codeownerGithubTeams[o])}switch(null!=e.docTagPrefix&&(t.docTagPrefix=String(e.docTagPrefix)),e.organization){default:\"number\"==typeof e.organization&&(t.organization=e.organization);break;case\"CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED\":case 0:t.organization=0;break;case\"CLOUD\":case 1:t.organization=1;break;case\"ADS\":case 2:t.organization=2;break;case\"PHOTOS\":case 3:t.organization=3;break;case\"STREET_VIEW\":case 4:t.organization=4;break;case\"SHOPPING\":case 5:t.organization=5;break;case\"GEO\":case 6:t.organization=6;break;case\"GENERATIVE_AI\":case 7:t.organization=7}if(e.librarySettings){if(!Array.isArray(e.librarySettings))throw TypeError(\".google.api.Publishing.librarySettings: array expected\");t.librarySettings=[];for(o=0;o<e.librarySettings.length;++o){if(\"object\"!=typeof e.librarySettings[o])throw TypeError(\".google.api.Publishing.librarySettings: object expected\");t.librarySettings[o]=a.google.api.ClientLibrarySettings.fromObject(e.librarySettings[o])}}return null!=e.protoReferenceDocumentationUri&&(t.protoReferenceDocumentationUri=String(e.protoReferenceDocumentationUri)),null!=e.restReferenceDocumentationUri&&(t.restReferenceDocumentationUri=String(e.restReferenceDocumentationUri)),t},E.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.methodSettings=[],o.codeownerGithubTeams=[],o.librarySettings=[]),t.defaults&&(o.newIssueUri=\"\",o.documentationUri=\"\",o.apiShortName=\"\",o.githubLabel=\"\",o.docTagPrefix=\"\",o.organization=t.enums===String?\"CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED\":0,o.protoReferenceDocumentationUri=\"\",o.restReferenceDocumentationUri=\"\"),e.methodSettings&&e.methodSettings.length){o.methodSettings=[];for(var r=0;r<e.methodSettings.length;++r)o.methodSettings[r]=a.google.api.MethodSettings.toObject(e.methodSettings[r],t)}if(null!=e.newIssueUri&&e.hasOwnProperty(\"newIssueUri\")&&(o.newIssueUri=e.newIssueUri),null!=e.documentationUri&&e.hasOwnProperty(\"documentationUri\")&&(o.documentationUri=e.documentationUri),null!=e.apiShortName&&e.hasOwnProperty(\"apiShortName\")&&(o.apiShortName=e.apiShortName),null!=e.githubLabel&&e.hasOwnProperty(\"githubLabel\")&&(o.githubLabel=e.githubLabel),e.codeownerGithubTeams&&e.codeownerGithubTeams.length){o.codeownerGithubTeams=[];for(r=0;r<e.codeownerGithubTeams.length;++r)o.codeownerGithubTeams[r]=e.codeownerGithubTeams[r]}if(null!=e.docTagPrefix&&e.hasOwnProperty(\"docTagPrefix\")&&(o.docTagPrefix=e.docTagPrefix),null!=e.organization&&e.hasOwnProperty(\"organization\")&&(o.organization=t.enums!==String||void 0===a.google.api.ClientLibraryOrganization[e.organization]?e.organization:a.google.api.ClientLibraryOrganization[e.organization]),e.librarySettings&&e.librarySettings.length){o.librarySettings=[];for(r=0;r<e.librarySettings.length;++r)o.librarySettings[r]=a.google.api.ClientLibrarySettings.toObject(e.librarySettings[r],t)}return null!=e.protoReferenceDocumentationUri&&e.hasOwnProperty(\"protoReferenceDocumentationUri\")&&(o.protoReferenceDocumentationUri=e.protoReferenceDocumentationUri),null!=e.restReferenceDocumentationUri&&e.hasOwnProperty(\"restReferenceDocumentationUri\")&&(o.restReferenceDocumentationUri=e.restReferenceDocumentationUri),o},E.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},E.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.Publishing\"},E),e.JavaSettings=(ze.prototype.libraryPackage=\"\",ze.prototype.serviceClassNames=i.emptyObject,ze.prototype.common=null,ze.fromObject=function(e){if(e instanceof a.google.api.JavaSettings)return e;var t=new a.google.api.JavaSettings;if(null!=e.libraryPackage&&(t.libraryPackage=String(e.libraryPackage)),e.serviceClassNames){if(\"object\"!=typeof e.serviceClassNames)throw TypeError(\".google.api.JavaSettings.serviceClassNames: object expected\");t.serviceClassNames={};for(var o=Object.keys(e.serviceClassNames),r=0;r<o.length;++r)t.serviceClassNames[o[r]]=String(e.serviceClassNames[o[r]])}if(null!=e.common){if(\"object\"!=typeof e.common)throw TypeError(\".google.api.JavaSettings.common: object expected\");t.common=a.google.api.CommonLanguageSettings.fromObject(e.common)}return t},ze.toObject=function(e,t){var o,r={};if(((t=t||{}).objects||t.defaults)&&(r.serviceClassNames={}),t.defaults&&(r.libraryPackage=\"\",r.common=null),null!=e.libraryPackage&&e.hasOwnProperty(\"libraryPackage\")&&(r.libraryPackage=e.libraryPackage),e.serviceClassNames&&(o=Object.keys(e.serviceClassNames)).length){r.serviceClassNames={};for(var n=0;n<o.length;++n)r.serviceClassNames[o[n]]=e.serviceClassNames[o[n]]}return null!=e.common&&e.hasOwnProperty(\"common\")&&(r.common=a.google.api.CommonLanguageSettings.toObject(e.common,t)),r},ze.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ze.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.JavaSettings\"},ze),e.CppSettings=(He.prototype.common=null,He.fromObject=function(e){if(e instanceof a.google.api.CppSettings)return e;var t=new a.google.api.CppSettings;if(null!=e.common){if(\"object\"!=typeof e.common)throw TypeError(\".google.api.CppSettings.common: object expected\");t.common=a.google.api.CommonLanguageSettings.fromObject(e.common)}return t},He.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.common=null),null!=e.common&&e.hasOwnProperty(\"common\")&&(o.common=a.google.api.CommonLanguageSettings.toObject(e.common,t)),o},He.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},He.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.CppSettings\"},He),e.PhpSettings=(Ke.prototype.common=null,Ke.fromObject=function(e){if(e instanceof a.google.api.PhpSettings)return e;var t=new a.google.api.PhpSettings;if(null!=e.common){if(\"object\"!=typeof e.common)throw TypeError(\".google.api.PhpSettings.common: object expected\");t.common=a.google.api.CommonLanguageSettings.fromObject(e.common)}return t},Ke.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.common=null),null!=e.common&&e.hasOwnProperty(\"common\")&&(o.common=a.google.api.CommonLanguageSettings.toObject(e.common,t)),o},Ke.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ke.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.PhpSettings\"},Ke),e.PythonSettings=(Xe.prototype.common=null,Xe.prototype.experimentalFeatures=null,Xe.fromObject=function(e){if(e instanceof a.google.api.PythonSettings)return e;var t=new a.google.api.PythonSettings;if(null!=e.common){if(\"object\"!=typeof e.common)throw TypeError(\".google.api.PythonSettings.common: object expected\");t.common=a.google.api.CommonLanguageSettings.fromObject(e.common)}if(null!=e.experimentalFeatures){if(\"object\"!=typeof e.experimentalFeatures)throw TypeError(\".google.api.PythonSettings.experimentalFeatures: object expected\");t.experimentalFeatures=a.google.api.PythonSettings.ExperimentalFeatures.fromObject(e.experimentalFeatures)}return t},Xe.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.common=null,o.experimentalFeatures=null),null!=e.common&&e.hasOwnProperty(\"common\")&&(o.common=a.google.api.CommonLanguageSettings.toObject(e.common,t)),null!=e.experimentalFeatures&&e.hasOwnProperty(\"experimentalFeatures\")&&(o.experimentalFeatures=a.google.api.PythonSettings.ExperimentalFeatures.toObject(e.experimentalFeatures,t)),o},Xe.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Xe.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.PythonSettings\"},Xe.ExperimentalFeatures=(Ze.prototype.restAsyncIoEnabled=!1,Ze.prototype.protobufPythonicTypesEnabled=!1,Ze.fromObject=function(e){var t;return e instanceof a.google.api.PythonSettings.ExperimentalFeatures?e:(t=new a.google.api.PythonSettings.ExperimentalFeatures,null!=e.restAsyncIoEnabled&&(t.restAsyncIoEnabled=Boolean(e.restAsyncIoEnabled)),null!=e.protobufPythonicTypesEnabled&&(t.protobufPythonicTypesEnabled=Boolean(e.protobufPythonicTypesEnabled)),t)},Ze.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.restAsyncIoEnabled=!1,o.protobufPythonicTypesEnabled=!1),null!=e.restAsyncIoEnabled&&e.hasOwnProperty(\"restAsyncIoEnabled\")&&(o.restAsyncIoEnabled=e.restAsyncIoEnabled),null!=e.protobufPythonicTypesEnabled&&e.hasOwnProperty(\"protobufPythonicTypesEnabled\")&&(o.protobufPythonicTypesEnabled=e.protobufPythonicTypesEnabled),o},Ze.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ze.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.PythonSettings.ExperimentalFeatures\"},Ze),Xe),e.NodeSettings=($e.prototype.common=null,$e.fromObject=function(e){if(e instanceof a.google.api.NodeSettings)return e;var t=new a.google.api.NodeSettings;if(null!=e.common){if(\"object\"!=typeof e.common)throw TypeError(\".google.api.NodeSettings.common: object expected\");t.common=a.google.api.CommonLanguageSettings.fromObject(e.common)}return t},$e.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.common=null),null!=e.common&&e.hasOwnProperty(\"common\")&&(o.common=a.google.api.CommonLanguageSettings.toObject(e.common,t)),o},$e.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},$e.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.NodeSettings\"},$e),e.DotnetSettings=(et.prototype.common=null,et.prototype.renamedServices=i.emptyObject,et.prototype.renamedResources=i.emptyObject,et.prototype.ignoredResources=i.emptyArray,et.prototype.forcedNamespaceAliases=i.emptyArray,et.prototype.handwrittenSignatures=i.emptyArray,et.fromObject=function(e){if(e instanceof a.google.api.DotnetSettings)return e;var t=new a.google.api.DotnetSettings;if(null!=e.common){if(\"object\"!=typeof e.common)throw TypeError(\".google.api.DotnetSettings.common: object expected\");t.common=a.google.api.CommonLanguageSettings.fromObject(e.common)}if(e.renamedServices){if(\"object\"!=typeof e.renamedServices)throw TypeError(\".google.api.DotnetSettings.renamedServices: object expected\");t.renamedServices={};for(var o=Object.keys(e.renamedServices),r=0;r<o.length;++r)t.renamedServices[o[r]]=String(e.renamedServices[o[r]])}if(e.renamedResources){if(\"object\"!=typeof e.renamedResources)throw TypeError(\".google.api.DotnetSettings.renamedResources: object expected\");t.renamedResources={};for(o=Object.keys(e.renamedResources),r=0;r<o.length;++r)t.renamedResources[o[r]]=String(e.renamedResources[o[r]])}if(e.ignoredResources){if(!Array.isArray(e.ignoredResources))throw TypeError(\".google.api.DotnetSettings.ignoredResources: array expected\");t.ignoredResources=[];for(r=0;r<e.ignoredResources.length;++r)t.ignoredResources[r]=String(e.ignoredResources[r])}if(e.forcedNamespaceAliases){if(!Array.isArray(e.forcedNamespaceAliases))throw TypeError(\".google.api.DotnetSettings.forcedNamespaceAliases: array expected\");t.forcedNamespaceAliases=[];for(r=0;r<e.forcedNamespaceAliases.length;++r)t.forcedNamespaceAliases[r]=String(e.forcedNamespaceAliases[r])}if(e.handwrittenSignatures){if(!Array.isArray(e.handwrittenSignatures))throw TypeError(\".google.api.DotnetSettings.handwrittenSignatures: array expected\");t.handwrittenSignatures=[];for(r=0;r<e.handwrittenSignatures.length;++r)t.handwrittenSignatures[r]=String(e.handwrittenSignatures[r])}return t},et.toObject=function(e,t){var o,r={};if(((t=t||{}).arrays||t.defaults)&&(r.ignoredResources=[],r.forcedNamespaceAliases=[],r.handwrittenSignatures=[]),(t.objects||t.defaults)&&(r.renamedServices={},r.renamedResources={}),t.defaults&&(r.common=null),null!=e.common&&e.hasOwnProperty(\"common\")&&(r.common=a.google.api.CommonLanguageSettings.toObject(e.common,t)),e.renamedServices&&(o=Object.keys(e.renamedServices)).length){r.renamedServices={};for(var n=0;n<o.length;++n)r.renamedServices[o[n]]=e.renamedServices[o[n]]}if(e.renamedResources&&(o=Object.keys(e.renamedResources)).length){r.renamedResources={};for(n=0;n<o.length;++n)r.renamedResources[o[n]]=e.renamedResources[o[n]]}if(e.ignoredResources&&e.ignoredResources.length){r.ignoredResources=[];for(n=0;n<e.ignoredResources.length;++n)r.ignoredResources[n]=e.ignoredResources[n]}if(e.forcedNamespaceAliases&&e.forcedNamespaceAliases.length){r.forcedNamespaceAliases=[];for(n=0;n<e.forcedNamespaceAliases.length;++n)r.forcedNamespaceAliases[n]=e.forcedNamespaceAliases[n]}if(e.handwrittenSignatures&&e.handwrittenSignatures.length){r.handwrittenSignatures=[];for(n=0;n<e.handwrittenSignatures.length;++n)r.handwrittenSignatures[n]=e.handwrittenSignatures[n]}return r},et.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},et.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.DotnetSettings\"},et),e.RubySettings=(tt.prototype.common=null,tt.fromObject=function(e){if(e instanceof a.google.api.RubySettings)return e;var t=new a.google.api.RubySettings;if(null!=e.common){if(\"object\"!=typeof e.common)throw TypeError(\".google.api.RubySettings.common: object expected\");t.common=a.google.api.CommonLanguageSettings.fromObject(e.common)}return t},tt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.common=null),null!=e.common&&e.hasOwnProperty(\"common\")&&(o.common=a.google.api.CommonLanguageSettings.toObject(e.common,t)),o},tt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},tt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.RubySettings\"},tt),e.GoSettings=(ot.prototype.common=null,ot.prototype.renamedServices=i.emptyObject,ot.fromObject=function(e){if(e instanceof a.google.api.GoSettings)return e;var t=new a.google.api.GoSettings;if(null!=e.common){if(\"object\"!=typeof e.common)throw TypeError(\".google.api.GoSettings.common: object expected\");t.common=a.google.api.CommonLanguageSettings.fromObject(e.common)}if(e.renamedServices){if(\"object\"!=typeof e.renamedServices)throw TypeError(\".google.api.GoSettings.renamedServices: object expected\");t.renamedServices={};for(var o=Object.keys(e.renamedServices),r=0;r<o.length;++r)t.renamedServices[o[r]]=String(e.renamedServices[o[r]])}return t},ot.toObject=function(e,t){var o,r={};if(((t=t||{}).objects||t.defaults)&&(r.renamedServices={}),t.defaults&&(r.common=null),null!=e.common&&e.hasOwnProperty(\"common\")&&(r.common=a.google.api.CommonLanguageSettings.toObject(e.common,t)),e.renamedServices&&(o=Object.keys(e.renamedServices)).length){r.renamedServices={};for(var n=0;n<o.length;++n)r.renamedServices[o[n]]=e.renamedServices[o[n]]}return r},ot.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ot.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.GoSettings\"},ot),e.MethodSettings=(rt.prototype.selector=\"\",rt.prototype.longRunning=null,rt.prototype.autoPopulatedFields=i.emptyArray,rt.fromObject=function(e){if(e instanceof a.google.api.MethodSettings)return e;var t=new a.google.api.MethodSettings;if(null!=e.selector&&(t.selector=String(e.selector)),null!=e.longRunning){if(\"object\"!=typeof e.longRunning)throw TypeError(\".google.api.MethodSettings.longRunning: object expected\");t.longRunning=a.google.api.MethodSettings.LongRunning.fromObject(e.longRunning)}if(e.autoPopulatedFields){if(!Array.isArray(e.autoPopulatedFields))throw TypeError(\".google.api.MethodSettings.autoPopulatedFields: array expected\");t.autoPopulatedFields=[];for(var o=0;o<e.autoPopulatedFields.length;++o)t.autoPopulatedFields[o]=String(e.autoPopulatedFields[o])}return t},rt.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.autoPopulatedFields=[]),t.defaults&&(o.selector=\"\",o.longRunning=null),null!=e.selector&&e.hasOwnProperty(\"selector\")&&(o.selector=e.selector),null!=e.longRunning&&e.hasOwnProperty(\"longRunning\")&&(o.longRunning=a.google.api.MethodSettings.LongRunning.toObject(e.longRunning,t)),e.autoPopulatedFields&&e.autoPopulatedFields.length){o.autoPopulatedFields=[];for(var r=0;r<e.autoPopulatedFields.length;++r)o.autoPopulatedFields[r]=e.autoPopulatedFields[r]}return o},rt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},rt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.MethodSettings\"},rt.LongRunning=(nt.prototype.initialPollDelay=null,nt.prototype.pollDelayMultiplier=0,nt.prototype.maxPollDelay=null,nt.prototype.totalPollTimeout=null,nt.fromObject=function(e){if(e instanceof a.google.api.MethodSettings.LongRunning)return e;var t=new a.google.api.MethodSettings.LongRunning;if(null!=e.initialPollDelay){if(\"object\"!=typeof e.initialPollDelay)throw TypeError(\".google.api.MethodSettings.LongRunning.initialPollDelay: object expected\");t.initialPollDelay=a.google.protobuf.Duration.fromObject(e.initialPollDelay)}if(null!=e.pollDelayMultiplier&&(t.pollDelayMultiplier=Number(e.pollDelayMultiplier)),null!=e.maxPollDelay){if(\"object\"!=typeof e.maxPollDelay)throw TypeError(\".google.api.MethodSettings.LongRunning.maxPollDelay: object expected\");t.maxPollDelay=a.google.protobuf.Duration.fromObject(e.maxPollDelay)}if(null!=e.totalPollTimeout){if(\"object\"!=typeof e.totalPollTimeout)throw TypeError(\".google.api.MethodSettings.LongRunning.totalPollTimeout: object expected\");t.totalPollTimeout=a.google.protobuf.Duration.fromObject(e.totalPollTimeout)}return t},nt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.initialPollDelay=null,o.pollDelayMultiplier=0,o.maxPollDelay=null,o.totalPollTimeout=null),null!=e.initialPollDelay&&e.hasOwnProperty(\"initialPollDelay\")&&(o.initialPollDelay=a.google.protobuf.Duration.toObject(e.initialPollDelay,t)),null!=e.pollDelayMultiplier&&e.hasOwnProperty(\"pollDelayMultiplier\")&&(o.pollDelayMultiplier=t.json&&!isFinite(e.pollDelayMultiplier)?String(e.pollDelayMultiplier):e.pollDelayMultiplier),null!=e.maxPollDelay&&e.hasOwnProperty(\"maxPollDelay\")&&(o.maxPollDelay=a.google.protobuf.Duration.toObject(e.maxPollDelay,t)),null!=e.totalPollTimeout&&e.hasOwnProperty(\"totalPollTimeout\")&&(o.totalPollTimeout=a.google.protobuf.Duration.toObject(e.totalPollTimeout,t)),o},nt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},nt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.MethodSettings.LongRunning\"},nt),rt),e.ClientLibraryOrganization=(o={},(n=Object.create(o))[o[0]=\"CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED\"]=\"CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED\",n[o[1]=\"CLOUD\"]=\"CLOUD\",n[o[2]=\"ADS\"]=\"ADS\",n[o[3]=\"PHOTOS\"]=\"PHOTOS\",n[o[4]=\"STREET_VIEW\"]=\"STREET_VIEW\",n[o[5]=\"SHOPPING\"]=\"SHOPPING\",n[o[6]=\"GEO\"]=\"GEO\",n[o[7]=\"GENERATIVE_AI\"]=\"GENERATIVE_AI\",n),e.ClientLibraryDestination=(o={},(n=Object.create(o))[o[0]=\"CLIENT_LIBRARY_DESTINATION_UNSPECIFIED\"]=\"CLIENT_LIBRARY_DESTINATION_UNSPECIFIED\",n[o[10]=\"GITHUB\"]=\"GITHUB\",n[o[20]=\"PACKAGE_MANAGER\"]=\"PACKAGE_MANAGER\",n),e.SelectiveGapicGeneration=(it.prototype.methods=i.emptyArray,it.prototype.generateOmittedAsInternal=!1,it.fromObject=function(e){if(e instanceof a.google.api.SelectiveGapicGeneration)return e;var t=new a.google.api.SelectiveGapicGeneration;if(e.methods){if(!Array.isArray(e.methods))throw TypeError(\".google.api.SelectiveGapicGeneration.methods: array expected\");t.methods=[];for(var o=0;o<e.methods.length;++o)t.methods[o]=String(e.methods[o])}return null!=e.generateOmittedAsInternal&&(t.generateOmittedAsInternal=Boolean(e.generateOmittedAsInternal)),t},it.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.methods=[]),t.defaults&&(o.generateOmittedAsInternal=!1),e.methods&&e.methods.length){o.methods=[];for(var r=0;r<e.methods.length;++r)o.methods[r]=e.methods[r]}return null!=e.generateOmittedAsInternal&&e.hasOwnProperty(\"generateOmittedAsInternal\")&&(o.generateOmittedAsInternal=e.generateOmittedAsInternal),o},it.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},it.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.SelectiveGapicGeneration\"},it),e.LaunchStage=(o={},(n=Object.create(o))[o[0]=\"LAUNCH_STAGE_UNSPECIFIED\"]=\"LAUNCH_STAGE_UNSPECIFIED\",n[o[6]=\"UNIMPLEMENTED\"]=\"UNIMPLEMENTED\",n[o[7]=\"PRELAUNCH\"]=\"PRELAUNCH\",n[o[1]=\"EARLY_ACCESS\"]=\"EARLY_ACCESS\",n[o[2]=\"ALPHA\"]=\"ALPHA\",n[o[3]=\"BETA\"]=\"BETA\",n[o[4]=\"GA\"]=\"GA\",n[o[5]=\"DEPRECATED\"]=\"DEPRECATED\",n),e.ResourceDescriptor=(w.prototype.type=\"\",w.prototype.pattern=i.emptyArray,w.prototype.nameField=\"\",w.prototype.history=0,w.prototype.plural=\"\",w.prototype.singular=\"\",w.prototype.style=i.emptyArray,w.fromObject=function(e){if(e instanceof a.google.api.ResourceDescriptor)return e;var t=new a.google.api.ResourceDescriptor;if(null!=e.type&&(t.type=String(e.type)),e.pattern){if(!Array.isArray(e.pattern))throw TypeError(\".google.api.ResourceDescriptor.pattern: array expected\");t.pattern=[];for(var o=0;o<e.pattern.length;++o)t.pattern[o]=String(e.pattern[o])}switch(null!=e.nameField&&(t.nameField=String(e.nameField)),e.history){default:\"number\"==typeof e.history&&(t.history=e.history);break;case\"HISTORY_UNSPECIFIED\":case 0:t.history=0;break;case\"ORIGINALLY_SINGLE_PATTERN\":case 1:t.history=1;break;case\"FUTURE_MULTI_PATTERN\":case 2:t.history=2}if(null!=e.plural&&(t.plural=String(e.plural)),null!=e.singular&&(t.singular=String(e.singular)),e.style){if(!Array.isArray(e.style))throw TypeError(\".google.api.ResourceDescriptor.style: array expected\");t.style=[];for(o=0;o<e.style.length;++o)switch(e.style[o]){default:if(\"number\"==typeof e.style[o]){t.style[o]=e.style[o];break}case\"STYLE_UNSPECIFIED\":case 0:t.style[o]=0;break;case\"DECLARATIVE_FRIENDLY\":case 1:t.style[o]=1}}return t},w.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.pattern=[],o.style=[]),t.defaults&&(o.type=\"\",o.nameField=\"\",o.history=t.enums===String?\"HISTORY_UNSPECIFIED\":0,o.plural=\"\",o.singular=\"\"),null!=e.type&&e.hasOwnProperty(\"type\")&&(o.type=e.type),e.pattern&&e.pattern.length){o.pattern=[];for(var r=0;r<e.pattern.length;++r)o.pattern[r]=e.pattern[r]}if(null!=e.nameField&&e.hasOwnProperty(\"nameField\")&&(o.nameField=e.nameField),null!=e.history&&e.hasOwnProperty(\"history\")&&(o.history=t.enums!==String||void 0===a.google.api.ResourceDescriptor.History[e.history]?e.history:a.google.api.ResourceDescriptor.History[e.history]),null!=e.plural&&e.hasOwnProperty(\"plural\")&&(o.plural=e.plural),null!=e.singular&&e.hasOwnProperty(\"singular\")&&(o.singular=e.singular),e.style&&e.style.length){o.style=[];for(r=0;r<e.style.length;++r)o.style[r]=t.enums!==String||void 0===a.google.api.ResourceDescriptor.Style[e.style[r]]?e.style[r]:a.google.api.ResourceDescriptor.Style[e.style[r]]}return o},w.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},w.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.ResourceDescriptor\"},w.History=(o={},(n=Object.create(o))[o[0]=\"HISTORY_UNSPECIFIED\"]=\"HISTORY_UNSPECIFIED\",n[o[1]=\"ORIGINALLY_SINGLE_PATTERN\"]=\"ORIGINALLY_SINGLE_PATTERN\",n[o[2]=\"FUTURE_MULTI_PATTERN\"]=\"FUTURE_MULTI_PATTERN\",n),w.Style=(o={},(n=Object.create(o))[o[0]=\"STYLE_UNSPECIFIED\"]=\"STYLE_UNSPECIFIED\",n[o[1]=\"DECLARATIVE_FRIENDLY\"]=\"DECLARATIVE_FRIENDLY\",n),w),e.ResourceReference=(at.prototype.type=\"\",at.prototype.childType=\"\",at.fromObject=function(e){var t;return e instanceof a.google.api.ResourceReference?e:(t=new a.google.api.ResourceReference,null!=e.type&&(t.type=String(e.type)),null!=e.childType&&(t.childType=String(e.childType)),t)},at.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.type=\"\",o.childType=\"\"),null!=e.type&&e.hasOwnProperty(\"type\")&&(o.type=e.type),null!=e.childType&&e.hasOwnProperty(\"childType\")&&(o.childType=e.childType),o},at.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},at.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.api.ResourceReference\"},at),e),C.protobuf=((t={}).FileDescriptorSet=(st.prototype.file=i.emptyArray,st.fromObject=function(e){if(e instanceof a.google.protobuf.FileDescriptorSet)return e;var t=new a.google.protobuf.FileDescriptorSet;if(e.file){if(!Array.isArray(e.file))throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");t.file=[];for(var o=0;o<e.file.length;++o){if(\"object\"!=typeof e.file[o])throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");t.file[o]=a.google.protobuf.FileDescriptorProto.fromObject(e.file[o])}}return t},st.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.file=[]),e.file&&e.file.length){o.file=[];for(var r=0;r<e.file.length;++r)o.file[r]=a.google.protobuf.FileDescriptorProto.toObject(e.file[r],t)}return o},st.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},st.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.FileDescriptorSet\"},st),t.Edition=(o={},(n=Object.create(o))[o[0]=\"EDITION_UNKNOWN\"]=\"EDITION_UNKNOWN\",n[o[998]=\"EDITION_PROTO2\"]=\"EDITION_PROTO2\",n[o[999]=\"EDITION_PROTO3\"]=\"EDITION_PROTO3\",n[o[1e3]=\"EDITION_2023\"]=\"EDITION_2023\",n[o[1001]=\"EDITION_2024\"]=\"EDITION_2024\",n[o[1]=\"EDITION_1_TEST_ONLY\"]=\"EDITION_1_TEST_ONLY\",n[o[2]=\"EDITION_2_TEST_ONLY\"]=\"EDITION_2_TEST_ONLY\",n[o[99997]=\"EDITION_99997_TEST_ONLY\"]=\"EDITION_99997_TEST_ONLY\",n[o[99998]=\"EDITION_99998_TEST_ONLY\"]=\"EDITION_99998_TEST_ONLY\",n[o[99999]=\"EDITION_99999_TEST_ONLY\"]=\"EDITION_99999_TEST_ONLY\",n[o[2147483647]=\"EDITION_MAX\"]=\"EDITION_MAX\",n),t.FileDescriptorProto=(N.prototype.name=\"\",N.prototype.package=\"\",N.prototype.dependency=i.emptyArray,N.prototype.publicDependency=i.emptyArray,N.prototype.weakDependency=i.emptyArray,N.prototype.messageType=i.emptyArray,N.prototype.enumType=i.emptyArray,N.prototype.service=i.emptyArray,N.prototype.extension=i.emptyArray,N.prototype.options=null,N.prototype.sourceCodeInfo=null,N.prototype.syntax=\"\",N.prototype.edition=0,N.fromObject=function(e){if(e instanceof a.google.protobuf.FileDescriptorProto)return e;var t=new a.google.protobuf.FileDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.package&&(t.package=String(e.package)),e.dependency){if(!Array.isArray(e.dependency))throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");t.dependency=[];for(var o=0;o<e.dependency.length;++o)t.dependency[o]=String(e.dependency[o])}if(e.publicDependency){if(!Array.isArray(e.publicDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");t.publicDependency=[];for(o=0;o<e.publicDependency.length;++o)t.publicDependency[o]=0|e.publicDependency[o]}if(e.weakDependency){if(!Array.isArray(e.weakDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");t.weakDependency=[];for(o=0;o<e.weakDependency.length;++o)t.weakDependency[o]=0|e.weakDependency[o]}if(e.messageType){if(!Array.isArray(e.messageType))throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");t.messageType=[];for(o=0;o<e.messageType.length;++o){if(\"object\"!=typeof e.messageType[o])throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");t.messageType[o]=a.google.protobuf.DescriptorProto.fromObject(e.messageType[o])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");t.enumType=[];for(o=0;o<e.enumType.length;++o){if(\"object\"!=typeof e.enumType[o])throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");t.enumType[o]=a.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[o])}}if(e.service){if(!Array.isArray(e.service))throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");t.service=[];for(o=0;o<e.service.length;++o){if(\"object\"!=typeof e.service[o])throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");t.service[o]=a.google.protobuf.ServiceDescriptorProto.fromObject(e.service[o])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");t.extension=[];for(o=0;o<e.extension.length;++o){if(\"object\"!=typeof e.extension[o])throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");t.extension[o]=a.google.protobuf.FieldDescriptorProto.fromObject(e.extension[o])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");t.options=a.google.protobuf.FileOptions.fromObject(e.options)}if(null!=e.sourceCodeInfo){if(\"object\"!=typeof e.sourceCodeInfo)throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");t.sourceCodeInfo=a.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo)}switch(null!=e.syntax&&(t.syntax=String(e.syntax)),e.edition){default:\"number\"==typeof e.edition&&(t.edition=e.edition);break;case\"EDITION_UNKNOWN\":case 0:t.edition=0;break;case\"EDITION_PROTO2\":case 998:t.edition=998;break;case\"EDITION_PROTO3\":case 999:t.edition=999;break;case\"EDITION_2023\":case 1e3:t.edition=1e3;break;case\"EDITION_2024\":case 1001:t.edition=1001;break;case\"EDITION_1_TEST_ONLY\":case 1:t.edition=1;break;case\"EDITION_2_TEST_ONLY\":case 2:t.edition=2;break;case\"EDITION_99997_TEST_ONLY\":case 99997:t.edition=99997;break;case\"EDITION_99998_TEST_ONLY\":case 99998:t.edition=99998;break;case\"EDITION_99999_TEST_ONLY\":case 99999:t.edition=99999;break;case\"EDITION_MAX\":case 2147483647:t.edition=2147483647}return t},N.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.dependency=[],o.messageType=[],o.enumType=[],o.service=[],o.extension=[],o.publicDependency=[],o.weakDependency=[]),t.defaults&&(o.name=\"\",o.package=\"\",o.options=null,o.sourceCodeInfo=null,o.syntax=\"\",o.edition=t.enums===String?\"EDITION_UNKNOWN\":0),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),null!=e.package&&e.hasOwnProperty(\"package\")&&(o.package=e.package),e.dependency&&e.dependency.length){o.dependency=[];for(var r=0;r<e.dependency.length;++r)o.dependency[r]=e.dependency[r]}if(e.messageType&&e.messageType.length){o.messageType=[];for(r=0;r<e.messageType.length;++r)o.messageType[r]=a.google.protobuf.DescriptorProto.toObject(e.messageType[r],t)}if(e.enumType&&e.enumType.length){o.enumType=[];for(r=0;r<e.enumType.length;++r)o.enumType[r]=a.google.protobuf.EnumDescriptorProto.toObject(e.enumType[r],t)}if(e.service&&e.service.length){o.service=[];for(r=0;r<e.service.length;++r)o.service[r]=a.google.protobuf.ServiceDescriptorProto.toObject(e.service[r],t)}if(e.extension&&e.extension.length){o.extension=[];for(r=0;r<e.extension.length;++r)o.extension[r]=a.google.protobuf.FieldDescriptorProto.toObject(e.extension[r],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(o.options=a.google.protobuf.FileOptions.toObject(e.options,t)),null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(o.sourceCodeInfo=a.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo,t)),e.publicDependency&&e.publicDependency.length){o.publicDependency=[];for(r=0;r<e.publicDependency.length;++r)o.publicDependency[r]=e.publicDependency[r]}if(e.weakDependency&&e.weakDependency.length){o.weakDependency=[];for(r=0;r<e.weakDependency.length;++r)o.weakDependency[r]=e.weakDependency[r]}return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&(o.syntax=e.syntax),null!=e.edition&&e.hasOwnProperty(\"edition\")&&(o.edition=t.enums!==String||void 0===a.google.protobuf.Edition[e.edition]?e.edition:a.google.protobuf.Edition[e.edition]),o},N.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},N.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.FileDescriptorProto\"},N),t.DescriptorProto=(P.prototype.name=\"\",P.prototype.field=i.emptyArray,P.prototype.extension=i.emptyArray,P.prototype.nestedType=i.emptyArray,P.prototype.enumType=i.emptyArray,P.prototype.extensionRange=i.emptyArray,P.prototype.oneofDecl=i.emptyArray,P.prototype.options=null,P.prototype.reservedRange=i.emptyArray,P.prototype.reservedName=i.emptyArray,P.fromObject=function(e){if(e instanceof a.google.protobuf.DescriptorProto)return e;var t=new a.google.protobuf.DescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.field){if(!Array.isArray(e.field))throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");t.field=[];for(var o=0;o<e.field.length;++o){if(\"object\"!=typeof e.field[o])throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");t.field[o]=a.google.protobuf.FieldDescriptorProto.fromObject(e.field[o])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");t.extension=[];for(o=0;o<e.extension.length;++o){if(\"object\"!=typeof e.extension[o])throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");t.extension[o]=a.google.protobuf.FieldDescriptorProto.fromObject(e.extension[o])}}if(e.nestedType){if(!Array.isArray(e.nestedType))throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");t.nestedType=[];for(o=0;o<e.nestedType.length;++o){if(\"object\"!=typeof e.nestedType[o])throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");t.nestedType[o]=a.google.protobuf.DescriptorProto.fromObject(e.nestedType[o])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");t.enumType=[];for(o=0;o<e.enumType.length;++o){if(\"object\"!=typeof e.enumType[o])throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");t.enumType[o]=a.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[o])}}if(e.extensionRange){if(!Array.isArray(e.extensionRange))throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");t.extensionRange=[];for(o=0;o<e.extensionRange.length;++o){if(\"object\"!=typeof e.extensionRange[o])throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");t.extensionRange[o]=a.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[o])}}if(e.oneofDecl){if(!Array.isArray(e.oneofDecl))throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");t.oneofDecl=[];for(o=0;o<e.oneofDecl.length;++o){if(\"object\"!=typeof e.oneofDecl[o])throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");t.oneofDecl[o]=a.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[o])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");t.options=a.google.protobuf.MessageOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(o=0;o<e.reservedRange.length;++o){if(\"object\"!=typeof e.reservedRange[o])throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");t.reservedRange[o]=a.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[o])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");t.reservedName=[];for(o=0;o<e.reservedName.length;++o)t.reservedName[o]=String(e.reservedName[o])}return t},P.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.field=[],o.nestedType=[],o.enumType=[],o.extensionRange=[],o.extension=[],o.oneofDecl=[],o.reservedRange=[],o.reservedName=[]),t.defaults&&(o.name=\"\",o.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),e.field&&e.field.length){o.field=[];for(var r=0;r<e.field.length;++r)o.field[r]=a.google.protobuf.FieldDescriptorProto.toObject(e.field[r],t)}if(e.nestedType&&e.nestedType.length){o.nestedType=[];for(r=0;r<e.nestedType.length;++r)o.nestedType[r]=a.google.protobuf.DescriptorProto.toObject(e.nestedType[r],t)}if(e.enumType&&e.enumType.length){o.enumType=[];for(r=0;r<e.enumType.length;++r)o.enumType[r]=a.google.protobuf.EnumDescriptorProto.toObject(e.enumType[r],t)}if(e.extensionRange&&e.extensionRange.length){o.extensionRange=[];for(r=0;r<e.extensionRange.length;++r)o.extensionRange[r]=a.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[r],t)}if(e.extension&&e.extension.length){o.extension=[];for(r=0;r<e.extension.length;++r)o.extension[r]=a.google.protobuf.FieldDescriptorProto.toObject(e.extension[r],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(o.options=a.google.protobuf.MessageOptions.toObject(e.options,t)),e.oneofDecl&&e.oneofDecl.length){o.oneofDecl=[];for(r=0;r<e.oneofDecl.length;++r)o.oneofDecl[r]=a.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[r],t)}if(e.reservedRange&&e.reservedRange.length){o.reservedRange=[];for(r=0;r<e.reservedRange.length;++r)o.reservedRange[r]=a.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[r],t)}if(e.reservedName&&e.reservedName.length){o.reservedName=[];for(r=0;r<e.reservedName.length;++r)o.reservedName[r]=e.reservedName[r]}return o},P.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},P.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.DescriptorProto\"},P.ExtensionRange=(lt.prototype.start=0,lt.prototype.end=0,lt.prototype.options=null,lt.fromObject=function(e){if(e instanceof a.google.protobuf.DescriptorProto.ExtensionRange)return e;var t=new a.google.protobuf.DescriptorProto.ExtensionRange;if(null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");t.options=a.google.protobuf.ExtensionRangeOptions.fromObject(e.options)}return t},lt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.start=0,o.end=0,o.options=null),null!=e.start&&e.hasOwnProperty(\"start\")&&(o.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(o.end=e.end),null!=e.options&&e.hasOwnProperty(\"options\")&&(o.options=a.google.protobuf.ExtensionRangeOptions.toObject(e.options,t)),o},lt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},lt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.DescriptorProto.ExtensionRange\"},lt),P.ReservedRange=(ut.prototype.start=0,ut.prototype.end=0,ut.fromObject=function(e){var t;return e instanceof a.google.protobuf.DescriptorProto.ReservedRange?e:(t=new a.google.protobuf.DescriptorProto.ReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},ut.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.start=0,o.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(o.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(o.end=e.end),o},ut.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ut.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.DescriptorProto.ReservedRange\"},ut),P),t.ExtensionRangeOptions=(pt.prototype.uninterpretedOption=i.emptyArray,pt.prototype.declaration=i.emptyArray,pt.prototype.features=null,pt.prototype.verification=1,pt.fromObject=function(e){if(e instanceof a.google.protobuf.ExtensionRangeOptions)return e;var t=new a.google.protobuf.ExtensionRangeOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o){if(\"object\"!=typeof e.uninterpretedOption[o])throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");t.uninterpretedOption[o]=a.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[o])}}if(e.declaration){if(!Array.isArray(e.declaration))throw TypeError(\".google.protobuf.ExtensionRangeOptions.declaration: array expected\");t.declaration=[];for(o=0;o<e.declaration.length;++o){if(\"object\"!=typeof e.declaration[o])throw TypeError(\".google.protobuf.ExtensionRangeOptions.declaration: object expected\");t.declaration[o]=a.google.protobuf.ExtensionRangeOptions.Declaration.fromObject(e.declaration[o])}}if(null!=e.features){if(\"object\"!=typeof e.features)throw TypeError(\".google.protobuf.ExtensionRangeOptions.features: object expected\");t.features=a.google.protobuf.FeatureSet.fromObject(e.features)}switch(e.verification){case\"DECLARATION\":case 0:t.verification=0;break;default:\"number\"==typeof e.verification&&(t.verification=e.verification);break;case\"UNVERIFIED\":case 1:t.verification=1}return t},pt.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.declaration=[],o.uninterpretedOption=[]),t.defaults&&(o.verification=t.enums===String?\"UNVERIFIED\":1,o.features=null),e.declaration&&e.declaration.length){o.declaration=[];for(var r=0;r<e.declaration.length;++r)o.declaration[r]=a.google.protobuf.ExtensionRangeOptions.Declaration.toObject(e.declaration[r],t)}if(null!=e.verification&&e.hasOwnProperty(\"verification\")&&(o.verification=t.enums!==String||void 0===a.google.protobuf.ExtensionRangeOptions.VerificationState[e.verification]?e.verification:a.google.protobuf.ExtensionRangeOptions.VerificationState[e.verification]),null!=e.features&&e.hasOwnProperty(\"features\")&&(o.features=a.google.protobuf.FeatureSet.toObject(e.features,t)),e.uninterpretedOption&&e.uninterpretedOption.length){o.uninterpretedOption=[];for(r=0;r<e.uninterpretedOption.length;++r)o.uninterpretedOption[r]=a.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[r],t)}return o},pt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},pt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.ExtensionRangeOptions\"},pt.Declaration=(ct.prototype.number=0,ct.prototype.fullName=\"\",ct.prototype.type=\"\",ct.prototype.reserved=!1,ct.prototype.repeated=!1,ct.fromObject=function(e){var t;return e instanceof a.google.protobuf.ExtensionRangeOptions.Declaration?e:(t=new a.google.protobuf.ExtensionRangeOptions.Declaration,null!=e.number&&(t.number=0|e.number),null!=e.fullName&&(t.fullName=String(e.fullName)),null!=e.type&&(t.type=String(e.type)),null!=e.reserved&&(t.reserved=Boolean(e.reserved)),null!=e.repeated&&(t.repeated=Boolean(e.repeated)),t)},ct.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.number=0,o.fullName=\"\",o.type=\"\",o.reserved=!1,o.repeated=!1),null!=e.number&&e.hasOwnProperty(\"number\")&&(o.number=e.number),null!=e.fullName&&e.hasOwnProperty(\"fullName\")&&(o.fullName=e.fullName),null!=e.type&&e.hasOwnProperty(\"type\")&&(o.type=e.type),null!=e.reserved&&e.hasOwnProperty(\"reserved\")&&(o.reserved=e.reserved),null!=e.repeated&&e.hasOwnProperty(\"repeated\")&&(o.repeated=e.repeated),o},ct.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ct.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.ExtensionRangeOptions.Declaration\"},ct),pt.VerificationState=(o={},(n=Object.create(o))[o[0]=\"DECLARATION\"]=\"DECLARATION\",n[o[1]=\"UNVERIFIED\"]=\"UNVERIFIED\",n),pt),t.FieldDescriptorProto=(R.prototype.name=\"\",R.prototype.number=0,R.prototype.label=1,R.prototype.type=1,R.prototype.typeName=\"\",R.prototype.extendee=\"\",R.prototype.defaultValue=\"\",R.prototype.oneofIndex=0,R.prototype.jsonName=\"\",R.prototype.options=null,R.prototype.proto3Optional=!1,R.fromObject=function(e){if(e instanceof a.google.protobuf.FieldDescriptorProto)return e;var t=new a.google.protobuf.FieldDescriptorProto;switch(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),e.label){default:\"number\"==typeof e.label&&(t.label=e.label);break;case\"LABEL_OPTIONAL\":case 1:t.label=1;break;case\"LABEL_REPEATED\":case 3:t.label=3;break;case\"LABEL_REQUIRED\":case 2:t.label=2}switch(e.type){default:\"number\"==typeof e.type&&(t.type=e.type);break;case\"TYPE_DOUBLE\":case 1:t.type=1;break;case\"TYPE_FLOAT\":case 2:t.type=2;break;case\"TYPE_INT64\":case 3:t.type=3;break;case\"TYPE_UINT64\":case 4:t.type=4;break;case\"TYPE_INT32\":case 5:t.type=5;break;case\"TYPE_FIXED64\":case 6:t.type=6;break;case\"TYPE_FIXED32\":case 7:t.type=7;break;case\"TYPE_BOOL\":case 8:t.type=8;break;case\"TYPE_STRING\":case 9:t.type=9;break;case\"TYPE_GROUP\":case 10:t.type=10;break;case\"TYPE_MESSAGE\":case 11:t.type=11;break;case\"TYPE_BYTES\":case 12:t.type=12;break;case\"TYPE_UINT32\":case 13:t.type=13;break;case\"TYPE_ENUM\":case 14:t.type=14;break;case\"TYPE_SFIXED32\":case 15:t.type=15;break;case\"TYPE_SFIXED64\":case 16:t.type=16;break;case\"TYPE_SINT32\":case 17:t.type=17;break;case\"TYPE_SINT64\":case 18:t.type=18}if(null!=e.typeName&&(t.typeName=String(e.typeName)),null!=e.extendee&&(t.extendee=String(e.extendee)),null!=e.defaultValue&&(t.defaultValue=String(e.defaultValue)),null!=e.oneofIndex&&(t.oneofIndex=0|e.oneofIndex),null!=e.jsonName&&(t.jsonName=String(e.jsonName)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");t.options=a.google.protobuf.FieldOptions.fromObject(e.options)}return null!=e.proto3Optional&&(t.proto3Optional=Boolean(e.proto3Optional)),t},R.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.name=\"\",o.extendee=\"\",o.number=0,o.label=t.enums===String?\"LABEL_OPTIONAL\":1,o.type=t.enums===String?\"TYPE_DOUBLE\":1,o.typeName=\"\",o.defaultValue=\"\",o.options=null,o.oneofIndex=0,o.jsonName=\"\",o.proto3Optional=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&(o.extendee=e.extendee),null!=e.number&&e.hasOwnProperty(\"number\")&&(o.number=e.number),null!=e.label&&e.hasOwnProperty(\"label\")&&(o.label=t.enums!==String||void 0===a.google.protobuf.FieldDescriptorProto.Label[e.label]?e.label:a.google.protobuf.FieldDescriptorProto.Label[e.label]),null!=e.type&&e.hasOwnProperty(\"type\")&&(o.type=t.enums!==String||void 0===a.google.protobuf.FieldDescriptorProto.Type[e.type]?e.type:a.google.protobuf.FieldDescriptorProto.Type[e.type]),null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&(o.typeName=e.typeName),null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&(o.defaultValue=e.defaultValue),null!=e.options&&e.hasOwnProperty(\"options\")&&(o.options=a.google.protobuf.FieldOptions.toObject(e.options,t)),null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&(o.oneofIndex=e.oneofIndex),null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&(o.jsonName=e.jsonName),null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&(o.proto3Optional=e.proto3Optional),o},R.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},R.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.FieldDescriptorProto\"},R.Type=(o={},(n=Object.create(o))[o[1]=\"TYPE_DOUBLE\"]=\"TYPE_DOUBLE\",n[o[2]=\"TYPE_FLOAT\"]=\"TYPE_FLOAT\",n[o[3]=\"TYPE_INT64\"]=\"TYPE_INT64\",n[o[4]=\"TYPE_UINT64\"]=\"TYPE_UINT64\",n[o[5]=\"TYPE_INT32\"]=\"TYPE_INT32\",n[o[6]=\"TYPE_FIXED64\"]=\"TYPE_FIXED64\",n[o[7]=\"TYPE_FIXED32\"]=\"TYPE_FIXED32\",n[o[8]=\"TYPE_BOOL\"]=\"TYPE_BOOL\",n[o[9]=\"TYPE_STRING\"]=\"TYPE_STRING\",n[o[10]=\"TYPE_GROUP\"]=\"TYPE_GROUP\",n[o[11]=\"TYPE_MESSAGE\"]=\"TYPE_MESSAGE\",n[o[12]=\"TYPE_BYTES\"]=\"TYPE_BYTES\",n[o[13]=\"TYPE_UINT32\"]=\"TYPE_UINT32\",n[o[14]=\"TYPE_ENUM\"]=\"TYPE_ENUM\",n[o[15]=\"TYPE_SFIXED32\"]=\"TYPE_SFIXED32\",n[o[16]=\"TYPE_SFIXED64\"]=\"TYPE_SFIXED64\",n[o[17]=\"TYPE_SINT32\"]=\"TYPE_SINT32\",n[o[18]=\"TYPE_SINT64\"]=\"TYPE_SINT64\",n),R.Label=(o={},(n=Object.create(o))[o[1]=\"LABEL_OPTIONAL\"]=\"LABEL_OPTIONAL\",n[o[3]=\"LABEL_REPEATED\"]=\"LABEL_REPEATED\",n[o[2]=\"LABEL_REQUIRED\"]=\"LABEL_REQUIRED\",n),R),t.OneofDescriptorProto=(gt.prototype.name=\"\",gt.prototype.options=null,gt.fromObject=function(e){if(e instanceof a.google.protobuf.OneofDescriptorProto)return e;var t=new a.google.protobuf.OneofDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");t.options=a.google.protobuf.OneofOptions.fromObject(e.options)}return t},gt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.name=\"\",o.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),null!=e.options&&e.hasOwnProperty(\"options\")&&(o.options=a.google.protobuf.OneofOptions.toObject(e.options,t)),o},gt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},gt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.OneofDescriptorProto\"},gt),t.EnumDescriptorProto=(ft.prototype.name=\"\",ft.prototype.value=i.emptyArray,ft.prototype.options=null,ft.prototype.reservedRange=i.emptyArray,ft.prototype.reservedName=i.emptyArray,ft.fromObject=function(e){if(e instanceof a.google.protobuf.EnumDescriptorProto)return e;var t=new a.google.protobuf.EnumDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.value){if(!Array.isArray(e.value))throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");t.value=[];for(var o=0;o<e.value.length;++o){if(\"object\"!=typeof e.value[o])throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");t.value[o]=a.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[o])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");t.options=a.google.protobuf.EnumOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(o=0;o<e.reservedRange.length;++o){if(\"object\"!=typeof e.reservedRange[o])throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");t.reservedRange[o]=a.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[o])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");t.reservedName=[];for(o=0;o<e.reservedName.length;++o)t.reservedName[o]=String(e.reservedName[o])}return t},ft.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.value=[],o.reservedRange=[],o.reservedName=[]),t.defaults&&(o.name=\"\",o.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),e.value&&e.value.length){o.value=[];for(var r=0;r<e.value.length;++r)o.value[r]=a.google.protobuf.EnumValueDescriptorProto.toObject(e.value[r],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(o.options=a.google.protobuf.EnumOptions.toObject(e.options,t)),e.reservedRange&&e.reservedRange.length){o.reservedRange=[];for(r=0;r<e.reservedRange.length;++r)o.reservedRange[r]=a.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[r],t)}if(e.reservedName&&e.reservedName.length){o.reservedName=[];for(r=0;r<e.reservedName.length;++r)o.reservedName[r]=e.reservedName[r]}return o},ft.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ft.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.EnumDescriptorProto\"},ft.EnumReservedRange=(dt.prototype.start=0,dt.prototype.end=0,dt.fromObject=function(e){var t;return e instanceof a.google.protobuf.EnumDescriptorProto.EnumReservedRange?e:(t=new a.google.protobuf.EnumDescriptorProto.EnumReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},dt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.start=0,o.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(o.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(o.end=e.end),o},dt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},dt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.EnumDescriptorProto.EnumReservedRange\"},dt),ft),t.EnumValueDescriptorProto=(yt.prototype.name=\"\",yt.prototype.number=0,yt.prototype.options=null,yt.fromObject=function(e){if(e instanceof a.google.protobuf.EnumValueDescriptorProto)return e;var t=new a.google.protobuf.EnumValueDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");t.options=a.google.protobuf.EnumValueOptions.fromObject(e.options)}return t},yt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.name=\"\",o.number=0,o.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),null!=e.number&&e.hasOwnProperty(\"number\")&&(o.number=e.number),null!=e.options&&e.hasOwnProperty(\"options\")&&(o.options=a.google.protobuf.EnumValueOptions.toObject(e.options,t)),o},yt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},yt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.EnumValueDescriptorProto\"},yt),t.ServiceDescriptorProto=(mt.prototype.name=\"\",mt.prototype.method=i.emptyArray,mt.prototype.options=null,mt.fromObject=function(e){if(e instanceof a.google.protobuf.ServiceDescriptorProto)return e;var t=new a.google.protobuf.ServiceDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.method){if(!Array.isArray(e.method))throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");t.method=[];for(var o=0;o<e.method.length;++o){if(\"object\"!=typeof e.method[o])throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");t.method[o]=a.google.protobuf.MethodDescriptorProto.fromObject(e.method[o])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");t.options=a.google.protobuf.ServiceOptions.fromObject(e.options)}return t},mt.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.method=[]),t.defaults&&(o.name=\"\",o.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),e.method&&e.method.length){o.method=[];for(var r=0;r<e.method.length;++r)o.method[r]=a.google.protobuf.MethodDescriptorProto.toObject(e.method[r],t)}return null!=e.options&&e.hasOwnProperty(\"options\")&&(o.options=a.google.protobuf.ServiceOptions.toObject(e.options,t)),o},mt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},mt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.ServiceDescriptorProto\"},mt),t.MethodDescriptorProto=(bt.prototype.name=\"\",bt.prototype.inputType=\"\",bt.prototype.outputType=\"\",bt.prototype.options=null,bt.prototype.clientStreaming=!1,bt.prototype.serverStreaming=!1,bt.fromObject=function(e){if(e instanceof a.google.protobuf.MethodDescriptorProto)return e;var t=new a.google.protobuf.MethodDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.inputType&&(t.inputType=String(e.inputType)),null!=e.outputType&&(t.outputType=String(e.outputType)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");t.options=a.google.protobuf.MethodOptions.fromObject(e.options)}return null!=e.clientStreaming&&(t.clientStreaming=Boolean(e.clientStreaming)),null!=e.serverStreaming&&(t.serverStreaming=Boolean(e.serverStreaming)),t},bt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.name=\"\",o.inputType=\"\",o.outputType=\"\",o.options=null,o.clientStreaming=!1,o.serverStreaming=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&(o.inputType=e.inputType),null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&(o.outputType=e.outputType),null!=e.options&&e.hasOwnProperty(\"options\")&&(o.options=a.google.protobuf.MethodOptions.toObject(e.options,t)),null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&(o.clientStreaming=e.clientStreaming),null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&(o.serverStreaming=e.serverStreaming),o},bt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},bt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.MethodDescriptorProto\"},bt),t.FileOptions=(D.prototype.javaPackage=\"\",D.prototype.javaOuterClassname=\"\",D.prototype.javaMultipleFiles=!1,D.prototype.javaGenerateEqualsAndHash=!1,D.prototype.javaStringCheckUtf8=!1,D.prototype.optimizeFor=1,D.prototype.goPackage=\"\",D.prototype.ccGenericServices=!1,D.prototype.javaGenericServices=!1,D.prototype.pyGenericServices=!1,D.prototype.deprecated=!1,D.prototype.ccEnableArenas=!0,D.prototype.objcClassPrefix=\"\",D.prototype.csharpNamespace=\"\",D.prototype.swiftPrefix=\"\",D.prototype.phpClassPrefix=\"\",D.prototype.phpNamespace=\"\",D.prototype.phpMetadataNamespace=\"\",D.prototype.rubyPackage=\"\",D.prototype.features=null,D.prototype.uninterpretedOption=i.emptyArray,D.prototype[\".google.api.resourceDefinition\"]=i.emptyArray,D.fromObject=function(e){if(e instanceof a.google.protobuf.FileOptions)return e;var t=new a.google.protobuf.FileOptions;switch(null!=e.javaPackage&&(t.javaPackage=String(e.javaPackage)),null!=e.javaOuterClassname&&(t.javaOuterClassname=String(e.javaOuterClassname)),null!=e.javaMultipleFiles&&(t.javaMultipleFiles=Boolean(e.javaMultipleFiles)),null!=e.javaGenerateEqualsAndHash&&(t.javaGenerateEqualsAndHash=Boolean(e.javaGenerateEqualsAndHash)),null!=e.javaStringCheckUtf8&&(t.javaStringCheckUtf8=Boolean(e.javaStringCheckUtf8)),e.optimizeFor){default:\"number\"==typeof e.optimizeFor&&(t.optimizeFor=e.optimizeFor);break;case\"SPEED\":case 1:t.optimizeFor=1;break;case\"CODE_SIZE\":case 2:t.optimizeFor=2;break;case\"LITE_RUNTIME\":case 3:t.optimizeFor=3}if(null!=e.goPackage&&(t.goPackage=String(e.goPackage)),null!=e.ccGenericServices&&(t.ccGenericServices=Boolean(e.ccGenericServices)),null!=e.javaGenericServices&&(t.javaGenericServices=Boolean(e.javaGenericServices)),null!=e.pyGenericServices&&(t.pyGenericServices=Boolean(e.pyGenericServices)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.ccEnableArenas&&(t.ccEnableArenas=Boolean(e.ccEnableArenas)),null!=e.objcClassPrefix&&(t.objcClassPrefix=String(e.objcClassPrefix)),null!=e.csharpNamespace&&(t.csharpNamespace=String(e.csharpNamespace)),null!=e.swiftPrefix&&(t.swiftPrefix=String(e.swiftPrefix)),null!=e.phpClassPrefix&&(t.phpClassPrefix=String(e.phpClassPrefix)),null!=e.phpNamespace&&(t.phpNamespace=String(e.phpNamespace)),null!=e.phpMetadataNamespace&&(t.phpMetadataNamespace=String(e.phpMetadataNamespace)),null!=e.rubyPackage&&(t.rubyPackage=String(e.rubyPackage)),null!=e.features){if(\"object\"!=typeof e.features)throw TypeError(\".google.protobuf.FileOptions.features: object expected\");t.features=a.google.protobuf.FeatureSet.fromObject(e.features)}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o){if(\"object\"!=typeof e.uninterpretedOption[o])throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");t.uninterpretedOption[o]=a.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[o])}}if(e[\".google.api.resourceDefinition\"]){if(!Array.isArray(e[\".google.api.resourceDefinition\"]))throw TypeError(\".google.protobuf.FileOptions..google.api.resourceDefinition: array expected\");t[\".google.api.resourceDefinition\"]=[];for(o=0;o<e[\".google.api.resourceDefinition\"].length;++o){if(\"object\"!=typeof e[\".google.api.resourceDefinition\"][o])throw TypeError(\".google.protobuf.FileOptions..google.api.resourceDefinition: object expected\");t[\".google.api.resourceDefinition\"][o]=a.google.api.ResourceDescriptor.fromObject(e[\".google.api.resourceDefinition\"][o])}}return t},D.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.uninterpretedOption=[],o[\".google.api.resourceDefinition\"]=[]),t.defaults&&(o.javaPackage=\"\",o.javaOuterClassname=\"\",o.optimizeFor=t.enums===String?\"SPEED\":1,o.javaMultipleFiles=!1,o.goPackage=\"\",o.ccGenericServices=!1,o.javaGenericServices=!1,o.pyGenericServices=!1,o.javaGenerateEqualsAndHash=!1,o.deprecated=!1,o.javaStringCheckUtf8=!1,o.ccEnableArenas=!0,o.objcClassPrefix=\"\",o.csharpNamespace=\"\",o.swiftPrefix=\"\",o.phpClassPrefix=\"\",o.phpNamespace=\"\",o.phpMetadataNamespace=\"\",o.rubyPackage=\"\",o.features=null),null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&(o.javaPackage=e.javaPackage),null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&(o.javaOuterClassname=e.javaOuterClassname),null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\")&&(o.optimizeFor=t.enums!==String||void 0===a.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor]?e.optimizeFor:a.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor]),null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&(o.javaMultipleFiles=e.javaMultipleFiles),null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&(o.goPackage=e.goPackage),null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&(o.ccGenericServices=e.ccGenericServices),null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&(o.javaGenericServices=e.javaGenericServices),null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&(o.pyGenericServices=e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&(o.javaGenerateEqualsAndHash=e.javaGenerateEqualsAndHash),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(o.deprecated=e.deprecated),null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&(o.javaStringCheckUtf8=e.javaStringCheckUtf8),null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&(o.ccEnableArenas=e.ccEnableArenas),null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&(o.objcClassPrefix=e.objcClassPrefix),null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&(o.csharpNamespace=e.csharpNamespace),null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&(o.swiftPrefix=e.swiftPrefix),null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&(o.phpClassPrefix=e.phpClassPrefix),null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&(o.phpNamespace=e.phpNamespace),null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&(o.phpMetadataNamespace=e.phpMetadataNamespace),null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&(o.rubyPackage=e.rubyPackage),null!=e.features&&e.hasOwnProperty(\"features\")&&(o.features=a.google.protobuf.FeatureSet.toObject(e.features,t)),e.uninterpretedOption&&e.uninterpretedOption.length){o.uninterpretedOption=[];for(var r=0;r<e.uninterpretedOption.length;++r)o.uninterpretedOption[r]=a.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[r],t)}if(e[\".google.api.resourceDefinition\"]&&e[\".google.api.resourceDefinition\"].length){o[\".google.api.resourceDefinition\"]=[];for(r=0;r<e[\".google.api.resourceDefinition\"].length;++r)o[\".google.api.resourceDefinition\"][r]=a.google.api.ResourceDescriptor.toObject(e[\".google.api.resourceDefinition\"][r],t)}return o},D.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},D.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.FileOptions\"},D.OptimizeMode=(o={},(n=Object.create(o))[o[1]=\"SPEED\"]=\"SPEED\",n[o[2]=\"CODE_SIZE\"]=\"CODE_SIZE\",n[o[3]=\"LITE_RUNTIME\"]=\"LITE_RUNTIME\",n),D),t.MessageOptions=(I.prototype.messageSetWireFormat=!1,I.prototype.noStandardDescriptorAccessor=!1,I.prototype.deprecated=!1,I.prototype.mapEntry=!1,I.prototype.deprecatedLegacyJsonFieldConflicts=!1,I.prototype.features=null,I.prototype.uninterpretedOption=i.emptyArray,I.prototype[\".google.api.resource\"]=null,I.fromObject=function(e){if(e instanceof a.google.protobuf.MessageOptions)return e;var t=new a.google.protobuf.MessageOptions;if(null!=e.messageSetWireFormat&&(t.messageSetWireFormat=Boolean(e.messageSetWireFormat)),null!=e.noStandardDescriptorAccessor&&(t.noStandardDescriptorAccessor=Boolean(e.noStandardDescriptorAccessor)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.mapEntry&&(t.mapEntry=Boolean(e.mapEntry)),null!=e.deprecatedLegacyJsonFieldConflicts&&(t.deprecatedLegacyJsonFieldConflicts=Boolean(e.deprecatedLegacyJsonFieldConflicts)),null!=e.features){if(\"object\"!=typeof e.features)throw TypeError(\".google.protobuf.MessageOptions.features: object expected\");t.features=a.google.protobuf.FeatureSet.fromObject(e.features)}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o){if(\"object\"!=typeof e.uninterpretedOption[o])throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");t.uninterpretedOption[o]=a.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[o])}}if(null!=e[\".google.api.resource\"]){if(\"object\"!=typeof e[\".google.api.resource\"])throw TypeError(\".google.protobuf.MessageOptions..google.api.resource: object expected\");t[\".google.api.resource\"]=a.google.api.ResourceDescriptor.fromObject(e[\".google.api.resource\"])}return t},I.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.uninterpretedOption=[]),t.defaults&&(o.messageSetWireFormat=!1,o.noStandardDescriptorAccessor=!1,o.deprecated=!1,o.mapEntry=!1,o.deprecatedLegacyJsonFieldConflicts=!1,o.features=null,o[\".google.api.resource\"]=null),null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&(o.messageSetWireFormat=e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&(o.noStandardDescriptorAccessor=e.noStandardDescriptorAccessor),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(o.deprecated=e.deprecated),null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&(o.mapEntry=e.mapEntry),null!=e.deprecatedLegacyJsonFieldConflicts&&e.hasOwnProperty(\"deprecatedLegacyJsonFieldConflicts\")&&(o.deprecatedLegacyJsonFieldConflicts=e.deprecatedLegacyJsonFieldConflicts),null!=e.features&&e.hasOwnProperty(\"features\")&&(o.features=a.google.protobuf.FeatureSet.toObject(e.features,t)),e.uninterpretedOption&&e.uninterpretedOption.length){o.uninterpretedOption=[];for(var r=0;r<e.uninterpretedOption.length;++r)o.uninterpretedOption[r]=a.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[r],t)}return null!=e[\".google.api.resource\"]&&e.hasOwnProperty(\".google.api.resource\")&&(o[\".google.api.resource\"]=a.google.api.ResourceDescriptor.toObject(e[\".google.api.resource\"],t)),o},I.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},I.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.MessageOptions\"},I),t.FieldOptions=(A.prototype.ctype=0,A.prototype.packed=!1,A.prototype.jstype=0,A.prototype.lazy=!1,A.prototype.unverifiedLazy=!1,A.prototype.deprecated=!1,A.prototype.weak=!1,A.prototype.debugRedact=!1,A.prototype.retention=0,A.prototype.targets=i.emptyArray,A.prototype.editionDefaults=i.emptyArray,A.prototype.features=null,A.prototype.uninterpretedOption=i.emptyArray,A.prototype[\".google.api.fieldBehavior\"]=i.emptyArray,A.prototype[\".google.api.resourceReference\"]=null,A.fromObject=function(e){if(e instanceof a.google.protobuf.FieldOptions)return e;var t=new a.google.protobuf.FieldOptions;switch(e.ctype){default:\"number\"==typeof e.ctype&&(t.ctype=e.ctype);break;case\"STRING\":case 0:t.ctype=0;break;case\"CORD\":case 1:t.ctype=1;break;case\"STRING_PIECE\":case 2:t.ctype=2}switch(null!=e.packed&&(t.packed=Boolean(e.packed)),e.jstype){default:\"number\"==typeof e.jstype&&(t.jstype=e.jstype);break;case\"JS_NORMAL\":case 0:t.jstype=0;break;case\"JS_STRING\":case 1:t.jstype=1;break;case\"JS_NUMBER\":case 2:t.jstype=2}switch(null!=e.lazy&&(t.lazy=Boolean(e.lazy)),null!=e.unverifiedLazy&&(t.unverifiedLazy=Boolean(e.unverifiedLazy)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.weak&&(t.weak=Boolean(e.weak)),null!=e.debugRedact&&(t.debugRedact=Boolean(e.debugRedact)),e.retention){default:\"number\"==typeof e.retention&&(t.retention=e.retention);break;case\"RETENTION_UNKNOWN\":case 0:t.retention=0;break;case\"RETENTION_RUNTIME\":case 1:t.retention=1;break;case\"RETENTION_SOURCE\":case 2:t.retention=2}if(e.targets){if(!Array.isArray(e.targets))throw TypeError(\".google.protobuf.FieldOptions.targets: array expected\");t.targets=[];for(var o=0;o<e.targets.length;++o)switch(e.targets[o]){default:if(\"number\"==typeof e.targets[o]){t.targets[o]=e.targets[o];break}case\"TARGET_TYPE_UNKNOWN\":case 0:t.targets[o]=0;break;case\"TARGET_TYPE_FILE\":case 1:t.targets[o]=1;break;case\"TARGET_TYPE_EXTENSION_RANGE\":case 2:t.targets[o]=2;break;case\"TARGET_TYPE_MESSAGE\":case 3:t.targets[o]=3;break;case\"TARGET_TYPE_FIELD\":case 4:t.targets[o]=4;break;case\"TARGET_TYPE_ONEOF\":case 5:t.targets[o]=5;break;case\"TARGET_TYPE_ENUM\":case 6:t.targets[o]=6;break;case\"TARGET_TYPE_ENUM_ENTRY\":case 7:t.targets[o]=7;break;case\"TARGET_TYPE_SERVICE\":case 8:t.targets[o]=8;break;case\"TARGET_TYPE_METHOD\":case 9:t.targets[o]=9}}if(e.editionDefaults){if(!Array.isArray(e.editionDefaults))throw TypeError(\".google.protobuf.FieldOptions.editionDefaults: array expected\");t.editionDefaults=[];for(o=0;o<e.editionDefaults.length;++o){if(\"object\"!=typeof e.editionDefaults[o])throw TypeError(\".google.protobuf.FieldOptions.editionDefaults: object expected\");t.editionDefaults[o]=a.google.protobuf.FieldOptions.EditionDefault.fromObject(e.editionDefaults[o])}}if(null!=e.features){if(\"object\"!=typeof e.features)throw TypeError(\".google.protobuf.FieldOptions.features: object expected\");t.features=a.google.protobuf.FeatureSet.fromObject(e.features)}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(o=0;o<e.uninterpretedOption.length;++o){if(\"object\"!=typeof e.uninterpretedOption[o])throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");t.uninterpretedOption[o]=a.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[o])}}if(e[\".google.api.fieldBehavior\"]){if(!Array.isArray(e[\".google.api.fieldBehavior\"]))throw TypeError(\".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected\");t[\".google.api.fieldBehavior\"]=[];for(o=0;o<e[\".google.api.fieldBehavior\"].length;++o)switch(e[\".google.api.fieldBehavior\"][o]){default:if(\"number\"==typeof e[\".google.api.fieldBehavior\"][o]){t[\".google.api.fieldBehavior\"][o]=e[\".google.api.fieldBehavior\"][o];break}case\"FIELD_BEHAVIOR_UNSPECIFIED\":case 0:t[\".google.api.fieldBehavior\"][o]=0;break;case\"OPTIONAL\":case 1:t[\".google.api.fieldBehavior\"][o]=1;break;case\"REQUIRED\":case 2:t[\".google.api.fieldBehavior\"][o]=2;break;case\"OUTPUT_ONLY\":case 3:t[\".google.api.fieldBehavior\"][o]=3;break;case\"INPUT_ONLY\":case 4:t[\".google.api.fieldBehavior\"][o]=4;break;case\"IMMUTABLE\":case 5:t[\".google.api.fieldBehavior\"][o]=5;break;case\"UNORDERED_LIST\":case 6:t[\".google.api.fieldBehavior\"][o]=6;break;case\"NON_EMPTY_DEFAULT\":case 7:t[\".google.api.fieldBehavior\"][o]=7;break;case\"IDENTIFIER\":case 8:t[\".google.api.fieldBehavior\"][o]=8}}if(null!=e[\".google.api.resourceReference\"]){if(\"object\"!=typeof e[\".google.api.resourceReference\"])throw TypeError(\".google.protobuf.FieldOptions..google.api.resourceReference: object expected\");t[\".google.api.resourceReference\"]=a.google.api.ResourceReference.fromObject(e[\".google.api.resourceReference\"])}return t},A.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.targets=[],o.editionDefaults=[],o.uninterpretedOption=[],o[\".google.api.fieldBehavior\"]=[]),t.defaults&&(o.ctype=t.enums===String?\"STRING\":0,o.packed=!1,o.deprecated=!1,o.lazy=!1,o.jstype=t.enums===String?\"JS_NORMAL\":0,o.weak=!1,o.unverifiedLazy=!1,o.debugRedact=!1,o.retention=t.enums===String?\"RETENTION_UNKNOWN\":0,o.features=null,o[\".google.api.resourceReference\"]=null),null!=e.ctype&&e.hasOwnProperty(\"ctype\")&&(o.ctype=t.enums!==String||void 0===a.google.protobuf.FieldOptions.CType[e.ctype]?e.ctype:a.google.protobuf.FieldOptions.CType[e.ctype]),null!=e.packed&&e.hasOwnProperty(\"packed\")&&(o.packed=e.packed),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(o.deprecated=e.deprecated),null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&(o.lazy=e.lazy),null!=e.jstype&&e.hasOwnProperty(\"jstype\")&&(o.jstype=t.enums!==String||void 0===a.google.protobuf.FieldOptions.JSType[e.jstype]?e.jstype:a.google.protobuf.FieldOptions.JSType[e.jstype]),null!=e.weak&&e.hasOwnProperty(\"weak\")&&(o.weak=e.weak),null!=e.unverifiedLazy&&e.hasOwnProperty(\"unverifiedLazy\")&&(o.unverifiedLazy=e.unverifiedLazy),null!=e.debugRedact&&e.hasOwnProperty(\"debugRedact\")&&(o.debugRedact=e.debugRedact),null!=e.retention&&e.hasOwnProperty(\"retention\")&&(o.retention=t.enums!==String||void 0===a.google.protobuf.FieldOptions.OptionRetention[e.retention]?e.retention:a.google.protobuf.FieldOptions.OptionRetention[e.retention]),e.targets&&e.targets.length){o.targets=[];for(var r=0;r<e.targets.length;++r)o.targets[r]=t.enums!==String||void 0===a.google.protobuf.FieldOptions.OptionTargetType[e.targets[r]]?e.targets[r]:a.google.protobuf.FieldOptions.OptionTargetType[e.targets[r]]}if(e.editionDefaults&&e.editionDefaults.length){o.editionDefaults=[];for(r=0;r<e.editionDefaults.length;++r)o.editionDefaults[r]=a.google.protobuf.FieldOptions.EditionDefault.toObject(e.editionDefaults[r],t)}if(null!=e.features&&e.hasOwnProperty(\"features\")&&(o.features=a.google.protobuf.FeatureSet.toObject(e.features,t)),e.uninterpretedOption&&e.uninterpretedOption.length){o.uninterpretedOption=[];for(r=0;r<e.uninterpretedOption.length;++r)o.uninterpretedOption[r]=a.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[r],t)}if(e[\".google.api.fieldBehavior\"]&&e[\".google.api.fieldBehavior\"].length){o[\".google.api.fieldBehavior\"]=[];for(r=0;r<e[\".google.api.fieldBehavior\"].length;++r)o[\".google.api.fieldBehavior\"][r]=t.enums!==String||void 0===a.google.api.FieldBehavior[e[\".google.api.fieldBehavior\"][r]]?e[\".google.api.fieldBehavior\"][r]:a.google.api.FieldBehavior[e[\".google.api.fieldBehavior\"][r]]}return null!=e[\".google.api.resourceReference\"]&&e.hasOwnProperty(\".google.api.resourceReference\")&&(o[\".google.api.resourceReference\"]=a.google.api.ResourceReference.toObject(e[\".google.api.resourceReference\"],t)),o},A.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},A.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.FieldOptions\"},A.CType=(o={},(n=Object.create(o))[o[0]=\"STRING\"]=\"STRING\",n[o[1]=\"CORD\"]=\"CORD\",n[o[2]=\"STRING_PIECE\"]=\"STRING_PIECE\",n),A.JSType=(o={},(n=Object.create(o))[o[0]=\"JS_NORMAL\"]=\"JS_NORMAL\",n[o[1]=\"JS_STRING\"]=\"JS_STRING\",n[o[2]=\"JS_NUMBER\"]=\"JS_NUMBER\",n),A.OptionRetention=(o={},(n=Object.create(o))[o[0]=\"RETENTION_UNKNOWN\"]=\"RETENTION_UNKNOWN\",n[o[1]=\"RETENTION_RUNTIME\"]=\"RETENTION_RUNTIME\",n[o[2]=\"RETENTION_SOURCE\"]=\"RETENTION_SOURCE\",n),A.OptionTargetType=(o={},(n=Object.create(o))[o[0]=\"TARGET_TYPE_UNKNOWN\"]=\"TARGET_TYPE_UNKNOWN\",n[o[1]=\"TARGET_TYPE_FILE\"]=\"TARGET_TYPE_FILE\",n[o[2]=\"TARGET_TYPE_EXTENSION_RANGE\"]=\"TARGET_TYPE_EXTENSION_RANGE\",n[o[3]=\"TARGET_TYPE_MESSAGE\"]=\"TARGET_TYPE_MESSAGE\",n[o[4]=\"TARGET_TYPE_FIELD\"]=\"TARGET_TYPE_FIELD\",n[o[5]=\"TARGET_TYPE_ONEOF\"]=\"TARGET_TYPE_ONEOF\",n[o[6]=\"TARGET_TYPE_ENUM\"]=\"TARGET_TYPE_ENUM\",n[o[7]=\"TARGET_TYPE_ENUM_ENTRY\"]=\"TARGET_TYPE_ENUM_ENTRY\",n[o[8]=\"TARGET_TYPE_SERVICE\"]=\"TARGET_TYPE_SERVICE\",n[o[9]=\"TARGET_TYPE_METHOD\"]=\"TARGET_TYPE_METHOD\",n),A.EditionDefault=(Ot.prototype.edition=0,Ot.prototype.value=\"\",Ot.fromObject=function(e){if(e instanceof a.google.protobuf.FieldOptions.EditionDefault)return e;var t=new a.google.protobuf.FieldOptions.EditionDefault;switch(e.edition){default:\"number\"==typeof e.edition&&(t.edition=e.edition);break;case\"EDITION_UNKNOWN\":case 0:t.edition=0;break;case\"EDITION_PROTO2\":case 998:t.edition=998;break;case\"EDITION_PROTO3\":case 999:t.edition=999;break;case\"EDITION_2023\":case 1e3:t.edition=1e3;break;case\"EDITION_2024\":case 1001:t.edition=1001;break;case\"EDITION_1_TEST_ONLY\":case 1:t.edition=1;break;case\"EDITION_2_TEST_ONLY\":case 2:t.edition=2;break;case\"EDITION_99997_TEST_ONLY\":case 99997:t.edition=99997;break;case\"EDITION_99998_TEST_ONLY\":case 99998:t.edition=99998;break;case\"EDITION_99999_TEST_ONLY\":case 99999:t.edition=99999;break;case\"EDITION_MAX\":case 2147483647:t.edition=2147483647}return null!=e.value&&(t.value=String(e.value)),t},Ot.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.value=\"\",o.edition=t.enums===String?\"EDITION_UNKNOWN\":0),null!=e.value&&e.hasOwnProperty(\"value\")&&(o.value=e.value),null!=e.edition&&e.hasOwnProperty(\"edition\")&&(o.edition=t.enums!==String||void 0===a.google.protobuf.Edition[e.edition]?e.edition:a.google.protobuf.Edition[e.edition]),o},Ot.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ot.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.FieldOptions.EditionDefault\"},Ot),A),t.OneofOptions=(ht.prototype.features=null,ht.prototype.uninterpretedOption=i.emptyArray,ht.fromObject=function(e){if(e instanceof a.google.protobuf.OneofOptions)return e;var t=new a.google.protobuf.OneofOptions;if(null!=e.features){if(\"object\"!=typeof e.features)throw TypeError(\".google.protobuf.OneofOptions.features: object expected\");t.features=a.google.protobuf.FeatureSet.fromObject(e.features)}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o){if(\"object\"!=typeof e.uninterpretedOption[o])throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");t.uninterpretedOption[o]=a.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[o])}}return t},ht.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.uninterpretedOption=[]),t.defaults&&(o.features=null),null!=e.features&&e.hasOwnProperty(\"features\")&&(o.features=a.google.protobuf.FeatureSet.toObject(e.features,t)),e.uninterpretedOption&&e.uninterpretedOption.length){o.uninterpretedOption=[];for(var r=0;r<e.uninterpretedOption.length;++r)o.uninterpretedOption[r]=a.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[r],t)}return o},ht.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},ht.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.OneofOptions\"},ht),t.EnumOptions=(vt.prototype.allowAlias=!1,vt.prototype.deprecated=!1,vt.prototype.deprecatedLegacyJsonFieldConflicts=!1,vt.prototype.features=null,vt.prototype.uninterpretedOption=i.emptyArray,vt.fromObject=function(e){if(e instanceof a.google.protobuf.EnumOptions)return e;var t=new a.google.protobuf.EnumOptions;if(null!=e.allowAlias&&(t.allowAlias=Boolean(e.allowAlias)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.deprecatedLegacyJsonFieldConflicts&&(t.deprecatedLegacyJsonFieldConflicts=Boolean(e.deprecatedLegacyJsonFieldConflicts)),null!=e.features){if(\"object\"!=typeof e.features)throw TypeError(\".google.protobuf.EnumOptions.features: object expected\");t.features=a.google.protobuf.FeatureSet.fromObject(e.features)}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o){if(\"object\"!=typeof e.uninterpretedOption[o])throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");t.uninterpretedOption[o]=a.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[o])}}return t},vt.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.uninterpretedOption=[]),t.defaults&&(o.allowAlias=!1,o.deprecated=!1,o.deprecatedLegacyJsonFieldConflicts=!1,o.features=null),null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&(o.allowAlias=e.allowAlias),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(o.deprecated=e.deprecated),null!=e.deprecatedLegacyJsonFieldConflicts&&e.hasOwnProperty(\"deprecatedLegacyJsonFieldConflicts\")&&(o.deprecatedLegacyJsonFieldConflicts=e.deprecatedLegacyJsonFieldConflicts),null!=e.features&&e.hasOwnProperty(\"features\")&&(o.features=a.google.protobuf.FeatureSet.toObject(e.features,t)),e.uninterpretedOption&&e.uninterpretedOption.length){o.uninterpretedOption=[];for(var r=0;r<e.uninterpretedOption.length;++r)o.uninterpretedOption[r]=a.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[r],t)}return o},vt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},vt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.EnumOptions\"},vt),t.EnumValueOptions=(Tt.prototype.deprecated=!1,Tt.prototype.features=null,Tt.prototype.debugRedact=!1,Tt.prototype.uninterpretedOption=i.emptyArray,Tt.fromObject=function(e){if(e instanceof a.google.protobuf.EnumValueOptions)return e;var t=new a.google.protobuf.EnumValueOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.features){if(\"object\"!=typeof e.features)throw TypeError(\".google.protobuf.EnumValueOptions.features: object expected\");t.features=a.google.protobuf.FeatureSet.fromObject(e.features)}if(null!=e.debugRedact&&(t.debugRedact=Boolean(e.debugRedact)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o){if(\"object\"!=typeof e.uninterpretedOption[o])throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");t.uninterpretedOption[o]=a.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[o])}}return t},Tt.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.uninterpretedOption=[]),t.defaults&&(o.deprecated=!1,o.features=null,o.debugRedact=!1),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(o.deprecated=e.deprecated),null!=e.features&&e.hasOwnProperty(\"features\")&&(o.features=a.google.protobuf.FeatureSet.toObject(e.features,t)),null!=e.debugRedact&&e.hasOwnProperty(\"debugRedact\")&&(o.debugRedact=e.debugRedact),e.uninterpretedOption&&e.uninterpretedOption.length){o.uninterpretedOption=[];for(var r=0;r<e.uninterpretedOption.length;++r)o.uninterpretedOption[r]=a.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[r],t)}return o},Tt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Tt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.EnumValueOptions\"},Tt),t.ServiceOptions=(St.prototype.features=null,St.prototype.deprecated=!1,St.prototype.uninterpretedOption=i.emptyArray,St.prototype[\".google.api.defaultHost\"]=\"\",St.prototype[\".google.api.oauthScopes\"]=\"\",St.prototype[\".google.api.apiVersion\"]=\"\",St.fromObject=function(e){if(e instanceof a.google.protobuf.ServiceOptions)return e;var t=new a.google.protobuf.ServiceOptions;if(null!=e.features){if(\"object\"!=typeof e.features)throw TypeError(\".google.protobuf.ServiceOptions.features: object expected\");t.features=a.google.protobuf.FeatureSet.fromObject(e.features)}if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o){if(\"object\"!=typeof e.uninterpretedOption[o])throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");t.uninterpretedOption[o]=a.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[o])}}return null!=e[\".google.api.defaultHost\"]&&(t[\".google.api.defaultHost\"]=String(e[\".google.api.defaultHost\"])),null!=e[\".google.api.oauthScopes\"]&&(t[\".google.api.oauthScopes\"]=String(e[\".google.api.oauthScopes\"])),null!=e[\".google.api.apiVersion\"]&&(t[\".google.api.apiVersion\"]=String(e[\".google.api.apiVersion\"])),t},St.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.uninterpretedOption=[]),t.defaults&&(o.deprecated=!1,o.features=null,o[\".google.api.defaultHost\"]=\"\",o[\".google.api.oauthScopes\"]=\"\",o[\".google.api.apiVersion\"]=\"\"),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(o.deprecated=e.deprecated),null!=e.features&&e.hasOwnProperty(\"features\")&&(o.features=a.google.protobuf.FeatureSet.toObject(e.features,t)),e.uninterpretedOption&&e.uninterpretedOption.length){o.uninterpretedOption=[];for(var r=0;r<e.uninterpretedOption.length;++r)o.uninterpretedOption[r]=a.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[r],t)}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&(o[\".google.api.defaultHost\"]=e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&(o[\".google.api.oauthScopes\"]=e[\".google.api.oauthScopes\"]),null!=e[\".google.api.apiVersion\"]&&e.hasOwnProperty(\".google.api.apiVersion\")&&(o[\".google.api.apiVersion\"]=e[\".google.api.apiVersion\"]),o},St.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},St.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.ServiceOptions\"},St),t.MethodOptions=(k.prototype.deprecated=!1,k.prototype.idempotencyLevel=0,k.prototype.features=null,k.prototype.uninterpretedOption=i.emptyArray,k.prototype[\".google.api.http\"]=null,k.prototype[\".google.api.methodSignature\"]=i.emptyArray,k.prototype[\".google.longrunning.operationInfo\"]=null,k.fromObject=function(e){if(e instanceof a.google.protobuf.MethodOptions)return e;var t=new a.google.protobuf.MethodOptions;switch(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.idempotencyLevel){default:\"number\"==typeof e.idempotencyLevel&&(t.idempotencyLevel=e.idempotencyLevel);break;case\"IDEMPOTENCY_UNKNOWN\":case 0:t.idempotencyLevel=0;break;case\"NO_SIDE_EFFECTS\":case 1:t.idempotencyLevel=1;break;case\"IDEMPOTENT\":case 2:t.idempotencyLevel=2}if(null!=e.features){if(\"object\"!=typeof e.features)throw TypeError(\".google.protobuf.MethodOptions.features: object expected\");t.features=a.google.protobuf.FeatureSet.fromObject(e.features)}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o){if(\"object\"!=typeof e.uninterpretedOption[o])throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");t.uninterpretedOption[o]=a.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[o])}}if(null!=e[\".google.api.http\"]){if(\"object\"!=typeof e[\".google.api.http\"])throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");t[\".google.api.http\"]=a.google.api.HttpRule.fromObject(e[\".google.api.http\"])}if(e[\".google.api.methodSignature\"]){if(!Array.isArray(e[\".google.api.methodSignature\"]))throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");t[\".google.api.methodSignature\"]=[];for(o=0;o<e[\".google.api.methodSignature\"].length;++o)t[\".google.api.methodSignature\"][o]=String(e[\".google.api.methodSignature\"][o])}if(null!=e[\".google.longrunning.operationInfo\"]){if(\"object\"!=typeof e[\".google.longrunning.operationInfo\"])throw TypeError(\".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected\");t[\".google.longrunning.operationInfo\"]=a.google.longrunning.OperationInfo.fromObject(e[\".google.longrunning.operationInfo\"])}return t},k.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.uninterpretedOption=[],o[\".google.api.methodSignature\"]=[]),t.defaults&&(o.deprecated=!1,o.idempotencyLevel=t.enums===String?\"IDEMPOTENCY_UNKNOWN\":0,o.features=null,o[\".google.longrunning.operationInfo\"]=null,o[\".google.api.http\"]=null),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(o.deprecated=e.deprecated),null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\")&&(o.idempotencyLevel=t.enums!==String||void 0===a.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel]?e.idempotencyLevel:a.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel]),null!=e.features&&e.hasOwnProperty(\"features\")&&(o.features=a.google.protobuf.FeatureSet.toObject(e.features,t)),e.uninterpretedOption&&e.uninterpretedOption.length){o.uninterpretedOption=[];for(var r=0;r<e.uninterpretedOption.length;++r)o.uninterpretedOption[r]=a.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[r],t)}if(null!=e[\".google.longrunning.operationInfo\"]&&e.hasOwnProperty(\".google.longrunning.operationInfo\")&&(o[\".google.longrunning.operationInfo\"]=a.google.longrunning.OperationInfo.toObject(e[\".google.longrunning.operationInfo\"],t)),e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length){o[\".google.api.methodSignature\"]=[];for(r=0;r<e[\".google.api.methodSignature\"].length;++r)o[\".google.api.methodSignature\"][r]=e[\".google.api.methodSignature\"][r]}return null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(o[\".google.api.http\"]=a.google.api.HttpRule.toObject(e[\".google.api.http\"],t)),o},k.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},k.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.MethodOptions\"},k.IdempotencyLevel=(o={},(n=Object.create(o))[o[0]=\"IDEMPOTENCY_UNKNOWN\"]=\"IDEMPOTENCY_UNKNOWN\",n[o[1]=\"NO_SIDE_EFFECTS\"]=\"NO_SIDE_EFFECTS\",n[o[2]=\"IDEMPOTENT\"]=\"IDEMPOTENT\",n),k),t.UninterpretedOption=(x.prototype.name=i.emptyArray,x.prototype.identifierValue=\"\",x.prototype.positiveIntValue=i.Long?i.Long.fromBits(0,0,!0):0,x.prototype.negativeIntValue=i.Long?i.Long.fromBits(0,0,!1):0,x.prototype.doubleValue=0,x.prototype.stringValue=i.newBuffer([]),x.prototype.aggregateValue=\"\",x.fromObject=function(e){if(e instanceof a.google.protobuf.UninterpretedOption)return e;var t=new a.google.protobuf.UninterpretedOption;if(e.name){if(!Array.isArray(e.name))throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");t.name=[];for(var o=0;o<e.name.length;++o){if(\"object\"!=typeof e.name[o])throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");t.name[o]=a.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[o])}}return null!=e.identifierValue&&(t.identifierValue=String(e.identifierValue)),null!=e.positiveIntValue&&(i.Long?(t.positiveIntValue=i.Long.fromValue(e.positiveIntValue)).unsigned=!0:\"string\"==typeof e.positiveIntValue?t.positiveIntValue=parseInt(e.positiveIntValue,10):\"number\"==typeof e.positiveIntValue?t.positiveIntValue=e.positiveIntValue:\"object\"==typeof e.positiveIntValue&&(t.positiveIntValue=new i.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0))),null!=e.negativeIntValue&&(i.Long?(t.negativeIntValue=i.Long.fromValue(e.negativeIntValue)).unsigned=!1:\"string\"==typeof e.negativeIntValue?t.negativeIntValue=parseInt(e.negativeIntValue,10):\"number\"==typeof e.negativeIntValue?t.negativeIntValue=e.negativeIntValue:\"object\"==typeof e.negativeIntValue&&(t.negativeIntValue=new i.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber())),null!=e.doubleValue&&(t.doubleValue=Number(e.doubleValue)),null!=e.stringValue&&(\"string\"==typeof e.stringValue?i.base64.decode(e.stringValue,t.stringValue=i.newBuffer(i.base64.length(e.stringValue)),0):0<=e.stringValue.length&&(t.stringValue=e.stringValue)),null!=e.aggregateValue&&(t.aggregateValue=String(e.aggregateValue)),t},x.toObject=function(e,t){var o,r={};if(((t=t||{}).arrays||t.defaults)&&(r.name=[]),t.defaults&&(r.identifierValue=\"\",i.Long?(o=new i.Long(0,0,!0),r.positiveIntValue=t.longs===String?o.toString():t.longs===Number?o.toNumber():o):r.positiveIntValue=t.longs===String?\"0\":0,i.Long?(o=new i.Long(0,0,!1),r.negativeIntValue=t.longs===String?o.toString():t.longs===Number?o.toNumber():o):r.negativeIntValue=t.longs===String?\"0\":0,r.doubleValue=0,t.bytes===String?r.stringValue=\"\":(r.stringValue=[],t.bytes!==Array&&(r.stringValue=i.newBuffer(r.stringValue))),r.aggregateValue=\"\"),e.name&&e.name.length){r.name=[];for(var n=0;n<e.name.length;++n)r.name[n]=a.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[n],t)}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&(r.identifierValue=e.identifierValue),null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&(\"number\"==typeof e.positiveIntValue?r.positiveIntValue=t.longs===String?String(e.positiveIntValue):e.positiveIntValue:r.positiveIntValue=t.longs===String?i.Long.prototype.toString.call(e.positiveIntValue):t.longs===Number?new i.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0):e.positiveIntValue),null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&(\"number\"==typeof e.negativeIntValue?r.negativeIntValue=t.longs===String?String(e.negativeIntValue):e.negativeIntValue:r.negativeIntValue=t.longs===String?i.Long.prototype.toString.call(e.negativeIntValue):t.longs===Number?new i.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber():e.negativeIntValue),null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&(r.doubleValue=t.json&&!isFinite(e.doubleValue)?String(e.doubleValue):e.doubleValue),null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&(r.stringValue=t.bytes===String?i.base64.encode(e.stringValue,0,e.stringValue.length):t.bytes===Array?Array.prototype.slice.call(e.stringValue):e.stringValue),null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&(r.aggregateValue=e.aggregateValue),r},x.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},x.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.UninterpretedOption\"},x.NamePart=(jt.prototype.namePart=\"\",jt.prototype.isExtension=!1,jt.fromObject=function(e){var t;return e instanceof a.google.protobuf.UninterpretedOption.NamePart?e:(t=new a.google.protobuf.UninterpretedOption.NamePart,null!=e.namePart&&(t.namePart=String(e.namePart)),null!=e.isExtension&&(t.isExtension=Boolean(e.isExtension)),t)},jt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.namePart=\"\",o.isExtension=!1),null!=e.namePart&&e.hasOwnProperty(\"namePart\")&&(o.namePart=e.namePart),null!=e.isExtension&&e.hasOwnProperty(\"isExtension\")&&(o.isExtension=e.isExtension),o},jt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},jt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.UninterpretedOption.NamePart\"},jt),x),t.FeatureSet=(F.prototype.fieldPresence=0,F.prototype.enumType=0,F.prototype.repeatedFieldEncoding=0,F.prototype.utf8Validation=0,F.prototype.messageEncoding=0,F.prototype.jsonFormat=0,F.fromObject=function(e){if(e instanceof a.google.protobuf.FeatureSet)return e;var t=new a.google.protobuf.FeatureSet;switch(e.fieldPresence){default:\"number\"==typeof e.fieldPresence&&(t.fieldPresence=e.fieldPresence);break;case\"FIELD_PRESENCE_UNKNOWN\":case 0:t.fieldPresence=0;break;case\"EXPLICIT\":case 1:t.fieldPresence=1;break;case\"IMPLICIT\":case 2:t.fieldPresence=2;break;case\"LEGACY_REQUIRED\":case 3:t.fieldPresence=3}switch(e.enumType){default:\"number\"==typeof e.enumType&&(t.enumType=e.enumType);break;case\"ENUM_TYPE_UNKNOWN\":case 0:t.enumType=0;break;case\"OPEN\":case 1:t.enumType=1;break;case\"CLOSED\":case 2:t.enumType=2}switch(e.repeatedFieldEncoding){default:\"number\"==typeof e.repeatedFieldEncoding&&(t.repeatedFieldEncoding=e.repeatedFieldEncoding);break;case\"REPEATED_FIELD_ENCODING_UNKNOWN\":case 0:t.repeatedFieldEncoding=0;break;case\"PACKED\":case 1:t.repeatedFieldEncoding=1;break;case\"EXPANDED\":case 2:t.repeatedFieldEncoding=2}switch(e.utf8Validation){default:\"number\"==typeof e.utf8Validation&&(t.utf8Validation=e.utf8Validation);break;case\"UTF8_VALIDATION_UNKNOWN\":case 0:t.utf8Validation=0;break;case\"VERIFY\":case 2:t.utf8Validation=2;break;case\"NONE\":case 3:t.utf8Validation=3}switch(e.messageEncoding){default:\"number\"==typeof e.messageEncoding&&(t.messageEncoding=e.messageEncoding);break;case\"MESSAGE_ENCODING_UNKNOWN\":case 0:t.messageEncoding=0;break;case\"LENGTH_PREFIXED\":case 1:t.messageEncoding=1;break;case\"DELIMITED\":case 2:t.messageEncoding=2}switch(e.jsonFormat){default:\"number\"==typeof e.jsonFormat&&(t.jsonFormat=e.jsonFormat);break;case\"JSON_FORMAT_UNKNOWN\":case 0:t.jsonFormat=0;break;case\"ALLOW\":case 1:t.jsonFormat=1;break;case\"LEGACY_BEST_EFFORT\":case 2:t.jsonFormat=2}return t},F.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.fieldPresence=t.enums===String?\"FIELD_PRESENCE_UNKNOWN\":0,o.enumType=t.enums===String?\"ENUM_TYPE_UNKNOWN\":0,o.repeatedFieldEncoding=t.enums===String?\"REPEATED_FIELD_ENCODING_UNKNOWN\":0,o.utf8Validation=t.enums===String?\"UTF8_VALIDATION_UNKNOWN\":0,o.messageEncoding=t.enums===String?\"MESSAGE_ENCODING_UNKNOWN\":0,o.jsonFormat=t.enums===String?\"JSON_FORMAT_UNKNOWN\":0),null!=e.fieldPresence&&e.hasOwnProperty(\"fieldPresence\")&&(o.fieldPresence=t.enums!==String||void 0===a.google.protobuf.FeatureSet.FieldPresence[e.fieldPresence]?e.fieldPresence:a.google.protobuf.FeatureSet.FieldPresence[e.fieldPresence]),null!=e.enumType&&e.hasOwnProperty(\"enumType\")&&(o.enumType=t.enums!==String||void 0===a.google.protobuf.FeatureSet.EnumType[e.enumType]?e.enumType:a.google.protobuf.FeatureSet.EnumType[e.enumType]),null!=e.repeatedFieldEncoding&&e.hasOwnProperty(\"repeatedFieldEncoding\")&&(o.repeatedFieldEncoding=t.enums!==String||void 0===a.google.protobuf.FeatureSet.RepeatedFieldEncoding[e.repeatedFieldEncoding]?e.repeatedFieldEncoding:a.google.protobuf.FeatureSet.RepeatedFieldEncoding[e.repeatedFieldEncoding]),null!=e.utf8Validation&&e.hasOwnProperty(\"utf8Validation\")&&(o.utf8Validation=t.enums!==String||void 0===a.google.protobuf.FeatureSet.Utf8Validation[e.utf8Validation]?e.utf8Validation:a.google.protobuf.FeatureSet.Utf8Validation[e.utf8Validation]),null!=e.messageEncoding&&e.hasOwnProperty(\"messageEncoding\")&&(o.messageEncoding=t.enums!==String||void 0===a.google.protobuf.FeatureSet.MessageEncoding[e.messageEncoding]?e.messageEncoding:a.google.protobuf.FeatureSet.MessageEncoding[e.messageEncoding]),null!=e.jsonFormat&&e.hasOwnProperty(\"jsonFormat\")&&(o.jsonFormat=t.enums!==String||void 0===a.google.protobuf.FeatureSet.JsonFormat[e.jsonFormat]?e.jsonFormat:a.google.protobuf.FeatureSet.JsonFormat[e.jsonFormat]),o},F.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},F.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.FeatureSet\"},F.FieldPresence=(o={},(n=Object.create(o))[o[0]=\"FIELD_PRESENCE_UNKNOWN\"]=\"FIELD_PRESENCE_UNKNOWN\",n[o[1]=\"EXPLICIT\"]=\"EXPLICIT\",n[o[2]=\"IMPLICIT\"]=\"IMPLICIT\",n[o[3]=\"LEGACY_REQUIRED\"]=\"LEGACY_REQUIRED\",n),F.EnumType=(o={},(n=Object.create(o))[o[0]=\"ENUM_TYPE_UNKNOWN\"]=\"ENUM_TYPE_UNKNOWN\",n[o[1]=\"OPEN\"]=\"OPEN\",n[o[2]=\"CLOSED\"]=\"CLOSED\",n),F.RepeatedFieldEncoding=(o={},(n=Object.create(o))[o[0]=\"REPEATED_FIELD_ENCODING_UNKNOWN\"]=\"REPEATED_FIELD_ENCODING_UNKNOWN\",n[o[1]=\"PACKED\"]=\"PACKED\",n[o[2]=\"EXPANDED\"]=\"EXPANDED\",n),F.Utf8Validation=(o={},(n=Object.create(o))[o[0]=\"UTF8_VALIDATION_UNKNOWN\"]=\"UTF8_VALIDATION_UNKNOWN\",n[o[2]=\"VERIFY\"]=\"VERIFY\",n[o[3]=\"NONE\"]=\"NONE\",n),F.MessageEncoding=(o={},(n=Object.create(o))[o[0]=\"MESSAGE_ENCODING_UNKNOWN\"]=\"MESSAGE_ENCODING_UNKNOWN\",n[o[1]=\"LENGTH_PREFIXED\"]=\"LENGTH_PREFIXED\",n[o[2]=\"DELIMITED\"]=\"DELIMITED\",n),F.JsonFormat=(o={},(n=Object.create(o))[o[0]=\"JSON_FORMAT_UNKNOWN\"]=\"JSON_FORMAT_UNKNOWN\",n[o[1]=\"ALLOW\"]=\"ALLOW\",n[o[2]=\"LEGACY_BEST_EFFORT\"]=\"LEGACY_BEST_EFFORT\",n),F),t.FeatureSetDefaults=(Et.prototype.defaults=i.emptyArray,Et.prototype.minimumEdition=0,Et.prototype.maximumEdition=0,Et.fromObject=function(e){if(e instanceof a.google.protobuf.FeatureSetDefaults)return e;var t=new a.google.protobuf.FeatureSetDefaults;if(e.defaults){if(!Array.isArray(e.defaults))throw TypeError(\".google.protobuf.FeatureSetDefaults.defaults: array expected\");t.defaults=[];for(var o=0;o<e.defaults.length;++o){if(\"object\"!=typeof e.defaults[o])throw TypeError(\".google.protobuf.FeatureSetDefaults.defaults: object expected\");t.defaults[o]=a.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.fromObject(e.defaults[o])}}switch(e.minimumEdition){default:\"number\"==typeof e.minimumEdition&&(t.minimumEdition=e.minimumEdition);break;case\"EDITION_UNKNOWN\":case 0:t.minimumEdition=0;break;case\"EDITION_PROTO2\":case 998:t.minimumEdition=998;break;case\"EDITION_PROTO3\":case 999:t.minimumEdition=999;break;case\"EDITION_2023\":case 1e3:t.minimumEdition=1e3;break;case\"EDITION_2024\":case 1001:t.minimumEdition=1001;break;case\"EDITION_1_TEST_ONLY\":case 1:t.minimumEdition=1;break;case\"EDITION_2_TEST_ONLY\":case 2:t.minimumEdition=2;break;case\"EDITION_99997_TEST_ONLY\":case 99997:t.minimumEdition=99997;break;case\"EDITION_99998_TEST_ONLY\":case 99998:t.minimumEdition=99998;break;case\"EDITION_99999_TEST_ONLY\":case 99999:t.minimumEdition=99999;break;case\"EDITION_MAX\":case 2147483647:t.minimumEdition=2147483647}switch(e.maximumEdition){default:\"number\"==typeof e.maximumEdition&&(t.maximumEdition=e.maximumEdition);break;case\"EDITION_UNKNOWN\":case 0:t.maximumEdition=0;break;case\"EDITION_PROTO2\":case 998:t.maximumEdition=998;break;case\"EDITION_PROTO3\":case 999:t.maximumEdition=999;break;case\"EDITION_2023\":case 1e3:t.maximumEdition=1e3;break;case\"EDITION_2024\":case 1001:t.maximumEdition=1001;break;case\"EDITION_1_TEST_ONLY\":case 1:t.maximumEdition=1;break;case\"EDITION_2_TEST_ONLY\":case 2:t.maximumEdition=2;break;case\"EDITION_99997_TEST_ONLY\":case 99997:t.maximumEdition=99997;break;case\"EDITION_99998_TEST_ONLY\":case 99998:t.maximumEdition=99998;break;case\"EDITION_99999_TEST_ONLY\":case 99999:t.maximumEdition=99999;break;case\"EDITION_MAX\":case 2147483647:t.maximumEdition=2147483647}return t},Et.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.defaults=[]),t.defaults&&(o.minimumEdition=t.enums===String?\"EDITION_UNKNOWN\":0,o.maximumEdition=t.enums===String?\"EDITION_UNKNOWN\":0),e.defaults&&e.defaults.length){o.defaults=[];for(var r=0;r<e.defaults.length;++r)o.defaults[r]=a.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.toObject(e.defaults[r],t)}return null!=e.minimumEdition&&e.hasOwnProperty(\"minimumEdition\")&&(o.minimumEdition=t.enums!==String||void 0===a.google.protobuf.Edition[e.minimumEdition]?e.minimumEdition:a.google.protobuf.Edition[e.minimumEdition]),null!=e.maximumEdition&&e.hasOwnProperty(\"maximumEdition\")&&(o.maximumEdition=t.enums!==String||void 0===a.google.protobuf.Edition[e.maximumEdition]?e.maximumEdition:a.google.protobuf.Edition[e.maximumEdition]),o},Et.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Et.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.FeatureSetDefaults\"},Et.FeatureSetEditionDefault=(wt.prototype.edition=0,wt.prototype.features=null,wt.fromObject=function(e){if(e instanceof a.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault)return e;var t=new a.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault;switch(e.edition){default:\"number\"==typeof e.edition&&(t.edition=e.edition);break;case\"EDITION_UNKNOWN\":case 0:t.edition=0;break;case\"EDITION_PROTO2\":case 998:t.edition=998;break;case\"EDITION_PROTO3\":case 999:t.edition=999;break;case\"EDITION_2023\":case 1e3:t.edition=1e3;break;case\"EDITION_2024\":case 1001:t.edition=1001;break;case\"EDITION_1_TEST_ONLY\":case 1:t.edition=1;break;case\"EDITION_2_TEST_ONLY\":case 2:t.edition=2;break;case\"EDITION_99997_TEST_ONLY\":case 99997:t.edition=99997;break;case\"EDITION_99998_TEST_ONLY\":case 99998:t.edition=99998;break;case\"EDITION_99999_TEST_ONLY\":case 99999:t.edition=99999;break;case\"EDITION_MAX\":case 2147483647:t.edition=2147483647}if(null!=e.features){if(\"object\"!=typeof e.features)throw TypeError(\".google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.features: object expected\");t.features=a.google.protobuf.FeatureSet.fromObject(e.features)}return t},wt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.features=null,o.edition=t.enums===String?\"EDITION_UNKNOWN\":0),null!=e.features&&e.hasOwnProperty(\"features\")&&(o.features=a.google.protobuf.FeatureSet.toObject(e.features,t)),null!=e.edition&&e.hasOwnProperty(\"edition\")&&(o.edition=t.enums!==String||void 0===a.google.protobuf.Edition[e.edition]?e.edition:a.google.protobuf.Edition[e.edition]),o},wt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},wt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault\"},wt),Et),t.SourceCodeInfo=(Nt.prototype.location=i.emptyArray,Nt.fromObject=function(e){if(e instanceof a.google.protobuf.SourceCodeInfo)return e;var t=new a.google.protobuf.SourceCodeInfo;if(e.location){if(!Array.isArray(e.location))throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");t.location=[];for(var o=0;o<e.location.length;++o){if(\"object\"!=typeof e.location[o])throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");t.location[o]=a.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[o])}}return t},Nt.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.location=[]),e.location&&e.location.length){o.location=[];for(var r=0;r<e.location.length;++r)o.location[r]=a.google.protobuf.SourceCodeInfo.Location.toObject(e.location[r],t)}return o},Nt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Nt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.SourceCodeInfo\"},Nt.Location=(Pt.prototype.path=i.emptyArray,Pt.prototype.span=i.emptyArray,Pt.prototype.leadingComments=\"\",Pt.prototype.trailingComments=\"\",Pt.prototype.leadingDetachedComments=i.emptyArray,Pt.fromObject=function(e){if(e instanceof a.google.protobuf.SourceCodeInfo.Location)return e;var t=new a.google.protobuf.SourceCodeInfo.Location;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");t.path=[];for(var o=0;o<e.path.length;++o)t.path[o]=0|e.path[o]}if(e.span){if(!Array.isArray(e.span))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");t.span=[];for(o=0;o<e.span.length;++o)t.span[o]=0|e.span[o]}if(null!=e.leadingComments&&(t.leadingComments=String(e.leadingComments)),null!=e.trailingComments&&(t.trailingComments=String(e.trailingComments)),e.leadingDetachedComments){if(!Array.isArray(e.leadingDetachedComments))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");t.leadingDetachedComments=[];for(o=0;o<e.leadingDetachedComments.length;++o)t.leadingDetachedComments[o]=String(e.leadingDetachedComments[o])}return t},Pt.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.path=[],o.span=[],o.leadingDetachedComments=[]),t.defaults&&(o.leadingComments=\"\",o.trailingComments=\"\"),e.path&&e.path.length){o.path=[];for(var r=0;r<e.path.length;++r)o.path[r]=e.path[r]}if(e.span&&e.span.length){o.span=[];for(r=0;r<e.span.length;++r)o.span[r]=e.span[r]}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&(o.leadingComments=e.leadingComments),null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&(o.trailingComments=e.trailingComments),e.leadingDetachedComments&&e.leadingDetachedComments.length){o.leadingDetachedComments=[];for(r=0;r<e.leadingDetachedComments.length;++r)o.leadingDetachedComments[r]=e.leadingDetachedComments[r]}return o},Pt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Pt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.SourceCodeInfo.Location\"},Pt),Nt),t.GeneratedCodeInfo=(Rt.prototype.annotation=i.emptyArray,Rt.fromObject=function(e){if(e instanceof a.google.protobuf.GeneratedCodeInfo)return e;var t=new a.google.protobuf.GeneratedCodeInfo;if(e.annotation){if(!Array.isArray(e.annotation))throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");t.annotation=[];for(var o=0;o<e.annotation.length;++o){if(\"object\"!=typeof e.annotation[o])throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");t.annotation[o]=a.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[o])}}return t},Rt.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.annotation=[]),e.annotation&&e.annotation.length){o.annotation=[];for(var r=0;r<e.annotation.length;++r)o.annotation[r]=a.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[r],t)}return o},Rt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Rt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.GeneratedCodeInfo\"},Rt.Annotation=(Dt.prototype.path=i.emptyArray,Dt.prototype.sourceFile=\"\",Dt.prototype.begin=0,Dt.prototype.end=0,Dt.prototype.semantic=0,Dt.fromObject=function(e){if(e instanceof a.google.protobuf.GeneratedCodeInfo.Annotation)return e;var t=new a.google.protobuf.GeneratedCodeInfo.Annotation;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");t.path=[];for(var o=0;o<e.path.length;++o)t.path[o]=0|e.path[o]}switch(null!=e.sourceFile&&(t.sourceFile=String(e.sourceFile)),null!=e.begin&&(t.begin=0|e.begin),null!=e.end&&(t.end=0|e.end),e.semantic){default:\"number\"==typeof e.semantic&&(t.semantic=e.semantic);break;case\"NONE\":case 0:t.semantic=0;break;case\"SET\":case 1:t.semantic=1;break;case\"ALIAS\":case 2:t.semantic=2}return t},Dt.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.path=[]),t.defaults&&(o.sourceFile=\"\",o.begin=0,o.end=0,o.semantic=t.enums===String?\"NONE\":0),e.path&&e.path.length){o.path=[];for(var r=0;r<e.path.length;++r)o.path[r]=e.path[r]}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&(o.sourceFile=e.sourceFile),null!=e.begin&&e.hasOwnProperty(\"begin\")&&(o.begin=e.begin),null!=e.end&&e.hasOwnProperty(\"end\")&&(o.end=e.end),null!=e.semantic&&e.hasOwnProperty(\"semantic\")&&(o.semantic=t.enums!==String||void 0===a.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[e.semantic]?e.semantic:a.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[e.semantic]),o},Dt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Dt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.GeneratedCodeInfo.Annotation\"},Dt.Semantic=(o={},(n=Object.create(o))[o[0]=\"NONE\"]=\"NONE\",n[o[1]=\"SET\"]=\"SET\",n[o[2]=\"ALIAS\"]=\"ALIAS\",n),Dt),Rt),t.Struct=(It.prototype.fields=i.emptyObject,It.fromObject=function(e){if(e instanceof a.google.protobuf.Struct)return e;var t=new a.google.protobuf.Struct;if(e.fields){if(\"object\"!=typeof e.fields)throw TypeError(\".google.protobuf.Struct.fields: object expected\");t.fields={};for(var o=Object.keys(e.fields),r=0;r<o.length;++r){if(\"object\"!=typeof e.fields[o[r]])throw TypeError(\".google.protobuf.Struct.fields: object expected\");t.fields[o[r]]=a.google.protobuf.Value.fromObject(e.fields[o[r]])}}return t},It.toObject=function(e,t){var o,r={};if(((t=t||{}).objects||t.defaults)&&(r.fields={}),e.fields&&(o=Object.keys(e.fields)).length){r.fields={};for(var n=0;n<o.length;++n)r.fields[o[n]]=a.google.protobuf.Value.toObject(e.fields[o[n]],t)}return r},It.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},It.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.Struct\"},It),t.Value=(_.prototype.nullValue=null,_.prototype.numberValue=null,_.prototype.stringValue=null,_.prototype.boolValue=null,_.prototype.structValue=null,_.prototype.listValue=null,Object.defineProperty(_.prototype,\"kind\",{get:i.oneOfGetter(o=[\"nullValue\",\"numberValue\",\"stringValue\",\"boolValue\",\"structValue\",\"listValue\"]),set:i.oneOfSetter(o)}),_.fromObject=function(e){if(e instanceof a.google.protobuf.Value)return e;var t=new a.google.protobuf.Value;switch(e.nullValue){default:\"number\"==typeof e.nullValue&&(t.nullValue=e.nullValue);break;case\"NULL_VALUE\":case 0:t.nullValue=0}if(null!=e.numberValue&&(t.numberValue=Number(e.numberValue)),null!=e.stringValue&&(t.stringValue=String(e.stringValue)),null!=e.boolValue&&(t.boolValue=Boolean(e.boolValue)),null!=e.structValue){if(\"object\"!=typeof e.structValue)throw TypeError(\".google.protobuf.Value.structValue: object expected\");t.structValue=a.google.protobuf.Struct.fromObject(e.structValue)}if(null!=e.listValue){if(\"object\"!=typeof e.listValue)throw TypeError(\".google.protobuf.Value.listValue: object expected\");t.listValue=a.google.protobuf.ListValue.fromObject(e.listValue)}return t},_.toObject=function(e,t){t=t||{};var o={};return null!=e.nullValue&&e.hasOwnProperty(\"nullValue\")&&(o.nullValue=t.enums!==String||void 0===a.google.protobuf.NullValue[e.nullValue]?e.nullValue:a.google.protobuf.NullValue[e.nullValue],t.oneofs)&&(o.kind=\"nullValue\"),null!=e.numberValue&&e.hasOwnProperty(\"numberValue\")&&(o.numberValue=t.json&&!isFinite(e.numberValue)?String(e.numberValue):e.numberValue,t.oneofs)&&(o.kind=\"numberValue\"),null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&(o.stringValue=e.stringValue,t.oneofs)&&(o.kind=\"stringValue\"),null!=e.boolValue&&e.hasOwnProperty(\"boolValue\")&&(o.boolValue=e.boolValue,t.oneofs)&&(o.kind=\"boolValue\"),null!=e.structValue&&e.hasOwnProperty(\"structValue\")&&(o.structValue=a.google.protobuf.Struct.toObject(e.structValue,t),t.oneofs)&&(o.kind=\"structValue\"),null!=e.listValue&&e.hasOwnProperty(\"listValue\")&&(o.listValue=a.google.protobuf.ListValue.toObject(e.listValue,t),t.oneofs)&&(o.kind=\"listValue\"),o},_.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},_.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.Value\"},_),t.NullValue=(n={},(o=Object.create(n))[n[0]=\"NULL_VALUE\"]=\"NULL_VALUE\",o),t.ListValue=(At.prototype.values=i.emptyArray,At.fromObject=function(e){if(e instanceof a.google.protobuf.ListValue)return e;var t=new a.google.protobuf.ListValue;if(e.values){if(!Array.isArray(e.values))throw TypeError(\".google.protobuf.ListValue.values: array expected\");t.values=[];for(var o=0;o<e.values.length;++o){if(\"object\"!=typeof e.values[o])throw TypeError(\".google.protobuf.ListValue.values: object expected\");t.values[o]=a.google.protobuf.Value.fromObject(e.values[o])}}return t},At.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.values=[]),e.values&&e.values.length){o.values=[];for(var r=0;r<e.values.length;++r)o.values[r]=a.google.protobuf.Value.toObject(e.values[r],t)}return o},At.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},At.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.ListValue\"},At),t.Timestamp=(kt.prototype.seconds=i.Long?i.Long.fromBits(0,0,!1):0,kt.prototype.nanos=0,kt.fromObject=function(e){var t;return e instanceof a.google.protobuf.Timestamp?e:(t=new a.google.protobuf.Timestamp,null!=e.seconds&&(i.Long?(t.seconds=i.Long.fromValue(e.seconds)).unsigned=!1:\"string\"==typeof e.seconds?t.seconds=parseInt(e.seconds,10):\"number\"==typeof e.seconds?t.seconds=e.seconds:\"object\"==typeof e.seconds&&(t.seconds=new i.LongBits(e.seconds.low>>>0,e.seconds.high>>>0).toNumber())),null!=e.nanos&&(t.nanos=0|e.nanos),t)},kt.toObject=function(e,t){var o,r={};return(t=t||{}).defaults&&(i.Long?(o=new i.Long(0,0,!1),r.seconds=t.longs===String?o.toString():t.longs===Number?o.toNumber():o):r.seconds=t.longs===String?\"0\":0,r.nanos=0),null!=e.seconds&&e.hasOwnProperty(\"seconds\")&&(\"number\"==typeof e.seconds?r.seconds=t.longs===String?String(e.seconds):e.seconds:r.seconds=t.longs===String?i.Long.prototype.toString.call(e.seconds):t.longs===Number?new i.LongBits(e.seconds.low>>>0,e.seconds.high>>>0).toNumber():e.seconds),null!=e.nanos&&e.hasOwnProperty(\"nanos\")&&(r.nanos=e.nanos),r},kt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},kt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.Timestamp\"},kt),t.Duration=(xt.prototype.seconds=i.Long?i.Long.fromBits(0,0,!1):0,xt.prototype.nanos=0,xt.fromObject=function(e){var t;return e instanceof a.google.protobuf.Duration?e:(t=new a.google.protobuf.Duration,null!=e.seconds&&(i.Long?(t.seconds=i.Long.fromValue(e.seconds)).unsigned=!1:\"string\"==typeof e.seconds?t.seconds=parseInt(e.seconds,10):\"number\"==typeof e.seconds?t.seconds=e.seconds:\"object\"==typeof e.seconds&&(t.seconds=new i.LongBits(e.seconds.low>>>0,e.seconds.high>>>0).toNumber())),null!=e.nanos&&(t.nanos=0|e.nanos),t)},xt.toObject=function(e,t){var o,r={};return(t=t||{}).defaults&&(i.Long?(o=new i.Long(0,0,!1),r.seconds=t.longs===String?o.toString():t.longs===Number?o.toNumber():o):r.seconds=t.longs===String?\"0\":0,r.nanos=0),null!=e.seconds&&e.hasOwnProperty(\"seconds\")&&(\"number\"==typeof e.seconds?r.seconds=t.longs===String?String(e.seconds):e.seconds:r.seconds=t.longs===String?i.Long.prototype.toString.call(e.seconds):t.longs===Number?new i.LongBits(e.seconds.low>>>0,e.seconds.high>>>0).toNumber():e.seconds),null!=e.nanos&&e.hasOwnProperty(\"nanos\")&&(r.nanos=e.nanos),r},xt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},xt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.Duration\"},xt),t.DoubleValue=(Ft.prototype.value=0,Ft.fromObject=function(e){var t;return e instanceof a.google.protobuf.DoubleValue?e:(t=new a.google.protobuf.DoubleValue,null!=e.value&&(t.value=Number(e.value)),t)},Ft.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.value=0),null!=e.value&&e.hasOwnProperty(\"value\")&&(o.value=t.json&&!isFinite(e.value)?String(e.value):e.value),o},Ft.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ft.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.DoubleValue\"},Ft),t.FloatValue=(_t.prototype.value=0,_t.fromObject=function(e){var t;return e instanceof a.google.protobuf.FloatValue?e:(t=new a.google.protobuf.FloatValue,null!=e.value&&(t.value=Number(e.value)),t)},_t.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.value=0),null!=e.value&&e.hasOwnProperty(\"value\")&&(o.value=t.json&&!isFinite(e.value)?String(e.value):e.value),o},_t.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},_t.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.FloatValue\"},_t),t.Int64Value=(Ct.prototype.value=i.Long?i.Long.fromBits(0,0,!1):0,Ct.fromObject=function(e){var t;return e instanceof a.google.protobuf.Int64Value?e:(t=new a.google.protobuf.Int64Value,null!=e.value&&(i.Long?(t.value=i.Long.fromValue(e.value)).unsigned=!1:\"string\"==typeof e.value?t.value=parseInt(e.value,10):\"number\"==typeof e.value?t.value=e.value:\"object\"==typeof e.value&&(t.value=new i.LongBits(e.value.low>>>0,e.value.high>>>0).toNumber())),t)},Ct.toObject=function(e,t){var o,r={};return(t=t||{}).defaults&&(i.Long?(o=new i.Long(0,0,!1),r.value=t.longs===String?o.toString():t.longs===Number?o.toNumber():o):r.value=t.longs===String?\"0\":0),null!=e.value&&e.hasOwnProperty(\"value\")&&(\"number\"==typeof e.value?r.value=t.longs===String?String(e.value):e.value:r.value=t.longs===String?i.Long.prototype.toString.call(e.value):t.longs===Number?new i.LongBits(e.value.low>>>0,e.value.high>>>0).toNumber():e.value),r},Ct.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ct.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.Int64Value\"},Ct),t.UInt64Value=(Vt.prototype.value=i.Long?i.Long.fromBits(0,0,!0):0,Vt.fromObject=function(e){var t;return e instanceof a.google.protobuf.UInt64Value?e:(t=new a.google.protobuf.UInt64Value,null!=e.value&&(i.Long?(t.value=i.Long.fromValue(e.value)).unsigned=!0:\"string\"==typeof e.value?t.value=parseInt(e.value,10):\"number\"==typeof e.value?t.value=e.value:\"object\"==typeof e.value&&(t.value=new i.LongBits(e.value.low>>>0,e.value.high>>>0).toNumber(!0))),t)},Vt.toObject=function(e,t){var o,r={};return(t=t||{}).defaults&&(i.Long?(o=new i.Long(0,0,!0),r.value=t.longs===String?o.toString():t.longs===Number?o.toNumber():o):r.value=t.longs===String?\"0\":0),null!=e.value&&e.hasOwnProperty(\"value\")&&(\"number\"==typeof e.value?r.value=t.longs===String?String(e.value):e.value:r.value=t.longs===String?i.Long.prototype.toString.call(e.value):t.longs===Number?new i.LongBits(e.value.low>>>0,e.value.high>>>0).toNumber(!0):e.value),r},Vt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Vt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.UInt64Value\"},Vt),t.Int32Value=(Lt.prototype.value=0,Lt.fromObject=function(e){var t;return e instanceof a.google.protobuf.Int32Value?e:(t=new a.google.protobuf.Int32Value,null!=e.value&&(t.value=0|e.value),t)},Lt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.value=0),null!=e.value&&e.hasOwnProperty(\"value\")&&(o.value=e.value),o},Lt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Lt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.Int32Value\"},Lt),t.UInt32Value=(Ut.prototype.value=0,Ut.fromObject=function(e){var t;return e instanceof a.google.protobuf.UInt32Value?e:(t=new a.google.protobuf.UInt32Value,null!=e.value&&(t.value=e.value>>>0),t)},Ut.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.value=0),null!=e.value&&e.hasOwnProperty(\"value\")&&(o.value=e.value),o},Ut.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ut.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.UInt32Value\"},Ut),t.BoolValue=(Bt.prototype.value=!1,Bt.fromObject=function(e){var t;return e instanceof a.google.protobuf.BoolValue?e:(t=new a.google.protobuf.BoolValue,null!=e.value&&(t.value=Boolean(e.value)),t)},Bt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.value=!1),null!=e.value&&e.hasOwnProperty(\"value\")&&(o.value=e.value),o},Bt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Bt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.BoolValue\"},Bt),t.StringValue=(Jt.prototype.value=\"\",Jt.fromObject=function(e){var t;return e instanceof a.google.protobuf.StringValue?e:(t=new a.google.protobuf.StringValue,null!=e.value&&(t.value=String(e.value)),t)},Jt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.value=\"\"),null!=e.value&&e.hasOwnProperty(\"value\")&&(o.value=e.value),o},Jt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Jt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.StringValue\"},Jt),t.BytesValue=(Qt.prototype.value=i.newBuffer([]),Qt.fromObject=function(e){var t;return e instanceof a.google.protobuf.BytesValue?e:(t=new a.google.protobuf.BytesValue,null!=e.value&&(\"string\"==typeof e.value?i.base64.decode(e.value,t.value=i.newBuffer(i.base64.length(e.value)),0):0<=e.value.length&&(t.value=e.value)),t)},Qt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(t.bytes===String?o.value=\"\":(o.value=[],t.bytes!==Array&&(o.value=i.newBuffer(o.value)))),null!=e.value&&e.hasOwnProperty(\"value\")&&(o.value=t.bytes===String?i.base64.encode(e.value,0,e.value.length):t.bytes===Array?Array.prototype.slice.call(e.value):e.value),o},Qt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Qt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.BytesValue\"},Qt),t.Empty=(Mt.fromObject=function(e){return e instanceof a.google.protobuf.Empty?e:new a.google.protobuf.Empty},Mt.toObject=function(){return{}},Mt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Mt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.Empty\"},Mt),t.Any=(Gt.prototype.type_url=\"\",Gt.prototype.value=i.newBuffer([]),Gt.fromObject=function(e){var t;return e instanceof a.google.protobuf.Any?e:(t=new a.google.protobuf.Any,null!=e.type_url&&(t.type_url=String(e.type_url)),null!=e.value&&(\"string\"==typeof e.value?i.base64.decode(e.value,t.value=i.newBuffer(i.base64.length(e.value)),0):0<=e.value.length&&(t.value=e.value)),t)},Gt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.type_url=\"\",t.bytes===String?o.value=\"\":(o.value=[],t.bytes!==Array&&(o.value=i.newBuffer(o.value)))),null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&(o.type_url=e.type_url),null!=e.value&&e.hasOwnProperty(\"value\")&&(o.value=t.bytes===String?i.base64.encode(e.value,0,e.value.length):t.bytes===Array?Array.prototype.slice.call(e.value):e.value),o},Gt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Gt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.Any\"},Gt),t.FieldMask=(qt.prototype.paths=i.emptyArray,qt.fromObject=function(e){if(e instanceof a.google.protobuf.FieldMask)return e;var t=new a.google.protobuf.FieldMask;if(e.paths){if(!Array.isArray(e.paths))throw TypeError(\".google.protobuf.FieldMask.paths: array expected\");t.paths=[];for(var o=0;o<e.paths.length;++o)t.paths[o]=String(e.paths[o])}return t},qt.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.paths=[]),e.paths&&e.paths.length){o.paths=[];for(var r=0;r<e.paths.length;++r)o.paths[r]=e.paths[r]}return o},qt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},qt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.protobuf.FieldMask\"},qt),t),C.type=((e={}).LatLng=(Yt.prototype.latitude=0,Yt.prototype.longitude=0,Yt.fromObject=function(e){var t;return e instanceof a.google.type.LatLng?e:(t=new a.google.type.LatLng,null!=e.latitude&&(t.latitude=Number(e.latitude)),null!=e.longitude&&(t.longitude=Number(e.longitude)),t)},Yt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.latitude=0,o.longitude=0),null!=e.latitude&&e.hasOwnProperty(\"latitude\")&&(o.latitude=t.json&&!isFinite(e.latitude)?String(e.latitude):e.latitude),null!=e.longitude&&e.hasOwnProperty(\"longitude\")&&(o.longitude=t.json&&!isFinite(e.longitude)?String(e.longitude):e.longitude),o},Yt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Yt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.type.LatLng\"},Yt),e.DayOfWeek=(n={},(o=Object.create(n))[n[0]=\"DAY_OF_WEEK_UNSPECIFIED\"]=\"DAY_OF_WEEK_UNSPECIFIED\",o[n[1]=\"MONDAY\"]=\"MONDAY\",o[n[2]=\"TUESDAY\"]=\"TUESDAY\",o[n[3]=\"WEDNESDAY\"]=\"WEDNESDAY\",o[n[4]=\"THURSDAY\"]=\"THURSDAY\",o[n[5]=\"FRIDAY\"]=\"FRIDAY\",o[n[6]=\"SATURDAY\"]=\"SATURDAY\",o[n[7]=\"SUNDAY\"]=\"SUNDAY\",o),e),C.rpc=((t={}).Status=(Wt.prototype.code=0,Wt.prototype.message=\"\",Wt.prototype.details=i.emptyArray,Wt.fromObject=function(e){if(e instanceof a.google.rpc.Status)return e;var t=new a.google.rpc.Status;if(null!=e.code&&(t.code=0|e.code),null!=e.message&&(t.message=String(e.message)),e.details){if(!Array.isArray(e.details))throw TypeError(\".google.rpc.Status.details: array expected\");t.details=[];for(var o=0;o<e.details.length;++o){if(\"object\"!=typeof e.details[o])throw TypeError(\".google.rpc.Status.details: object expected\");t.details[o]=a.google.protobuf.Any.fromObject(e.details[o])}}return t},Wt.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.details=[]),t.defaults&&(o.code=0,o.message=\"\"),null!=e.code&&e.hasOwnProperty(\"code\")&&(o.code=e.code),null!=e.message&&e.hasOwnProperty(\"message\")&&(o.message=e.message),e.details&&e.details.length){o.details=[];for(var r=0;r<e.details.length;++r)o.details[r]=a.google.protobuf.Any.toObject(e.details[r],t)}return o},Wt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Wt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.rpc.Status\"},Wt),t),C.longrunning=((n={}).Operations=((zt.prototype=Object.create(r.rpc.Service.prototype)).constructor=zt,Object.defineProperty(zt.prototype.listOperations=function e(t,o){return this.rpcCall(e,a.google.longrunning.ListOperationsRequest,a.google.longrunning.ListOperationsResponse,t,o)},\"name\",{value:\"ListOperations\"}),Object.defineProperty(zt.prototype.getOperation=function e(t,o){return this.rpcCall(e,a.google.longrunning.GetOperationRequest,a.google.longrunning.Operation,t,o)},\"name\",{value:\"GetOperation\"}),Object.defineProperty(zt.prototype.deleteOperation=function e(t,o){return this.rpcCall(e,a.google.longrunning.DeleteOperationRequest,a.google.protobuf.Empty,t,o)},\"name\",{value:\"DeleteOperation\"}),Object.defineProperty(zt.prototype.cancelOperation=function e(t,o){return this.rpcCall(e,a.google.longrunning.CancelOperationRequest,a.google.protobuf.Empty,t,o)},\"name\",{value:\"CancelOperation\"}),Object.defineProperty(zt.prototype.waitOperation=function e(t,o){return this.rpcCall(e,a.google.longrunning.WaitOperationRequest,a.google.longrunning.Operation,t,o)},\"name\",{value:\"WaitOperation\"}),zt),n.Operation=(Ht.prototype.name=\"\",Ht.prototype.metadata=null,Ht.prototype.done=!1,Ht.prototype.error=null,Ht.prototype.response=null,Object.defineProperty(Ht.prototype,\"result\",{get:i.oneOfGetter(o=[\"error\",\"response\"]),set:i.oneOfSetter(o)}),Ht.fromObject=function(e){if(e instanceof a.google.longrunning.Operation)return e;var t=new a.google.longrunning.Operation;if(null!=e.name&&(t.name=String(e.name)),null!=e.metadata){if(\"object\"!=typeof e.metadata)throw TypeError(\".google.longrunning.Operation.metadata: object expected\");t.metadata=a.google.protobuf.Any.fromObject(e.metadata)}if(null!=e.done&&(t.done=Boolean(e.done)),null!=e.error){if(\"object\"!=typeof e.error)throw TypeError(\".google.longrunning.Operation.error: object expected\");t.error=a.google.rpc.Status.fromObject(e.error)}if(null!=e.response){if(\"object\"!=typeof e.response)throw TypeError(\".google.longrunning.Operation.response: object expected\");t.response=a.google.protobuf.Any.fromObject(e.response)}return t},Ht.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.name=\"\",o.metadata=null,o.done=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),null!=e.metadata&&e.hasOwnProperty(\"metadata\")&&(o.metadata=a.google.protobuf.Any.toObject(e.metadata,t)),null!=e.done&&e.hasOwnProperty(\"done\")&&(o.done=e.done),null!=e.error&&e.hasOwnProperty(\"error\")&&(o.error=a.google.rpc.Status.toObject(e.error,t),t.oneofs)&&(o.result=\"error\"),null!=e.response&&e.hasOwnProperty(\"response\")&&(o.response=a.google.protobuf.Any.toObject(e.response,t),t.oneofs)&&(o.result=\"response\"),o},Ht.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Ht.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.longrunning.Operation\"},Ht),n.GetOperationRequest=(Kt.prototype.name=\"\",Kt.fromObject=function(e){var t;return e instanceof a.google.longrunning.GetOperationRequest?e:(t=new a.google.longrunning.GetOperationRequest,null!=e.name&&(t.name=String(e.name)),t)},Kt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),o},Kt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Kt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.longrunning.GetOperationRequest\"},Kt),n.ListOperationsRequest=(Xt.prototype.name=\"\",Xt.prototype.filter=\"\",Xt.prototype.pageSize=0,Xt.prototype.pageToken=\"\",Xt.fromObject=function(e){var t;return e instanceof a.google.longrunning.ListOperationsRequest?e:(t=new a.google.longrunning.ListOperationsRequest,null!=e.name&&(t.name=String(e.name)),null!=e.filter&&(t.filter=String(e.filter)),null!=e.pageSize&&(t.pageSize=0|e.pageSize),null!=e.pageToken&&(t.pageToken=String(e.pageToken)),t)},Xt.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.filter=\"\",o.pageSize=0,o.pageToken=\"\",o.name=\"\"),null!=e.filter&&e.hasOwnProperty(\"filter\")&&(o.filter=e.filter),null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&(o.pageSize=e.pageSize),null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&(o.pageToken=e.pageToken),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),o},Xt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Xt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.longrunning.ListOperationsRequest\"},Xt),n.ListOperationsResponse=(Zt.prototype.operations=i.emptyArray,Zt.prototype.nextPageToken=\"\",Zt.fromObject=function(e){if(e instanceof a.google.longrunning.ListOperationsResponse)return e;var t=new a.google.longrunning.ListOperationsResponse;if(e.operations){if(!Array.isArray(e.operations))throw TypeError(\".google.longrunning.ListOperationsResponse.operations: array expected\");t.operations=[];for(var o=0;o<e.operations.length;++o){if(\"object\"!=typeof e.operations[o])throw TypeError(\".google.longrunning.ListOperationsResponse.operations: object expected\");t.operations[o]=a.google.longrunning.Operation.fromObject(e.operations[o])}}return null!=e.nextPageToken&&(t.nextPageToken=String(e.nextPageToken)),t},Zt.toObject=function(e,t){var o={};if(((t=t||{}).arrays||t.defaults)&&(o.operations=[]),t.defaults&&(o.nextPageToken=\"\"),e.operations&&e.operations.length){o.operations=[];for(var r=0;r<e.operations.length;++r)o.operations[r]=a.google.longrunning.Operation.toObject(e.operations[r],t)}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&(o.nextPageToken=e.nextPageToken),o},Zt.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},Zt.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.longrunning.ListOperationsResponse\"},Zt),n.CancelOperationRequest=($t.prototype.name=\"\",$t.fromObject=function(e){var t;return e instanceof a.google.longrunning.CancelOperationRequest?e:(t=new a.google.longrunning.CancelOperationRequest,null!=e.name&&(t.name=String(e.name)),t)},$t.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),o},$t.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},$t.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.longrunning.CancelOperationRequest\"},$t),n.DeleteOperationRequest=(eo.prototype.name=\"\",eo.fromObject=function(e){var t;return e instanceof a.google.longrunning.DeleteOperationRequest?e:(t=new a.google.longrunning.DeleteOperationRequest,null!=e.name&&(t.name=String(e.name)),t)},eo.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),o},eo.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},eo.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.longrunning.DeleteOperationRequest\"},eo),n.WaitOperationRequest=(to.prototype.name=\"\",to.prototype.timeout=null,to.fromObject=function(e){if(e instanceof a.google.longrunning.WaitOperationRequest)return e;var t=new a.google.longrunning.WaitOperationRequest;if(null!=e.name&&(t.name=String(e.name)),null!=e.timeout){if(\"object\"!=typeof e.timeout)throw TypeError(\".google.longrunning.WaitOperationRequest.timeout: object expected\");t.timeout=a.google.protobuf.Duration.fromObject(e.timeout)}return t},to.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.name=\"\",o.timeout=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),null!=e.timeout&&e.hasOwnProperty(\"timeout\")&&(o.timeout=a.google.protobuf.Duration.toObject(e.timeout,t)),o},to.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},to.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.longrunning.WaitOperationRequest\"},to),n.OperationInfo=(oo.prototype.responseType=\"\",oo.prototype.metadataType=\"\",oo.fromObject=function(e){var t;return e instanceof a.google.longrunning.OperationInfo?e:(t=new a.google.longrunning.OperationInfo,null!=e.responseType&&(t.responseType=String(e.responseType)),null!=e.metadataType&&(t.metadataType=String(e.metadataType)),t)},oo.toObject=function(e,t){var o={};return(t=t||{}).defaults&&(o.responseType=\"\",o.metadataType=\"\"),null!=e.responseType&&e.hasOwnProperty(\"responseType\")&&(o.responseType=e.responseType),null!=e.metadataType&&e.hasOwnProperty(\"metadataType\")&&(o.metadataType=e.metadataType),o},oo.prototype.toJSON=function(){return this.constructor.toObject(this,r.util.toJSONOptions)},oo.getTypeUrl=function(e){return(e=void 0===e?\"type.googleapis.com\":e)+\"/google.longrunning.OperationInfo\"},oo),n),C),a});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/protos/firestore_v1_proto_api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/aggregate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/aggregate.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2023 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregateField = exports.Aggregate = void 0;\nconst path_1 = __webpack_require__(/*! ./path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\n/**\n * Concrete implementation of the Aggregate type.\n */\nclass Aggregate {\n    constructor(alias, aggregateType, fieldPath) {\n        this.alias = alias;\n        this.aggregateType = aggregateType;\n        this.fieldPath = fieldPath;\n    }\n    /**\n     * Converts this object to the proto representation of an Aggregate.\n     * @internal\n     */\n    toProto() {\n        const proto = {};\n        if (this.aggregateType === 'count') {\n            proto.count = {};\n        }\n        else if (this.aggregateType === 'sum') {\n            assert(this.fieldPath !== undefined, 'Missing field path for sum aggregation.');\n            proto.sum = {\n                field: {\n                    fieldPath: path_1.FieldPath.fromArgument(this.fieldPath).formattedName,\n                },\n            };\n        }\n        else if (this.aggregateType === 'avg') {\n            assert(this.fieldPath !== undefined, 'Missing field path for average aggregation.');\n            proto.avg = {\n                field: {\n                    fieldPath: path_1.FieldPath.fromArgument(this.fieldPath).formattedName,\n                },\n            };\n        }\n        else {\n            throw new Error(`Aggregate type ${this.aggregateType} unimplemented.`);\n        }\n        proto.alias = this.alias;\n        return proto;\n    }\n}\nexports.Aggregate = Aggregate;\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\nclass AggregateField {\n    /**\n     * Create a new AggregateField<T>\n     * @param aggregateType Specifies the type of aggregation operation to perform.\n     * @param field Optionally specifies the field that is aggregated.\n     * @internal\n     */\n    constructor(aggregateType, field) {\n        this.aggregateType = aggregateType;\n        /** A type string to uniquely identify instances of this class. */\n        this.type = 'AggregateField';\n        this._field = field;\n    }\n    /**\n     * Compares this object with the given object for equality.\n     *\n     * This object is considered \"equal\" to the other object if and only if\n     * `other` performs the same kind of aggregation on the same field (if any).\n     *\n     * @param other The object to compare to this object for equality.\n     * @return `true` if this object is \"equal\" to the given object, as\n     * defined above, or `false` otherwise.\n     */\n    isEqual(other) {\n        return (other instanceof AggregateField &&\n            this.aggregateType === other.aggregateType &&\n            ((this._field === undefined && other._field === undefined) ||\n                (this._field !== undefined &&\n                    other._field !== undefined &&\n                    path_1.FieldPath.fromArgument(this._field).isEqual(path_1.FieldPath.fromArgument(other._field)))));\n    }\n    /**\n     * Create an AggregateField object that can be used to compute the count of\n     * documents in the result set of a query.\n     */\n    static count() {\n        return new AggregateField('count');\n    }\n    /**\n     * Create an AggregateField object that can be used to compute the average of\n     * a specified field over a range of documents in the result set of a query.\n     * @param field Specifies the field to average across the result set.\n     */\n    static average(field) {\n        return new AggregateField('avg', field);\n    }\n    /**\n     * Create an AggregateField object that can be used to compute the sum of\n     * a specified field over a range of documents in the result set of a query.\n     * @param field Specifies the field to sum across the result set.\n     */\n    static sum(field) {\n        return new AggregateField('sum', field);\n    }\n}\nexports.AggregateField = AggregateField;\n//# sourceMappingURL=aggregate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL2FnZ3JlZ2F0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxpQkFBaUI7QUFDMUMsZUFBZSxtQkFBTyxDQUFDLDhFQUFRO0FBQy9CLGVBQWUsbUJBQU8sQ0FBQyxzQkFBUTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxvQkFBb0I7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL2ZpcmVzdG9yZS9idWlsZC9zcmMvYWdncmVnYXRlLmpzPzk2MmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BZ2dyZWdhdGVGaWVsZCA9IGV4cG9ydHMuQWdncmVnYXRlID0gdm9pZCAwO1xuY29uc3QgcGF0aF8xID0gcmVxdWlyZShcIi4vcGF0aFwiKTtcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XG4vKipcbiAqIENvbmNyZXRlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBBZ2dyZWdhdGUgdHlwZS5cbiAqL1xuY2xhc3MgQWdncmVnYXRlIHtcbiAgICBjb25zdHJ1Y3RvcihhbGlhcywgYWdncmVnYXRlVHlwZSwgZmllbGRQYXRoKSB7XG4gICAgICAgIHRoaXMuYWxpYXMgPSBhbGlhcztcbiAgICAgICAgdGhpcy5hZ2dyZWdhdGVUeXBlID0gYWdncmVnYXRlVHlwZTtcbiAgICAgICAgdGhpcy5maWVsZFBhdGggPSBmaWVsZFBhdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgb2JqZWN0IHRvIHRoZSBwcm90byByZXByZXNlbnRhdGlvbiBvZiBhbiBBZ2dyZWdhdGUuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdG9Qcm90bygpIHtcbiAgICAgICAgY29uc3QgcHJvdG8gPSB7fTtcbiAgICAgICAgaWYgKHRoaXMuYWdncmVnYXRlVHlwZSA9PT0gJ2NvdW50Jykge1xuICAgICAgICAgICAgcHJvdG8uY291bnQgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmFnZ3JlZ2F0ZVR5cGUgPT09ICdzdW0nKSB7XG4gICAgICAgICAgICBhc3NlcnQodGhpcy5maWVsZFBhdGggIT09IHVuZGVmaW5lZCwgJ01pc3NpbmcgZmllbGQgcGF0aCBmb3Igc3VtIGFnZ3JlZ2F0aW9uLicpO1xuICAgICAgICAgICAgcHJvdG8uc3VtID0ge1xuICAgICAgICAgICAgICAgIGZpZWxkOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogcGF0aF8xLkZpZWxkUGF0aC5mcm9tQXJndW1lbnQodGhpcy5maWVsZFBhdGgpLmZvcm1hdHRlZE5hbWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hZ2dyZWdhdGVUeXBlID09PSAnYXZnJykge1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuZmllbGRQYXRoICE9PSB1bmRlZmluZWQsICdNaXNzaW5nIGZpZWxkIHBhdGggZm9yIGF2ZXJhZ2UgYWdncmVnYXRpb24uJyk7XG4gICAgICAgICAgICBwcm90by5hdmcgPSB7XG4gICAgICAgICAgICAgICAgZmllbGQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRQYXRoOiBwYXRoXzEuRmllbGRQYXRoLmZyb21Bcmd1bWVudCh0aGlzLmZpZWxkUGF0aCkuZm9ybWF0dGVkTmFtZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQWdncmVnYXRlIHR5cGUgJHt0aGlzLmFnZ3JlZ2F0ZVR5cGV9IHVuaW1wbGVtZW50ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvdG8uYWxpYXMgPSB0aGlzLmFsaWFzO1xuICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgfVxufVxuZXhwb3J0cy5BZ2dyZWdhdGUgPSBBZ2dyZWdhdGU7XG4vKipcbiAqIFJlcHJlc2VudHMgYW4gYWdncmVnYXRpb24gdGhhdCBjYW4gYmUgcGVyZm9ybWVkIGJ5IEZpcmVzdG9yZS5cbiAqL1xuY2xhc3MgQWdncmVnYXRlRmllbGQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBBZ2dyZWdhdGVGaWVsZDxUPlxuICAgICAqIEBwYXJhbSBhZ2dyZWdhdGVUeXBlIFNwZWNpZmllcyB0aGUgdHlwZSBvZiBhZ2dyZWdhdGlvbiBvcGVyYXRpb24gdG8gcGVyZm9ybS5cbiAgICAgKiBAcGFyYW0gZmllbGQgT3B0aW9uYWxseSBzcGVjaWZpZXMgdGhlIGZpZWxkIHRoYXQgaXMgYWdncmVnYXRlZC5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhZ2dyZWdhdGVUeXBlLCBmaWVsZCkge1xuICAgICAgICB0aGlzLmFnZ3JlZ2F0ZVR5cGUgPSBhZ2dyZWdhdGVUeXBlO1xuICAgICAgICAvKiogQSB0eXBlIHN0cmluZyB0byB1bmlxdWVseSBpZGVudGlmeSBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzcy4gKi9cbiAgICAgICAgdGhpcy50eXBlID0gJ0FnZ3JlZ2F0ZUZpZWxkJztcbiAgICAgICAgdGhpcy5fZmllbGQgPSBmaWVsZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgdGhpcyBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gb2JqZWN0IGZvciBlcXVhbGl0eS5cbiAgICAgKlxuICAgICAqIFRoaXMgb2JqZWN0IGlzIGNvbnNpZGVyZWQgXCJlcXVhbFwiIHRvIHRoZSBvdGhlciBvYmplY3QgaWYgYW5kIG9ubHkgaWZcbiAgICAgKiBgb3RoZXJgIHBlcmZvcm1zIHRoZSBzYW1lIGtpbmQgb2YgYWdncmVnYXRpb24gb24gdGhlIHNhbWUgZmllbGQgKGlmIGFueSkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXIgVGhlIG9iamVjdCB0byBjb21wYXJlIHRvIHRoaXMgb2JqZWN0IGZvciBlcXVhbGl0eS5cbiAgICAgKiBAcmV0dXJuIGB0cnVlYCBpZiB0aGlzIG9iamVjdCBpcyBcImVxdWFsXCIgdG8gdGhlIGdpdmVuIG9iamVjdCwgYXNcbiAgICAgKiBkZWZpbmVkIGFib3ZlLCBvciBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBpc0VxdWFsKG90aGVyKSB7XG4gICAgICAgIHJldHVybiAob3RoZXIgaW5zdGFuY2VvZiBBZ2dyZWdhdGVGaWVsZCAmJlxuICAgICAgICAgICAgdGhpcy5hZ2dyZWdhdGVUeXBlID09PSBvdGhlci5hZ2dyZWdhdGVUeXBlICYmXG4gICAgICAgICAgICAoKHRoaXMuX2ZpZWxkID09PSB1bmRlZmluZWQgJiYgb3RoZXIuX2ZpZWxkID09PSB1bmRlZmluZWQpIHx8XG4gICAgICAgICAgICAgICAgKHRoaXMuX2ZpZWxkICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgb3RoZXIuX2ZpZWxkICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgcGF0aF8xLkZpZWxkUGF0aC5mcm9tQXJndW1lbnQodGhpcy5fZmllbGQpLmlzRXF1YWwocGF0aF8xLkZpZWxkUGF0aC5mcm9tQXJndW1lbnQob3RoZXIuX2ZpZWxkKSkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBBZ2dyZWdhdGVGaWVsZCBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byBjb21wdXRlIHRoZSBjb3VudCBvZlxuICAgICAqIGRvY3VtZW50cyBpbiB0aGUgcmVzdWx0IHNldCBvZiBhIHF1ZXJ5LlxuICAgICAqL1xuICAgIHN0YXRpYyBjb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBZ2dyZWdhdGVGaWVsZCgnY291bnQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIEFnZ3JlZ2F0ZUZpZWxkIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNvbXB1dGUgdGhlIGF2ZXJhZ2Ugb2ZcbiAgICAgKiBhIHNwZWNpZmllZCBmaWVsZCBvdmVyIGEgcmFuZ2Ugb2YgZG9jdW1lbnRzIGluIHRoZSByZXN1bHQgc2V0IG9mIGEgcXVlcnkuXG4gICAgICogQHBhcmFtIGZpZWxkIFNwZWNpZmllcyB0aGUgZmllbGQgdG8gYXZlcmFnZSBhY3Jvc3MgdGhlIHJlc3VsdCBzZXQuXG4gICAgICovXG4gICAgc3RhdGljIGF2ZXJhZ2UoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBZ2dyZWdhdGVGaWVsZCgnYXZnJywgZmllbGQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gQWdncmVnYXRlRmllbGQgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gY29tcHV0ZSB0aGUgc3VtIG9mXG4gICAgICogYSBzcGVjaWZpZWQgZmllbGQgb3ZlciBhIHJhbmdlIG9mIGRvY3VtZW50cyBpbiB0aGUgcmVzdWx0IHNldCBvZiBhIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSBmaWVsZCBTcGVjaWZpZXMgdGhlIGZpZWxkIHRvIHN1bSBhY3Jvc3MgdGhlIHJlc3VsdCBzZXQuXG4gICAgICovXG4gICAgc3RhdGljIHN1bShmaWVsZCkge1xuICAgICAgICByZXR1cm4gbmV3IEFnZ3JlZ2F0ZUZpZWxkKCdzdW0nLCBmaWVsZCk7XG4gICAgfVxufVxuZXhwb3J0cy5BZ2dyZWdhdGVGaWVsZCA9IEFnZ3JlZ2F0ZUZpZWxkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWdncmVnYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/aggregate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/backoff.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/backoff.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExponentialBackoff = exports.delayExecution = exports.MAX_RETRY_ATTEMPTS = exports.DEFAULT_BACKOFF_FACTOR = exports.DEFAULT_BACKOFF_MAX_DELAY_MS = exports.DEFAULT_BACKOFF_INITIAL_DELAY_MS = void 0;\nexports.setTimeoutHandler = setTimeoutHandler;\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\n/*\n * @module firestore/backoff\n * @private\n * @internal\n *\n * Contains backoff logic to facilitate RPC error handling. This class derives\n * its implementation from the Firestore Mobile Web Client.\n *\n * @see https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/remote/backoff.ts\n */\n/*!\n * The default initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nexports.DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n/*!\n * The default maximum backoff time in milliseconds.\n */\nexports.DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n/*!\n * The default factor to increase the backup by after each failed attempt.\n */\nexports.DEFAULT_BACKOFF_FACTOR = 1.5;\n/*!\n * The default jitter to distribute the backoff attempts by (0 means no\n * randomization, 1.0 means +/-50% randomization).\n */\nconst DEFAULT_JITTER_FACTOR = 1.0;\n/*!\n * The maximum number of retries that will be attempted by backoff\n * before stopping all retry attempts.\n */\nexports.MAX_RETRY_ATTEMPTS = 10;\n/*!\n * The timeout handler used by `ExponentialBackoff` and `BulkWriter`.\n */\nexports.delayExecution = setTimeout;\n/**\n * Allows overriding of the timeout handler used by the exponential backoff\n * implementation. If not invoked, we default to `setTimeout()`.\n *\n * Used only in testing.\n *\n * @private\n * @internal\n * @param {function} handler A handler than matches the API of `setTimeout()`.\n */\nfunction setTimeoutHandler(handler) {\n    exports.delayExecution = (f, ms) => {\n        handler(f, ms);\n        const timeout = {\n            hasRef: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n            ref: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n            refresh: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n            unref: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n            [Symbol.toPrimitive]: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n        };\n        // `NodeJS.Timeout` type signature change:\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/66176/files#diff-e838d0ace9cd5f6516bacfbd3ad00d02cd37bd60f9993ce6223f52d889a1fdbaR122-R126\n        //\n        // Adding `[Symbol.dispose](): void;` cannot be done on older versions of\n        // NodeJS. So we simply cast to `NodeJS.Timeout`.\n        return timeout;\n    };\n}\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a \"jitter\" (+/- 50% by default)  that is calculated and\n * added to the base delay. This prevents clients from accidentally\n * synchronizing their delays causing spikes of load to the backend.\n *\n * @private\n * @internal\n */\nclass ExponentialBackoff {\n    constructor(options = {}) {\n        /**\n         * The number of retries that has been attempted.\n         *\n         * @private\n         * @internal\n         */\n        this._retryCount = 0;\n        /**\n         * The backoff delay of the current attempt.\n         *\n         * @private\n         * @internal\n         */\n        this.currentBaseMs = 0;\n        /**\n         * Whether we are currently waiting for backoff to complete.\n         *\n         * @private\n         * @internal\n         */\n        this.awaitingBackoffCompletion = false;\n        this.initialDelayMs =\n            options.initialDelayMs !== undefined\n                ? options.initialDelayMs\n                : exports.DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n        this.backoffFactor =\n            options.backoffFactor !== undefined\n                ? options.backoffFactor\n                : exports.DEFAULT_BACKOFF_FACTOR;\n        this.maxDelayMs =\n            options.maxDelayMs !== undefined\n                ? options.maxDelayMs\n                : exports.DEFAULT_BACKOFF_MAX_DELAY_MS;\n        this.jitterFactor =\n            options.jitterFactor !== undefined\n                ? options.jitterFactor\n                : DEFAULT_JITTER_FACTOR;\n    }\n    /**\n     * Resets the backoff delay and retry count.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     *\n     * @private\n     * @internal\n     */\n    reset() {\n        this._retryCount = 0;\n        this.currentBaseMs = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     *\n     * @private\n     * @internal\n     */\n    resetToMax() {\n        this.currentBaseMs = this.maxDelayMs;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts.\n     *\n     * @return A Promise that resolves when the current delay elapsed.\n     * @private\n     * @internal\n     */\n    backoffAndWait() {\n        if (this.awaitingBackoffCompletion) {\n            return Promise.reject(new Error('A backoff operation is already in progress.'));\n        }\n        if (this.retryCount > exports.MAX_RETRY_ATTEMPTS) {\n            return Promise.reject(new Error('Exceeded maximum number of retries allowed.'));\n        }\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        const delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            (0, logger_1.logger)('ExponentialBackoff.backoffAndWait', null, `Backing off for ${delayWithJitterMs} ms ` +\n                `(base delay: ${this.currentBaseMs} ms)`);\n        }\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        this.currentBaseMs = Math.max(this.currentBaseMs, this.initialDelayMs);\n        this.currentBaseMs = Math.min(this.currentBaseMs, this.maxDelayMs);\n        this._retryCount += 1;\n        return new Promise(resolve => {\n            this.awaitingBackoffCompletion = true;\n            (0, exports.delayExecution)(() => {\n                this.awaitingBackoffCompletion = false;\n                resolve();\n            }, delayWithJitterMs);\n        });\n    }\n    // Visible for testing.\n    get retryCount() {\n        return this._retryCount;\n    }\n    /**\n     * Returns a randomized \"jitter\" delay based on the current base and jitter\n     * factor.\n     *\n     * @returns {number} The jitter to apply based on the current delay.\n     * @private\n     * @internal\n     */\n    jitterDelayMs() {\n        return (Math.random() - 0.5) * this.jitterFactor * this.currentBaseMs;\n    }\n}\nexports.ExponentialBackoff = ExponentialBackoff;\n//# sourceMappingURL=backoff.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/backoff.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/bulk-writer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/bulk-writer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulkWriter = exports.BulkWriterError = exports.DEFAULT_JITTER_FACTOR = exports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT = exports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT = exports.RETRY_MAX_BATCH_SIZE = void 0;\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst backoff_1 = __webpack_require__(/*! ./backoff */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/backoff.js\");\nconst rate_limiter_1 = __webpack_require__(/*! ./rate-limiter */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/rate-limiter.js\");\nconst timestamp_1 = __webpack_require__(/*! ./timestamp */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst write_batch_1 = __webpack_require__(/*! ./write-batch */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/write-batch.js\");\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\nconst trace_util_1 = __webpack_require__(/*! ./telemetry/trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js\");\n/*!\n * The maximum number of writes that can be in a single batch.\n */\nconst MAX_BATCH_SIZE = 20;\n/*!\n * The maximum number of writes can be can in a single batch that is being retried.\n */\nexports.RETRY_MAX_BATCH_SIZE = 10;\n/*!\n * The starting maximum number of operations per second as allowed by the\n * 500/50/5 rule.\n *\n * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.\n */\nexports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT = 500;\n/*!\n * The maximum number of operations per second as allowed by the 500/50/5 rule.\n * By default the rate limiter will not exceed this value.\n *\n * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.\n */\nexports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT = 10000;\n/*!\n * The default jitter to apply to the exponential backoff used in retries. For\n * example, a factor of 0.3 means a 30% jitter is applied.\n */\nexports.DEFAULT_JITTER_FACTOR = 0.3;\n/*!\n * The rate by which to increase the capacity as specified by the 500/50/5 rule.\n */\nconst RATE_LIMITER_MULTIPLIER = 1.5;\n/*!\n * How often the operations per second capacity should increase in milliseconds\n * as specified by the 500/50/5 rule.\n */\nconst RATE_LIMITER_MULTIPLIER_MILLIS = 5 * 60 * 1000;\n/*!\n * The default maximum number of pending operations that can be enqueued onto a\n * BulkWriter instance. An operation is considered pending if BulkWriter has\n * sent it via RPC and is awaiting the result. BulkWriter buffers additional\n * writes after this many pending operations in order to avoiding going OOM.\n */\nconst DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT = 500;\n/**\n * Represents a single write for BulkWriter, encapsulating operation dispatch\n * and error handling.\n * @private\n * @internal\n */\nclass BulkWriterOperation {\n    /**\n     * @param ref The document reference being written to.\n     * @param type The type of operation that created this write.\n     * @param sendFn A callback to invoke when the operation should be sent.\n     * @param errorFn The user provided global error callback.\n     * @param successFn The user provided global success callback.\n     */\n    constructor(ref, type, sendFn, errorFn, successFn) {\n        this.ref = ref;\n        this.type = type;\n        this.sendFn = sendFn;\n        this.errorFn = errorFn;\n        this.successFn = successFn;\n        this.deferred = new util_1.Deferred();\n        this.failedAttempts = 0;\n        this._backoffDuration = 0;\n        /** Whether flush() was called when this was the last enqueued operation. */\n        this._flushed = false;\n    }\n    get promise() {\n        return this.deferred.promise;\n    }\n    get backoffDuration() {\n        return this._backoffDuration;\n    }\n    markFlushed() {\n        this._flushed = true;\n    }\n    get flushed() {\n        return this._flushed;\n    }\n    onError(error) {\n        ++this.failedAttempts;\n        try {\n            const bulkWriterError = new BulkWriterError(error.code, error.message, this.ref, this.type, this.failedAttempts);\n            const shouldRetry = this.errorFn(bulkWriterError);\n            (0, logger_1.logger)('BulkWriter.errorFn', null, 'Ran error callback on error code:', error.code, ', shouldRetry:', shouldRetry, ' for document:', this.ref.path);\n            if (shouldRetry) {\n                this.lastStatus = error.code;\n                this.updateBackoffDuration();\n                this.sendFn(this);\n            }\n            else {\n                this.deferred.reject(bulkWriterError);\n            }\n        }\n        catch (userCallbackError) {\n            this.deferred.reject(userCallbackError);\n        }\n    }\n    updateBackoffDuration() {\n        if (this.lastStatus === 8 /* StatusCode.RESOURCE_EXHAUSTED */) {\n            this._backoffDuration = backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS;\n        }\n        else if (this._backoffDuration === 0) {\n            this._backoffDuration = backoff_1.DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n        }\n        else {\n            this._backoffDuration *= backoff_1.DEFAULT_BACKOFF_FACTOR;\n        }\n    }\n    onSuccess(result) {\n        try {\n            this.successFn(this.ref, result);\n            this.deferred.resolve(result);\n        }\n        catch (userCallbackError) {\n            this.deferred.reject(userCallbackError);\n        }\n    }\n}\n/**\n * Used to represent a batch on the BatchQueue.\n *\n * @private\n * @internal\n */\nclass BulkCommitBatch extends write_batch_1.WriteBatch {\n    constructor(firestore, maxBatchSize) {\n        super(firestore);\n        // The set of document reference paths present in the WriteBatch.\n        this.docPaths = new Set();\n        // An array of pending write operations. Only contains writes that have not\n        // been resolved.\n        this.pendingOps = [];\n        this._maxBatchSize = maxBatchSize;\n    }\n    get maxBatchSize() {\n        return this._maxBatchSize;\n    }\n    setMaxBatchSize(size) {\n        assert(this.pendingOps.length <= size, 'New batch size cannot be less than the number of enqueued writes');\n        this._maxBatchSize = size;\n    }\n    has(documentRef) {\n        return this.docPaths.has(documentRef.path);\n    }\n    async bulkCommit(options = {}) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_BULK_WRITER_COMMIT, async () => {\n            var _a;\n            const tag = (_a = options === null || options === void 0 ? void 0 : options.requestTag) !== null && _a !== void 0 ? _a : (0, util_1.requestTag)();\n            // Capture the error stack to preserve stack tracing across async calls.\n            const stack = Error().stack;\n            let response;\n            try {\n                (0, logger_1.logger)('BulkCommitBatch.bulkCommit', tag, `Sending next batch with ${this._opCount} writes`);\n                const retryCodes = (0, util_1.getRetryCodes)('batchWrite');\n                response = await this._commit({ retryCodes, methodName: 'batchWrite', requestTag: tag });\n            }\n            catch (err) {\n                // Map the failure to each individual write's result.\n                const ops = Array.from({ length: this.pendingOps.length });\n                response = {\n                    writeResults: ops.map(() => {\n                        return {};\n                    }),\n                    status: ops.map(() => err),\n                };\n            }\n            for (let i = 0; i < (response.writeResults || []).length; ++i) {\n                // Since delete operations currently do not have write times, use a\n                // sentinel Timestamp value.\n                // TODO(b/158502664): Use actual delete timestamp.\n                const DELETE_TIMESTAMP_SENTINEL = timestamp_1.Timestamp.fromMillis(0);\n                const status = (response.status || [])[i];\n                if (status.code === 0 /* StatusCode.OK */) {\n                    const updateTime = timestamp_1.Timestamp.fromProto(response.writeResults[i].updateTime || DELETE_TIMESTAMP_SENTINEL);\n                    this.pendingOps[i].onSuccess(new write_batch_1.WriteResult(updateTime));\n                }\n                else {\n                    const error = new ((__webpack_require__(/*! google-gax/build/src/fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\").GoogleError))(status.message || undefined);\n                    error.code = status.code;\n                    this.pendingOps[i].onError((0, util_1.wrapError)(error, stack));\n                }\n            }\n        }, {\n            [trace_util_1.ATTRIBUTE_KEY_DOC_COUNT]: this._opCount,\n        });\n    }\n    /**\n     * Helper to update data structures associated with the operation and returns\n     * the result.\n     */\n    processLastOperation(op) {\n        assert(!this.docPaths.has(op.ref.path), 'Batch should not contain writes to the same document');\n        this.docPaths.add(op.ref.path);\n        this.pendingOps.push(op);\n    }\n}\n/**\n * Used to represent a buffered BulkWriterOperation.\n *\n * @private\n * @internal\n */\nclass BufferedOperation {\n    constructor(operation, sendFn) {\n        this.operation = operation;\n        this.sendFn = sendFn;\n    }\n}\n/**\n * The error thrown when a BulkWriter operation fails.\n *\n * @class BulkWriterError\n */\nclass BulkWriterError extends Error {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(\n    /** The status code of the error. */\n    code, \n    /** The error message of the error. */\n    message, \n    /** The document reference the operation was performed on. */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    documentRef, \n    /** The type of operation performed. */\n    operationType, \n    /** How many times this operation has been attempted unsuccessfully. */\n    failedAttempts) {\n        super(message);\n        this.code = code;\n        this.message = message;\n        this.documentRef = documentRef;\n        this.operationType = operationType;\n        this.failedAttempts = failedAttempts;\n    }\n}\nexports.BulkWriterError = BulkWriterError;\n/**\n * A Firestore BulkWriter that can be used to perform a large number of writes\n * in parallel.\n *\n * @class BulkWriter\n */\nclass BulkWriter {\n    // Visible for testing.\n    /**\n     * @private\n     * @internal\n     */\n    _getBufferedOperationsCount() {\n        return this._bufferedOperations.length;\n    }\n    // Visible for testing.\n    /**\n     * @private\n     * @internal\n     */\n    _setMaxBatchSize(size) {\n        assert(this._bulkCommitBatch.pendingOps.length === 0, 'BulkCommitBatch should be empty');\n        this._maxBatchSize = size;\n        this._bulkCommitBatch = new BulkCommitBatch(this.firestore, size);\n    }\n    // Visible for testing.\n    /**\n     * @private\n     * @internal\n     */\n    _setMaxPendingOpCount(newMax) {\n        this._maxPendingOpCount = newMax;\n    }\n    /** @private */\n    constructor(firestore, options) {\n        var _a, _b;\n        this.firestore = firestore;\n        /**\n         * The maximum number of writes that can be in a single batch.\n         * Visible for testing.\n         * @private\n         * @internal\n         */\n        this._maxBatchSize = MAX_BATCH_SIZE;\n        /**\n         * The batch that is currently used to schedule operations. Once this batch\n         * reaches maximum capacity, a new batch is created.\n         * @private\n         * @internal\n         */\n        this._bulkCommitBatch = new BulkCommitBatch(this.firestore, this._maxBatchSize);\n        /**\n         * A pointer to the tail of all active BulkWriter operations. This pointer\n         * is advanced every time a new write is enqueued.\n         * @private\n         * @internal\n         */\n        this._lastOp = Promise.resolve();\n        /**\n         * The number of pending operations enqueued on this BulkWriter instance.\n         * An operation is considered pending if BulkWriter has sent it via RPC and\n         * is awaiting the result.\n         * @private\n         * @internal\n         */\n        this._pendingOpsCount = 0;\n        /**\n         * An array containing buffered BulkWriter operations after the maximum number\n         * of pending operations has been enqueued.\n         * @private\n         * @internal\n         */\n        this._bufferedOperations = [];\n        /**\n         * Whether a custom error handler has been set. BulkWriter only swallows\n         * errors if an error handler is set. Otherwise, an UnhandledPromiseRejection\n         * is thrown by Node if an operation promise is rejected without being\n         * handled.\n         * @private\n         * @internal\n         */\n        this._errorHandlerSet = false;\n        /**\n         * The maximum number of pending operations that can be enqueued onto this\n         * BulkWriter instance. Once the this number of writes have been enqueued,\n         * subsequent writes are buffered.\n         * @private\n         * @internal\n         */\n        this._maxPendingOpCount = DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT;\n        /**\n         * The user-provided callback to be run every time a BulkWriter operation\n         * successfully completes.\n         * @private\n         * @internal\n         */\n        this._successFn = () => { };\n        /**\n         * The user-provided callback to be run every time a BulkWriter operation\n         * fails.\n         * @private\n         * @internal\n         */\n        this._errorFn = error => {\n            const isRetryableDeleteError = error.operationType === 'delete' &&\n                error.code === 13 /* StatusCode.INTERNAL */;\n            const retryCodes = (0, util_1.getRetryCodes)('batchWrite');\n            return ((retryCodes.includes(error.code) || isRetryableDeleteError) &&\n                error.failedAttempts < backoff_1.MAX_RETRY_ATTEMPTS);\n        };\n        this.firestore._incrementBulkWritersCount();\n        validateBulkWriterOptions(options);\n        if ((options === null || options === void 0 ? void 0 : options.throttling) === false) {\n            this._rateLimiter = new rate_limiter_1.RateLimiter(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        }\n        else {\n            let startingRate = exports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT;\n            let maxRate = exports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT;\n            if (typeof (options === null || options === void 0 ? void 0 : options.throttling) !== 'boolean') {\n                if (((_a = options === null || options === void 0 ? void 0 : options.throttling) === null || _a === void 0 ? void 0 : _a.maxOpsPerSecond) !== undefined) {\n                    maxRate = options.throttling.maxOpsPerSecond;\n                }\n                if (((_b = options === null || options === void 0 ? void 0 : options.throttling) === null || _b === void 0 ? void 0 : _b.initialOpsPerSecond) !== undefined) {\n                    startingRate = options.throttling.initialOpsPerSecond;\n                }\n                // The initial validation step ensures that the maxOpsPerSecond is\n                // greater than initialOpsPerSecond. If this inequality is true, that\n                // means initialOpsPerSecond was not set and maxOpsPerSecond is less\n                // than the default starting rate.\n                if (maxRate < startingRate) {\n                    startingRate = maxRate;\n                }\n                // Ensure that the batch size is not larger than the number of allowed\n                // operations per second.\n                if (startingRate < this._maxBatchSize) {\n                    this._maxBatchSize = startingRate;\n                }\n            }\n            this._rateLimiter = new rate_limiter_1.RateLimiter(startingRate, RATE_LIMITER_MULTIPLIER, RATE_LIMITER_MULTIPLIER_MILLIS, maxRate);\n        }\n    }\n    /**\n     * Create a document with the provided data. This single operation will fail\n     * if a document exists at its location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {T} data The object to serialize as the document.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the write. If the write fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * bulkWriter\n     *  .create(documentRef, {foo: 'bar'})\n     *  .then(result => {\n     *    console.log('Successfully executed write at: ', result);\n     *  })\n     *  .catch(err => {\n     *    console.log('Write failed with: ', err);\n     *  });\n     * });\n     * ```\n     */\n    create(documentRef, data) {\n        this._verifyNotClosed();\n        return this._enqueue(documentRef, 'create', bulkCommitBatch => bulkCommitBatch.create(documentRef, data));\n    }\n    /**\n     * Delete a document from the database.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the batch if the\n     * document doesn't exist or was last updated at a different time.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the delete. If the delete fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * bulkWriter\n     *  .delete(documentRef)\n     *  .then(result => {\n     *    console.log('Successfully deleted document');\n     *  })\n     *  .catch(err => {\n     *    console.log('Delete failed with: ', err);\n     *  });\n     * });\n     * ```\n     */\n    delete(documentRef, precondition) {\n        this._verifyNotClosed();\n        return this._enqueue(documentRef, 'delete', bulkCommitBatch => bulkCommitBatch.delete(documentRef, precondition));\n    }\n    /**\n     * Write to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document does not\n     * exist yet, it will be created. If you pass [SetOptions]{@link SetOptions}.,\n     * the provided data can be merged into the existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call remain\n     * untouched. If your input sets any field to an empty map, all nested fields\n     * are overwritten.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided, set()\n     * only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched. If your input sets any field to\n     * an empty map, all nested fields are overwritten.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the write. If the write fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * bulkWriter\n     *  .set(documentRef, {foo: 'bar'})\n     *  .then(result => {\n     *    console.log('Successfully executed write at: ', result);\n     *  })\n     *  .catch(err => {\n     *    console.log('Write failed with: ', err);\n     *  });\n     * });\n     * ```\n     */\n    set(documentRef, data, options) {\n        this._verifyNotClosed();\n        return this._enqueue(documentRef, 'set', bulkCommitBatch => {\n            if (options) {\n                return bulkCommitBatch.set(documentRef, data, options);\n            }\n            else {\n                return bulkCommitBatch.set(documentRef, data);\n            }\n        });\n    }\n    /**\n     * Update fields of the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document doesn't yet\n     * exist, the update fails and the entire batch will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object containing the\n     * fields and values with which to update the document or the path of the\n     * first field to update.\n     * @param {...(Precondition|*|string|FieldPath)} preconditionOrValues - An\n     * alternating list of field paths and values to update or a Precondition to\n     * restrict this update\n     * @throws {Error} If the provided input is not valid Firestore data.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the write. If the write fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * bulkWriter\n     *  .update(documentRef, {foo: 'bar'})\n     *  .then(result => {\n     *    console.log('Successfully executed write at: ', result);\n     *  })\n     *  .catch(err => {\n     *    console.log('Write failed with: ', err);\n     *  });\n     * });\n     * ```\n     */\n    update(documentRef, dataOrField, ...preconditionOrValues) {\n        this._verifyNotClosed();\n        return this._enqueue(documentRef, 'update', bulkCommitBatch => bulkCommitBatch.update(documentRef, dataOrField, ...preconditionOrValues));\n    }\n    /**\n     * Callback function set by {@link BulkWriter#onWriteResult} that is run\n     * every time a {@link BulkWriter} operation successfully completes.\n     *\n     * @callback BulkWriter~successCallback\n     * @param {DocumentReference} documentRef The document reference the\n     * operation was performed on\n     * @param {WriteResult} result The server write time of the operation.\n     */\n    /**\n     * Attaches a listener that is run every time a BulkWriter operation\n     * successfully completes.\n     *\n     * @param {BulkWriter~successCallback} successCallback A callback to be\n     * called every time a BulkWriter operation successfully completes.\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter\n     *   .onWriteResult((documentRef, result) => {\n     *     console.log(\n     *       'Successfully executed write on document: ',\n     *       documentRef,\n     *       ' at: ',\n     *       result\n     *     );\n     *   });\n     * ```\n     */\n    onWriteResult(successCallback) {\n        this._successFn = successCallback;\n    }\n    /**\n     * Callback function set by {@link BulkWriter#onWriteError} that is run when\n     * a write fails in order to determine whether {@link BulkWriter} should\n     * retry the operation.\n     *\n     * @callback BulkWriter~shouldRetryCallback\n     * @param {BulkWriterError} error The error object with information about the\n     * operation and error.\n     * @returns {boolean} Whether or not to retry the failed operation. Returning\n     * `true` retries the operation. Returning `false` will stop the retry loop.\n     */\n    /**\n     * Attaches an error handler listener that is run every time a BulkWriter\n     * operation fails.\n     *\n     * BulkWriter has a default error handler that retries UNAVAILABLE and\n     * ABORTED errors up to a maximum of 10 failed attempts. When an error\n     * handler is specified, the default error handler will be overwritten.\n     *\n     * @param shouldRetryCallback {BulkWriter~shouldRetryCallback} A callback to\n     * be called every time a BulkWriter operation fails. Returning `true` will\n     * retry the operation. Returning `false` will stop the retry loop.\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter\n     *   .onWriteError((error) => {\n     *     if (\n     *       error.code === GrpcStatus.UNAVAILABLE &&\n     *       error.failedAttempts < MAX_RETRY_ATTEMPTS\n     *     ) {\n     *       return true;\n     *     } else {\n     *       console.log('Failed write at document: ', error.documentRef);\n     *       return false;\n     *     }\n     *   });\n     * ```\n     */\n    onWriteError(shouldRetryCallback) {\n        this._errorHandlerSet = true;\n        this._errorFn = shouldRetryCallback;\n    }\n    /**\n     * Commits all writes that have been enqueued up to this point in parallel.\n     *\n     * Returns a Promise that resolves when all currently queued operations have\n     * been committed. The Promise will never be rejected since the results for\n     * each individual operation are conveyed via their individual Promises.\n     *\n     * The Promise resolves immediately if there are no pending writes. Otherwise,\n     * the Promise waits for all previously issued writes, but it does not wait\n     * for writes that were added after the method is called. If you want to wait\n     * for additional writes, call `flush()` again.\n     *\n     * @return {Promise<void>} A promise that resolves when all enqueued writes\n     * up to this point have been committed.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(documentRef, {foo: 'bar'});\n     * bulkWriter.update(documentRef2, {foo: 'bar'});\n     * bulkWriter.delete(documentRef3);\n     * await flush().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     * ```\n     */\n    flush() {\n        this._verifyNotClosed();\n        this._scheduleCurrentBatch(/* flush= */ true);\n        // Mark the most recent operation as flushed to ensure that the batch\n        // containing it will be sent once it's popped from the buffer.\n        if (this._bufferedOperations.length > 0) {\n            this._bufferedOperations[this._bufferedOperations.length - 1].operation.markFlushed();\n        }\n        return this._lastOp;\n    }\n    /**\n     * Commits all enqueued writes and marks the BulkWriter instance as closed.\n     *\n     * After calling `close()`, calling any method will throw an error. Any\n     * retries scheduled as part of an `onWriteError()` handler will be run\n     * before the `close()` promise resolves.\n     *\n     * Returns a Promise that resolves when there are no more pending writes. The\n     * Promise will never be rejected. Calling this method will send all requests.\n     * The promise resolves immediately if there are no pending writes.\n     *\n     * @return {Promise<void>} A promise that resolves when all enqueued writes\n     * up to this point have been committed.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(documentRef, {foo: 'bar'});\n     * bulkWriter.update(documentRef2, {foo: 'bar'});\n     * bulkWriter.delete(documentRef3);\n     * await close().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     * ```\n     */\n    close() {\n        if (!this._closePromise) {\n            this._closePromise = this.flush();\n            this.firestore._decrementBulkWritersCount();\n        }\n        return this._closePromise;\n    }\n    /**\n     * Throws an error if the BulkWriter instance has been closed.\n     * @private\n     * @internal\n     */\n    _verifyNotClosed() {\n        if (this._closePromise) {\n            throw new Error('BulkWriter has already been closed.');\n        }\n    }\n    /**\n     * Sends the current batch and resets `this._bulkCommitBatch`.\n     *\n     * @param flush If provided, keeps re-sending operations until no more\n     * operations are enqueued. This allows retries to resolve as part of a\n     * `flush()` or `close()` call.\n     * @private\n     * @internal\n     */\n    _scheduleCurrentBatch(flush = false) {\n        if (this._bulkCommitBatch._opCount === 0)\n            return;\n        const pendingBatch = this._bulkCommitBatch;\n        this._bulkCommitBatch = new BulkCommitBatch(this.firestore, this._maxBatchSize);\n        // Use the write with the longest backoff duration when determining backoff.\n        const highestBackoffDuration = pendingBatch.pendingOps.reduce((prev, cur) => (prev.backoffDuration > cur.backoffDuration ? prev : cur)).backoffDuration;\n        const backoffMsWithJitter = BulkWriter._applyJitter(highestBackoffDuration);\n        const delayedExecution = new util_1.Deferred();\n        if (backoffMsWithJitter > 0) {\n            (0, backoff_1.delayExecution)(() => delayedExecution.resolve(), backoffMsWithJitter);\n        }\n        else {\n            delayedExecution.resolve();\n        }\n        delayedExecution.promise.then(() => this._sendBatch(pendingBatch, flush));\n    }\n    /**\n     * Sends the provided batch once the rate limiter does not require any delay.\n     * @private\n     * @internal\n     */\n    async _sendBatch(batch, flush = false) {\n        const tag = (0, util_1.requestTag)();\n        // Send the batch if it is does not require any delay, or schedule another\n        // attempt after the appropriate timeout.\n        const underRateLimit = this._rateLimiter.tryMakeRequest(batch._opCount);\n        if (underRateLimit) {\n            await batch.bulkCommit({ requestTag: tag });\n            if (flush)\n                this._scheduleCurrentBatch(flush);\n        }\n        else {\n            const delayMs = this._rateLimiter.getNextRequestDelayMs(batch._opCount);\n            (0, logger_1.logger)('BulkWriter._sendBatch', tag, `Backing off for ${delayMs} seconds`);\n            (0, backoff_1.delayExecution)(() => this._sendBatch(batch, flush), delayMs);\n        }\n    }\n    /**\n     * Adds a 30% jitter to the provided backoff.\n     *\n     * @private\n     * @internal\n     */\n    static _applyJitter(backoffMs) {\n        if (backoffMs === 0)\n            return 0;\n        // Random value in [-0.3, 0.3].\n        const jitter = exports.DEFAULT_JITTER_FACTOR * (Math.random() * 2 - 1);\n        return Math.min(backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS, backoffMs + jitter * backoffMs);\n    }\n    /**\n     * Schedules and runs the provided operation on the next available batch.\n     * @private\n     * @internal\n     */\n    _enqueue(ref, type, enqueueOnBatchCallback) {\n        const bulkWriterOp = new BulkWriterOperation(ref, type, this._sendFn.bind(this, enqueueOnBatchCallback), this._errorFn.bind(this), this._successFn.bind(this));\n        // Swallow the error if the developer has set an error listener. This\n        // prevents UnhandledPromiseRejections from being thrown if a floating\n        // BulkWriter operation promise fails when an error handler is specified.\n        //\n        // This is done here in order to chain the caught promise onto `lastOp`,\n        // which ensures that flush() resolves after the operation promise.\n        const userPromise = bulkWriterOp.promise.catch(err => {\n            if (!this._errorHandlerSet) {\n                throw err;\n            }\n            else {\n                return bulkWriterOp.promise;\n            }\n        });\n        // Advance the `_lastOp` pointer. This ensures that `_lastOp` only resolves\n        // when both the previous and the current write resolve.\n        this._lastOp = this._lastOp.then(() => (0, util_1.silencePromise)(userPromise));\n        // Schedule the operation if the BulkWriter has fewer than the maximum\n        // number of allowed pending operations, or add the operation to the\n        // buffer.\n        if (this._pendingOpsCount < this._maxPendingOpCount) {\n            this._pendingOpsCount++;\n            this._sendFn(enqueueOnBatchCallback, bulkWriterOp);\n        }\n        else {\n            this._bufferedOperations.push(new BufferedOperation(bulkWriterOp, () => {\n                this._pendingOpsCount++;\n                this._sendFn(enqueueOnBatchCallback, bulkWriterOp);\n            }));\n        }\n        // Chain the BulkWriter operation promise with the buffer processing logic\n        // in order to ensure that it runs and that subsequent operations are\n        // enqueued before the next batch is scheduled in `_sendBatch()`.\n        return userPromise\n            .then(res => {\n            this._pendingOpsCount--;\n            this._processBufferedOps();\n            return res;\n        })\n            .catch(err => {\n            this._pendingOpsCount--;\n            this._processBufferedOps();\n            throw err;\n        });\n    }\n    /**\n     * Manages the pending operation counter and schedules the next BulkWriter\n     * operation if we're under the maximum limit.\n     * @private\n     * @internal\n     */\n    _processBufferedOps() {\n        if (this._pendingOpsCount < this._maxPendingOpCount &&\n            this._bufferedOperations.length > 0) {\n            const nextOp = this._bufferedOperations.shift();\n            nextOp.sendFn();\n        }\n    }\n    /**\n     * Schedules the provided operations on current BulkCommitBatch.\n     * Sends the BulkCommitBatch if it reaches maximum capacity.\n     *\n     * @private\n     * @internal\n     */\n    _sendFn(enqueueOnBatchCallback, op) {\n        // A backoff duration greater than 0 implies that this batch is a retry.\n        // Retried writes are sent with a batch size of 10 in order to guarantee\n        // that the batch is under the 10MiB limit.\n        if (op.backoffDuration > 0) {\n            if (this._bulkCommitBatch.pendingOps.length >= exports.RETRY_MAX_BATCH_SIZE) {\n                this._scheduleCurrentBatch(/* flush= */ false);\n            }\n            this._bulkCommitBatch.setMaxBatchSize(exports.RETRY_MAX_BATCH_SIZE);\n        }\n        if (this._bulkCommitBatch.has(op.ref)) {\n            // Create a new batch since the backend doesn't support batches with two\n            // writes to the same document.\n            this._scheduleCurrentBatch();\n        }\n        enqueueOnBatchCallback(this._bulkCommitBatch);\n        this._bulkCommitBatch.processLastOperation(op);\n        if (this._bulkCommitBatch._opCount === this._bulkCommitBatch.maxBatchSize) {\n            this._scheduleCurrentBatch();\n        }\n        else if (op.flushed) {\n            // If flush() was called before this operation was enqueued into a batch,\n            // we still need to schedule it.\n            this._scheduleCurrentBatch(/* flush= */ true);\n        }\n    }\n}\nexports.BulkWriter = BulkWriter;\n/**\n * Validates the use of 'value' as BulkWriterOptions.\n *\n * @private\n * @internal\n * @param value The BulkWriterOptions object to validate.\n * @throws if the input is not a valid BulkWriterOptions object.\n */\nfunction validateBulkWriterOptions(value) {\n    if ((0, validate_1.validateOptional)(value, { optional: true })) {\n        return;\n    }\n    const argName = 'options';\n    if (!(0, util_1.isObject)(value)) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(argName, 'bulkWriter() options argument')} Input is not an object.`);\n    }\n    const options = value;\n    if (options.throttling === undefined ||\n        typeof options.throttling === 'boolean') {\n        return;\n    }\n    if (options.throttling.initialOpsPerSecond !== undefined) {\n        (0, validate_1.validateInteger)('initialOpsPerSecond', options.throttling.initialOpsPerSecond, {\n            minValue: 1,\n        });\n    }\n    if (options.throttling.maxOpsPerSecond !== undefined) {\n        (0, validate_1.validateInteger)('maxOpsPerSecond', options.throttling.maxOpsPerSecond, {\n            minValue: 1,\n        });\n        if (options.throttling.initialOpsPerSecond !== undefined &&\n            options.throttling.initialOpsPerSecond >\n                options.throttling.maxOpsPerSecond) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(argName, 'bulkWriter() options argument')} \"maxOpsPerSecond\" cannot be less than \"initialOpsPerSecond\".`);\n        }\n    }\n}\n//# sourceMappingURL=bulk-writer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL2J1bGstd3JpdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixHQUFHLHVCQUF1QixHQUFHLDZCQUE2QixHQUFHLDRDQUE0QyxHQUFHLDRDQUE0QyxHQUFHLDRCQUE0QjtBQUN6TSxlQUFlLG1CQUFPLENBQUMsc0JBQVE7QUFDL0Isa0JBQWtCLG1CQUFPLENBQUMsb0ZBQVc7QUFDckMsdUJBQXVCLG1CQUFPLENBQUMsOEZBQWdCO0FBQy9DLG9CQUFvQixtQkFBTyxDQUFDLHdGQUFhO0FBQ3pDLGVBQWUsbUJBQU8sQ0FBQyw4RUFBUTtBQUMvQixzQkFBc0IsbUJBQU8sQ0FBQyw0RkFBZTtBQUM3QyxtQkFBbUIsbUJBQU8sQ0FBQyxzRkFBWTtBQUN2QyxpQkFBaUIsbUJBQU8sQ0FBQyxrRkFBVTtBQUNuQyxxQkFBcUIsbUJBQU8sQ0FBQyw4R0FBd0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtR0FBbUcsZUFBZTtBQUNsSDtBQUNBLGdEQUFnRCx1REFBdUQ7QUFDdkc7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGdDQUFnQztBQUN6RTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDBDQUEwQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QywrSEFBb0Q7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQW1CO0FBQ2xDO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGdCQUFnQixPQUFPO0FBQ3ZCLGlCQUFpQixzQkFBc0I7QUFDdkM7QUFDQSx5QkFBeUIsc0JBQXNCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFdBQVc7QUFDekM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFtQjtBQUNsQztBQUNBLGVBQWUsZUFBZTtBQUM5QjtBQUNBLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0EsaUJBQWlCLHNCQUFzQjtBQUN2QztBQUNBLHlCQUF5QixzQkFBc0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix3QkFBd0I7QUFDbkQsK0RBQStELGlCQUFpQjtBQUNoRjtBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEM7QUFDQSxlQUFlLEdBQUc7QUFDbEIsZUFBZSxhQUFhO0FBQzVCLGdCQUFnQixPQUFPO0FBQ3ZCLGVBQWUsVUFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxlQUFlLDJCQUEyQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsc0JBQXNCO0FBQ3ZDO0FBQ0EseUJBQXlCLHNCQUFzQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFdBQVc7QUFDdEM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix3QkFBd0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEM7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QztBQUNBO0FBQ0EsZUFBZSxzQ0FBc0M7QUFDckQ7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGlCQUFpQixzQkFBc0I7QUFDdkM7QUFDQSx5QkFBeUIsc0JBQXNCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFdBQVc7QUFDekM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxnQ0FBZ0M7QUFDakUscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEM7QUFDQSxlQUFlLGFBQWE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNEJBQTRCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQywrQkFBK0I7QUFDaEUsb0RBQW9ELGtCQUFrQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGdDQUFnQztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGVBQWU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLFdBQVc7QUFDbEQsd0NBQXdDLFdBQVc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZUFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsV0FBVztBQUNsRCx3Q0FBd0MsV0FBVztBQUNuRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxpQkFBaUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRixTQUFTO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGdCQUFnQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixrRkFBa0Y7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrRkFBa0Y7QUFDakg7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL2J1bGstd3JpdGVyLmpzPzJiZjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ1bGtXcml0ZXIgPSBleHBvcnRzLkJ1bGtXcml0ZXJFcnJvciA9IGV4cG9ydHMuREVGQVVMVF9KSVRURVJfRkFDVE9SID0gZXhwb3J0cy5ERUZBVUxUX01BWElNVU1fT1BTX1BFUl9TRUNPTkRfTElNSVQgPSBleHBvcnRzLkRFRkFVTFRfSU5JVElBTF9PUFNfUEVSX1NFQ09ORF9MSU1JVCA9IGV4cG9ydHMuUkVUUllfTUFYX0JBVENIX1NJWkUgPSB2b2lkIDA7XG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpO1xuY29uc3QgYmFja29mZl8xID0gcmVxdWlyZShcIi4vYmFja29mZlwiKTtcbmNvbnN0IHJhdGVfbGltaXRlcl8xID0gcmVxdWlyZShcIi4vcmF0ZS1saW1pdGVyXCIpO1xuY29uc3QgdGltZXN0YW1wXzEgPSByZXF1aXJlKFwiLi90aW1lc3RhbXBcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuY29uc3Qgd3JpdGVfYmF0Y2hfMSA9IHJlcXVpcmUoXCIuL3dyaXRlLWJhdGNoXCIpO1xuY29uc3QgdmFsaWRhdGVfMSA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRlXCIpO1xuY29uc3QgbG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9sb2dnZXJcIik7XG5jb25zdCB0cmFjZV91dGlsXzEgPSByZXF1aXJlKFwiLi90ZWxlbWV0cnkvdHJhY2UtdXRpbFwiKTtcbi8qIVxuICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHdyaXRlcyB0aGF0IGNhbiBiZSBpbiBhIHNpbmdsZSBiYXRjaC5cbiAqL1xuY29uc3QgTUFYX0JBVENIX1NJWkUgPSAyMDtcbi8qIVxuICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHdyaXRlcyBjYW4gYmUgY2FuIGluIGEgc2luZ2xlIGJhdGNoIHRoYXQgaXMgYmVpbmcgcmV0cmllZC5cbiAqL1xuZXhwb3J0cy5SRVRSWV9NQVhfQkFUQ0hfU0laRSA9IDEwO1xuLyohXG4gKiBUaGUgc3RhcnRpbmcgbWF4aW11bSBudW1iZXIgb2Ygb3BlcmF0aW9ucyBwZXIgc2Vjb25kIGFzIGFsbG93ZWQgYnkgdGhlXG4gKiA1MDAvNTAvNSBydWxlLlxuICpcbiAqIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2ZpcmVzdG9yZS9iZXN0LXByYWN0aWNlcyNyYW1waW5nX3VwX3RyYWZmaWMuXG4gKi9cbmV4cG9ydHMuREVGQVVMVF9JTklUSUFMX09QU19QRVJfU0VDT05EX0xJTUlUID0gNTAwO1xuLyohXG4gKiBUaGUgbWF4aW11bSBudW1iZXIgb2Ygb3BlcmF0aW9ucyBwZXIgc2Vjb25kIGFzIGFsbG93ZWQgYnkgdGhlIDUwMC81MC81IHJ1bGUuXG4gKiBCeSBkZWZhdWx0IHRoZSByYXRlIGxpbWl0ZXIgd2lsbCBub3QgZXhjZWVkIHRoaXMgdmFsdWUuXG4gKlxuICogaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvZmlyZXN0b3JlL2Jlc3QtcHJhY3RpY2VzI3JhbXBpbmdfdXBfdHJhZmZpYy5cbiAqL1xuZXhwb3J0cy5ERUZBVUxUX01BWElNVU1fT1BTX1BFUl9TRUNPTkRfTElNSVQgPSAxMDAwMDtcbi8qIVxuICogVGhlIGRlZmF1bHQgaml0dGVyIHRvIGFwcGx5IHRvIHRoZSBleHBvbmVudGlhbCBiYWNrb2ZmIHVzZWQgaW4gcmV0cmllcy4gRm9yXG4gKiBleGFtcGxlLCBhIGZhY3RvciBvZiAwLjMgbWVhbnMgYSAzMCUgaml0dGVyIGlzIGFwcGxpZWQuXG4gKi9cbmV4cG9ydHMuREVGQVVMVF9KSVRURVJfRkFDVE9SID0gMC4zO1xuLyohXG4gKiBUaGUgcmF0ZSBieSB3aGljaCB0byBpbmNyZWFzZSB0aGUgY2FwYWNpdHkgYXMgc3BlY2lmaWVkIGJ5IHRoZSA1MDAvNTAvNSBydWxlLlxuICovXG5jb25zdCBSQVRFX0xJTUlURVJfTVVMVElQTElFUiA9IDEuNTtcbi8qIVxuICogSG93IG9mdGVuIHRoZSBvcGVyYXRpb25zIHBlciBzZWNvbmQgY2FwYWNpdHkgc2hvdWxkIGluY3JlYXNlIGluIG1pbGxpc2Vjb25kc1xuICogYXMgc3BlY2lmaWVkIGJ5IHRoZSA1MDAvNTAvNSBydWxlLlxuICovXG5jb25zdCBSQVRFX0xJTUlURVJfTVVMVElQTElFUl9NSUxMSVMgPSA1ICogNjAgKiAxMDAwO1xuLyohXG4gKiBUaGUgZGVmYXVsdCBtYXhpbXVtIG51bWJlciBvZiBwZW5kaW5nIG9wZXJhdGlvbnMgdGhhdCBjYW4gYmUgZW5xdWV1ZWQgb250byBhXG4gKiBCdWxrV3JpdGVyIGluc3RhbmNlLiBBbiBvcGVyYXRpb24gaXMgY29uc2lkZXJlZCBwZW5kaW5nIGlmIEJ1bGtXcml0ZXIgaGFzXG4gKiBzZW50IGl0IHZpYSBSUEMgYW5kIGlzIGF3YWl0aW5nIHRoZSByZXN1bHQuIEJ1bGtXcml0ZXIgYnVmZmVycyBhZGRpdGlvbmFsXG4gKiB3cml0ZXMgYWZ0ZXIgdGhpcyBtYW55IHBlbmRpbmcgb3BlcmF0aW9ucyBpbiBvcmRlciB0byBhdm9pZGluZyBnb2luZyBPT00uXG4gKi9cbmNvbnN0IERFRkFVTFRfTUFYSU1VTV9QRU5ESU5HX09QRVJBVElPTlNfQ09VTlQgPSA1MDA7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBzaW5nbGUgd3JpdGUgZm9yIEJ1bGtXcml0ZXIsIGVuY2Fwc3VsYXRpbmcgb3BlcmF0aW9uIGRpc3BhdGNoXG4gKiBhbmQgZXJyb3IgaGFuZGxpbmcuXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEJ1bGtXcml0ZXJPcGVyYXRpb24ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSByZWYgVGhlIGRvY3VtZW50IHJlZmVyZW5jZSBiZWluZyB3cml0dGVuIHRvLlxuICAgICAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlIG9mIG9wZXJhdGlvbiB0aGF0IGNyZWF0ZWQgdGhpcyB3cml0ZS5cbiAgICAgKiBAcGFyYW0gc2VuZEZuIEEgY2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gdGhlIG9wZXJhdGlvbiBzaG91bGQgYmUgc2VudC5cbiAgICAgKiBAcGFyYW0gZXJyb3JGbiBUaGUgdXNlciBwcm92aWRlZCBnbG9iYWwgZXJyb3IgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIHN1Y2Nlc3NGbiBUaGUgdXNlciBwcm92aWRlZCBnbG9iYWwgc3VjY2VzcyBjYWxsYmFjay5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZWYsIHR5cGUsIHNlbmRGbiwgZXJyb3JGbiwgc3VjY2Vzc0ZuKSB7XG4gICAgICAgIHRoaXMucmVmID0gcmVmO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnNlbmRGbiA9IHNlbmRGbjtcbiAgICAgICAgdGhpcy5lcnJvckZuID0gZXJyb3JGbjtcbiAgICAgICAgdGhpcy5zdWNjZXNzRm4gPSBzdWNjZXNzRm47XG4gICAgICAgIHRoaXMuZGVmZXJyZWQgPSBuZXcgdXRpbF8xLkRlZmVycmVkKCk7XG4gICAgICAgIHRoaXMuZmFpbGVkQXR0ZW1wdHMgPSAwO1xuICAgICAgICB0aGlzLl9iYWNrb2ZmRHVyYXRpb24gPSAwO1xuICAgICAgICAvKiogV2hldGhlciBmbHVzaCgpIHdhcyBjYWxsZWQgd2hlbiB0aGlzIHdhcyB0aGUgbGFzdCBlbnF1ZXVlZCBvcGVyYXRpb24uICovXG4gICAgICAgIHRoaXMuX2ZsdXNoZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0IHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuICAgIGdldCBiYWNrb2ZmRHVyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrb2ZmRHVyYXRpb247XG4gICAgfVxuICAgIG1hcmtGbHVzaGVkKCkge1xuICAgICAgICB0aGlzLl9mbHVzaGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0IGZsdXNoZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mbHVzaGVkO1xuICAgIH1cbiAgICBvbkVycm9yKGVycm9yKSB7XG4gICAgICAgICsrdGhpcy5mYWlsZWRBdHRlbXB0cztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJ1bGtXcml0ZXJFcnJvciA9IG5ldyBCdWxrV3JpdGVyRXJyb3IoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSwgdGhpcy5yZWYsIHRoaXMudHlwZSwgdGhpcy5mYWlsZWRBdHRlbXB0cyk7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRSZXRyeSA9IHRoaXMuZXJyb3JGbihidWxrV3JpdGVyRXJyb3IpO1xuICAgICAgICAgICAgKDAsIGxvZ2dlcl8xLmxvZ2dlcikoJ0J1bGtXcml0ZXIuZXJyb3JGbicsIG51bGwsICdSYW4gZXJyb3IgY2FsbGJhY2sgb24gZXJyb3IgY29kZTonLCBlcnJvci5jb2RlLCAnLCBzaG91bGRSZXRyeTonLCBzaG91bGRSZXRyeSwgJyBmb3IgZG9jdW1lbnQ6JywgdGhpcy5yZWYucGF0aCk7XG4gICAgICAgICAgICBpZiAoc2hvdWxkUmV0cnkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RTdGF0dXMgPSBlcnJvci5jb2RlO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQmFja29mZkR1cmF0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kRm4odGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmVycmVkLnJlamVjdChidWxrV3JpdGVyRXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoICh1c2VyQ2FsbGJhY2tFcnJvcikge1xuICAgICAgICAgICAgdGhpcy5kZWZlcnJlZC5yZWplY3QodXNlckNhbGxiYWNrRXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUJhY2tvZmZEdXJhdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMubGFzdFN0YXR1cyA9PT0gOCAvKiBTdGF0dXNDb2RlLlJFU09VUkNFX0VYSEFVU1RFRCAqLykge1xuICAgICAgICAgICAgdGhpcy5fYmFja29mZkR1cmF0aW9uID0gYmFja29mZl8xLkRFRkFVTFRfQkFDS09GRl9NQVhfREVMQVlfTVM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fYmFja29mZkR1cmF0aW9uID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9iYWNrb2ZmRHVyYXRpb24gPSBiYWNrb2ZmXzEuREVGQVVMVF9CQUNLT0ZGX0lOSVRJQUxfREVMQVlfTVM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9iYWNrb2ZmRHVyYXRpb24gKj0gYmFja29mZl8xLkRFRkFVTFRfQkFDS09GRl9GQUNUT1I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25TdWNjZXNzKHJlc3VsdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5zdWNjZXNzRm4odGhpcy5yZWYsIHJlc3VsdCk7XG4gICAgICAgICAgICB0aGlzLmRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAodXNlckNhbGxiYWNrRXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmZXJyZWQucmVqZWN0KHVzZXJDYWxsYmFja0Vycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVXNlZCB0byByZXByZXNlbnQgYSBiYXRjaCBvbiB0aGUgQmF0Y2hRdWV1ZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEJ1bGtDb21taXRCYXRjaCBleHRlbmRzIHdyaXRlX2JhdGNoXzEuV3JpdGVCYXRjaCB7XG4gICAgY29uc3RydWN0b3IoZmlyZXN0b3JlLCBtYXhCYXRjaFNpemUpIHtcbiAgICAgICAgc3VwZXIoZmlyZXN0b3JlKTtcbiAgICAgICAgLy8gVGhlIHNldCBvZiBkb2N1bWVudCByZWZlcmVuY2UgcGF0aHMgcHJlc2VudCBpbiB0aGUgV3JpdGVCYXRjaC5cbiAgICAgICAgdGhpcy5kb2NQYXRocyA9IG5ldyBTZXQoKTtcbiAgICAgICAgLy8gQW4gYXJyYXkgb2YgcGVuZGluZyB3cml0ZSBvcGVyYXRpb25zLiBPbmx5IGNvbnRhaW5zIHdyaXRlcyB0aGF0IGhhdmUgbm90XG4gICAgICAgIC8vIGJlZW4gcmVzb2x2ZWQuXG4gICAgICAgIHRoaXMucGVuZGluZ09wcyA9IFtdO1xuICAgICAgICB0aGlzLl9tYXhCYXRjaFNpemUgPSBtYXhCYXRjaFNpemU7XG4gICAgfVxuICAgIGdldCBtYXhCYXRjaFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXhCYXRjaFNpemU7XG4gICAgfVxuICAgIHNldE1heEJhdGNoU2l6ZShzaXplKSB7XG4gICAgICAgIGFzc2VydCh0aGlzLnBlbmRpbmdPcHMubGVuZ3RoIDw9IHNpemUsICdOZXcgYmF0Y2ggc2l6ZSBjYW5ub3QgYmUgbGVzcyB0aGFuIHRoZSBudW1iZXIgb2YgZW5xdWV1ZWQgd3JpdGVzJyk7XG4gICAgICAgIHRoaXMuX21heEJhdGNoU2l6ZSA9IHNpemU7XG4gICAgfVxuICAgIGhhcyhkb2N1bWVudFJlZikge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2NQYXRocy5oYXMoZG9jdW1lbnRSZWYucGF0aCk7XG4gICAgfVxuICAgIGFzeW5jIGJ1bGtDb21taXQob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maXJlc3RvcmUuX3RyYWNlVXRpbC5zdGFydEFjdGl2ZVNwYW4odHJhY2VfdXRpbF8xLlNQQU5fTkFNRV9CVUxLX1dSSVRFUl9DT01NSVQsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZXF1ZXN0VGFnKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoMCwgdXRpbF8xLnJlcXVlc3RUYWcpKCk7XG4gICAgICAgICAgICAvLyBDYXB0dXJlIHRoZSBlcnJvciBzdGFjayB0byBwcmVzZXJ2ZSBzdGFjayB0cmFjaW5nIGFjcm9zcyBhc3luYyBjYWxscy5cbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gRXJyb3IoKS5zdGFjaztcbiAgICAgICAgICAgIGxldCByZXNwb25zZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgKDAsIGxvZ2dlcl8xLmxvZ2dlcikoJ0J1bGtDb21taXRCYXRjaC5idWxrQ29tbWl0JywgdGFnLCBgU2VuZGluZyBuZXh0IGJhdGNoIHdpdGggJHt0aGlzLl9vcENvdW50fSB3cml0ZXNgKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXRyeUNvZGVzID0gKDAsIHV0aWxfMS5nZXRSZXRyeUNvZGVzKSgnYmF0Y2hXcml0ZScpO1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5fY29tbWl0KHsgcmV0cnlDb2RlcywgbWV0aG9kTmFtZTogJ2JhdGNoV3JpdGUnLCByZXF1ZXN0VGFnOiB0YWcgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgLy8gTWFwIHRoZSBmYWlsdXJlIHRvIGVhY2ggaW5kaXZpZHVhbCB3cml0ZSdzIHJlc3VsdC5cbiAgICAgICAgICAgICAgICBjb25zdCBvcHMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiB0aGlzLnBlbmRpbmdPcHMubGVuZ3RoIH0pO1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgICAgICB3cml0ZVJlc3VsdHM6IG9wcy5tYXAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBvcHMubWFwKCgpID0+IGVyciksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKHJlc3BvbnNlLndyaXRlUmVzdWx0cyB8fCBbXSkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAvLyBTaW5jZSBkZWxldGUgb3BlcmF0aW9ucyBjdXJyZW50bHkgZG8gbm90IGhhdmUgd3JpdGUgdGltZXMsIHVzZSBhXG4gICAgICAgICAgICAgICAgLy8gc2VudGluZWwgVGltZXN0YW1wIHZhbHVlLlxuICAgICAgICAgICAgICAgIC8vIFRPRE8oYi8xNTg1MDI2NjQpOiBVc2UgYWN0dWFsIGRlbGV0ZSB0aW1lc3RhbXAuXG4gICAgICAgICAgICAgICAgY29uc3QgREVMRVRFX1RJTUVTVEFNUF9TRU5USU5FTCA9IHRpbWVzdGFtcF8xLlRpbWVzdGFtcC5mcm9tTWlsbGlzKDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IChyZXNwb25zZS5zdGF0dXMgfHwgW10pW2ldO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMuY29kZSA9PT0gMCAvKiBTdGF0dXNDb2RlLk9LICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZVRpbWUgPSB0aW1lc3RhbXBfMS5UaW1lc3RhbXAuZnJvbVByb3RvKHJlc3BvbnNlLndyaXRlUmVzdWx0c1tpXS51cGRhdGVUaW1lIHx8IERFTEVURV9USU1FU1RBTVBfU0VOVElORUwpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdPcHNbaV0ub25TdWNjZXNzKG5ldyB3cml0ZV9iYXRjaF8xLldyaXRlUmVzdWx0KHVwZGF0ZVRpbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IChyZXF1aXJlKCdnb29nbGUtZ2F4L2J1aWxkL3NyYy9mYWxsYmFjaycpLkdvb2dsZUVycm9yKShzdGF0dXMubWVzc2FnZSB8fCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICBlcnJvci5jb2RlID0gc3RhdHVzLmNvZGU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ09wc1tpXS5vbkVycm9yKCgwLCB1dGlsXzEud3JhcEVycm9yKShlcnJvciwgc3RhY2spKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIFt0cmFjZV91dGlsXzEuQVRUUklCVVRFX0tFWV9ET0NfQ09VTlRdOiB0aGlzLl9vcENvdW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGVscGVyIHRvIHVwZGF0ZSBkYXRhIHN0cnVjdHVyZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBvcGVyYXRpb24gYW5kIHJldHVybnNcbiAgICAgKiB0aGUgcmVzdWx0LlxuICAgICAqL1xuICAgIHByb2Nlc3NMYXN0T3BlcmF0aW9uKG9wKSB7XG4gICAgICAgIGFzc2VydCghdGhpcy5kb2NQYXRocy5oYXMob3AucmVmLnBhdGgpLCAnQmF0Y2ggc2hvdWxkIG5vdCBjb250YWluIHdyaXRlcyB0byB0aGUgc2FtZSBkb2N1bWVudCcpO1xuICAgICAgICB0aGlzLmRvY1BhdGhzLmFkZChvcC5yZWYucGF0aCk7XG4gICAgICAgIHRoaXMucGVuZGluZ09wcy5wdXNoKG9wKTtcbiAgICB9XG59XG4vKipcbiAqIFVzZWQgdG8gcmVwcmVzZW50IGEgYnVmZmVyZWQgQnVsa1dyaXRlck9wZXJhdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEJ1ZmZlcmVkT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcGVyYXRpb24sIHNlbmRGbikge1xuICAgICAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICAgICAgdGhpcy5zZW5kRm4gPSBzZW5kRm47XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSBCdWxrV3JpdGVyIG9wZXJhdGlvbiBmYWlscy5cbiAqXG4gKiBAY2xhc3MgQnVsa1dyaXRlckVycm9yXG4gKi9cbmNsYXNzIEJ1bGtXcml0ZXJFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBUaGUgc3RhdHVzIGNvZGUgb2YgdGhlIGVycm9yLiAqL1xuICAgIGNvZGUsIFxuICAgIC8qKiBUaGUgZXJyb3IgbWVzc2FnZSBvZiB0aGUgZXJyb3IuICovXG4gICAgbWVzc2FnZSwgXG4gICAgLyoqIFRoZSBkb2N1bWVudCByZWZlcmVuY2UgdGhlIG9wZXJhdGlvbiB3YXMgcGVyZm9ybWVkIG9uLiAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZG9jdW1lbnRSZWYsIFxuICAgIC8qKiBUaGUgdHlwZSBvZiBvcGVyYXRpb24gcGVyZm9ybWVkLiAqL1xuICAgIG9wZXJhdGlvblR5cGUsIFxuICAgIC8qKiBIb3cgbWFueSB0aW1lcyB0aGlzIG9wZXJhdGlvbiBoYXMgYmVlbiBhdHRlbXB0ZWQgdW5zdWNjZXNzZnVsbHkuICovXG4gICAgZmFpbGVkQXR0ZW1wdHMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRSZWYgPSBkb2N1bWVudFJlZjtcbiAgICAgICAgdGhpcy5vcGVyYXRpb25UeXBlID0gb3BlcmF0aW9uVHlwZTtcbiAgICAgICAgdGhpcy5mYWlsZWRBdHRlbXB0cyA9IGZhaWxlZEF0dGVtcHRzO1xuICAgIH1cbn1cbmV4cG9ydHMuQnVsa1dyaXRlckVycm9yID0gQnVsa1dyaXRlckVycm9yO1xuLyoqXG4gKiBBIEZpcmVzdG9yZSBCdWxrV3JpdGVyIHRoYXQgY2FuIGJlIHVzZWQgdG8gcGVyZm9ybSBhIGxhcmdlIG51bWJlciBvZiB3cml0ZXNcbiAqIGluIHBhcmFsbGVsLlxuICpcbiAqIEBjbGFzcyBCdWxrV3JpdGVyXG4gKi9cbmNsYXNzIEJ1bGtXcml0ZXIge1xuICAgIC8vIFZpc2libGUgZm9yIHRlc3RpbmcuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfZ2V0QnVmZmVyZWRPcGVyYXRpb25zQ291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idWZmZXJlZE9wZXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgICAvLyBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX3NldE1heEJhdGNoU2l6ZShzaXplKSB7XG4gICAgICAgIGFzc2VydCh0aGlzLl9idWxrQ29tbWl0QmF0Y2gucGVuZGluZ09wcy5sZW5ndGggPT09IDAsICdCdWxrQ29tbWl0QmF0Y2ggc2hvdWxkIGJlIGVtcHR5Jyk7XG4gICAgICAgIHRoaXMuX21heEJhdGNoU2l6ZSA9IHNpemU7XG4gICAgICAgIHRoaXMuX2J1bGtDb21taXRCYXRjaCA9IG5ldyBCdWxrQ29tbWl0QmF0Y2godGhpcy5maXJlc3RvcmUsIHNpemUpO1xuICAgIH1cbiAgICAvLyBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX3NldE1heFBlbmRpbmdPcENvdW50KG5ld01heCkge1xuICAgICAgICB0aGlzLl9tYXhQZW5kaW5nT3BDb3VudCA9IG5ld01heDtcbiAgICB9XG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgY29uc3RydWN0b3IoZmlyZXN0b3JlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHRoaXMuZmlyZXN0b3JlID0gZmlyZXN0b3JlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHdyaXRlcyB0aGF0IGNhbiBiZSBpbiBhIHNpbmdsZSBiYXRjaC5cbiAgICAgICAgICogVmlzaWJsZSBmb3IgdGVzdGluZy5cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9tYXhCYXRjaFNpemUgPSBNQVhfQkFUQ0hfU0laRTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBiYXRjaCB0aGF0IGlzIGN1cnJlbnRseSB1c2VkIHRvIHNjaGVkdWxlIG9wZXJhdGlvbnMuIE9uY2UgdGhpcyBiYXRjaFxuICAgICAgICAgKiByZWFjaGVzIG1heGltdW0gY2FwYWNpdHksIGEgbmV3IGJhdGNoIGlzIGNyZWF0ZWQuXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYnVsa0NvbW1pdEJhdGNoID0gbmV3IEJ1bGtDb21taXRCYXRjaCh0aGlzLmZpcmVzdG9yZSwgdGhpcy5fbWF4QmF0Y2hTaXplKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcG9pbnRlciB0byB0aGUgdGFpbCBvZiBhbGwgYWN0aXZlIEJ1bGtXcml0ZXIgb3BlcmF0aW9ucy4gVGhpcyBwb2ludGVyXG4gICAgICAgICAqIGlzIGFkdmFuY2VkIGV2ZXJ5IHRpbWUgYSBuZXcgd3JpdGUgaXMgZW5xdWV1ZWQuXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbGFzdE9wID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIHBlbmRpbmcgb3BlcmF0aW9ucyBlbnF1ZXVlZCBvbiB0aGlzIEJ1bGtXcml0ZXIgaW5zdGFuY2UuXG4gICAgICAgICAqIEFuIG9wZXJhdGlvbiBpcyBjb25zaWRlcmVkIHBlbmRpbmcgaWYgQnVsa1dyaXRlciBoYXMgc2VudCBpdCB2aWEgUlBDIGFuZFxuICAgICAgICAgKiBpcyBhd2FpdGluZyB0aGUgcmVzdWx0LlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3BlbmRpbmdPcHNDb3VudCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBhcnJheSBjb250YWluaW5nIGJ1ZmZlcmVkIEJ1bGtXcml0ZXIgb3BlcmF0aW9ucyBhZnRlciB0aGUgbWF4aW11bSBudW1iZXJcbiAgICAgICAgICogb2YgcGVuZGluZyBvcGVyYXRpb25zIGhhcyBiZWVuIGVucXVldWVkLlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2J1ZmZlcmVkT3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciBhIGN1c3RvbSBlcnJvciBoYW5kbGVyIGhhcyBiZWVuIHNldC4gQnVsa1dyaXRlciBvbmx5IHN3YWxsb3dzXG4gICAgICAgICAqIGVycm9ycyBpZiBhbiBlcnJvciBoYW5kbGVyIGlzIHNldC4gT3RoZXJ3aXNlLCBhbiBVbmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uXG4gICAgICAgICAqIGlzIHRocm93biBieSBOb2RlIGlmIGFuIG9wZXJhdGlvbiBwcm9taXNlIGlzIHJlamVjdGVkIHdpdGhvdXQgYmVpbmdcbiAgICAgICAgICogaGFuZGxlZC5cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9lcnJvckhhbmRsZXJTZXQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBwZW5kaW5nIG9wZXJhdGlvbnMgdGhhdCBjYW4gYmUgZW5xdWV1ZWQgb250byB0aGlzXG4gICAgICAgICAqIEJ1bGtXcml0ZXIgaW5zdGFuY2UuIE9uY2UgdGhlIHRoaXMgbnVtYmVyIG9mIHdyaXRlcyBoYXZlIGJlZW4gZW5xdWV1ZWQsXG4gICAgICAgICAqIHN1YnNlcXVlbnQgd3JpdGVzIGFyZSBidWZmZXJlZC5cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9tYXhQZW5kaW5nT3BDb3VudCA9IERFRkFVTFRfTUFYSU1VTV9QRU5ESU5HX09QRVJBVElPTlNfQ09VTlQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdXNlci1wcm92aWRlZCBjYWxsYmFjayB0byBiZSBydW4gZXZlcnkgdGltZSBhIEJ1bGtXcml0ZXIgb3BlcmF0aW9uXG4gICAgICAgICAqIHN1Y2Nlc3NmdWxseSBjb21wbGV0ZXMuXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fc3VjY2Vzc0ZuID0gKCkgPT4geyB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHVzZXItcHJvdmlkZWQgY2FsbGJhY2sgdG8gYmUgcnVuIGV2ZXJ5IHRpbWUgYSBCdWxrV3JpdGVyIG9wZXJhdGlvblxuICAgICAgICAgKiBmYWlscy5cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9lcnJvckZuID0gZXJyb3IgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNSZXRyeWFibGVEZWxldGVFcnJvciA9IGVycm9yLm9wZXJhdGlvblR5cGUgPT09ICdkZWxldGUnICYmXG4gICAgICAgICAgICAgICAgZXJyb3IuY29kZSA9PT0gMTMgLyogU3RhdHVzQ29kZS5JTlRFUk5BTCAqLztcbiAgICAgICAgICAgIGNvbnN0IHJldHJ5Q29kZXMgPSAoMCwgdXRpbF8xLmdldFJldHJ5Q29kZXMpKCdiYXRjaFdyaXRlJyk7XG4gICAgICAgICAgICByZXR1cm4gKChyZXRyeUNvZGVzLmluY2x1ZGVzKGVycm9yLmNvZGUpIHx8IGlzUmV0cnlhYmxlRGVsZXRlRXJyb3IpICYmXG4gICAgICAgICAgICAgICAgZXJyb3IuZmFpbGVkQXR0ZW1wdHMgPCBiYWNrb2ZmXzEuTUFYX1JFVFJZX0FUVEVNUFRTKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5maXJlc3RvcmUuX2luY3JlbWVudEJ1bGtXcml0ZXJzQ291bnQoKTtcbiAgICAgICAgdmFsaWRhdGVCdWxrV3JpdGVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgaWYgKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudGhyb3R0bGluZykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzLl9yYXRlTGltaXRlciA9IG5ldyByYXRlX2xpbWl0ZXJfMS5SYXRlTGltaXRlcihOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IHN0YXJ0aW5nUmF0ZSA9IGV4cG9ydHMuREVGQVVMVF9JTklUSUFMX09QU19QRVJfU0VDT05EX0xJTUlUO1xuICAgICAgICAgICAgbGV0IG1heFJhdGUgPSBleHBvcnRzLkRFRkFVTFRfTUFYSU1VTV9PUFNfUEVSX1NFQ09ORF9MSU1JVDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy50aHJvdHRsaW5nKSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgaWYgKCgoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudGhyb3R0bGluZykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1heE9wc1BlclNlY29uZCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBtYXhSYXRlID0gb3B0aW9ucy50aHJvdHRsaW5nLm1heE9wc1BlclNlY29uZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCgoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudGhyb3R0bGluZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmluaXRpYWxPcHNQZXJTZWNvbmQpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRpbmdSYXRlID0gb3B0aW9ucy50aHJvdHRsaW5nLmluaXRpYWxPcHNQZXJTZWNvbmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRoZSBpbml0aWFsIHZhbGlkYXRpb24gc3RlcCBlbnN1cmVzIHRoYXQgdGhlIG1heE9wc1BlclNlY29uZCBpc1xuICAgICAgICAgICAgICAgIC8vIGdyZWF0ZXIgdGhhbiBpbml0aWFsT3BzUGVyU2Vjb25kLiBJZiB0aGlzIGluZXF1YWxpdHkgaXMgdHJ1ZSwgdGhhdFxuICAgICAgICAgICAgICAgIC8vIG1lYW5zIGluaXRpYWxPcHNQZXJTZWNvbmQgd2FzIG5vdCBzZXQgYW5kIG1heE9wc1BlclNlY29uZCBpcyBsZXNzXG4gICAgICAgICAgICAgICAgLy8gdGhhbiB0aGUgZGVmYXVsdCBzdGFydGluZyByYXRlLlxuICAgICAgICAgICAgICAgIGlmIChtYXhSYXRlIDwgc3RhcnRpbmdSYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0aW5nUmF0ZSA9IG1heFJhdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBiYXRjaCBzaXplIGlzIG5vdCBsYXJnZXIgdGhhbiB0aGUgbnVtYmVyIG9mIGFsbG93ZWRcbiAgICAgICAgICAgICAgICAvLyBvcGVyYXRpb25zIHBlciBzZWNvbmQuXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0aW5nUmF0ZSA8IHRoaXMuX21heEJhdGNoU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXhCYXRjaFNpemUgPSBzdGFydGluZ1JhdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcmF0ZUxpbWl0ZXIgPSBuZXcgcmF0ZV9saW1pdGVyXzEuUmF0ZUxpbWl0ZXIoc3RhcnRpbmdSYXRlLCBSQVRFX0xJTUlURVJfTVVMVElQTElFUiwgUkFURV9MSU1JVEVSX01VTFRJUExJRVJfTUlMTElTLCBtYXhSYXRlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBkb2N1bWVudCB3aXRoIHRoZSBwcm92aWRlZCBkYXRhLiBUaGlzIHNpbmdsZSBvcGVyYXRpb24gd2lsbCBmYWlsXG4gICAgICogaWYgYSBkb2N1bWVudCBleGlzdHMgYXQgaXRzIGxvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtEb2N1bWVudFJlZmVyZW5jZX0gZG9jdW1lbnRSZWYgQSByZWZlcmVuY2UgdG8gdGhlIGRvY3VtZW50IHRvIGJlXG4gICAgICogY3JlYXRlZC5cbiAgICAgKiBAcGFyYW0ge1R9IGRhdGEgVGhlIG9iamVjdCB0byBzZXJpYWxpemUgYXMgdGhlIGRvY3VtZW50LlxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcHJvdmlkZWQgaW5wdXQgaXMgbm90IGEgdmFsaWQgRmlyZXN0b3JlIGRvY3VtZW50LlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFdyaXRlUmVzdWx0Pn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVzdWx0IG9mXG4gICAgICogdGhlIHdyaXRlLiBJZiB0aGUgd3JpdGUgZmFpbHMsIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIHdpdGggYVxuICAgICAqIFtCdWxrV3JpdGVyRXJyb3Jde0BsaW5rIEJ1bGtXcml0ZXJFcnJvcn0uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIGxldCBidWxrV3JpdGVyID0gZmlyZXN0b3JlLmJ1bGtXcml0ZXIoKTtcbiAgICAgKiBsZXQgZG9jdW1lbnRSZWYgPSBmaXJlc3RvcmUuY29sbGVjdGlvbignY29sJykuZG9jKCk7XG4gICAgICpcbiAgICAgKiBidWxrV3JpdGVyXG4gICAgICogIC5jcmVhdGUoZG9jdW1lbnRSZWYsIHtmb286ICdiYXInfSlcbiAgICAgKiAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgKiAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IGV4ZWN1dGVkIHdyaXRlIGF0OiAnLCByZXN1bHQpO1xuICAgICAqICB9KVxuICAgICAqICAuY2F0Y2goZXJyID0+IHtcbiAgICAgKiAgICBjb25zb2xlLmxvZygnV3JpdGUgZmFpbGVkIHdpdGg6ICcsIGVycik7XG4gICAgICogIH0pO1xuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNyZWF0ZShkb2N1bWVudFJlZiwgZGF0YSkge1xuICAgICAgICB0aGlzLl92ZXJpZnlOb3RDbG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VucXVldWUoZG9jdW1lbnRSZWYsICdjcmVhdGUnLCBidWxrQ29tbWl0QmF0Y2ggPT4gYnVsa0NvbW1pdEJhdGNoLmNyZWF0ZShkb2N1bWVudFJlZiwgZGF0YSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBkb2N1bWVudCBmcm9tIHRoZSBkYXRhYmFzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RG9jdW1lbnRSZWZlcmVuY2V9IGRvY3VtZW50UmVmIEEgcmVmZXJlbmNlIHRvIHRoZSBkb2N1bWVudCB0byBiZVxuICAgICAqIGRlbGV0ZWQuXG4gICAgICogQHBhcmFtIHtQcmVjb25kaXRpb249fSBwcmVjb25kaXRpb24gQSBwcmVjb25kaXRpb24gdG8gZW5mb3JjZSBmb3IgdGhpc1xuICAgICAqIGRlbGV0ZS5cbiAgICAgKiBAcGFyYW0ge1RpbWVzdGFtcD19IHByZWNvbmRpdGlvbi5sYXN0VXBkYXRlVGltZSBJZiBzZXQsIGVuZm9yY2VzIHRoYXQgdGhlXG4gICAgICogZG9jdW1lbnQgd2FzIGxhc3QgdXBkYXRlZCBhdCBsYXN0VXBkYXRlVGltZS4gRmFpbHMgdGhlIGJhdGNoIGlmIHRoZVxuICAgICAqIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3Qgb3Igd2FzIGxhc3QgdXBkYXRlZCBhdCBhIGRpZmZlcmVudCB0aW1lLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFdyaXRlUmVzdWx0Pn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVzdWx0IG9mXG4gICAgICogdGhlIGRlbGV0ZS4gSWYgdGhlIGRlbGV0ZSBmYWlscywgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQgd2l0aCBhXG4gICAgICogW0J1bGtXcml0ZXJFcnJvcl17QGxpbmsgQnVsa1dyaXRlckVycm9yfS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogbGV0IGJ1bGtXcml0ZXIgPSBmaXJlc3RvcmUuYnVsa1dyaXRlcigpO1xuICAgICAqIGxldCBkb2N1bWVudFJlZiA9IGZpcmVzdG9yZS5kb2MoJ2NvbC9kb2MnKTtcbiAgICAgKlxuICAgICAqIGJ1bGtXcml0ZXJcbiAgICAgKiAgLmRlbGV0ZShkb2N1bWVudFJlZilcbiAgICAgKiAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgKiAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IGRlbGV0ZWQgZG9jdW1lbnQnKTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLmNhdGNoKGVyciA9PiB7XG4gICAgICogICAgY29uc29sZS5sb2coJ0RlbGV0ZSBmYWlsZWQgd2l0aDogJywgZXJyKTtcbiAgICAgKiAgfSk7XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZGVsZXRlKGRvY3VtZW50UmVmLCBwcmVjb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5fdmVyaWZ5Tm90Q2xvc2VkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbnF1ZXVlKGRvY3VtZW50UmVmLCAnZGVsZXRlJywgYnVsa0NvbW1pdEJhdGNoID0+IGJ1bGtDb21taXRCYXRjaC5kZWxldGUoZG9jdW1lbnRSZWYsIHByZWNvbmRpdGlvbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZSB0byB0aGUgZG9jdW1lbnQgcmVmZXJyZWQgdG8gYnkgdGhlIHByb3ZpZGVkXG4gICAgICogW0RvY3VtZW50UmVmZXJlbmNlXXtAbGluayBEb2N1bWVudFJlZmVyZW5jZX0uIElmIHRoZSBkb2N1bWVudCBkb2VzIG5vdFxuICAgICAqIGV4aXN0IHlldCwgaXQgd2lsbCBiZSBjcmVhdGVkLiBJZiB5b3UgcGFzcyBbU2V0T3B0aW9uc117QGxpbmsgU2V0T3B0aW9uc30uLFxuICAgICAqIHRoZSBwcm92aWRlZCBkYXRhIGNhbiBiZSBtZXJnZWQgaW50byB0aGUgZXhpc3RpbmcgZG9jdW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0RvY3VtZW50UmVmZXJlbmNlfSBkb2N1bWVudFJlZiBBIHJlZmVyZW5jZSB0byB0aGUgZG9jdW1lbnQgdG8gYmVcbiAgICAgKiBzZXQuXG4gICAgICogQHBhcmFtIHtUfSBkYXRhIFRoZSBvYmplY3QgdG8gc2VyaWFsaXplIGFzIHRoZSBkb2N1bWVudC5cbiAgICAgKiBAcGFyYW0ge1NldE9wdGlvbnM9fSBvcHRpb25zIEFuIG9iamVjdCB0byBjb25maWd1cmUgdGhlIHNldCBiZWhhdmlvci5cbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHByb3ZpZGVkIGlucHV0IGlzIG5vdCBhIHZhbGlkIEZpcmVzdG9yZSBkb2N1bWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRpb25zLm1lcmdlIC0gSWYgdHJ1ZSwgc2V0KCkgbWVyZ2VzIHRoZSB2YWx1ZXNcbiAgICAgKiBzcGVjaWZpZWQgaW4gaXRzIGRhdGEgYXJndW1lbnQuIEZpZWxkcyBvbWl0dGVkIGZyb20gdGhpcyBzZXQoKSBjYWxsIHJlbWFpblxuICAgICAqIHVudG91Y2hlZC4gSWYgeW91ciBpbnB1dCBzZXRzIGFueSBmaWVsZCB0byBhbiBlbXB0eSBtYXAsIGFsbCBuZXN0ZWQgZmllbGRzXG4gICAgICogYXJlIG92ZXJ3cml0dGVuLlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xGaWVsZFBhdGg+PX0gb3B0aW9ucy5tZXJnZUZpZWxkcyAtIElmIHByb3ZpZGVkLCBzZXQoKVxuICAgICAqIG9ubHkgcmVwbGFjZXMgdGhlIHNwZWNpZmllZCBmaWVsZCBwYXRocy4gQW55IGZpZWxkIHBhdGggdGhhdCBpcyBub3RcbiAgICAgKiBzcGVjaWZpZWQgaXMgaWdub3JlZCBhbmQgcmVtYWlucyB1bnRvdWNoZWQuIElmIHlvdXIgaW5wdXQgc2V0cyBhbnkgZmllbGQgdG9cbiAgICAgKiBhbiBlbXB0eSBtYXAsIGFsbCBuZXN0ZWQgZmllbGRzIGFyZSBvdmVyd3JpdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxXcml0ZVJlc3VsdD59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHJlc3VsdCBvZlxuICAgICAqIHRoZSB3cml0ZS4gSWYgdGhlIHdyaXRlIGZhaWxzLCB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCB3aXRoIGFcbiAgICAgKiBbQnVsa1dyaXRlckVycm9yXXtAbGluayBCdWxrV3JpdGVyRXJyb3J9LlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIGxldCBidWxrV3JpdGVyID0gZmlyZXN0b3JlLmJ1bGtXcml0ZXIoKTtcbiAgICAgKiBsZXQgZG9jdW1lbnRSZWYgPSBmaXJlc3RvcmUuY29sbGVjdGlvbignY29sJykuZG9jKCk7XG4gICAgICpcbiAgICAgKiBidWxrV3JpdGVyXG4gICAgICogIC5zZXQoZG9jdW1lbnRSZWYsIHtmb286ICdiYXInfSlcbiAgICAgKiAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgKiAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IGV4ZWN1dGVkIHdyaXRlIGF0OiAnLCByZXN1bHQpO1xuICAgICAqICB9KVxuICAgICAqICAuY2F0Y2goZXJyID0+IHtcbiAgICAgKiAgICBjb25zb2xlLmxvZygnV3JpdGUgZmFpbGVkIHdpdGg6ICcsIGVycik7XG4gICAgICogIH0pO1xuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNldChkb2N1bWVudFJlZiwgZGF0YSwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl92ZXJpZnlOb3RDbG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VucXVldWUoZG9jdW1lbnRSZWYsICdzZXQnLCBidWxrQ29tbWl0QmF0Y2ggPT4ge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVsa0NvbW1pdEJhdGNoLnNldChkb2N1bWVudFJlZiwgZGF0YSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVsa0NvbW1pdEJhdGNoLnNldChkb2N1bWVudFJlZiwgZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgZmllbGRzIG9mIHRoZSBkb2N1bWVudCByZWZlcnJlZCB0byBieSB0aGUgcHJvdmlkZWRcbiAgICAgKiBbRG9jdW1lbnRSZWZlcmVuY2Vde0BsaW5rIERvY3VtZW50UmVmZXJlbmNlfS4gSWYgdGhlIGRvY3VtZW50IGRvZXNuJ3QgeWV0XG4gICAgICogZXhpc3QsIHRoZSB1cGRhdGUgZmFpbHMgYW5kIHRoZSBlbnRpcmUgYmF0Y2ggd2lsbCBiZSByZWplY3RlZC5cbiAgICAgKlxuICAgICAqIFRoZSB1cGRhdGUoKSBtZXRob2QgYWNjZXB0cyBlaXRoZXIgYW4gb2JqZWN0IHdpdGggZmllbGQgcGF0aHMgZW5jb2RlZCBhc1xuICAgICAqIGtleXMgYW5kIGZpZWxkIHZhbHVlcyBlbmNvZGVkIGFzIHZhbHVlcywgb3IgYSB2YXJpYWJsZSBudW1iZXIgb2YgYXJndW1lbnRzXG4gICAgICogdGhhdCBhbHRlcm5hdGUgYmV0d2VlbiBmaWVsZCBwYXRocyBhbmQgZmllbGQgdmFsdWVzLiBOZXN0ZWQgZmllbGRzIGNhbiBiZVxuICAgICAqIHVwZGF0ZWQgYnkgcHJvdmlkaW5nIGRvdC1zZXBhcmF0ZWQgZmllbGQgcGF0aCBzdHJpbmdzIG9yIGJ5IHByb3ZpZGluZ1xuICAgICAqIEZpZWxkUGF0aCBvYmplY3RzLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBBIFByZWNvbmRpdGlvbiByZXN0cmljdGluZyB0aGlzIHVwZGF0ZSBjYW4gYmUgc3BlY2lmaWVkIGFzIHRoZSBsYXN0XG4gICAgICogYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0RvY3VtZW50UmVmZXJlbmNlfSBkb2N1bWVudFJlZiBBIHJlZmVyZW5jZSB0byB0aGUgZG9jdW1lbnQgdG8gYmVcbiAgICAgKiB1cGRhdGVkLlxuICAgICAqIEBwYXJhbSB7VXBkYXRlRGF0YXxzdHJpbmd8RmllbGRQYXRofSBkYXRhT3JGaWVsZCBBbiBvYmplY3QgY29udGFpbmluZyB0aGVcbiAgICAgKiBmaWVsZHMgYW5kIHZhbHVlcyB3aXRoIHdoaWNoIHRvIHVwZGF0ZSB0aGUgZG9jdW1lbnQgb3IgdGhlIHBhdGggb2YgdGhlXG4gICAgICogZmlyc3QgZmllbGQgdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7Li4uKFByZWNvbmRpdGlvbnwqfHN0cmluZ3xGaWVsZFBhdGgpfSBwcmVjb25kaXRpb25PclZhbHVlcyAtIEFuXG4gICAgICogYWx0ZXJuYXRpbmcgbGlzdCBvZiBmaWVsZCBwYXRocyBhbmQgdmFsdWVzIHRvIHVwZGF0ZSBvciBhIFByZWNvbmRpdGlvbiB0b1xuICAgICAqIHJlc3RyaWN0IHRoaXMgdXBkYXRlXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwcm92aWRlZCBpbnB1dCBpcyBub3QgdmFsaWQgRmlyZXN0b3JlIGRhdGEuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8V3JpdGVSZXN1bHQ+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZXN1bHQgb2ZcbiAgICAgKiB0aGUgd3JpdGUuIElmIHRoZSB3cml0ZSBmYWlscywgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQgd2l0aCBhXG4gICAgICogW0J1bGtXcml0ZXJFcnJvcl17QGxpbmsgQnVsa1dyaXRlckVycm9yfS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogbGV0IGJ1bGtXcml0ZXIgPSBmaXJlc3RvcmUuYnVsa1dyaXRlcigpO1xuICAgICAqIGxldCBkb2N1bWVudFJlZiA9IGZpcmVzdG9yZS5kb2MoJ2NvbC9kb2MnKTtcbiAgICAgKlxuICAgICAqIGJ1bGtXcml0ZXJcbiAgICAgKiAgLnVwZGF0ZShkb2N1bWVudFJlZiwge2ZvbzogJ2Jhcid9KVxuICAgICAqICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAqICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgZXhlY3V0ZWQgd3JpdGUgYXQ6ICcsIHJlc3VsdCk7XG4gICAgICogIH0pXG4gICAgICogIC5jYXRjaChlcnIgPT4ge1xuICAgICAqICAgIGNvbnNvbGUubG9nKCdXcml0ZSBmYWlsZWQgd2l0aDogJywgZXJyKTtcbiAgICAgKiAgfSk7XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgdXBkYXRlKGRvY3VtZW50UmVmLCBkYXRhT3JGaWVsZCwgLi4ucHJlY29uZGl0aW9uT3JWYWx1ZXMpIHtcbiAgICAgICAgdGhpcy5fdmVyaWZ5Tm90Q2xvc2VkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbnF1ZXVlKGRvY3VtZW50UmVmLCAndXBkYXRlJywgYnVsa0NvbW1pdEJhdGNoID0+IGJ1bGtDb21taXRCYXRjaC51cGRhdGUoZG9jdW1lbnRSZWYsIGRhdGFPckZpZWxkLCAuLi5wcmVjb25kaXRpb25PclZhbHVlcykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBmdW5jdGlvbiBzZXQgYnkge0BsaW5rIEJ1bGtXcml0ZXIjb25Xcml0ZVJlc3VsdH0gdGhhdCBpcyBydW5cbiAgICAgKiBldmVyeSB0aW1lIGEge0BsaW5rIEJ1bGtXcml0ZXJ9IG9wZXJhdGlvbiBzdWNjZXNzZnVsbHkgY29tcGxldGVzLlxuICAgICAqXG4gICAgICogQGNhbGxiYWNrIEJ1bGtXcml0ZXJ+c3VjY2Vzc0NhbGxiYWNrXG4gICAgICogQHBhcmFtIHtEb2N1bWVudFJlZmVyZW5jZX0gZG9jdW1lbnRSZWYgVGhlIGRvY3VtZW50IHJlZmVyZW5jZSB0aGVcbiAgICAgKiBvcGVyYXRpb24gd2FzIHBlcmZvcm1lZCBvblxuICAgICAqIEBwYXJhbSB7V3JpdGVSZXN1bHR9IHJlc3VsdCBUaGUgc2VydmVyIHdyaXRlIHRpbWUgb2YgdGhlIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIGxpc3RlbmVyIHRoYXQgaXMgcnVuIGV2ZXJ5IHRpbWUgYSBCdWxrV3JpdGVyIG9wZXJhdGlvblxuICAgICAqIHN1Y2Nlc3NmdWxseSBjb21wbGV0ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0J1bGtXcml0ZXJ+c3VjY2Vzc0NhbGxiYWNrfSBzdWNjZXNzQ2FsbGJhY2sgQSBjYWxsYmFjayB0byBiZVxuICAgICAqIGNhbGxlZCBldmVyeSB0aW1lIGEgQnVsa1dyaXRlciBvcGVyYXRpb24gc3VjY2Vzc2Z1bGx5IGNvbXBsZXRlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIGxldCBidWxrV3JpdGVyID0gZmlyZXN0b3JlLmJ1bGtXcml0ZXIoKTtcbiAgICAgKlxuICAgICAqIGJ1bGtXcml0ZXJcbiAgICAgKiAgIC5vbldyaXRlUmVzdWx0KChkb2N1bWVudFJlZiwgcmVzdWx0KSA9PiB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKFxuICAgICAqICAgICAgICdTdWNjZXNzZnVsbHkgZXhlY3V0ZWQgd3JpdGUgb24gZG9jdW1lbnQ6ICcsXG4gICAgICogICAgICAgZG9jdW1lbnRSZWYsXG4gICAgICogICAgICAgJyBhdDogJyxcbiAgICAgKiAgICAgICByZXN1bHRcbiAgICAgKiAgICAgKTtcbiAgICAgKiAgIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9uV3JpdGVSZXN1bHQoc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX3N1Y2Nlc3NGbiA9IHN1Y2Nlc3NDYWxsYmFjaztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gc2V0IGJ5IHtAbGluayBCdWxrV3JpdGVyI29uV3JpdGVFcnJvcn0gdGhhdCBpcyBydW4gd2hlblxuICAgICAqIGEgd3JpdGUgZmFpbHMgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIHdoZXRoZXIge0BsaW5rIEJ1bGtXcml0ZXJ9IHNob3VsZFxuICAgICAqIHJldHJ5IHRoZSBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAY2FsbGJhY2sgQnVsa1dyaXRlcn5zaG91bGRSZXRyeUNhbGxiYWNrXG4gICAgICogQHBhcmFtIHtCdWxrV3JpdGVyRXJyb3J9IGVycm9yIFRoZSBlcnJvciBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGVcbiAgICAgKiBvcGVyYXRpb24gYW5kIGVycm9yLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0byByZXRyeSB0aGUgZmFpbGVkIG9wZXJhdGlvbi4gUmV0dXJuaW5nXG4gICAgICogYHRydWVgIHJldHJpZXMgdGhlIG9wZXJhdGlvbi4gUmV0dXJuaW5nIGBmYWxzZWAgd2lsbCBzdG9wIHRoZSByZXRyeSBsb29wLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEF0dGFjaGVzIGFuIGVycm9yIGhhbmRsZXIgbGlzdGVuZXIgdGhhdCBpcyBydW4gZXZlcnkgdGltZSBhIEJ1bGtXcml0ZXJcbiAgICAgKiBvcGVyYXRpb24gZmFpbHMuXG4gICAgICpcbiAgICAgKiBCdWxrV3JpdGVyIGhhcyBhIGRlZmF1bHQgZXJyb3IgaGFuZGxlciB0aGF0IHJldHJpZXMgVU5BVkFJTEFCTEUgYW5kXG4gICAgICogQUJPUlRFRCBlcnJvcnMgdXAgdG8gYSBtYXhpbXVtIG9mIDEwIGZhaWxlZCBhdHRlbXB0cy4gV2hlbiBhbiBlcnJvclxuICAgICAqIGhhbmRsZXIgaXMgc3BlY2lmaWVkLCB0aGUgZGVmYXVsdCBlcnJvciBoYW5kbGVyIHdpbGwgYmUgb3ZlcndyaXR0ZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2hvdWxkUmV0cnlDYWxsYmFjayB7QnVsa1dyaXRlcn5zaG91bGRSZXRyeUNhbGxiYWNrfSBBIGNhbGxiYWNrIHRvXG4gICAgICogYmUgY2FsbGVkIGV2ZXJ5IHRpbWUgYSBCdWxrV3JpdGVyIG9wZXJhdGlvbiBmYWlscy4gUmV0dXJuaW5nIGB0cnVlYCB3aWxsXG4gICAgICogcmV0cnkgdGhlIG9wZXJhdGlvbi4gUmV0dXJuaW5nIGBmYWxzZWAgd2lsbCBzdG9wIHRoZSByZXRyeSBsb29wLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogbGV0IGJ1bGtXcml0ZXIgPSBmaXJlc3RvcmUuYnVsa1dyaXRlcigpO1xuICAgICAqXG4gICAgICogYnVsa1dyaXRlclxuICAgICAqICAgLm9uV3JpdGVFcnJvcigoZXJyb3IpID0+IHtcbiAgICAgKiAgICAgaWYgKFxuICAgICAqICAgICAgIGVycm9yLmNvZGUgPT09IEdycGNTdGF0dXMuVU5BVkFJTEFCTEUgJiZcbiAgICAgKiAgICAgICBlcnJvci5mYWlsZWRBdHRlbXB0cyA8IE1BWF9SRVRSWV9BVFRFTVBUU1xuICAgICAqICAgICApIHtcbiAgICAgKiAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgICAgfSBlbHNlIHtcbiAgICAgKiAgICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHdyaXRlIGF0IGRvY3VtZW50OiAnLCBlcnJvci5kb2N1bWVudFJlZik7XG4gICAgICogICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAqICAgICB9XG4gICAgICogICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBvbldyaXRlRXJyb3Ioc2hvdWxkUmV0cnlDYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9lcnJvckhhbmRsZXJTZXQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9lcnJvckZuID0gc2hvdWxkUmV0cnlDYWxsYmFjaztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tbWl0cyBhbGwgd3JpdGVzIHRoYXQgaGF2ZSBiZWVuIGVucXVldWVkIHVwIHRvIHRoaXMgcG9pbnQgaW4gcGFyYWxsZWwuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIGN1cnJlbnRseSBxdWV1ZWQgb3BlcmF0aW9ucyBoYXZlXG4gICAgICogYmVlbiBjb21taXR0ZWQuIFRoZSBQcm9taXNlIHdpbGwgbmV2ZXIgYmUgcmVqZWN0ZWQgc2luY2UgdGhlIHJlc3VsdHMgZm9yXG4gICAgICogZWFjaCBpbmRpdmlkdWFsIG9wZXJhdGlvbiBhcmUgY29udmV5ZWQgdmlhIHRoZWlyIGluZGl2aWR1YWwgUHJvbWlzZXMuXG4gICAgICpcbiAgICAgKiBUaGUgUHJvbWlzZSByZXNvbHZlcyBpbW1lZGlhdGVseSBpZiB0aGVyZSBhcmUgbm8gcGVuZGluZyB3cml0ZXMuIE90aGVyd2lzZSxcbiAgICAgKiB0aGUgUHJvbWlzZSB3YWl0cyBmb3IgYWxsIHByZXZpb3VzbHkgaXNzdWVkIHdyaXRlcywgYnV0IGl0IGRvZXMgbm90IHdhaXRcbiAgICAgKiBmb3Igd3JpdGVzIHRoYXQgd2VyZSBhZGRlZCBhZnRlciB0aGUgbWV0aG9kIGlzIGNhbGxlZC4gSWYgeW91IHdhbnQgdG8gd2FpdFxuICAgICAqIGZvciBhZGRpdGlvbmFsIHdyaXRlcywgY2FsbCBgZmx1c2goKWAgYWdhaW4uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGFsbCBlbnF1ZXVlZCB3cml0ZXNcbiAgICAgKiB1cCB0byB0aGlzIHBvaW50IGhhdmUgYmVlbiBjb21taXR0ZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIGxldCBidWxrV3JpdGVyID0gZmlyZXN0b3JlLmJ1bGtXcml0ZXIoKTtcbiAgICAgKlxuICAgICAqIGJ1bGtXcml0ZXIuY3JlYXRlKGRvY3VtZW50UmVmLCB7Zm9vOiAnYmFyJ30pO1xuICAgICAqIGJ1bGtXcml0ZXIudXBkYXRlKGRvY3VtZW50UmVmMiwge2ZvbzogJ2Jhcid9KTtcbiAgICAgKiBidWxrV3JpdGVyLmRlbGV0ZShkb2N1bWVudFJlZjMpO1xuICAgICAqIGF3YWl0IGZsdXNoKCkudGhlbigoKSA9PiB7XG4gICAgICogICBjb25zb2xlLmxvZygnRXhlY3V0ZWQgYWxsIHdyaXRlcycpO1xuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZsdXNoKCkge1xuICAgICAgICB0aGlzLl92ZXJpZnlOb3RDbG9zZWQoKTtcbiAgICAgICAgdGhpcy5fc2NoZWR1bGVDdXJyZW50QmF0Y2goLyogZmx1c2g9ICovIHRydWUpO1xuICAgICAgICAvLyBNYXJrIHRoZSBtb3N0IHJlY2VudCBvcGVyYXRpb24gYXMgZmx1c2hlZCB0byBlbnN1cmUgdGhhdCB0aGUgYmF0Y2hcbiAgICAgICAgLy8gY29udGFpbmluZyBpdCB3aWxsIGJlIHNlbnQgb25jZSBpdCdzIHBvcHBlZCBmcm9tIHRoZSBidWZmZXIuXG4gICAgICAgIGlmICh0aGlzLl9idWZmZXJlZE9wZXJhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyZWRPcGVyYXRpb25zW3RoaXMuX2J1ZmZlcmVkT3BlcmF0aW9ucy5sZW5ndGggLSAxXS5vcGVyYXRpb24ubWFya0ZsdXNoZWQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbGFzdE9wO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21taXRzIGFsbCBlbnF1ZXVlZCB3cml0ZXMgYW5kIG1hcmtzIHRoZSBCdWxrV3JpdGVyIGluc3RhbmNlIGFzIGNsb3NlZC5cbiAgICAgKlxuICAgICAqIEFmdGVyIGNhbGxpbmcgYGNsb3NlKClgLCBjYWxsaW5nIGFueSBtZXRob2Qgd2lsbCB0aHJvdyBhbiBlcnJvci4gQW55XG4gICAgICogcmV0cmllcyBzY2hlZHVsZWQgYXMgcGFydCBvZiBhbiBgb25Xcml0ZUVycm9yKClgIGhhbmRsZXIgd2lsbCBiZSBydW5cbiAgICAgKiBiZWZvcmUgdGhlIGBjbG9zZSgpYCBwcm9taXNlIHJlc29sdmVzLlxuICAgICAqXG4gICAgICogUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZXJlIGFyZSBubyBtb3JlIHBlbmRpbmcgd3JpdGVzLiBUaGVcbiAgICAgKiBQcm9taXNlIHdpbGwgbmV2ZXIgYmUgcmVqZWN0ZWQuIENhbGxpbmcgdGhpcyBtZXRob2Qgd2lsbCBzZW5kIGFsbCByZXF1ZXN0cy5cbiAgICAgKiBUaGUgcHJvbWlzZSByZXNvbHZlcyBpbW1lZGlhdGVseSBpZiB0aGVyZSBhcmUgbm8gcGVuZGluZyB3cml0ZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGFsbCBlbnF1ZXVlZCB3cml0ZXNcbiAgICAgKiB1cCB0byB0aGlzIHBvaW50IGhhdmUgYmVlbiBjb21taXR0ZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIGxldCBidWxrV3JpdGVyID0gZmlyZXN0b3JlLmJ1bGtXcml0ZXIoKTtcbiAgICAgKlxuICAgICAqIGJ1bGtXcml0ZXIuY3JlYXRlKGRvY3VtZW50UmVmLCB7Zm9vOiAnYmFyJ30pO1xuICAgICAqIGJ1bGtXcml0ZXIudXBkYXRlKGRvY3VtZW50UmVmMiwge2ZvbzogJ2Jhcid9KTtcbiAgICAgKiBidWxrV3JpdGVyLmRlbGV0ZShkb2N1bWVudFJlZjMpO1xuICAgICAqIGF3YWl0IGNsb3NlKCkudGhlbigoKSA9PiB7XG4gICAgICogICBjb25zb2xlLmxvZygnRXhlY3V0ZWQgYWxsIHdyaXRlcycpO1xuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2Nsb3NlUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5fY2xvc2VQcm9taXNlID0gdGhpcy5mbHVzaCgpO1xuICAgICAgICAgICAgdGhpcy5maXJlc3RvcmUuX2RlY3JlbWVudEJ1bGtXcml0ZXJzQ291bnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2VQcm9taXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIEJ1bGtXcml0ZXIgaW5zdGFuY2UgaGFzIGJlZW4gY2xvc2VkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX3ZlcmlmeU5vdENsb3NlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nsb3NlUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCdWxrV3JpdGVyIGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIHRoZSBjdXJyZW50IGJhdGNoIGFuZCByZXNldHMgYHRoaXMuX2J1bGtDb21taXRCYXRjaGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmx1c2ggSWYgcHJvdmlkZWQsIGtlZXBzIHJlLXNlbmRpbmcgb3BlcmF0aW9ucyB1bnRpbCBubyBtb3JlXG4gICAgICogb3BlcmF0aW9ucyBhcmUgZW5xdWV1ZWQuIFRoaXMgYWxsb3dzIHJldHJpZXMgdG8gcmVzb2x2ZSBhcyBwYXJ0IG9mIGFcbiAgICAgKiBgZmx1c2goKWAgb3IgYGNsb3NlKClgIGNhbGwuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfc2NoZWR1bGVDdXJyZW50QmF0Y2goZmx1c2ggPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5fYnVsa0NvbW1pdEJhdGNoLl9vcENvdW50ID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBwZW5kaW5nQmF0Y2ggPSB0aGlzLl9idWxrQ29tbWl0QmF0Y2g7XG4gICAgICAgIHRoaXMuX2J1bGtDb21taXRCYXRjaCA9IG5ldyBCdWxrQ29tbWl0QmF0Y2godGhpcy5maXJlc3RvcmUsIHRoaXMuX21heEJhdGNoU2l6ZSk7XG4gICAgICAgIC8vIFVzZSB0aGUgd3JpdGUgd2l0aCB0aGUgbG9uZ2VzdCBiYWNrb2ZmIGR1cmF0aW9uIHdoZW4gZGV0ZXJtaW5pbmcgYmFja29mZi5cbiAgICAgICAgY29uc3QgaGlnaGVzdEJhY2tvZmZEdXJhdGlvbiA9IHBlbmRpbmdCYXRjaC5wZW5kaW5nT3BzLnJlZHVjZSgocHJldiwgY3VyKSA9PiAocHJldi5iYWNrb2ZmRHVyYXRpb24gPiBjdXIuYmFja29mZkR1cmF0aW9uID8gcHJldiA6IGN1cikpLmJhY2tvZmZEdXJhdGlvbjtcbiAgICAgICAgY29uc3QgYmFja29mZk1zV2l0aEppdHRlciA9IEJ1bGtXcml0ZXIuX2FwcGx5Sml0dGVyKGhpZ2hlc3RCYWNrb2ZmRHVyYXRpb24pO1xuICAgICAgICBjb25zdCBkZWxheWVkRXhlY3V0aW9uID0gbmV3IHV0aWxfMS5EZWZlcnJlZCgpO1xuICAgICAgICBpZiAoYmFja29mZk1zV2l0aEppdHRlciA+IDApIHtcbiAgICAgICAgICAgICgwLCBiYWNrb2ZmXzEuZGVsYXlFeGVjdXRpb24pKCgpID0+IGRlbGF5ZWRFeGVjdXRpb24ucmVzb2x2ZSgpLCBiYWNrb2ZmTXNXaXRoSml0dGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbGF5ZWRFeGVjdXRpb24ucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGF5ZWRFeGVjdXRpb24ucHJvbWlzZS50aGVuKCgpID0+IHRoaXMuX3NlbmRCYXRjaChwZW5kaW5nQmF0Y2gsIGZsdXNoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIHRoZSBwcm92aWRlZCBiYXRjaCBvbmNlIHRoZSByYXRlIGxpbWl0ZXIgZG9lcyBub3QgcmVxdWlyZSBhbnkgZGVsYXkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBhc3luYyBfc2VuZEJhdGNoKGJhdGNoLCBmbHVzaCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHRhZyA9ICgwLCB1dGlsXzEucmVxdWVzdFRhZykoKTtcbiAgICAgICAgLy8gU2VuZCB0aGUgYmF0Y2ggaWYgaXQgaXMgZG9lcyBub3QgcmVxdWlyZSBhbnkgZGVsYXksIG9yIHNjaGVkdWxlIGFub3RoZXJcbiAgICAgICAgLy8gYXR0ZW1wdCBhZnRlciB0aGUgYXBwcm9wcmlhdGUgdGltZW91dC5cbiAgICAgICAgY29uc3QgdW5kZXJSYXRlTGltaXQgPSB0aGlzLl9yYXRlTGltaXRlci50cnlNYWtlUmVxdWVzdChiYXRjaC5fb3BDb3VudCk7XG4gICAgICAgIGlmICh1bmRlclJhdGVMaW1pdCkge1xuICAgICAgICAgICAgYXdhaXQgYmF0Y2guYnVsa0NvbW1pdCh7IHJlcXVlc3RUYWc6IHRhZyB9KTtcbiAgICAgICAgICAgIGlmIChmbHVzaClcbiAgICAgICAgICAgICAgICB0aGlzLl9zY2hlZHVsZUN1cnJlbnRCYXRjaChmbHVzaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZWxheU1zID0gdGhpcy5fcmF0ZUxpbWl0ZXIuZ2V0TmV4dFJlcXVlc3REZWxheU1zKGJhdGNoLl9vcENvdW50KTtcbiAgICAgICAgICAgICgwLCBsb2dnZXJfMS5sb2dnZXIpKCdCdWxrV3JpdGVyLl9zZW5kQmF0Y2gnLCB0YWcsIGBCYWNraW5nIG9mZiBmb3IgJHtkZWxheU1zfSBzZWNvbmRzYCk7XG4gICAgICAgICAgICAoMCwgYmFja29mZl8xLmRlbGF5RXhlY3V0aW9uKSgoKSA9PiB0aGlzLl9zZW5kQmF0Y2goYmF0Y2gsIGZsdXNoKSwgZGVsYXlNcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIDMwJSBqaXR0ZXIgdG8gdGhlIHByb3ZpZGVkIGJhY2tvZmYuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHN0YXRpYyBfYXBwbHlKaXR0ZXIoYmFja29mZk1zKSB7XG4gICAgICAgIGlmIChiYWNrb2ZmTXMgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgLy8gUmFuZG9tIHZhbHVlIGluIFstMC4zLCAwLjNdLlxuICAgICAgICBjb25zdCBqaXR0ZXIgPSBleHBvcnRzLkRFRkFVTFRfSklUVEVSX0ZBQ1RPUiAqIChNYXRoLnJhbmRvbSgpICogMiAtIDEpO1xuICAgICAgICByZXR1cm4gTWF0aC5taW4oYmFja29mZl8xLkRFRkFVTFRfQkFDS09GRl9NQVhfREVMQVlfTVMsIGJhY2tvZmZNcyArIGppdHRlciAqIGJhY2tvZmZNcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlcyBhbmQgcnVucyB0aGUgcHJvdmlkZWQgb3BlcmF0aW9uIG9uIHRoZSBuZXh0IGF2YWlsYWJsZSBiYXRjaC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9lbnF1ZXVlKHJlZiwgdHlwZSwgZW5xdWV1ZU9uQmF0Y2hDYWxsYmFjaykge1xuICAgICAgICBjb25zdCBidWxrV3JpdGVyT3AgPSBuZXcgQnVsa1dyaXRlck9wZXJhdGlvbihyZWYsIHR5cGUsIHRoaXMuX3NlbmRGbi5iaW5kKHRoaXMsIGVucXVldWVPbkJhdGNoQ2FsbGJhY2spLCB0aGlzLl9lcnJvckZuLmJpbmQodGhpcyksIHRoaXMuX3N1Y2Nlc3NGbi5iaW5kKHRoaXMpKTtcbiAgICAgICAgLy8gU3dhbGxvdyB0aGUgZXJyb3IgaWYgdGhlIGRldmVsb3BlciBoYXMgc2V0IGFuIGVycm9yIGxpc3RlbmVyLiBUaGlzXG4gICAgICAgIC8vIHByZXZlbnRzIFVuaGFuZGxlZFByb21pc2VSZWplY3Rpb25zIGZyb20gYmVpbmcgdGhyb3duIGlmIGEgZmxvYXRpbmdcbiAgICAgICAgLy8gQnVsa1dyaXRlciBvcGVyYXRpb24gcHJvbWlzZSBmYWlscyB3aGVuIGFuIGVycm9yIGhhbmRsZXIgaXMgc3BlY2lmaWVkLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGlzIGlzIGRvbmUgaGVyZSBpbiBvcmRlciB0byBjaGFpbiB0aGUgY2F1Z2h0IHByb21pc2Ugb250byBgbGFzdE9wYCxcbiAgICAgICAgLy8gd2hpY2ggZW5zdXJlcyB0aGF0IGZsdXNoKCkgcmVzb2x2ZXMgYWZ0ZXIgdGhlIG9wZXJhdGlvbiBwcm9taXNlLlxuICAgICAgICBjb25zdCB1c2VyUHJvbWlzZSA9IGJ1bGtXcml0ZXJPcC5wcm9taXNlLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2Vycm9ySGFuZGxlclNldCkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBidWxrV3JpdGVyT3AucHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEFkdmFuY2UgdGhlIGBfbGFzdE9wYCBwb2ludGVyLiBUaGlzIGVuc3VyZXMgdGhhdCBgX2xhc3RPcGAgb25seSByZXNvbHZlc1xuICAgICAgICAvLyB3aGVuIGJvdGggdGhlIHByZXZpb3VzIGFuZCB0aGUgY3VycmVudCB3cml0ZSByZXNvbHZlLlxuICAgICAgICB0aGlzLl9sYXN0T3AgPSB0aGlzLl9sYXN0T3AudGhlbigoKSA9PiAoMCwgdXRpbF8xLnNpbGVuY2VQcm9taXNlKSh1c2VyUHJvbWlzZSkpO1xuICAgICAgICAvLyBTY2hlZHVsZSB0aGUgb3BlcmF0aW9uIGlmIHRoZSBCdWxrV3JpdGVyIGhhcyBmZXdlciB0aGFuIHRoZSBtYXhpbXVtXG4gICAgICAgIC8vIG51bWJlciBvZiBhbGxvd2VkIHBlbmRpbmcgb3BlcmF0aW9ucywgb3IgYWRkIHRoZSBvcGVyYXRpb24gdG8gdGhlXG4gICAgICAgIC8vIGJ1ZmZlci5cbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdPcHNDb3VudCA8IHRoaXMuX21heFBlbmRpbmdPcENvdW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nT3BzQ291bnQrKztcbiAgICAgICAgICAgIHRoaXMuX3NlbmRGbihlbnF1ZXVlT25CYXRjaENhbGxiYWNrLCBidWxrV3JpdGVyT3ApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyZWRPcGVyYXRpb25zLnB1c2gobmV3IEJ1ZmZlcmVkT3BlcmF0aW9uKGJ1bGtXcml0ZXJPcCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdPcHNDb3VudCsrO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbmRGbihlbnF1ZXVlT25CYXRjaENhbGxiYWNrLCBidWxrV3JpdGVyT3ApO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoYWluIHRoZSBCdWxrV3JpdGVyIG9wZXJhdGlvbiBwcm9taXNlIHdpdGggdGhlIGJ1ZmZlciBwcm9jZXNzaW5nIGxvZ2ljXG4gICAgICAgIC8vIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IGl0IHJ1bnMgYW5kIHRoYXQgc3Vic2VxdWVudCBvcGVyYXRpb25zIGFyZVxuICAgICAgICAvLyBlbnF1ZXVlZCBiZWZvcmUgdGhlIG5leHQgYmF0Y2ggaXMgc2NoZWR1bGVkIGluIGBfc2VuZEJhdGNoKClgLlxuICAgICAgICByZXR1cm4gdXNlclByb21pc2VcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nT3BzQ291bnQtLTtcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NCdWZmZXJlZE9wcygpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ09wc0NvdW50LS07XG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzQnVmZmVyZWRPcHMoKTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hbmFnZXMgdGhlIHBlbmRpbmcgb3BlcmF0aW9uIGNvdW50ZXIgYW5kIHNjaGVkdWxlcyB0aGUgbmV4dCBCdWxrV3JpdGVyXG4gICAgICogb3BlcmF0aW9uIGlmIHdlJ3JlIHVuZGVyIHRoZSBtYXhpbXVtIGxpbWl0LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX3Byb2Nlc3NCdWZmZXJlZE9wcygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdPcHNDb3VudCA8IHRoaXMuX21heFBlbmRpbmdPcENvdW50ICYmXG4gICAgICAgICAgICB0aGlzLl9idWZmZXJlZE9wZXJhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dE9wID0gdGhpcy5fYnVmZmVyZWRPcGVyYXRpb25zLnNoaWZ0KCk7XG4gICAgICAgICAgICBuZXh0T3Auc2VuZEZuKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVzIHRoZSBwcm92aWRlZCBvcGVyYXRpb25zIG9uIGN1cnJlbnQgQnVsa0NvbW1pdEJhdGNoLlxuICAgICAqIFNlbmRzIHRoZSBCdWxrQ29tbWl0QmF0Y2ggaWYgaXQgcmVhY2hlcyBtYXhpbXVtIGNhcGFjaXR5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfc2VuZEZuKGVucXVldWVPbkJhdGNoQ2FsbGJhY2ssIG9wKSB7XG4gICAgICAgIC8vIEEgYmFja29mZiBkdXJhdGlvbiBncmVhdGVyIHRoYW4gMCBpbXBsaWVzIHRoYXQgdGhpcyBiYXRjaCBpcyBhIHJldHJ5LlxuICAgICAgICAvLyBSZXRyaWVkIHdyaXRlcyBhcmUgc2VudCB3aXRoIGEgYmF0Y2ggc2l6ZSBvZiAxMCBpbiBvcmRlciB0byBndWFyYW50ZWVcbiAgICAgICAgLy8gdGhhdCB0aGUgYmF0Y2ggaXMgdW5kZXIgdGhlIDEwTWlCIGxpbWl0LlxuICAgICAgICBpZiAob3AuYmFja29mZkR1cmF0aW9uID4gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2J1bGtDb21taXRCYXRjaC5wZW5kaW5nT3BzLmxlbmd0aCA+PSBleHBvcnRzLlJFVFJZX01BWF9CQVRDSF9TSVpFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVDdXJyZW50QmF0Y2goLyogZmx1c2g9ICovIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2J1bGtDb21taXRCYXRjaC5zZXRNYXhCYXRjaFNpemUoZXhwb3J0cy5SRVRSWV9NQVhfQkFUQ0hfU0laRSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2J1bGtDb21taXRCYXRjaC5oYXMob3AucmVmKSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJhdGNoIHNpbmNlIHRoZSBiYWNrZW5kIGRvZXNuJ3Qgc3VwcG9ydCBiYXRjaGVzIHdpdGggdHdvXG4gICAgICAgICAgICAvLyB3cml0ZXMgdG8gdGhlIHNhbWUgZG9jdW1lbnQuXG4gICAgICAgICAgICB0aGlzLl9zY2hlZHVsZUN1cnJlbnRCYXRjaCgpO1xuICAgICAgICB9XG4gICAgICAgIGVucXVldWVPbkJhdGNoQ2FsbGJhY2sodGhpcy5fYnVsa0NvbW1pdEJhdGNoKTtcbiAgICAgICAgdGhpcy5fYnVsa0NvbW1pdEJhdGNoLnByb2Nlc3NMYXN0T3BlcmF0aW9uKG9wKTtcbiAgICAgICAgaWYgKHRoaXMuX2J1bGtDb21taXRCYXRjaC5fb3BDb3VudCA9PT0gdGhpcy5fYnVsa0NvbW1pdEJhdGNoLm1heEJhdGNoU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVDdXJyZW50QmF0Y2goKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcC5mbHVzaGVkKSB7XG4gICAgICAgICAgICAvLyBJZiBmbHVzaCgpIHdhcyBjYWxsZWQgYmVmb3JlIHRoaXMgb3BlcmF0aW9uIHdhcyBlbnF1ZXVlZCBpbnRvIGEgYmF0Y2gsXG4gICAgICAgICAgICAvLyB3ZSBzdGlsbCBuZWVkIHRvIHNjaGVkdWxlIGl0LlxuICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVDdXJyZW50QmF0Y2goLyogZmx1c2g9ICovIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5CdWxrV3JpdGVyID0gQnVsa1dyaXRlcjtcbi8qKlxuICogVmFsaWRhdGVzIHRoZSB1c2Ugb2YgJ3ZhbHVlJyBhcyBCdWxrV3JpdGVyT3B0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKiBAcGFyYW0gdmFsdWUgVGhlIEJ1bGtXcml0ZXJPcHRpb25zIG9iamVjdCB0byB2YWxpZGF0ZS5cbiAqIEB0aHJvd3MgaWYgdGhlIGlucHV0IGlzIG5vdCBhIHZhbGlkIEJ1bGtXcml0ZXJPcHRpb25zIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVCdWxrV3JpdGVyT3B0aW9ucyh2YWx1ZSkge1xuICAgIGlmICgoMCwgdmFsaWRhdGVfMS52YWxpZGF0ZU9wdGlvbmFsKSh2YWx1ZSwgeyBvcHRpb25hbDogdHJ1ZSB9KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGFyZ05hbWUgPSAnb3B0aW9ucyc7XG4gICAgaWYgKCEoMCwgdXRpbF8xLmlzT2JqZWN0KSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAkeygwLCB2YWxpZGF0ZV8xLmludmFsaWRBcmd1bWVudE1lc3NhZ2UpKGFyZ05hbWUsICdidWxrV3JpdGVyKCkgb3B0aW9ucyBhcmd1bWVudCcpfSBJbnB1dCBpcyBub3QgYW4gb2JqZWN0LmApO1xuICAgIH1cbiAgICBjb25zdCBvcHRpb25zID0gdmFsdWU7XG4gICAgaWYgKG9wdGlvbnMudGhyb3R0bGluZyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIHR5cGVvZiBvcHRpb25zLnRocm90dGxpbmcgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnRocm90dGxpbmcuaW5pdGlhbE9wc1BlclNlY29uZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICgwLCB2YWxpZGF0ZV8xLnZhbGlkYXRlSW50ZWdlcikoJ2luaXRpYWxPcHNQZXJTZWNvbmQnLCBvcHRpb25zLnRocm90dGxpbmcuaW5pdGlhbE9wc1BlclNlY29uZCwge1xuICAgICAgICAgICAgbWluVmFsdWU6IDEsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy50aHJvdHRsaW5nLm1heE9wc1BlclNlY29uZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICgwLCB2YWxpZGF0ZV8xLnZhbGlkYXRlSW50ZWdlcikoJ21heE9wc1BlclNlY29uZCcsIG9wdGlvbnMudGhyb3R0bGluZy5tYXhPcHNQZXJTZWNvbmQsIHtcbiAgICAgICAgICAgIG1pblZhbHVlOiAxLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9wdGlvbnMudGhyb3R0bGluZy5pbml0aWFsT3BzUGVyU2Vjb25kICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIG9wdGlvbnMudGhyb3R0bGluZy5pbml0aWFsT3BzUGVyU2Vjb25kID5cbiAgICAgICAgICAgICAgICBvcHRpb25zLnRocm90dGxpbmcubWF4T3BzUGVyU2Vjb25kKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7KDAsIHZhbGlkYXRlXzEuaW52YWxpZEFyZ3VtZW50TWVzc2FnZSkoYXJnTmFtZSwgJ2J1bGtXcml0ZXIoKSBvcHRpb25zIGFyZ3VtZW50Jyl9IFwibWF4T3BzUGVyU2Vjb25kXCIgY2Fubm90IGJlIGxlc3MgdGhhbiBcImluaXRpYWxPcHNQZXJTZWNvbmRcIi5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1bGstd3JpdGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/bulk-writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/bundle.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/bundle.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BundleBuilder = void 0;\nconst document_1 = __webpack_require__(/*! ./document */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document.js\");\nconst query_snapshot_1 = __webpack_require__(/*! ./reference/query-snapshot */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-snapshot.js\");\nconst timestamp_1 = __webpack_require__(/*! ./timestamp */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js\");\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst BUNDLE_VERSION = 1;\n/**\n * Builds a Firestore data bundle with results from the given document and query snapshots.\n */\nclass BundleBuilder {\n    constructor(bundleId) {\n        this.bundleId = bundleId;\n        // Resulting documents for the bundle, keyed by full document path.\n        this.documents = new Map();\n        // Named queries saved in the bundle, keyed by query name.\n        this.namedQueries = new Map();\n        // The latest read time among all bundled documents and queries.\n        this.latestReadTime = new timestamp_1.Timestamp(0, 0);\n    }\n    /**\n     * Adds a Firestore document snapshot or query snapshot to the bundle.\n     * Both the documents data and the query read time will be included in the bundle.\n     *\n     * @param {DocumentSnapshot | string} documentOrName A document snapshot to add or a name of a query.\n     * @param {Query=} querySnapshot A query snapshot to add to the bundle, if provided.\n     * @returns {BundleBuilder} This instance.\n     *\n     * @example\n     * ```\n     * const bundle = firestore.bundle('data-bundle');\n     * const docSnapshot = await firestore.doc('abc/123').get();\n     * const querySnapshot = await firestore.collection('coll').get();\n     *\n     * const bundleBuffer = bundle.add(docSnapshot) // Add a document\n     *                            .add('coll-query', querySnapshot) // Add a named query.\n     *                            .build()\n     * // Save `bundleBuffer` to CDN or stream it to clients.\n     * ```\n     */\n    add(documentOrName, querySnapshot) {\n        // eslint-disable-next-line prefer-rest-params\n        (0, validate_1.validateMinNumberOfArguments)('BundleBuilder.add', arguments, 1);\n        // eslint-disable-next-line prefer-rest-params\n        (0, validate_1.validateMaxNumberOfArguments)('BundleBuilder.add', arguments, 2);\n        if (arguments.length === 1) {\n            validateDocumentSnapshot('documentOrName', documentOrName);\n            this.addBundledDocument(documentOrName);\n        }\n        else {\n            (0, validate_1.validateString)('documentOrName', documentOrName);\n            validateQuerySnapshot('querySnapshot', querySnapshot);\n            this.addNamedQuery(documentOrName, querySnapshot);\n        }\n        return this;\n    }\n    addBundledDocument(snap, queryName) {\n        const originalDocument = this.documents.get(snap.ref.path);\n        const originalQueries = originalDocument === null || originalDocument === void 0 ? void 0 : originalDocument.metadata.queries;\n        // Update with document built from `snap` because it is newer.\n        if (!originalDocument ||\n            timestamp_1.Timestamp.fromProto(originalDocument.metadata.readTime) < snap.readTime) {\n            const docProto = snap.toDocumentProto();\n            this.documents.set(snap.ref.path, {\n                document: snap.exists ? docProto : undefined,\n                metadata: {\n                    name: docProto.name,\n                    readTime: snap.readTime.toProto().timestampValue,\n                    exists: snap.exists,\n                },\n            });\n        }\n        // Update `queries` to include both original and `queryName`.\n        const newDocument = this.documents.get(snap.ref.path);\n        newDocument.metadata.queries = originalQueries || [];\n        if (queryName) {\n            newDocument.metadata.queries.push(queryName);\n        }\n        if (snap.readTime > this.latestReadTime) {\n            this.latestReadTime = snap.readTime;\n        }\n    }\n    addNamedQuery(name, querySnap) {\n        if (this.namedQueries.has(name)) {\n            throw new Error(`Query name conflict: ${name} has already been added.`);\n        }\n        this.namedQueries.set(name, {\n            name,\n            bundledQuery: querySnap.query._toBundledQuery(),\n            readTime: querySnap.readTime.toProto().timestampValue,\n        });\n        for (const snap of querySnap.docs) {\n            this.addBundledDocument(snap, name);\n        }\n        if (querySnap.readTime > this.latestReadTime) {\n            this.latestReadTime = querySnap.readTime;\n        }\n    }\n    /**\n     * Converts a IBundleElement to a Buffer whose content is the length prefixed JSON representation\n     * of the element.\n     * @private\n     * @internal\n     */\n    elementToLengthPrefixedBuffer(bundleElement) {\n        // Convert to a valid proto message object then take its JSON representation.\n        // This take cares of stuff like converting internal byte array fields\n        // to Base64 encodings.\n        // We lazy-load the Proto file to reduce cold-start times.\n        const message = (__webpack_require__(/*! ../protos/firestore_v1_proto_api */ \"(rsc)/./node_modules/@google-cloud/firestore/build/protos/firestore_v1_proto_api.js\").firestore).BundleElement.fromObject(bundleElement)\n            .toJSON();\n        const buffer = Buffer.from(JSON.stringify(message), 'utf-8');\n        const lengthBuffer = Buffer.from(buffer.length.toString());\n        return Buffer.concat([lengthBuffer, buffer]);\n    }\n    build() {\n        let bundleBuffer = Buffer.alloc(0);\n        for (const namedQuery of this.namedQueries.values()) {\n            bundleBuffer = Buffer.concat([\n                bundleBuffer,\n                this.elementToLengthPrefixedBuffer({ namedQuery }),\n            ]);\n        }\n        for (const bundledDocument of this.documents.values()) {\n            const documentMetadata = bundledDocument.metadata;\n            bundleBuffer = Buffer.concat([\n                bundleBuffer,\n                this.elementToLengthPrefixedBuffer({ documentMetadata }),\n            ]);\n            // Write to the bundle if document exists.\n            const document = bundledDocument.document;\n            if (document) {\n                bundleBuffer = Buffer.concat([\n                    bundleBuffer,\n                    this.elementToLengthPrefixedBuffer({ document }),\n                ]);\n            }\n        }\n        const metadata = {\n            id: this.bundleId,\n            createTime: this.latestReadTime.toProto().timestampValue,\n            version: BUNDLE_VERSION,\n            totalDocuments: this.documents.size,\n            totalBytes: bundleBuffer.length,\n        };\n        // Prepends the metadata element to the bundleBuffer: `bundleBuffer` is the second argument to `Buffer.concat`.\n        bundleBuffer = Buffer.concat([\n            this.elementToLengthPrefixedBuffer({ metadata }),\n            bundleBuffer,\n        ]);\n        return bundleBuffer;\n    }\n}\nexports.BundleBuilder = BundleBuilder;\n/**\n * Convenient class to hold both the metadata and the actual content of a document to be bundled.\n * @private\n * @internal\n */\nclass BundledDocument {\n    constructor(metadata, document) {\n        this.metadata = metadata;\n        this.document = document;\n    }\n}\n/**\n * Validates that 'value' is DocumentSnapshot.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n */\nfunction validateDocumentSnapshot(arg, value) {\n    if (!(value instanceof document_1.DocumentSnapshot)) {\n        throw new Error((0, validate_1.invalidArgumentMessage)(arg, 'DocumentSnapshot'));\n    }\n}\n/**\n * Validates that 'value' is QuerySnapshot.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n */\nfunction validateQuerySnapshot(arg, value) {\n    if (!(value instanceof query_snapshot_1.QuerySnapshot)) {\n        throw new Error((0, validate_1.invalidArgumentMessage)(arg, 'QuerySnapshot'));\n    }\n}\n//# sourceMappingURL=bundle.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/bundle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/collection-group.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/collection-group.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CollectionGroup = void 0;\nconst query_partition_1 = __webpack_require__(/*! ./query-partition */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/query-partition.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\nconst query_1 = __webpack_require__(/*! ./reference/query */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query.js\");\nconst query_options_1 = __webpack_require__(/*! ./reference/query-options */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-options.js\");\nconst path_1 = __webpack_require__(/*! ./path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/types.js\");\nconst order_1 = __webpack_require__(/*! ./order */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/order.js\");\nconst trace_util_1 = __webpack_require__(/*! ./telemetry/trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js\");\n/**\n * A `CollectionGroup` refers to all documents that are contained in a\n * collection or subcollection with a specific collection ID.\n *\n * @class CollectionGroup\n */\nclass CollectionGroup extends query_1.Query {\n    /** @private */\n    constructor(firestore, collectionId, converter) {\n        super(firestore, query_options_1.QueryOptions.forCollectionGroupQuery(collectionId, converter));\n    }\n    /**\n     * Partitions a query by returning partition cursors that can be used to run\n     * the query in parallel. The returned cursors are split points that can be\n     * used as starting and end points for individual query invocations.\n     *\n     * @example\n     * ```\n     * const query = firestore.collectionGroup('collectionId');\n     * for await (const partition of query.getPartitions(42)) {\n     *   const partitionedQuery = partition.toQuery();\n     *   const querySnapshot = await partitionedQuery.get();\n     *   console.log(`Partition contained ${querySnapshot.length} documents`);\n     * }\n     *\n     * ```\n     * @param {number} desiredPartitionCount The desired maximum number of\n     * partition points. The number must be strictly positive. The actual number\n     * of partitions returned may be fewer.\n     * @return {AsyncIterable<QueryPartition>} An AsyncIterable of\n     * `QueryPartition`s.\n     */\n    async *getPartitions(desiredPartitionCount) {\n        const partitions = [];\n        await this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_PARTITION_QUERY, async () => {\n            var _a;\n            (0, validate_1.validateInteger)('desiredPartitionCount', desiredPartitionCount, {\n                minValue: 1,\n            });\n            const tag = (0, util_1.requestTag)();\n            await this.firestore.initializeIfNeeded(tag);\n            if (desiredPartitionCount > 1) {\n                // Partition queries require explicit ordering by __name__.\n                const queryWithDefaultOrder = this.orderBy(path_1.FieldPath.documentId());\n                const request = queryWithDefaultOrder.toProto();\n                // Since we are always returning an extra partition (with an empty endBefore\n                // cursor), we reduce the desired partition count by one.\n                request.partitionCount = desiredPartitionCount - 1;\n                const stream = await this.firestore.requestStream('partitionQueryStream', \n                /* bidirectional= */ false, request, tag);\n                stream.resume();\n                for await (const currentCursor of stream) {\n                    partitions.push((_a = currentCursor.values) !== null && _a !== void 0 ? _a : []);\n                }\n            }\n            (0, logger_1.logger)('Firestore.getPartitions', tag, 'Received %d partitions', partitions.length);\n            // Sort the partitions as they may not be ordered if responses are paged.\n            partitions.sort((l, r) => (0, order_1.compareArrays)(l, r));\n        });\n        for (let i = 0; i < partitions.length; ++i) {\n            yield new query_partition_1.QueryPartition(this._firestore, this._queryOptions.collectionId, this._queryOptions.converter, i > 0 ? partitions[i - 1] : undefined, partitions[i]);\n        }\n        // Return the extra partition with the empty cursor.\n        yield new query_partition_1.QueryPartition(this._firestore, this._queryOptions.collectionId, this._queryOptions.converter, partitions.pop(), undefined);\n    }\n    withConverter(converter) {\n        return new CollectionGroup(this.firestore, this._queryOptions.collectionId, converter !== null && converter !== void 0 ? converter : (0, types_1.defaultConverter)());\n    }\n}\nexports.CollectionGroup = CollectionGroup;\n//# sourceMappingURL=collection-group.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/collection-group.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/convert.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/convert.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.timestampFromJson = timestampFromJson;\nexports.detectValueType = detectValueType;\nexports.detectGoogleProtobufValueType = detectGoogleProtobufValueType;\nexports.valueFromJson = valueFromJson;\nexports.fieldsFromJson = fieldsFromJson;\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst map_type_1 = __webpack_require__(/*! ./map-type */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/map-type.js\");\n/*!\n * @module firestore/convert\n * @private\n * @internal\n *\n * This module contains utility functions to convert\n * `firestore.v1.Documents` from Proto3 JSON to their equivalent\n * representation in Protobuf JS. Protobuf JS is the only encoding supported by\n * this client, and dependencies that use Proto3 JSON (such as the Google Cloud\n * Functions SDK) are supported through this conversion and its usage in\n * {@see Firestore#snapshot_}.\n */\n/**\n * Converts an ISO 8601 or google.protobuf.Timestamp proto into Protobuf JS.\n *\n * @private\n * @internal\n * @param timestampValue The value to convert.\n * @param argumentName The argument name to use in the error message if the\n * conversion fails. If omitted, 'timestampValue' is used.\n * @return The value as expected by Protobuf JS or undefined if no input was\n * provided.\n */\nfunction timestampFromJson(timestampValue, argumentName) {\n    let timestampProto = {};\n    if (typeof timestampValue === 'string') {\n        const date = new Date(timestampValue);\n        const seconds = Math.floor(date.getTime() / 1000);\n        let nanos = 0;\n        if (timestampValue.length > 20) {\n            const nanoString = timestampValue.substring(20, timestampValue.length - 1);\n            const trailingZeroes = 9 - nanoString.length;\n            nanos = Number(nanoString) * Math.pow(10, trailingZeroes);\n        }\n        if (isNaN(seconds) || isNaN(nanos)) {\n            argumentName = argumentName || 'timestampValue';\n            throw new Error(`Specify a valid ISO 8601 timestamp for \"${argumentName}\".`);\n        }\n        timestampProto = {\n            seconds: seconds || undefined,\n            nanos: nanos || undefined,\n        };\n    }\n    else if (timestampValue !== undefined) {\n        (0, validate_1.validateObject)('timestampValue', timestampValue);\n        timestampProto = {\n            seconds: timestampValue.seconds || undefined,\n            nanos: timestampValue.nanos || undefined,\n        };\n    }\n    return timestampProto;\n}\n/**\n * Converts a Proto3 JSON 'bytesValue' field into Protobuf JS.\n *\n * @private\n * @internal\n * @param bytesValue The value to convert.\n * @return The value as expected by Protobuf JS.\n */\nfunction bytesFromJson(bytesValue) {\n    if (typeof bytesValue === 'string') {\n        return Buffer.from(bytesValue, 'base64');\n    }\n    else {\n        return bytesValue;\n    }\n}\n/**\n * Detects 'valueType' from a Proto3 JSON `firestore.v1.Value` proto.\n *\n * @private\n * @internal\n * @param proto The `firestore.v1.Value` proto.\n * @return The string value for 'valueType'.\n */\nfunction detectValueType(proto) {\n    var _a;\n    let valueType;\n    if (proto.valueType) {\n        valueType = proto.valueType;\n    }\n    else {\n        const detectedValues = [];\n        if (proto.stringValue !== undefined) {\n            detectedValues.push('stringValue');\n        }\n        if (proto.booleanValue !== undefined) {\n            detectedValues.push('booleanValue');\n        }\n        if (proto.integerValue !== undefined) {\n            detectedValues.push('integerValue');\n        }\n        if (proto.doubleValue !== undefined) {\n            detectedValues.push('doubleValue');\n        }\n        if (proto.timestampValue !== undefined) {\n            detectedValues.push('timestampValue');\n        }\n        if (proto.referenceValue !== undefined) {\n            detectedValues.push('referenceValue');\n        }\n        if (proto.arrayValue !== undefined) {\n            detectedValues.push('arrayValue');\n        }\n        if (proto.nullValue !== undefined) {\n            detectedValues.push('nullValue');\n        }\n        if (proto.mapValue !== undefined) {\n            detectedValues.push('mapValue');\n        }\n        if (proto.geoPointValue !== undefined) {\n            detectedValues.push('geoPointValue');\n        }\n        if (proto.bytesValue !== undefined) {\n            detectedValues.push('bytesValue');\n        }\n        if (detectedValues.length !== 1) {\n            throw new Error(`Unable to infer type value from '${JSON.stringify(proto)}'.`);\n        }\n        valueType = detectedValues[0];\n    }\n    // Special handling of mapValues used to represent other data types\n    if (valueType === 'mapValue') {\n        const fields = (_a = proto.mapValue) === null || _a === void 0 ? void 0 : _a.fields;\n        if (fields) {\n            const props = Object.keys(fields);\n            if (props.indexOf(map_type_1.RESERVED_MAP_KEY) !== -1 &&\n                detectValueType(fields[map_type_1.RESERVED_MAP_KEY]) === 'stringValue' &&\n                fields[map_type_1.RESERVED_MAP_KEY].stringValue === map_type_1.RESERVED_MAP_KEY_VECTOR_VALUE) {\n                valueType = 'vectorValue';\n            }\n        }\n    }\n    return valueType;\n}\n/**\n * Detects the value kind from a Proto3 JSON `google.protobuf.Value` proto.\n *\n * @private\n * @internal\n * @param proto The `firestore.v1.Value` proto.\n * @return The string value for 'valueType'.\n */\nfunction detectGoogleProtobufValueType(proto) {\n    const detectedValues = [];\n    if (proto.nullValue !== undefined) {\n        detectedValues.push('nullValue');\n    }\n    if (proto.numberValue !== undefined) {\n        detectedValues.push('numberValue');\n    }\n    if (proto.stringValue !== undefined) {\n        detectedValues.push('stringValue');\n    }\n    if (proto.boolValue !== undefined) {\n        detectedValues.push('boolValue');\n    }\n    if (proto.structValue !== undefined) {\n        detectedValues.push('structValue');\n    }\n    if (proto.listValue !== undefined) {\n        detectedValues.push('listValue');\n    }\n    if (detectedValues.length !== 1) {\n        throw new Error(`Unable to infer type value from '${JSON.stringify(proto)}'.`);\n    }\n    return detectedValues[0];\n}\n/**\n * Converts a `firestore.v1.Value` in Proto3 JSON encoding into the\n * Protobuf JS format expected by this client.\n *\n * @private\n * @internal\n * @param fieldValue The `firestore.v1.Value` in Proto3 JSON format.\n * @return The `firestore.v1.Value` in Protobuf JS format.\n */\nfunction valueFromJson(fieldValue) {\n    const valueType = detectValueType(fieldValue);\n    switch (valueType) {\n        case 'timestampValue':\n            return {\n                timestampValue: timestampFromJson(fieldValue.timestampValue),\n            };\n        case 'bytesValue':\n            return {\n                bytesValue: bytesFromJson(fieldValue.bytesValue),\n            };\n        case 'doubleValue':\n            return {\n                doubleValue: Number(fieldValue.doubleValue),\n            };\n        case 'arrayValue': {\n            const arrayValue = [];\n            if (Array.isArray(fieldValue.arrayValue.values)) {\n                for (const value of fieldValue.arrayValue.values) {\n                    arrayValue.push(valueFromJson(value));\n                }\n            }\n            return {\n                arrayValue: {\n                    values: arrayValue,\n                },\n            };\n        }\n        case 'mapValue':\n        case 'vectorValue': {\n            const mapValue = {};\n            const fields = fieldValue.mapValue.fields;\n            if (fields) {\n                for (const prop of Object.keys(fields)) {\n                    mapValue[prop] = valueFromJson(fieldValue.mapValue.fields[prop]);\n                }\n            }\n            return {\n                mapValue: {\n                    fields: mapValue,\n                },\n            };\n        }\n        default:\n            return fieldValue;\n    }\n}\n/**\n * Converts a map of IValues in Proto3 JSON encoding into the Protobuf JS format\n * expected by this client. This conversion creates a copy of the underlying\n * fields.\n *\n * @private\n * @internal\n * @param document An object with IValues in Proto3 JSON format.\n * @return The object in Protobuf JS format.\n */\nfunction fieldsFromJson(document) {\n    const result = {};\n    for (const prop of Object.keys(document)) {\n        result[prop] = valueFromJson(document[prop]);\n    }\n    return result;\n}\n//# sourceMappingURL=convert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL2NvbnZlcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLHVCQUF1QjtBQUN2QixxQ0FBcUM7QUFDckMscUJBQXFCO0FBQ3JCLHNCQUFzQjtBQUN0QixtQkFBbUIsbUJBQU8sQ0FBQyxzRkFBWTtBQUN2QyxtQkFBbUIsbUJBQU8sQ0FBQyxzRkFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkseUJBQXlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLGFBQWE7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLHNCQUFzQjtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxzQkFBc0I7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL2NvbnZlcnQuanM/MjhmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRpbWVzdGFtcEZyb21Kc29uID0gdGltZXN0YW1wRnJvbUpzb247XG5leHBvcnRzLmRldGVjdFZhbHVlVHlwZSA9IGRldGVjdFZhbHVlVHlwZTtcbmV4cG9ydHMuZGV0ZWN0R29vZ2xlUHJvdG9idWZWYWx1ZVR5cGUgPSBkZXRlY3RHb29nbGVQcm90b2J1ZlZhbHVlVHlwZTtcbmV4cG9ydHMudmFsdWVGcm9tSnNvbiA9IHZhbHVlRnJvbUpzb247XG5leHBvcnRzLmZpZWxkc0Zyb21Kc29uID0gZmllbGRzRnJvbUpzb247XG5jb25zdCB2YWxpZGF0ZV8xID0gcmVxdWlyZShcIi4vdmFsaWRhdGVcIik7XG5jb25zdCBtYXBfdHlwZV8xID0gcmVxdWlyZShcIi4vbWFwLXR5cGVcIik7XG4vKiFcbiAqIEBtb2R1bGUgZmlyZXN0b3JlL2NvbnZlcnRcbiAqIEBwcml2YXRlXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBUaGlzIG1vZHVsZSBjb250YWlucyB1dGlsaXR5IGZ1bmN0aW9ucyB0byBjb252ZXJ0XG4gKiBgZmlyZXN0b3JlLnYxLkRvY3VtZW50c2AgZnJvbSBQcm90bzMgSlNPTiB0byB0aGVpciBlcXVpdmFsZW50XG4gKiByZXByZXNlbnRhdGlvbiBpbiBQcm90b2J1ZiBKUy4gUHJvdG9idWYgSlMgaXMgdGhlIG9ubHkgZW5jb2Rpbmcgc3VwcG9ydGVkIGJ5XG4gKiB0aGlzIGNsaWVudCwgYW5kIGRlcGVuZGVuY2llcyB0aGF0IHVzZSBQcm90bzMgSlNPTiAoc3VjaCBhcyB0aGUgR29vZ2xlIENsb3VkXG4gKiBGdW5jdGlvbnMgU0RLKSBhcmUgc3VwcG9ydGVkIHRocm91Z2ggdGhpcyBjb252ZXJzaW9uIGFuZCBpdHMgdXNhZ2UgaW5cbiAqIHtAc2VlIEZpcmVzdG9yZSNzbmFwc2hvdF99LlxuICovXG4vKipcbiAqIENvbnZlcnRzIGFuIElTTyA4NjAxIG9yIGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAgcHJvdG8gaW50byBQcm90b2J1ZiBKUy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKiBAcGFyYW0gdGltZXN0YW1wVmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcGFyYW0gYXJndW1lbnROYW1lIFRoZSBhcmd1bWVudCBuYW1lIHRvIHVzZSBpbiB0aGUgZXJyb3IgbWVzc2FnZSBpZiB0aGVcbiAqIGNvbnZlcnNpb24gZmFpbHMuIElmIG9taXR0ZWQsICd0aW1lc3RhbXBWYWx1ZScgaXMgdXNlZC5cbiAqIEByZXR1cm4gVGhlIHZhbHVlIGFzIGV4cGVjdGVkIGJ5IFByb3RvYnVmIEpTIG9yIHVuZGVmaW5lZCBpZiBubyBpbnB1dCB3YXNcbiAqIHByb3ZpZGVkLlxuICovXG5mdW5jdGlvbiB0aW1lc3RhbXBGcm9tSnNvbih0aW1lc3RhbXBWYWx1ZSwgYXJndW1lbnROYW1lKSB7XG4gICAgbGV0IHRpbWVzdGFtcFByb3RvID0ge307XG4gICAgaWYgKHR5cGVvZiB0aW1lc3RhbXBWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcFZhbHVlKTtcbiAgICAgICAgY29uc3Qgc2Vjb25kcyA9IE1hdGguZmxvb3IoZGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICAgICAgbGV0IG5hbm9zID0gMDtcbiAgICAgICAgaWYgKHRpbWVzdGFtcFZhbHVlLmxlbmd0aCA+IDIwKSB7XG4gICAgICAgICAgICBjb25zdCBuYW5vU3RyaW5nID0gdGltZXN0YW1wVmFsdWUuc3Vic3RyaW5nKDIwLCB0aW1lc3RhbXBWYWx1ZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIGNvbnN0IHRyYWlsaW5nWmVyb2VzID0gOSAtIG5hbm9TdHJpbmcubGVuZ3RoO1xuICAgICAgICAgICAgbmFub3MgPSBOdW1iZXIobmFub1N0cmluZykgKiBNYXRoLnBvdygxMCwgdHJhaWxpbmdaZXJvZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05hTihzZWNvbmRzKSB8fCBpc05hTihuYW5vcykpIHtcbiAgICAgICAgICAgIGFyZ3VtZW50TmFtZSA9IGFyZ3VtZW50TmFtZSB8fCAndGltZXN0YW1wVmFsdWUnO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTcGVjaWZ5IGEgdmFsaWQgSVNPIDg2MDEgdGltZXN0YW1wIGZvciBcIiR7YXJndW1lbnROYW1lfVwiLmApO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVzdGFtcFByb3RvID0ge1xuICAgICAgICAgICAgc2Vjb25kczogc2Vjb25kcyB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICBuYW5vczogbmFub3MgfHwgdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmICh0aW1lc3RhbXBWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICgwLCB2YWxpZGF0ZV8xLnZhbGlkYXRlT2JqZWN0KSgndGltZXN0YW1wVmFsdWUnLCB0aW1lc3RhbXBWYWx1ZSk7XG4gICAgICAgIHRpbWVzdGFtcFByb3RvID0ge1xuICAgICAgICAgICAgc2Vjb25kczogdGltZXN0YW1wVmFsdWUuc2Vjb25kcyB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICBuYW5vczogdGltZXN0YW1wVmFsdWUubmFub3MgfHwgdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdGltZXN0YW1wUHJvdG87XG59XG4vKipcbiAqIENvbnZlcnRzIGEgUHJvdG8zIEpTT04gJ2J5dGVzVmFsdWUnIGZpZWxkIGludG8gUHJvdG9idWYgSlMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIGJ5dGVzVmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJuIFRoZSB2YWx1ZSBhcyBleHBlY3RlZCBieSBQcm90b2J1ZiBKUy5cbiAqL1xuZnVuY3Rpb24gYnl0ZXNGcm9tSnNvbihieXRlc1ZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBieXRlc1ZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oYnl0ZXNWYWx1ZSwgJ2Jhc2U2NCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGJ5dGVzVmFsdWU7XG4gICAgfVxufVxuLyoqXG4gKiBEZXRlY3RzICd2YWx1ZVR5cGUnIGZyb20gYSBQcm90bzMgSlNPTiBgZmlyZXN0b3JlLnYxLlZhbHVlYCBwcm90by5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKiBAcGFyYW0gcHJvdG8gVGhlIGBmaXJlc3RvcmUudjEuVmFsdWVgIHByb3RvLlxuICogQHJldHVybiBUaGUgc3RyaW5nIHZhbHVlIGZvciAndmFsdWVUeXBlJy5cbiAqL1xuZnVuY3Rpb24gZGV0ZWN0VmFsdWVUeXBlKHByb3RvKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCB2YWx1ZVR5cGU7XG4gICAgaWYgKHByb3RvLnZhbHVlVHlwZSkge1xuICAgICAgICB2YWx1ZVR5cGUgPSBwcm90by52YWx1ZVR5cGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBkZXRlY3RlZFZhbHVlcyA9IFtdO1xuICAgICAgICBpZiAocHJvdG8uc3RyaW5nVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGV0ZWN0ZWRWYWx1ZXMucHVzaCgnc3RyaW5nVmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvdG8uYm9vbGVhblZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRldGVjdGVkVmFsdWVzLnB1c2goJ2Jvb2xlYW5WYWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm90by5pbnRlZ2VyVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGV0ZWN0ZWRWYWx1ZXMucHVzaCgnaW50ZWdlclZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3RvLmRvdWJsZVZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRldGVjdGVkVmFsdWVzLnB1c2goJ2RvdWJsZVZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3RvLnRpbWVzdGFtcFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRldGVjdGVkVmFsdWVzLnB1c2goJ3RpbWVzdGFtcFZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3RvLnJlZmVyZW5jZVZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRldGVjdGVkVmFsdWVzLnB1c2goJ3JlZmVyZW5jZVZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3RvLmFycmF5VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGV0ZWN0ZWRWYWx1ZXMucHVzaCgnYXJyYXlWYWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm90by5udWxsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGV0ZWN0ZWRWYWx1ZXMucHVzaCgnbnVsbFZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3RvLm1hcFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRldGVjdGVkVmFsdWVzLnB1c2goJ21hcFZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3RvLmdlb1BvaW50VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGV0ZWN0ZWRWYWx1ZXMucHVzaCgnZ2VvUG9pbnRWYWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm90by5ieXRlc1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRldGVjdGVkVmFsdWVzLnB1c2goJ2J5dGVzVmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGV0ZWN0ZWRWYWx1ZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBpbmZlciB0eXBlIHZhbHVlIGZyb20gJyR7SlNPTi5zdHJpbmdpZnkocHJvdG8pfScuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVUeXBlID0gZGV0ZWN0ZWRWYWx1ZXNbMF07XG4gICAgfVxuICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgb2YgbWFwVmFsdWVzIHVzZWQgdG8gcmVwcmVzZW50IG90aGVyIGRhdGEgdHlwZXNcbiAgICBpZiAodmFsdWVUeXBlID09PSAnbWFwVmFsdWUnKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IChfYSA9IHByb3RvLm1hcFZhbHVlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmllbGRzO1xuICAgICAgICBpZiAoZmllbGRzKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5rZXlzKGZpZWxkcyk7XG4gICAgICAgICAgICBpZiAocHJvcHMuaW5kZXhPZihtYXBfdHlwZV8xLlJFU0VSVkVEX01BUF9LRVkpICE9PSAtMSAmJlxuICAgICAgICAgICAgICAgIGRldGVjdFZhbHVlVHlwZShmaWVsZHNbbWFwX3R5cGVfMS5SRVNFUlZFRF9NQVBfS0VZXSkgPT09ICdzdHJpbmdWYWx1ZScgJiZcbiAgICAgICAgICAgICAgICBmaWVsZHNbbWFwX3R5cGVfMS5SRVNFUlZFRF9NQVBfS0VZXS5zdHJpbmdWYWx1ZSA9PT0gbWFwX3R5cGVfMS5SRVNFUlZFRF9NQVBfS0VZX1ZFQ1RPUl9WQUxVRSkge1xuICAgICAgICAgICAgICAgIHZhbHVlVHlwZSA9ICd2ZWN0b3JWYWx1ZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlVHlwZTtcbn1cbi8qKlxuICogRGV0ZWN0cyB0aGUgdmFsdWUga2luZCBmcm9tIGEgUHJvdG8zIEpTT04gYGdvb2dsZS5wcm90b2J1Zi5WYWx1ZWAgcHJvdG8uXG4gKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHByb3RvIFRoZSBgZmlyZXN0b3JlLnYxLlZhbHVlYCBwcm90by5cbiAqIEByZXR1cm4gVGhlIHN0cmluZyB2YWx1ZSBmb3IgJ3ZhbHVlVHlwZScuXG4gKi9cbmZ1bmN0aW9uIGRldGVjdEdvb2dsZVByb3RvYnVmVmFsdWVUeXBlKHByb3RvKSB7XG4gICAgY29uc3QgZGV0ZWN0ZWRWYWx1ZXMgPSBbXTtcbiAgICBpZiAocHJvdG8ubnVsbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGV0ZWN0ZWRWYWx1ZXMucHVzaCgnbnVsbFZhbHVlJyk7XG4gICAgfVxuICAgIGlmIChwcm90by5udW1iZXJWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRldGVjdGVkVmFsdWVzLnB1c2goJ251bWJlclZhbHVlJyk7XG4gICAgfVxuICAgIGlmIChwcm90by5zdHJpbmdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRldGVjdGVkVmFsdWVzLnB1c2goJ3N0cmluZ1ZhbHVlJyk7XG4gICAgfVxuICAgIGlmIChwcm90by5ib29sVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZXRlY3RlZFZhbHVlcy5wdXNoKCdib29sVmFsdWUnKTtcbiAgICB9XG4gICAgaWYgKHByb3RvLnN0cnVjdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGV0ZWN0ZWRWYWx1ZXMucHVzaCgnc3RydWN0VmFsdWUnKTtcbiAgICB9XG4gICAgaWYgKHByb3RvLmxpc3RWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRldGVjdGVkVmFsdWVzLnB1c2goJ2xpc3RWYWx1ZScpO1xuICAgIH1cbiAgICBpZiAoZGV0ZWN0ZWRWYWx1ZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGluZmVyIHR5cGUgdmFsdWUgZnJvbSAnJHtKU09OLnN0cmluZ2lmeShwcm90byl9Jy5gKTtcbiAgICB9XG4gICAgcmV0dXJuIGRldGVjdGVkVmFsdWVzWzBdO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGBmaXJlc3RvcmUudjEuVmFsdWVgIGluIFByb3RvMyBKU09OIGVuY29kaW5nIGludG8gdGhlXG4gKiBQcm90b2J1ZiBKUyBmb3JtYXQgZXhwZWN0ZWQgYnkgdGhpcyBjbGllbnQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIGZpZWxkVmFsdWUgVGhlIGBmaXJlc3RvcmUudjEuVmFsdWVgIGluIFByb3RvMyBKU09OIGZvcm1hdC5cbiAqIEByZXR1cm4gVGhlIGBmaXJlc3RvcmUudjEuVmFsdWVgIGluIFByb3RvYnVmIEpTIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gdmFsdWVGcm9tSnNvbihmaWVsZFZhbHVlKSB7XG4gICAgY29uc3QgdmFsdWVUeXBlID0gZGV0ZWN0VmFsdWVUeXBlKGZpZWxkVmFsdWUpO1xuICAgIHN3aXRjaCAodmFsdWVUeXBlKSB7XG4gICAgICAgIGNhc2UgJ3RpbWVzdGFtcFZhbHVlJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGltZXN0YW1wVmFsdWU6IHRpbWVzdGFtcEZyb21Kc29uKGZpZWxkVmFsdWUudGltZXN0YW1wVmFsdWUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSAnYnl0ZXNWYWx1ZSc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJ5dGVzVmFsdWU6IGJ5dGVzRnJvbUpzb24oZmllbGRWYWx1ZS5ieXRlc1ZhbHVlKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ2RvdWJsZVZhbHVlJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZG91YmxlVmFsdWU6IE51bWJlcihmaWVsZFZhbHVlLmRvdWJsZVZhbHVlKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ2FycmF5VmFsdWUnOiB7XG4gICAgICAgICAgICBjb25zdCBhcnJheVZhbHVlID0gW107XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZFZhbHVlLmFycmF5VmFsdWUudmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgZmllbGRWYWx1ZS5hcnJheVZhbHVlLnZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICBhcnJheVZhbHVlLnB1c2godmFsdWVGcm9tSnNvbih2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYXJyYXlWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IGFycmF5VmFsdWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnbWFwVmFsdWUnOlxuICAgICAgICBjYXNlICd2ZWN0b3JWYWx1ZSc6IHtcbiAgICAgICAgICAgIGNvbnN0IG1hcFZhbHVlID0ge307XG4gICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBmaWVsZFZhbHVlLm1hcFZhbHVlLmZpZWxkcztcbiAgICAgICAgICAgIGlmIChmaWVsZHMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHByb3Agb2YgT2JqZWN0LmtleXMoZmllbGRzKSkge1xuICAgICAgICAgICAgICAgICAgICBtYXBWYWx1ZVtwcm9wXSA9IHZhbHVlRnJvbUpzb24oZmllbGRWYWx1ZS5tYXBWYWx1ZS5maWVsZHNbcHJvcF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbWFwVmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzOiBtYXBWYWx1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWU7XG4gICAgfVxufVxuLyoqXG4gKiBDb252ZXJ0cyBhIG1hcCBvZiBJVmFsdWVzIGluIFByb3RvMyBKU09OIGVuY29kaW5nIGludG8gdGhlIFByb3RvYnVmIEpTIGZvcm1hdFxuICogZXhwZWN0ZWQgYnkgdGhpcyBjbGllbnQuIFRoaXMgY29udmVyc2lvbiBjcmVhdGVzIGEgY29weSBvZiB0aGUgdW5kZXJseWluZ1xuICogZmllbGRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSBkb2N1bWVudCBBbiBvYmplY3Qgd2l0aCBJVmFsdWVzIGluIFByb3RvMyBKU09OIGZvcm1hdC5cbiAqIEByZXR1cm4gVGhlIG9iamVjdCBpbiBQcm90b2J1ZiBKUyBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIGZpZWxkc0Zyb21Kc29uKGRvY3VtZW50KSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIE9iamVjdC5rZXlzKGRvY3VtZW50KSkge1xuICAgICAgICByZXN1bHRbcHJvcF0gPSB2YWx1ZUZyb21Kc29uKGRvY3VtZW50W3Byb3BdKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnZlcnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/convert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/document-change.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/document-change.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DocumentChange = void 0;\n/**\n * A DocumentChange represents a change to the documents matching a query.\n * It contains the document affected and the type of change that occurred.\n *\n * @class DocumentChange\n */\nclass DocumentChange {\n    /**\n     * @private\n     *\n     * @param {string} type 'added' | 'removed' | 'modified'.\n     * @param {QueryDocumentSnapshot} document The document.\n     * @param {number} oldIndex The index in the documents array prior to this\n     * change.\n     * @param {number} newIndex The index in the documents array after this\n     * change.\n     */\n    constructor(type, document, oldIndex, newIndex) {\n        this._type = type;\n        this._document = document;\n        this._oldIndex = oldIndex;\n        this._newIndex = newIndex;\n    }\n    /**\n     * The type of change ('added', 'modified', or 'removed').\n     *\n     * @type {string}\n     * @name DocumentChange#type\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     * let docsArray = [];\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   for (let change of querySnapshot.docChanges) {\n     *     console.log(`Type of change is ${change.type}`);\n     *   }\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    get type() {\n        return this._type;\n    }\n    /**\n     * The document affected by this change.\n     *\n     * @type {QueryDocumentSnapshot}\n     * @name DocumentChange#doc\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   for (let change of querySnapshot.docChanges) {\n     *     console.log(change.doc.data());\n     *   }\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    get doc() {\n        return this._document;\n    }\n    /**\n     * The index of the changed document in the result set immediately prior to\n     * this DocumentChange (i.e. supposing that all prior DocumentChange objects\n     * have been applied). Is -1 for 'added' events.\n     *\n     * @type {number}\n     * @name DocumentChange#oldIndex\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     * let docsArray = [];\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   for (let change of querySnapshot.docChanges) {\n     *     if (change.oldIndex !== -1) {\n     *       docsArray.splice(change.oldIndex, 1);\n     *     }\n     *     if (change.newIndex !== -1) {\n     *       docsArray.splice(change.newIndex, 0, change.doc);\n     *     }\n     *   }\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    get oldIndex() {\n        return this._oldIndex;\n    }\n    /**\n     * The index of the changed document in the result set immediately after\n     * this DocumentChange (i.e. supposing that all prior DocumentChange\n     * objects and the current DocumentChange object have been applied).\n     * Is -1 for 'removed' events.\n     *\n     * @type {number}\n     * @name DocumentChange#newIndex\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     * let docsArray = [];\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   for (let change of querySnapshot.docChanges) {\n     *     if (change.oldIndex !== -1) {\n     *       docsArray.splice(change.oldIndex, 1);\n     *     }\n     *     if (change.newIndex !== -1) {\n     *       docsArray.splice(change.newIndex, 0, change.doc);\n     *     }\n     *   }\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    get newIndex() {\n        return this._newIndex;\n    }\n    /**\n     * Returns true if the data in this `DocumentChange` is equal to the provided\n     * value.\n     *\n     * @param {*} other The value to compare against.\n     * @return true if this `DocumentChange` is equal to the provided value.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        return (other instanceof DocumentChange &&\n            this._type === other._type &&\n            this._oldIndex === other._oldIndex &&\n            this._newIndex === other._newIndex &&\n            this._document.isEqual(other._document));\n    }\n}\nexports.DocumentChange = DocumentChange;\n//# sourceMappingURL=document-change.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL2RvY3VtZW50LWNoYW5nZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSx1QkFBdUI7QUFDdEMsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsWUFBWTtBQUN4RDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvZmlyZXN0b3JlL2J1aWxkL3NyYy9kb2N1bWVudC1jaGFuZ2UuanM/NzllZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRvY3VtZW50Q2hhbmdlID0gdm9pZCAwO1xuLyoqXG4gKiBBIERvY3VtZW50Q2hhbmdlIHJlcHJlc2VudHMgYSBjaGFuZ2UgdG8gdGhlIGRvY3VtZW50cyBtYXRjaGluZyBhIHF1ZXJ5LlxuICogSXQgY29udGFpbnMgdGhlIGRvY3VtZW50IGFmZmVjdGVkIGFuZCB0aGUgdHlwZSBvZiBjaGFuZ2UgdGhhdCBvY2N1cnJlZC5cbiAqXG4gKiBAY2xhc3MgRG9jdW1lbnRDaGFuZ2VcbiAqL1xuY2xhc3MgRG9jdW1lbnRDaGFuZ2Uge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAnYWRkZWQnIHwgJ3JlbW92ZWQnIHwgJ21vZGlmaWVkJy5cbiAgICAgKiBAcGFyYW0ge1F1ZXJ5RG9jdW1lbnRTbmFwc2hvdH0gZG9jdW1lbnQgVGhlIGRvY3VtZW50LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvbGRJbmRleCBUaGUgaW5kZXggaW4gdGhlIGRvY3VtZW50cyBhcnJheSBwcmlvciB0byB0aGlzXG4gICAgICogY2hhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuZXdJbmRleCBUaGUgaW5kZXggaW4gdGhlIGRvY3VtZW50cyBhcnJheSBhZnRlciB0aGlzXG4gICAgICogY2hhbmdlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIGRvY3VtZW50LCBvbGRJbmRleCwgbmV3SW5kZXgpIHtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuX2RvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgICAgIHRoaXMuX29sZEluZGV4ID0gb2xkSW5kZXg7XG4gICAgICAgIHRoaXMuX25ld0luZGV4ID0gbmV3SW5kZXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIGNoYW5nZSAoJ2FkZGVkJywgJ21vZGlmaWVkJywgb3IgJ3JlbW92ZWQnKS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG5hbWUgRG9jdW1lbnRDaGFuZ2UjdHlwZVxuICAgICAqIEByZWFkb25seVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBsZXQgcXVlcnkgPSBmaXJlc3RvcmUuY29sbGVjdGlvbignY29sJykud2hlcmUoJ2ZvbycsICc9PScsICdiYXInKTtcbiAgICAgKiBsZXQgZG9jc0FycmF5ID0gW107XG4gICAgICpcbiAgICAgKiBsZXQgdW5zdWJzY3JpYmUgPSBxdWVyeS5vblNuYXBzaG90KHF1ZXJ5U25hcHNob3QgPT4ge1xuICAgICAqICAgZm9yIChsZXQgY2hhbmdlIG9mIHF1ZXJ5U25hcHNob3QuZG9jQ2hhbmdlcykge1xuICAgICAqICAgICBjb25zb2xlLmxvZyhgVHlwZSBvZiBjaGFuZ2UgaXMgJHtjaGFuZ2UudHlwZX1gKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIFJlbW92ZSB0aGlzIGxpc3RlbmVyLlxuICAgICAqIHVuc3Vic2NyaWJlKCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZG9jdW1lbnQgYWZmZWN0ZWQgYnkgdGhpcyBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7UXVlcnlEb2N1bWVudFNuYXBzaG90fVxuICAgICAqIEBuYW1lIERvY3VtZW50Q2hhbmdlI2RvY1xuICAgICAqIEByZWFkb25seVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBsZXQgcXVlcnkgPSBmaXJlc3RvcmUuY29sbGVjdGlvbignY29sJykud2hlcmUoJ2ZvbycsICc9PScsICdiYXInKTtcbiAgICAgKlxuICAgICAqIGxldCB1bnN1YnNjcmliZSA9IHF1ZXJ5Lm9uU25hcHNob3QocXVlcnlTbmFwc2hvdCA9PiB7XG4gICAgICogICBmb3IgKGxldCBjaGFuZ2Ugb2YgcXVlcnlTbmFwc2hvdC5kb2NDaGFuZ2VzKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKGNoYW5nZS5kb2MuZGF0YSgpKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIFJlbW92ZSB0aGlzIGxpc3RlbmVyLlxuICAgICAqIHVuc3Vic2NyaWJlKCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGRvYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RvY3VtZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGNoYW5nZWQgZG9jdW1lbnQgaW4gdGhlIHJlc3VsdCBzZXQgaW1tZWRpYXRlbHkgcHJpb3IgdG9cbiAgICAgKiB0aGlzIERvY3VtZW50Q2hhbmdlIChpLmUuIHN1cHBvc2luZyB0aGF0IGFsbCBwcmlvciBEb2N1bWVudENoYW5nZSBvYmplY3RzXG4gICAgICogaGF2ZSBiZWVuIGFwcGxpZWQpLiBJcyAtMSBmb3IgJ2FkZGVkJyBldmVudHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBuYW1lIERvY3VtZW50Q2hhbmdlI29sZEluZGV4XG4gICAgICogQHJlYWRvbmx5XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIGxldCBxdWVyeSA9IGZpcmVzdG9yZS5jb2xsZWN0aW9uKCdjb2wnKS53aGVyZSgnZm9vJywgJz09JywgJ2JhcicpO1xuICAgICAqIGxldCBkb2NzQXJyYXkgPSBbXTtcbiAgICAgKlxuICAgICAqIGxldCB1bnN1YnNjcmliZSA9IHF1ZXJ5Lm9uU25hcHNob3QocXVlcnlTbmFwc2hvdCA9PiB7XG4gICAgICogICBmb3IgKGxldCBjaGFuZ2Ugb2YgcXVlcnlTbmFwc2hvdC5kb2NDaGFuZ2VzKSB7XG4gICAgICogICAgIGlmIChjaGFuZ2Uub2xkSW5kZXggIT09IC0xKSB7XG4gICAgICogICAgICAgZG9jc0FycmF5LnNwbGljZShjaGFuZ2Uub2xkSW5kZXgsIDEpO1xuICAgICAqICAgICB9XG4gICAgICogICAgIGlmIChjaGFuZ2UubmV3SW5kZXggIT09IC0xKSB7XG4gICAgICogICAgICAgZG9jc0FycmF5LnNwbGljZShjaGFuZ2UubmV3SW5kZXgsIDAsIGNoYW5nZS5kb2MpO1xuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiAvLyBSZW1vdmUgdGhpcyBsaXN0ZW5lci5cbiAgICAgKiB1bnN1YnNjcmliZSgpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBvbGRJbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29sZEluZGV4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGNoYW5nZWQgZG9jdW1lbnQgaW4gdGhlIHJlc3VsdCBzZXQgaW1tZWRpYXRlbHkgYWZ0ZXJcbiAgICAgKiB0aGlzIERvY3VtZW50Q2hhbmdlIChpLmUuIHN1cHBvc2luZyB0aGF0IGFsbCBwcmlvciBEb2N1bWVudENoYW5nZVxuICAgICAqIG9iamVjdHMgYW5kIHRoZSBjdXJyZW50IERvY3VtZW50Q2hhbmdlIG9iamVjdCBoYXZlIGJlZW4gYXBwbGllZCkuXG4gICAgICogSXMgLTEgZm9yICdyZW1vdmVkJyBldmVudHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBuYW1lIERvY3VtZW50Q2hhbmdlI25ld0luZGV4XG4gICAgICogQHJlYWRvbmx5XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIGxldCBxdWVyeSA9IGZpcmVzdG9yZS5jb2xsZWN0aW9uKCdjb2wnKS53aGVyZSgnZm9vJywgJz09JywgJ2JhcicpO1xuICAgICAqIGxldCBkb2NzQXJyYXkgPSBbXTtcbiAgICAgKlxuICAgICAqIGxldCB1bnN1YnNjcmliZSA9IHF1ZXJ5Lm9uU25hcHNob3QocXVlcnlTbmFwc2hvdCA9PiB7XG4gICAgICogICBmb3IgKGxldCBjaGFuZ2Ugb2YgcXVlcnlTbmFwc2hvdC5kb2NDaGFuZ2VzKSB7XG4gICAgICogICAgIGlmIChjaGFuZ2Uub2xkSW5kZXggIT09IC0xKSB7XG4gICAgICogICAgICAgZG9jc0FycmF5LnNwbGljZShjaGFuZ2Uub2xkSW5kZXgsIDEpO1xuICAgICAqICAgICB9XG4gICAgICogICAgIGlmIChjaGFuZ2UubmV3SW5kZXggIT09IC0xKSB7XG4gICAgICogICAgICAgZG9jc0FycmF5LnNwbGljZShjaGFuZ2UubmV3SW5kZXgsIDAsIGNoYW5nZS5kb2MpO1xuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiAvLyBSZW1vdmUgdGhpcyBsaXN0ZW5lci5cbiAgICAgKiB1bnN1YnNjcmliZSgpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBuZXdJbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25ld0luZGV4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGRhdGEgaW4gdGhpcyBgRG9jdW1lbnRDaGFuZ2VgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZFxuICAgICAqIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgdmFsdWUgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICAgICAqIEByZXR1cm4gdHJ1ZSBpZiB0aGlzIGBEb2N1bWVudENoYW5nZWAgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGlzRXF1YWwob3RoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMgPT09IG90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKG90aGVyIGluc3RhbmNlb2YgRG9jdW1lbnRDaGFuZ2UgJiZcbiAgICAgICAgICAgIHRoaXMuX3R5cGUgPT09IG90aGVyLl90eXBlICYmXG4gICAgICAgICAgICB0aGlzLl9vbGRJbmRleCA9PT0gb3RoZXIuX29sZEluZGV4ICYmXG4gICAgICAgICAgICB0aGlzLl9uZXdJbmRleCA9PT0gb3RoZXIuX25ld0luZGV4ICYmXG4gICAgICAgICAgICB0aGlzLl9kb2N1bWVudC5pc0VxdWFsKG90aGVyLl9kb2N1bWVudCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuRG9jdW1lbnRDaGFuZ2UgPSBEb2N1bWVudENoYW5nZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvY3VtZW50LWNoYW5nZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/document-change.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/document-reader.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/document-reader.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2021 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DocumentReader = void 0;\nconst document_1 = __webpack_require__(/*! ./document */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\nconst timestamp_1 = __webpack_require__(/*! ./timestamp */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js\");\n/**\n * A wrapper around BatchGetDocumentsRequest that retries request upon stream\n * failure and returns ordered results.\n *\n * @private\n * @internal\n */\nclass DocumentReader {\n    /**\n     * Creates a new DocumentReader that fetches the provided documents (via\n     * `get()`).\n     *\n     * @param firestore The Firestore instance to use.\n     * @param allDocuments The documents to get.\n     * @param fieldMask An optional field mask to apply to this read\n     * @param transactionOrReadTime An optional transaction ID to use for this\n     * read or options for beginning a new transaction with this read\n     */\n    constructor(firestore, allDocuments, fieldMask, transactionOrReadTime) {\n        this.firestore = firestore;\n        this.allDocuments = allDocuments;\n        this.fieldMask = fieldMask;\n        this.transactionOrReadTime = transactionOrReadTime;\n        this.outstandingDocuments = new Set();\n        this.retrievedDocuments = new Map();\n        for (const docRef of this.allDocuments) {\n            this.outstandingDocuments.add(docRef.formattedName);\n        }\n    }\n    /**\n     * Invokes the BatchGetDocuments RPC and returns the results as an array of\n     * documents.\n     *\n     * @param requestTag A unique client-assigned identifier for this request.\n     */\n    async get(requestTag) {\n        const { result } = await this._get(requestTag);\n        return result;\n    }\n    /**\n     * Invokes the BatchGetDocuments RPC and returns the results with transaction\n     * metadata.\n     *\n     * @param requestTag A unique client-assigned identifier for this request.\n     */\n    async _get(requestTag) {\n        await this.fetchDocuments(requestTag);\n        // BatchGetDocuments doesn't preserve document order. We use the request\n        // order to sort the resulting documents.\n        const orderedDocuments = [];\n        for (const docRef of this.allDocuments) {\n            const document = this.retrievedDocuments.get(docRef.formattedName);\n            if (document !== undefined) {\n                // Recreate the DocumentSnapshot with the DocumentReference\n                // containing the original converter.\n                const finalDoc = new document_1.DocumentSnapshotBuilder(docRef);\n                finalDoc.fieldsProto = document._fieldsProto;\n                finalDoc.readTime = document.readTime;\n                finalDoc.createTime = document.createTime;\n                finalDoc.updateTime = document.updateTime;\n                orderedDocuments.push(finalDoc.build());\n            }\n            else {\n                throw new Error(`Did not receive document for \"${docRef.path}\".`);\n            }\n        }\n        return {\n            result: orderedDocuments,\n            transaction: this.retrievedTransactionId,\n        };\n    }\n    async fetchDocuments(requestTag) {\n        var _a;\n        if (!this.outstandingDocuments.size) {\n            return;\n        }\n        const request = {\n            database: this.firestore.formattedName,\n            documents: Array.from(this.outstandingDocuments),\n        };\n        if (this.transactionOrReadTime instanceof Uint8Array) {\n            request.transaction = this.transactionOrReadTime;\n        }\n        else if (this.transactionOrReadTime instanceof timestamp_1.Timestamp) {\n            request.readTime = this.transactionOrReadTime.toProto().timestampValue;\n        }\n        else if (this.transactionOrReadTime) {\n            request.newTransaction = this.transactionOrReadTime;\n        }\n        if (this.fieldMask) {\n            const fieldPaths = this.fieldMask.map(fieldPath => fieldPath.formattedName);\n            request.mask = { fieldPaths };\n        }\n        let resultCount = 0;\n        try {\n            const stream = await this.firestore.requestStream('batchGetDocuments', \n            /* bidirectional= */ false, request, requestTag);\n            stream.resume();\n            for await (const response of stream) {\n                // Proto comes with zero-length buffer by default\n                if ((_a = response.transaction) === null || _a === void 0 ? void 0 : _a.length) {\n                    this.retrievedTransactionId = response.transaction;\n                }\n                let snapshot;\n                if (response.found) {\n                    (0, logger_1.logger)('DocumentReader.fetchDocuments', requestTag, 'Received document: %s', response.found.name);\n                    snapshot = this.firestore.snapshot_(response.found, response.readTime);\n                }\n                else if (response.missing) {\n                    (0, logger_1.logger)('DocumentReader.fetchDocuments', requestTag, 'Document missing: %s', response.missing);\n                    snapshot = this.firestore.snapshot_(response.missing, response.readTime);\n                }\n                if (snapshot) {\n                    const path = snapshot.ref.formattedName;\n                    this.outstandingDocuments.delete(path);\n                    this.retrievedDocuments.set(path, snapshot);\n                    ++resultCount;\n                }\n            }\n        }\n        catch (error) {\n            const shouldRetry = \n            // Transactional reads are retried via the transaction runner.\n            !request.transaction &&\n                !request.newTransaction &&\n                // Only retry if we made progress.\n                resultCount > 0 &&\n                // Don't retry permanent errors.\n                error.code !== undefined &&\n                !(0, util_1.isPermanentRpcError)(error, 'batchGetDocuments');\n            (0, logger_1.logger)('DocumentReader.fetchDocuments', requestTag, 'BatchGetDocuments failed with error: %s. Retrying: %s', error, shouldRetry);\n            if (shouldRetry) {\n                return this.fetchDocuments(requestTag);\n            }\n            else {\n                throw error;\n            }\n        }\n        finally {\n            (0, logger_1.logger)('DocumentReader.fetchDocuments', requestTag, 'Received %d results', resultCount);\n        }\n    }\n}\nexports.DocumentReader = DocumentReader;\n//# sourceMappingURL=document-reader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/document-reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/document.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/document.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Precondition = exports.DocumentTransform = exports.DocumentMask = exports.QueryDocumentSnapshot = exports.DocumentSnapshot = exports.DocumentSnapshotBuilder = void 0;\nconst deepEqual = __webpack_require__(/*! fast-deep-equal */ \"(rsc)/./node_modules/fast-deep-equal/index.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst field_value_1 = __webpack_require__(/*! ./field-value */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/field-value.js\");\nconst path_1 = __webpack_require__(/*! ./path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst document_reference_1 = __webpack_require__(/*! ./reference/document-reference */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/document-reference.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/types.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\n/**\n * Returns a builder for DocumentSnapshot and QueryDocumentSnapshot instances.\n * Invoke `.build()' to assemble the final snapshot.\n *\n * @private\n * @internal\n */\nclass DocumentSnapshotBuilder {\n    // We include the DocumentReference in the constructor in order to allow the\n    // DocumentSnapshotBuilder to be typed with <AppModelType, DbModelType> when\n    // it is constructed.\n    constructor(ref) {\n        this.ref = ref;\n    }\n    /**\n     * Builds the DocumentSnapshot.\n     *\n     * @private\n     * @internal\n     * @returns Returns either a QueryDocumentSnapshot (if `fieldsProto` was\n     * provided) or a DocumentSnapshot.\n     */\n    build() {\n        assert((this.fieldsProto !== undefined) === (this.createTime !== undefined), 'Create time should be set iff document exists.');\n        assert((this.fieldsProto !== undefined) === (this.updateTime !== undefined), 'Update time should be set iff document exists.');\n        return this.fieldsProto\n            ? new QueryDocumentSnapshot(this.ref, this.fieldsProto, this.readTime, this.createTime, this.updateTime)\n            : new DocumentSnapshot(this.ref, undefined, this.readTime);\n    }\n}\nexports.DocumentSnapshotBuilder = DocumentSnapshotBuilder;\n/**\n * A DocumentSnapshot is an immutable representation for a document in a\n * Firestore database. The data can be extracted with\n * [data()]{@link DocumentSnapshot#data} or\n * [get(fieldPath)]{@link DocumentSnapshot#get} to get a\n * specific field.\n *\n * <p>For a DocumentSnapshot that points to a non-existing document, any data\n * access will return 'undefined'. You can use the\n * [exists]{@link DocumentSnapshot#exists} property to explicitly verify a\n * document's existence.\n *\n * @class DocumentSnapshot\n */\nclass DocumentSnapshot {\n    /**\n     * @private\n     * @internal\n     *\n     * @param ref The reference to the document.\n     * @param _fieldsProto The fields of the Firestore `Document` Protobuf backing\n     * this document (or undefined if the document does not exist).\n     * @param readTime The time when this snapshot was read  (or undefined if\n     * the document exists only locally).\n     * @param createTime The time when the document was created (or undefined if\n     * the document does not exist).\n     * @param updateTime The time when the document was last updated (or undefined\n     * if the document does not exist).\n     */\n    constructor(ref, \n    /**\n     * @internal\n     * @private\n     **/\n    _fieldsProto, readTime, createTime, updateTime) {\n        this._fieldsProto = _fieldsProto;\n        this._ref = ref;\n        this._serializer = ref.firestore._serializer;\n        this._readTime = readTime;\n        this._createTime = createTime;\n        this._updateTime = updateTime;\n    }\n    /**\n     * Creates a DocumentSnapshot from an object.\n     *\n     * @private\n     * @internal\n     * @param ref The reference to the document.\n     * @param obj The object to store in the DocumentSnapshot.\n     * @return The created DocumentSnapshot.\n     */\n    static fromObject(ref, obj) {\n        const serializer = ref.firestore._serializer;\n        return new DocumentSnapshot(ref, serializer.encodeFields(obj));\n    }\n    /**\n     * Creates a DocumentSnapshot from an UpdateMap.\n     *\n     * This methods expands the top-level field paths in a JavaScript map and\n     * turns { foo.bar : foobar } into { foo { bar : foobar }}\n     *\n     * @private\n     * @internal\n     * @param ref The reference to the document.\n     * @param data The field/value map to expand.\n     * @return The created DocumentSnapshot.\n     */\n    static fromUpdateMap(ref, data) {\n        const serializer = ref\n            .firestore._serializer;\n        /**\n         * Merges 'value' at the field path specified by the path array into\n         * 'target'.\n         */\n        function merge(target, value, path, pos) {\n            const key = path[pos];\n            const isLast = pos === path.length - 1;\n            if (target[key] === undefined) {\n                if (isLast) {\n                    if (value instanceof field_value_1.FieldTransform) {\n                        // If there is already data at this path, we need to retain it.\n                        // Otherwise, we don't include it in the DocumentSnapshot.\n                        return !(0, util_1.isEmpty)(target) ? target : null;\n                    }\n                    // The merge is done.\n                    const leafNode = serializer.encodeValue(value);\n                    if (leafNode) {\n                        target[key] = leafNode;\n                    }\n                    return target;\n                }\n                else {\n                    // We need to expand the target object.\n                    const childNode = {\n                        mapValue: {\n                            fields: {},\n                        },\n                    };\n                    const nestedValue = merge(childNode.mapValue.fields, value, path, pos + 1);\n                    if (nestedValue) {\n                        childNode.mapValue.fields = nestedValue;\n                        target[key] = childNode;\n                        return target;\n                    }\n                    else {\n                        return !(0, util_1.isEmpty)(target) ? target : null;\n                    }\n                }\n            }\n            else {\n                assert(!isLast, \"Can't merge current value into a nested object\");\n                target[key].mapValue.fields = merge(target[key].mapValue.fields, value, path, pos + 1);\n                return target;\n            }\n        }\n        const res = {};\n        for (const [key, value] of data) {\n            const path = key.toArray();\n            merge(res, value, path, 0);\n        }\n        return new DocumentSnapshot(ref, res);\n    }\n    /**\n     * True if the document exists.\n     *\n     * @type {boolean}\n     * @name DocumentSnapshot#exists\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then((documentSnapshot) => {\n     *   if (documentSnapshot.exists) {\n     *     console.log(`Data: ${JSON.stringify(documentSnapshot.data())}`);\n     *   }\n     * });\n     * ```\n     */\n    get exists() {\n        return this._fieldsProto !== undefined;\n    }\n    /**\n     * A [DocumentReference]{@link DocumentReference} for the document\n     * stored in this snapshot.\n     *\n     * @type {DocumentReference}\n     * @name DocumentSnapshot#ref\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then((documentSnapshot) => {\n     *   if (documentSnapshot.exists) {\n     *     console.log(`Found document at '${documentSnapshot.ref.path}'`);\n     *   }\n     * });\n     * ```\n     */\n    get ref() {\n        return this._ref;\n    }\n    /**\n     * The ID of the document for which this DocumentSnapshot contains data.\n     *\n     * @type {string}\n     * @name DocumentSnapshot#id\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then((documentSnapshot) => {\n     *   if (documentSnapshot.exists) {\n     *     console.log(`Document found with name '${documentSnapshot.id}'`);\n     *   }\n     * });\n     * ```\n     */\n    get id() {\n        return this._ref.id;\n    }\n    /**\n     * The time the document was created. Undefined for documents that don't\n     * exist.\n     *\n     * @type {Timestamp|undefined}\n     * @name DocumentSnapshot#createTime\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     let createTime = documentSnapshot.createTime;\n     *     console.log(`Document created at '${createTime.toDate()}'`);\n     *   }\n     * });\n     * ```\n     */\n    get createTime() {\n        return this._createTime;\n    }\n    /**\n     * The time the document was last updated (at the time the snapshot was\n     * generated). Undefined for documents that don't exist.\n     *\n     * @type {Timestamp|undefined}\n     * @name DocumentSnapshot#updateTime\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     let updateTime = documentSnapshot.updateTime;\n     *     console.log(`Document updated at '${updateTime.toDate()}'`);\n     *   }\n     * });\n     * ```\n     */\n    get updateTime() {\n        return this._updateTime;\n    }\n    /**\n     * The time this snapshot was read.\n     *\n     * @type {Timestamp}\n     * @name DocumentSnapshot#readTime\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   let readTime = documentSnapshot.readTime;\n     *   console.log(`Document read at '${readTime.toDate()}'`);\n     * });\n     * ```\n     */\n    get readTime() {\n        if (this._readTime === undefined) {\n            throw new Error(\"Called 'readTime' on a local document\");\n        }\n        return this._readTime;\n    }\n    /**\n     * Retrieves all fields in the document as an object. Returns 'undefined' if\n     * the document doesn't exist.\n     *\n     * @returns {T|undefined} An object containing all fields in the document or\n     * 'undefined' if the document doesn't exist.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   let data = documentSnapshot.data();\n     *   console.log(`Retrieved data: ${JSON.stringify(data)}`);\n     * });\n     * ```\n     */\n    data() {\n        const fields = this._fieldsProto;\n        if (fields === undefined) {\n            return undefined;\n        }\n        // We only want to use the converter and create a new QueryDocumentSnapshot\n        // if a converter has been provided.\n        if (this.ref._converter !== (0, types_1.defaultConverter)()) {\n            const untypedReference = new document_reference_1.DocumentReference(this.ref.firestore, this.ref._path);\n            return this.ref._converter.fromFirestore(new QueryDocumentSnapshot(untypedReference, this._fieldsProto, this.readTime, this.createTime, this.updateTime));\n        }\n        else {\n            const obj = {};\n            for (const prop of Object.keys(fields)) {\n                obj[prop] = this._serializer.decodeValue(fields[prop]);\n            }\n            return obj;\n        }\n    }\n    /**\n     * Retrieves the field specified by `field`.\n     *\n     * @param {string|FieldPath} field The field path\n     * (e.g. 'foo' or 'foo.bar') to a specific field.\n     * @returns {*} The data at the specified field location or undefined if no\n     * such field exists.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({ a: { b: 'c' }}).then(() => {\n     *   return documentRef.get();\n     * }).then(documentSnapshot => {\n     *   let field = documentSnapshot.get('a.b');\n     *   console.log(`Retrieved field value: ${field}`);\n     * });\n     * ```\n     */\n    // We deliberately use `any` in the external API to not impose type-checking\n    // on end users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get(field) {\n        (0, path_1.validateFieldPath)('field', field);\n        const protoField = this.protoField(field);\n        if (protoField === undefined) {\n            return undefined;\n        }\n        return this._serializer.decodeValue(protoField);\n    }\n    /**\n     * Retrieves the field specified by 'fieldPath' in its Protobuf JS\n     * representation.\n     *\n     * @private\n     * @internal\n     * @param field The path (e.g. 'foo' or 'foo.bar') to a specific field.\n     * @returns The Protobuf-encoded data at the specified field location or\n     * undefined if no such field exists.\n     */\n    protoField(field) {\n        let fields = this._fieldsProto;\n        if (fields === undefined) {\n            return undefined;\n        }\n        const components = path_1.FieldPath.fromArgument(field).toArray();\n        while (components.length > 1) {\n            fields = fields[components.shift()];\n            if (!fields || !fields.mapValue) {\n                return undefined;\n            }\n            fields = fields.mapValue.fields;\n        }\n        return fields[components[0]];\n    }\n    /**\n     * Convert a document snapshot to the Firestore 'Write' proto.\n     *\n     * @private\n     * @internal\n     */\n    toWriteProto() {\n        return {\n            update: {\n                name: this._ref.formattedName,\n                fields: this._fieldsProto,\n            },\n        };\n    }\n    /**\n     * Convert a document snapshot to the Firestore 'Document' proto.\n     *\n     * @private\n     * @internal\n     */\n    toDocumentProto() {\n        var _a, _b;\n        return {\n            name: this._ref.formattedName,\n            createTime: (_a = this.createTime) === null || _a === void 0 ? void 0 : _a.toProto().timestampValue,\n            updateTime: (_b = this.updateTime) === null || _b === void 0 ? void 0 : _b.toProto().timestampValue,\n            fields: this._fieldsProto,\n        };\n    }\n    /**\n     * Returns true if the document's data and path in this `DocumentSnapshot` is\n     * equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `DocumentSnapshot` is equal to the provided\n     * value.\n     */\n    isEqual(other) {\n        // Since the read time is different on every document read, we explicitly\n        // ignore all document metadata in this comparison.\n        return (this === other ||\n            (other instanceof DocumentSnapshot &&\n                this._ref.isEqual(other._ref) &&\n                deepEqual(this._fieldsProto, other._fieldsProto)));\n    }\n}\nexports.DocumentSnapshot = DocumentSnapshot;\n/**\n * A QueryDocumentSnapshot contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with [data()]{@link QueryDocumentSnapshot#data}\n * or [get()]{@link DocumentSnapshot#get} to get a specific field.\n *\n * A QueryDocumentSnapshot offers the same API surface as a\n * {@link DocumentSnapshot}. Since query results contain only existing\n * documents, the [exists]{@link DocumentSnapshot#exists} property will\n * always be true and [data()]{@link QueryDocumentSnapshot#data} will never\n * return 'undefined'.\n *\n * @class QueryDocumentSnapshot\n * @extends DocumentSnapshot\n */\nclass QueryDocumentSnapshot extends DocumentSnapshot {\n    /**\n     * The time the document was created.\n     *\n     * @type {Timestamp}\n     * @name QueryDocumentSnapshot#createTime\n     * @readonly\n     * @override\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.get().forEach(snapshot => {\n     *   console.log(`Document created at '${snapshot.createTime.toDate()}'`);\n     * });\n     * ```\n     */\n    get createTime() {\n        return super.createTime;\n    }\n    /**\n     * The time the document was last updated (at the time the snapshot was\n     * generated).\n     *\n     * @type {Timestamp}\n     * @name QueryDocumentSnapshot#updateTime\n     * @readonly\n     * @override\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.get().forEach(snapshot => {\n     *   console.log(`Document updated at '${snapshot.updateTime.toDate()}'`);\n     * });\n     * ```\n     */\n    get updateTime() {\n        return super.updateTime;\n    }\n    /**\n     * Retrieves all fields in the document as an object.\n     *\n     * @override\n     *\n     * @returns {T} An object containing all fields in the document.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.get().forEach(documentSnapshot => {\n     *   let data = documentSnapshot.data();\n     *   console.log(`Retrieved data: ${JSON.stringify(data)}`);\n     * });\n     * ```\n     */\n    data() {\n        const data = super.data();\n        if (!data) {\n            throw new Error('The data in a QueryDocumentSnapshot should always exist.');\n        }\n        return data;\n    }\n}\nexports.QueryDocumentSnapshot = QueryDocumentSnapshot;\n/**\n * A Firestore Document Mask contains the field paths affected by an update.\n *\n * @class\n * @private\n * @internal\n */\nclass DocumentMask {\n    /**\n     * @private\n     * @internal\n     * @private\n     *\n     * @param fieldPaths The field paths in this mask.\n     */\n    constructor(fieldPaths) {\n        this._sortedPaths = fieldPaths;\n        this._sortedPaths.sort((a, b) => a.compareTo(b));\n    }\n    /**\n     * Creates a document mask with the field paths of a document.\n     *\n     * @private\n     * @internal\n     * @param data A map with fields to modify. Only the keys are used to extract\n     * the document mask.\n     */\n    static fromUpdateMap(data) {\n        const fieldPaths = [];\n        data.forEach((value, key) => {\n            if (!(value instanceof field_value_1.FieldTransform) || value.includeInDocumentMask) {\n                fieldPaths.push(path_1.FieldPath.fromArgument(key));\n            }\n        });\n        return new DocumentMask(fieldPaths);\n    }\n    /**\n     * Creates a document mask from an array of field paths.\n     *\n     * @private\n     * @internal\n     * @param fieldMask A list of field paths.\n     */\n    static fromFieldMask(fieldMask) {\n        const fieldPaths = [];\n        for (const fieldPath of fieldMask) {\n            fieldPaths.push(path_1.FieldPath.fromArgument(fieldPath));\n        }\n        return new DocumentMask(fieldPaths);\n    }\n    /**\n     * Creates a document mask with the field names of a document.\n     *\n     * @private\n     * @internal\n     * @param data An object with fields to modify. Only the keys are used to\n     * extract the document mask.\n     */\n    static fromObject(data) {\n        const fieldPaths = [];\n        function extractFieldPaths(currentData, currentPath) {\n            let isEmpty = true;\n            for (const key of Object.keys(currentData)) {\n                isEmpty = false;\n                // We don't split on dots since fromObject is called with\n                // DocumentData.\n                const childSegment = new path_1.FieldPath(key);\n                const childPath = currentPath\n                    ? currentPath.append(childSegment)\n                    : childSegment;\n                const value = currentData[key];\n                if (value instanceof field_value_1.FieldTransform) {\n                    if (value.includeInDocumentMask) {\n                        fieldPaths.push(childPath);\n                    }\n                }\n                else if ((0, util_1.isPlainObject)(value)) {\n                    extractFieldPaths(value, childPath);\n                }\n                else if (value !== undefined) {\n                    // If the value is undefined it can never participate in the document\n                    // mask. With `ignoreUndefinedProperties` set to false,\n                    // `validateDocumentData` will reject an undefined value before even\n                    // computing the document mask.\n                    fieldPaths.push(childPath);\n                }\n            }\n            // Add a field path for an explicitly updated empty map.\n            if (currentPath && isEmpty) {\n                fieldPaths.push(currentPath);\n            }\n        }\n        extractFieldPaths(data);\n        return new DocumentMask(fieldPaths);\n    }\n    /**\n     * Returns true if this document mask contains no fields.\n     *\n     * @private\n     * @internal\n     * @return {boolean} Whether this document mask is empty.\n     */\n    get isEmpty() {\n        return this._sortedPaths.length === 0;\n    }\n    /**\n     * Removes the specified values from a sorted field path array.\n     *\n     * @private\n     * @internal\n     * @param input A sorted array of FieldPaths.\n     * @param values An array of FieldPaths to remove.\n     */\n    static removeFromSortedArray(input, values) {\n        for (let i = 0; i < input.length;) {\n            let removed = false;\n            for (const fieldPath of values) {\n                if (input[i].isEqual(fieldPath)) {\n                    input.splice(i, 1);\n                    removed = true;\n                    break;\n                }\n            }\n            if (!removed) {\n                ++i;\n            }\n        }\n    }\n    /**\n     * Removes the field path specified in 'fieldPaths' from this document mask.\n     *\n     * @private\n     * @internal\n     * @param fieldPaths An array of FieldPaths.\n     */\n    removeFields(fieldPaths) {\n        DocumentMask.removeFromSortedArray(this._sortedPaths, fieldPaths);\n    }\n    /**\n     * Returns whether this document mask contains 'fieldPath'.\n     *\n     * @private\n     * @internal\n     * @param fieldPath The field path to test.\n     * @return Whether this document mask contains 'fieldPath'.\n     */\n    contains(fieldPath) {\n        for (const sortedPath of this._sortedPaths) {\n            const cmp = sortedPath.compareTo(fieldPath);\n            if (cmp === 0) {\n                return true;\n            }\n            else if (cmp > 0) {\n                return false;\n            }\n        }\n        return false;\n    }\n    /**\n     * Removes all properties from 'data' that are not contained in this document\n     * mask.\n     *\n     * @private\n     * @internal\n     * @param data An object to filter.\n     * @return A shallow copy of the object filtered by this document mask.\n     */\n    applyTo(data) {\n        /*!\n         * Applies this DocumentMask to 'data' and computes the list of field paths\n         * that were specified in the mask but are not present in 'data'.\n         */\n        const applyDocumentMask = data => {\n            const remainingPaths = this._sortedPaths.slice(0);\n            const processObject = (currentData, currentPath) => {\n                let result = null;\n                Object.keys(currentData).forEach(key => {\n                    const childPath = currentPath\n                        ? currentPath.append(key)\n                        : new path_1.FieldPath(key);\n                    if (this.contains(childPath)) {\n                        DocumentMask.removeFromSortedArray(remainingPaths, [childPath]);\n                        result = result || {};\n                        result[key] = currentData[key];\n                    }\n                    else if ((0, util_1.isObject)(currentData[key])) {\n                        const childObject = processObject(currentData[key], childPath);\n                        if (childObject) {\n                            result = result || {};\n                            result[key] = childObject;\n                        }\n                    }\n                });\n                return result;\n            };\n            // processObject() returns 'null' if the DocumentMask is empty.\n            const filteredData = processObject(data) || {};\n            return {\n                filteredData,\n                remainingPaths,\n            };\n        };\n        const result = applyDocumentMask(data);\n        if (result.remainingPaths.length !== 0) {\n            throw new Error(`Input data is missing for field \"${result.remainingPaths[0]}\".`);\n        }\n        return result.filteredData;\n    }\n    /**\n     * Converts a document mask to the Firestore 'DocumentMask' Proto.\n     *\n     * @private\n     * @internal\n     * @returns A Firestore 'DocumentMask' Proto.\n     */\n    toProto() {\n        if (this.isEmpty) {\n            return {};\n        }\n        const encodedPaths = [];\n        for (const fieldPath of this._sortedPaths) {\n            encodedPaths.push(fieldPath.formattedName);\n        }\n        return {\n            fieldPaths: encodedPaths,\n        };\n    }\n}\nexports.DocumentMask = DocumentMask;\n/**\n * A Firestore Document Transform.\n *\n * A DocumentTransform contains pending server-side transforms and their\n * corresponding field paths.\n *\n * @private\n * @internal\n * @class\n */\nclass DocumentTransform {\n    /**\n     * @private\n     * @internal\n     * @private\n     *\n     * @param ref The DocumentReference for this transform.\n     * @param transforms A Map of FieldPaths to FieldTransforms.\n     */\n    constructor(ref, transforms) {\n        this.ref = ref;\n        this.transforms = transforms;\n    }\n    /**\n     * Generates a DocumentTransform from a JavaScript object.\n     *\n     * @private\n     * @internal\n     * @param ref The `DocumentReference` to use for the DocumentTransform.\n     * @param obj The object to extract the transformations from.\n     * @returns The Document Transform.\n     */\n    static fromObject(ref, obj) {\n        const updateMap = new Map();\n        for (const prop of Object.keys(obj)) {\n            updateMap.set(new path_1.FieldPath(prop), obj[prop]);\n        }\n        return DocumentTransform.fromUpdateMap(ref, updateMap);\n    }\n    /**\n     * Generates a DocumentTransform from an Update Map.\n     *\n     * @private\n     * @internal\n     * @param ref The `DocumentReference` to use for the DocumentTransform.\n     * @param data The update data to extract the transformations from.\n     * @returns The Document Transform.\n     */\n    static fromUpdateMap(ref, data) {\n        const transforms = new Map();\n        function encode_(val, path, allowTransforms) {\n            if (val instanceof field_value_1.FieldTransform && val.includeInDocumentTransform) {\n                if (allowTransforms) {\n                    transforms.set(path, val);\n                }\n                else {\n                    throw new Error(`${val.methodName}() is not supported inside of array values.`);\n                }\n            }\n            else if (Array.isArray(val)) {\n                for (let i = 0; i < val.length; ++i) {\n                    // We need to verify that no array value contains a document transform\n                    encode_(val[i], path.append(String(i)), false);\n                }\n            }\n            else if ((0, util_1.isPlainObject)(val)) {\n                for (const prop of Object.keys(val)) {\n                    encode_(val[prop], path.append(new path_1.FieldPath(prop)), allowTransforms);\n                }\n            }\n        }\n        data.forEach((value, key) => {\n            encode_(value, path_1.FieldPath.fromArgument(key), true);\n        });\n        return new DocumentTransform(ref, transforms);\n    }\n    /**\n     * Whether this DocumentTransform contains any actionable transformations.\n     *\n     * @private\n     * @internal\n     */\n    get isEmpty() {\n        return this.transforms.size === 0;\n    }\n    /**\n     * Returns the array of fields in this DocumentTransform.\n     *\n     * @private\n     * @internal\n     */\n    get fields() {\n        return Array.from(this.transforms.keys());\n    }\n    /**\n     * Validates the user provided field values in this document transform.\n     * @private\n     * @internal\n     */\n    validate() {\n        const allowUndefined = !!this.ref.firestore._settings.ignoreUndefinedProperties;\n        this.transforms.forEach(transform => transform.validate(allowUndefined));\n    }\n    /**\n     * Converts a document transform to the Firestore 'FieldTransform' Proto.\n     *\n     * @private\n     * @internal\n     * @param serializer The Firestore serializer\n     * @returns A list of Firestore 'FieldTransform' Protos\n     */\n    toProto(serializer) {\n        return Array.from(this.transforms, ([path, transform]) => transform.toProto(serializer, path));\n    }\n}\nexports.DocumentTransform = DocumentTransform;\n/**\n * A Firestore Precondition encapsulates options for database writes.\n *\n * @private\n * @internal\n * @class\n */\nclass Precondition {\n    /**\n     * @private\n     * @internal\n     * @private\n     *\n     * @param options.exists - Whether the referenced document should exist in\n     * Firestore,\n     * @param options.lastUpdateTime - The last update time of the referenced\n     * document in Firestore.\n     * @param options\n     */\n    constructor(options) {\n        if (options !== undefined) {\n            this._exists = options.exists;\n            this._lastUpdateTime = options.lastUpdateTime;\n        }\n    }\n    /**\n     * Generates the Protobuf `Preconditon` object for this precondition.\n     *\n     * @private\n     * @internal\n     * @returns The `Preconditon` Protobuf object or 'null' if there are no\n     * preconditions.\n     */\n    toProto() {\n        if (this.isEmpty) {\n            return null;\n        }\n        const proto = {};\n        if (this._lastUpdateTime !== undefined) {\n            proto.updateTime = this._lastUpdateTime.toProto().timestampValue;\n        }\n        else {\n            proto.exists = this._exists;\n        }\n        return proto;\n    }\n    /**\n     * Whether this DocumentTransform contains any enforcement.\n     *\n     * @private\n     * @internal\n     */\n    get isEmpty() {\n        return this._exists === undefined && !this._lastUpdateTime;\n    }\n}\nexports.Precondition = Precondition;\n//# sourceMappingURL=document.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/field-value.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/field-value.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DeleteTransform = exports.FieldTransform = exports.FieldValue = exports.VectorValue = void 0;\nconst deepEqual = __webpack_require__(/*! fast-deep-equal */ \"(rsc)/./node_modules/fast-deep-equal/index.js\");\nconst serializer_1 = __webpack_require__(/*! ./serializer */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/serializer.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\n/**\n * Represent a vector type in Firestore documents.\n * Create an instance with {@link FieldValue.vector}.\n *\n * @class VectorValue\n */\nclass VectorValue {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(values) {\n        // Making a copy of the parameter.\n        this._values = (values || []).map(n => n);\n    }\n    /**\n     * Returns a copy of the raw number array form of the vector.\n     */\n    toArray() {\n        return this._values.map(n => n);\n    }\n    /**\n     * @private\n     * @internal\n     */\n    _toProto(serializer) {\n        return serializer.encodeVector(this._values);\n    }\n    /**\n     * @private\n     * @internal\n     */\n    static _fromProto(valueArray) {\n        var _a, _b;\n        const values = (_b = (_a = valueArray.arrayValue) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.map(v => {\n            return v.doubleValue;\n        });\n        return new VectorValue(values);\n    }\n    /**\n     * Returns `true` if the two VectorValue has the same raw number arrays, returns `false` otherwise.\n     */\n    isEqual(other) {\n        return (0, util_1.isPrimitiveArrayEqual)(this._values, other._values);\n    }\n}\nexports.VectorValue = VectorValue;\n/**\n * Sentinel values that can be used when writing documents with set(), create()\n * or update().\n *\n * @class FieldValue\n */\nclass FieldValue {\n    /** @private */\n    constructor() { }\n    /**\n     * Creates a new `VectorValue` constructed with a copy of the given array of numbers.\n     *\n     * @param values - Create a `VectorValue` instance with a copy of this array of numbers.\n     *\n     * @returns A new `VectorValue` constructed with a copy of the given array of numbers.\n     */\n    static vector(values) {\n        return new VectorValue(values);\n    }\n    /**\n     * Returns a sentinel for use with update() or set() with {merge:true} to mark\n     * a field for deletion.\n     *\n     * @returns {FieldValue} The sentinel value to use in your objects.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     * let data = { a: 'b', c: 'd' };\n     *\n     * documentRef.set(data).then(() => {\n     *   return documentRef.update({a: Firestore.FieldValue.delete()});\n     * }).then(() => {\n     *   // Document now only contains { c: 'd' }\n     * });\n     * ```\n     */\n    static delete() {\n        return DeleteTransform.DELETE_SENTINEL;\n    }\n    /**\n     * Returns a sentinel used with set(), create() or update() to include a\n     * server-generated timestamp in the written data.\n     *\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({\n     *   time: Firestore.FieldValue.serverTimestamp()\n     * }).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   console.log(`Server time set to ${doc.get('time')}`);\n     * });\n     * ```\n     */\n    static serverTimestamp() {\n        return ServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL;\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to increment the the field's current value by the\n     * given value.\n     *\n     * If either current field value or the operand uses floating point\n     * precision, both values will be interpreted as floating point numbers and\n     * all arithmetic will follow IEEE 754 semantics. Otherwise, integer\n     * precision is kept and the result is capped between -2^63 and 2^63-1.\n     *\n     * If the current field value is not of type 'number', or if the field does\n     * not yet exist, the transformation will set the field to the given value.\n     *\n     * @param {number} n The value to increment by.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'counter', Firestore.FieldValue.increment(1)\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('counter') was incremented\n     * });\n     * ```\n     */\n    static increment(n) {\n        // eslint-disable-next-line prefer-rest-params\n        (0, validate_1.validateMinNumberOfArguments)('FieldValue.increment', arguments, 1);\n        return new NumericIncrementTransform(n);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to union the given elements with any array value that\n     * already exists on the server. Each specified element that doesn't already\n     * exist in the array will be added to the end. If the field being modified is\n     * not already an array it will be overwritten with an array containing\n     * exactly the specified elements.\n     *\n     * @param {...*} elements The elements to union into the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayUnion('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') contains field 'foo'\n     * });\n     * ```\n     */\n    static arrayUnion(...elements) {\n        (0, validate_1.validateMinNumberOfArguments)('FieldValue.arrayUnion', elements, 1);\n        return new ArrayUnionTransform(elements);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to remove the given elements from any array value\n     * that already exists on the server. All instances of each element specified\n     * will be removed from the array. If the field being modified is not already\n     * an array it will be overwritten with an empty array.\n     *\n     * @param {...*} elements The elements to remove from the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayRemove('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') no longer contains field 'foo'\n     * });\n     * ```\n     */\n    static arrayRemove(...elements) {\n        (0, validate_1.validateMinNumberOfArguments)('FieldValue.arrayRemove', elements, 1);\n        return new ArrayRemoveTransform(elements);\n    }\n    /**\n     * Returns true if this `FieldValue` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `FieldValue` is equal to the provided value.\n     *\n     * @example\n     * ```\n     * let fieldValues = [\n     *   Firestore.FieldValue.increment(-1.0),\n     *   Firestore.FieldValue.increment(-1),\n     *   Firestore.FieldValue.increment(-0.0),\n     *   Firestore.FieldValue.increment(-0),\n     *   Firestore.FieldValue.increment(0),\n     *   Firestore.FieldValue.increment(0.0),\n     *   Firestore.FieldValue.increment(1),\n     *   Firestore.FieldValue.increment(1.0)\n     * ];\n     *\n     * let equal = 0;\n     * for (let i = 0; i < fieldValues.length; ++i) {\n     *   for (let j = i + 1; j < fieldValues.length; ++j) {\n     *     if (fieldValues[i].isEqual(fieldValues[j])) {\n     *       ++equal;\n     *     }\n     *   }\n     * }\n     * console.log(`Found ${equal} equalities.`);\n     * ```\n     */\n    isEqual(other) {\n        return this === other;\n    }\n}\nexports.FieldValue = FieldValue;\n/**\n * An internal interface shared by all field transforms.\n *\n * A 'FieldTransform` subclass should implement '.includeInDocumentMask',\n * '.includeInDocumentTransform' and 'toProto' (if '.includeInDocumentTransform'\n * is 'true').\n *\n * @private\n * @internal\n * @abstract\n */\nclass FieldTransform extends FieldValue {\n}\nexports.FieldTransform = FieldTransform;\n/**\n * A transform that deletes a field from a Firestore document.\n *\n * @private\n * @internal\n */\nclass DeleteTransform extends FieldTransform {\n    constructor() {\n        super();\n    }\n    /**\n     * Deletes are included in document masks.\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return true;\n    }\n    /**\n     * Deletes are are omitted from document transforms.\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return false;\n    }\n    get methodName() {\n        return 'FieldValue.delete';\n    }\n    validate() { }\n    toProto() {\n        throw new Error('FieldValue.delete() should not be included in a FieldTransform');\n    }\n}\nexports.DeleteTransform = DeleteTransform;\n/**\n * Sentinel value for a field delete.\n * @private\n * @internal\n */\nDeleteTransform.DELETE_SENTINEL = new DeleteTransform();\n/**\n * A transform that sets a field to the Firestore server time.\n *\n * @private\n * @internal\n */\nclass ServerTimestampTransform extends FieldTransform {\n    constructor() {\n        super();\n    }\n    /**\n     * Server timestamps are omitted from document masks.\n     *\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Server timestamps are included in document transforms.\n     *\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.serverTimestamp';\n    }\n    validate() { }\n    toProto(serializer, fieldPath) {\n        return {\n            fieldPath: fieldPath.formattedName,\n            setToServerValue: 'REQUEST_TIME',\n        };\n    }\n}\n/**\n * Sentinel value for a server timestamp.\n *\n * @private\n * @internal\n */\nServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL = new ServerTimestampTransform();\n/**\n * Increments a field value on the backend.\n *\n * @private\n * @internal\n */\nclass NumericIncrementTransform extends FieldTransform {\n    constructor(operand) {\n        super();\n        this.operand = operand;\n    }\n    /**\n     * Numeric transforms are omitted from document masks.\n     *\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Numeric transforms are included in document transforms.\n     *\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.increment';\n    }\n    validate() {\n        (0, validate_1.validateNumber)('FieldValue.increment()', this.operand);\n    }\n    toProto(serializer, fieldPath) {\n        const encodedOperand = serializer.encodeValue(this.operand);\n        return { fieldPath: fieldPath.formattedName, increment: encodedOperand };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof NumericIncrementTransform &&\n                this.operand === other.operand));\n    }\n}\n/**\n * Transforms an array value via a union operation.\n *\n * @private\n * @internal\n */\nclass ArrayUnionTransform extends FieldTransform {\n    constructor(elements) {\n        super();\n        this.elements = elements;\n    }\n    /**\n     * Array transforms are omitted from document masks.\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.arrayUnion';\n    }\n    validate(allowUndefined) {\n        for (let i = 0; i < this.elements.length; ++i) {\n            validateArrayElement(i, this.elements[i], allowUndefined);\n        }\n    }\n    toProto(serializer, fieldPath) {\n        const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n        return {\n            fieldPath: fieldPath.formattedName,\n            appendMissingElements: encodedElements,\n        };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof ArrayUnionTransform &&\n                deepEqual(this.elements, other.elements)));\n    }\n}\n/**\n * Transforms an array value via a remove operation.\n *\n * @private\n * @internal\n */\nclass ArrayRemoveTransform extends FieldTransform {\n    constructor(elements) {\n        super();\n        this.elements = elements;\n    }\n    /**\n     * Array transforms are omitted from document masks.\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.arrayRemove';\n    }\n    validate(allowUndefined) {\n        for (let i = 0; i < this.elements.length; ++i) {\n            validateArrayElement(i, this.elements[i], allowUndefined);\n        }\n    }\n    toProto(serializer, fieldPath) {\n        const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n        return {\n            fieldPath: fieldPath.formattedName,\n            removeAllFromArray: encodedElements,\n        };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof ArrayRemoveTransform &&\n                deepEqual(this.elements, other.elements)));\n    }\n}\n/**\n * Validates that `value` can be used as an element inside of an array. Certain\n * field values (such as ServerTimestamps) are rejected. Nested arrays are also\n * rejected.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\nfunction validateArrayElement(arg, value, allowUndefined) {\n    if (Array.isArray(value)) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'array element')} Nested arrays are not supported.`);\n    }\n    (0, serializer_1.validateUserInput)(arg, value, 'array element', \n    /*path=*/ { allowDeletes: 'none', allowTransforms: false, allowUndefined }, \n    /*path=*/ undefined, \n    /*level=*/ 0, \n    /*inArray=*/ true);\n}\n//# sourceMappingURL=field-value.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/field-value.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/filter.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/filter.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*!\n * Copyright 2023 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CompositeFilter = exports.UnaryFilter = exports.Filter = void 0;\n/**\n * A `Filter` represents a restriction on one or more field values and can\n * be used to refine the results of a {@link Query}.\n * `Filters`s are created by invoking {@link Filter#where}, {@link Filter#or},\n * or {@link Filter#and} and can then be passed to {@link Query#where}\n * to create a new {@link Query} instance that also contains this `Filter`.\n */\nclass Filter {\n    /**\n     * Creates and returns a new [Filter]{@link Filter}, which can be\n     * applied to [Query.where()]{@link Query#where}, [Filter.or()]{@link Filter#or},\n     * or [Filter.and()]{@link Filter#and}. When applied to a [Query]{@link Query}\n     * it requires that documents must contain the specified field and that its value should\n     * satisfy the relation constraint provided.\n     *\n     * @param {string|FieldPath} fieldPath The name of a property value to compare.\n     * @param {string} opStr A comparison operation in the form of a string.\n     * Acceptable operator strings are \"<\", \"<=\", \"==\", \"!=\", \">=\", \">\", \"array-contains\",\n     * \"in\", \"not-in\", and \"array-contains-any\".\n     * @param {*} value The value to which to compare the field for inclusion in\n     * a query.\n     * @returns {Filter} The created Filter.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.where(Filter.where('foo', '==', 'bar')).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    static where(fieldPath, opStr, value) {\n        return new UnaryFilter(fieldPath, opStr, value);\n    }\n    /**\n     * Creates and returns a new [Filter]{@link Filter} that is a\n     * disjunction of the given {@link Filter}s. A disjunction filter includes\n     * a document if it satisfies any of the given {@link Filter}s.\n     *\n     * The returned Filter can be applied to [Query.where()]{@link Query#where},\n     * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When\n     * applied to a [Query]{@link Query} it requires that documents must satisfy\n     * one of the provided {@link Filter}s.\n     *\n     * @param {...Filter} filters  Optional. The {@link Filter}s\n     * for OR operation. These must be created with calls to {@link Filter#where},\n     * {@link Filter#or}, or {@link Filter#and}.\n     * @returns {Filter} The created {@link Filter}.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * // doc.foo == 'bar' || doc.baz > 0\n     * let orFilter = Filter.or(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));\n     *\n     * collectionRef.where(orFilter).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    static or(...filters) {\n        return new CompositeFilter(filters, 'OR');\n    }\n    /**\n     * Creates and returns a new [Filter]{@link Filter} that is a\n     * conjunction of the given {@link Filter}s. A conjunction filter includes\n     * a document if it satisfies all of the given {@link Filter}s.\n     *\n     * The returned Filter can be applied to [Query.where()]{@link Query#where},\n     * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When\n     * applied to a [Query]{@link Query} it requires that documents must satisfy\n     * one of the provided {@link Filter}s.\n     *\n     * @param {...Filter} filters  Optional. The {@link Filter}s\n     * for AND operation. These must be created with calls to {@link Filter#where},\n     * {@link Filter#or}, or {@link Filter#and}.\n     * @returns {Filter} The created {@link Filter}.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * // doc.foo == 'bar' && doc.baz > 0\n     * let andFilter = Filter.and(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));\n     *\n     * collectionRef.where(andFilter).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    static and(...filters) {\n        return new CompositeFilter(filters, 'AND');\n    }\n}\nexports.Filter = Filter;\n/**\n * A `UnaryFilter` represents a restriction on one field value and can\n * be used to refine the results of a {@link Query}.\n * `UnaryFilter`s are created by invoking {@link Filter#where} and can then\n * be passed to {@link Query#where} to create a new {@link Query} instance\n * that also contains this `UnaryFilter`.\n *\n * @private\n * @internal\n */\nclass UnaryFilter extends Filter {\n    /**\n     @private\n     @internal\n     */\n    constructor(field, operator, value) {\n        super();\n        this.field = field;\n        this.operator = operator;\n        this.value = value;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getField() {\n        return this.field;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getOperator() {\n        return this.operator;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getValue() {\n        return this.value;\n    }\n}\nexports.UnaryFilter = UnaryFilter;\n/**\n * A `CompositeFilter` is used to narrow the set of documents returned\n * by a Firestore query by performing the logical OR or AND of multiple\n * {@link Filters}s. `CompositeFilters`s are created by invoking {@link Filter#or}\n * or {@link Filter#and} and can then be passed to {@link Query#where}\n * to create a new query instance that also contains the `CompositeFilter`.\n *\n * @private\n * @internal\n */\nclass CompositeFilter extends Filter {\n    /**\n     @private\n     @internal\n     */\n    constructor(filters, operator) {\n        super();\n        this.filters = filters;\n        this.operator = operator;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getFilters() {\n        return this.filters;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getOperator() {\n        return this.operator;\n    }\n}\nexports.CompositeFilter = CompositeFilter;\n//# sourceMappingURL=filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/filter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/geo-point.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/geo-point.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GeoPoint = void 0;\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as a latitude/longitude pair.\n *\n * @class\n */\nclass GeoPoint {\n    /**\n     * Creates a [GeoPoint]{@link GeoPoint}.\n     *\n     * @param {number} latitude The latitude as a number between -90 and 90.\n     * @param {number} longitude The longitude as a number between -180 and 180.\n     *\n     * @example\n     * ```\n     * let data = {\n     *   google: new Firestore.GeoPoint(37.422, 122.084)\n     * };\n     *\n     * firestore.doc('col/doc').set(data).then(() => {\n     *   console.log(`Location is ${data.google.latitude}, ` +\n     *     `${data.google.longitude}`);\n     * });\n     * ```\n     */\n    constructor(latitude, longitude) {\n        (0, validate_1.validateNumber)('latitude', latitude, { minValue: -90, maxValue: 90 });\n        (0, validate_1.validateNumber)('longitude', longitude, { minValue: -180, maxValue: 180 });\n        this._latitude = latitude;\n        this._longitude = longitude;\n    }\n    /**\n     * The latitude as a number between -90 and 90.\n     *\n     * @type {number}\n     * @name GeoPoint#latitude\n     * @readonly\n     */\n    get latitude() {\n        return this._latitude;\n    }\n    /**\n     * The longitude as a number between -180 and 180.\n     *\n     * @type {number}\n     * @name GeoPoint#longitude\n     * @readonly\n     */\n    get longitude() {\n        return this._longitude;\n    }\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `GeoPoint` is equal to the provided value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof GeoPoint &&\n                this.latitude === other.latitude &&\n                this.longitude === other.longitude));\n    }\n    /**\n     * Converts the GeoPoint to a google.type.LatLng proto.\n     * @private\n     * @internal\n     */\n    toProto() {\n        return {\n            geoPointValue: {\n                latitude: this.latitude,\n                longitude: this.longitude,\n            },\n        };\n    }\n    /**\n     * Converts a google.type.LatLng proto to its GeoPoint representation.\n     * @private\n     * @internal\n     */\n    static fromProto(proto) {\n        return new GeoPoint(proto.latitude || 0, proto.longitude || 0);\n    }\n}\nexports.GeoPoint = GeoPoint;\n//# sourceMappingURL=geo-point.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL2dlby1wb2ludC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEIsbUJBQW1CLG1CQUFPLENBQUMsc0ZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixlQUFlO0FBQzNDO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHFCQUFxQjtBQUN6RCxjQUFjLHNCQUFzQjtBQUNwQyxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsK0RBQStELDZCQUE2QjtBQUM1RixpRUFBaUUsK0JBQStCO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL2ZpcmVzdG9yZS9idWlsZC9zcmMvZ2VvLXBvaW50LmpzPzE1OGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiFcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZW9Qb2ludCA9IHZvaWQgMDtcbmNvbnN0IHZhbGlkYXRlXzEgPSByZXF1aXJlKFwiLi92YWxpZGF0ZVwiKTtcbi8qKlxuICogQW4gaW1tdXRhYmxlIG9iamVjdCByZXByZXNlbnRpbmcgYSBnZW9ncmFwaGljIGxvY2F0aW9uIGluIEZpcmVzdG9yZS4gVGhlXG4gKiBsb2NhdGlvbiBpcyByZXByZXNlbnRlZCBhcyBhIGxhdGl0dWRlL2xvbmdpdHVkZSBwYWlyLlxuICpcbiAqIEBjbGFzc1xuICovXG5jbGFzcyBHZW9Qb2ludCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFtHZW9Qb2ludF17QGxpbmsgR2VvUG9pbnR9LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxhdGl0dWRlIFRoZSBsYXRpdHVkZSBhcyBhIG51bWJlciBiZXR3ZWVuIC05MCBhbmQgOTAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvbmdpdHVkZSBUaGUgbG9uZ2l0dWRlIGFzIGEgbnVtYmVyIGJldHdlZW4gLTE4MCBhbmQgMTgwLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBsZXQgZGF0YSA9IHtcbiAgICAgKiAgIGdvb2dsZTogbmV3IEZpcmVzdG9yZS5HZW9Qb2ludCgzNy40MjIsIDEyMi4wODQpXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGZpcmVzdG9yZS5kb2MoJ2NvbC9kb2MnKS5zZXQoZGF0YSkudGhlbigoKSA9PiB7XG4gICAgICogICBjb25zb2xlLmxvZyhgTG9jYXRpb24gaXMgJHtkYXRhLmdvb2dsZS5sYXRpdHVkZX0sIGAgK1xuICAgICAqICAgICBgJHtkYXRhLmdvb2dsZS5sb25naXR1ZGV9YCk7XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobGF0aXR1ZGUsIGxvbmdpdHVkZSkge1xuICAgICAgICAoMCwgdmFsaWRhdGVfMS52YWxpZGF0ZU51bWJlcikoJ2xhdGl0dWRlJywgbGF0aXR1ZGUsIHsgbWluVmFsdWU6IC05MCwgbWF4VmFsdWU6IDkwIH0pO1xuICAgICAgICAoMCwgdmFsaWRhdGVfMS52YWxpZGF0ZU51bWJlcikoJ2xvbmdpdHVkZScsIGxvbmdpdHVkZSwgeyBtaW5WYWx1ZTogLTE4MCwgbWF4VmFsdWU6IDE4MCB9KTtcbiAgICAgICAgdGhpcy5fbGF0aXR1ZGUgPSBsYXRpdHVkZTtcbiAgICAgICAgdGhpcy5fbG9uZ2l0dWRlID0gbG9uZ2l0dWRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbGF0aXR1ZGUgYXMgYSBudW1iZXIgYmV0d2VlbiAtOTAgYW5kIDkwLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbmFtZSBHZW9Qb2ludCNsYXRpdHVkZVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGdldCBsYXRpdHVkZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhdGl0dWRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbG9uZ2l0dWRlIGFzIGEgbnVtYmVyIGJldHdlZW4gLTE4MCBhbmQgMTgwLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbmFtZSBHZW9Qb2ludCNsb25naXR1ZGVcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBnZXQgbG9uZ2l0dWRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZ2l0dWRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBgR2VvUG9pbnRgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIHZhbHVlIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoaXMgYEdlb1BvaW50YCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgdmFsdWUuXG4gICAgICovXG4gICAgaXNFcXVhbChvdGhlcikge1xuICAgICAgICByZXR1cm4gKHRoaXMgPT09IG90aGVyIHx8XG4gICAgICAgICAgICAob3RoZXIgaW5zdGFuY2VvZiBHZW9Qb2ludCAmJlxuICAgICAgICAgICAgICAgIHRoaXMubGF0aXR1ZGUgPT09IG90aGVyLmxhdGl0dWRlICYmXG4gICAgICAgICAgICAgICAgdGhpcy5sb25naXR1ZGUgPT09IG90aGVyLmxvbmdpdHVkZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgR2VvUG9pbnQgdG8gYSBnb29nbGUudHlwZS5MYXRMbmcgcHJvdG8uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0b1Byb3RvKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2VvUG9pbnRWYWx1ZToge1xuICAgICAgICAgICAgICAgIGxhdGl0dWRlOiB0aGlzLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogdGhpcy5sb25naXR1ZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIGdvb2dsZS50eXBlLkxhdExuZyBwcm90byB0byBpdHMgR2VvUG9pbnQgcmVwcmVzZW50YXRpb24uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVByb3RvKHByb3RvKSB7XG4gICAgICAgIHJldHVybiBuZXcgR2VvUG9pbnQocHJvdG8ubGF0aXR1ZGUgfHwgMCwgcHJvdG8ubG9uZ2l0dWRlIHx8IDApO1xuICAgIH1cbn1cbmV4cG9ydHMuR2VvUG9pbnQgPSBHZW9Qb2ludDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlby1wb2ludC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/geo-point.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/index.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Firestore = exports.DEFAULT_MAX_IDLE_CHANNELS = exports.DEFAULT_MAX_TRANSACTION_ATTEMPTS = exports.MAX_REQUEST_RETRIES = exports.AggregateField = exports.Aggregate = exports.setLogFunction = exports.QueryPartition = exports.CollectionGroup = exports.GeoPoint = exports.FieldPath = exports.DocumentChange = exports.Timestamp = exports.Transaction = exports.WriteResult = exports.WriteBatch = exports.Filter = exports.VectorValue = exports.FieldValue = exports.QueryDocumentSnapshot = exports.DocumentSnapshot = exports.BulkWriter = exports.Query = exports.QuerySnapshot = exports.DocumentReference = exports.CollectionReference = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst backoff_1 = __webpack_require__(/*! ./backoff */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/backoff.js\");\nconst bulk_writer_1 = __webpack_require__(/*! ./bulk-writer */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/bulk-writer.js\");\nconst bundle_1 = __webpack_require__(/*! ./bundle */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/bundle.js\");\nconst convert_1 = __webpack_require__(/*! ./convert */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/convert.js\");\nconst document_reader_1 = __webpack_require__(/*! ./document-reader */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document-reader.js\");\nconst document_1 = __webpack_require__(/*! ./document */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document.js\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\nconst path_1 = __webpack_require__(/*! ./path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst pool_1 = __webpack_require__(/*! ./pool */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/pool.js\");\nconst collection_reference_1 = __webpack_require__(/*! ./reference/collection-reference */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/collection-reference.js\");\nconst document_reference_1 = __webpack_require__(/*! ./reference/document-reference */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/document-reference.js\");\nconst serializer_1 = __webpack_require__(/*! ./serializer */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/serializer.js\");\nconst timestamp_1 = __webpack_require__(/*! ./timestamp */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/transaction.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst write_batch_1 = __webpack_require__(/*! ./write-batch */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/write-batch.js\");\nconst firestore_client_config_json_1 = __webpack_require__(/*! ./v1/firestore_client_config.json */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_client_config.json\");\nconst serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\nconst collection_group_1 = __webpack_require__(/*! ./collection-group */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/collection-group.js\");\nObject.defineProperty(exports, \"CollectionGroup\", ({ enumerable: true, get: function () { return collection_group_1.CollectionGroup; } }));\nconst recursive_delete_1 = __webpack_require__(/*! ./recursive-delete */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/recursive-delete.js\");\nconst trace_util_1 = __webpack_require__(/*! ./telemetry/trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js\");\nconst disabled_trace_util_1 = __webpack_require__(/*! ./telemetry/disabled-trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/disabled-trace-util.js\");\nconst enabled_trace_util_1 = __webpack_require__(/*! ./telemetry/enabled-trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/enabled-trace-util.js\");\nvar collection_reference_2 = __webpack_require__(/*! ./reference/collection-reference */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/collection-reference.js\");\nObject.defineProperty(exports, \"CollectionReference\", ({ enumerable: true, get: function () { return collection_reference_2.CollectionReference; } }));\nvar document_reference_2 = __webpack_require__(/*! ./reference/document-reference */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/document-reference.js\");\nObject.defineProperty(exports, \"DocumentReference\", ({ enumerable: true, get: function () { return document_reference_2.DocumentReference; } }));\nvar query_snapshot_1 = __webpack_require__(/*! ./reference/query-snapshot */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-snapshot.js\");\nObject.defineProperty(exports, \"QuerySnapshot\", ({ enumerable: true, get: function () { return query_snapshot_1.QuerySnapshot; } }));\nvar query_1 = __webpack_require__(/*! ./reference/query */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query.js\");\nObject.defineProperty(exports, \"Query\", ({ enumerable: true, get: function () { return query_1.Query; } }));\nvar bulk_writer_2 = __webpack_require__(/*! ./bulk-writer */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/bulk-writer.js\");\nObject.defineProperty(exports, \"BulkWriter\", ({ enumerable: true, get: function () { return bulk_writer_2.BulkWriter; } }));\nvar document_2 = __webpack_require__(/*! ./document */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document.js\");\nObject.defineProperty(exports, \"DocumentSnapshot\", ({ enumerable: true, get: function () { return document_2.DocumentSnapshot; } }));\nObject.defineProperty(exports, \"QueryDocumentSnapshot\", ({ enumerable: true, get: function () { return document_2.QueryDocumentSnapshot; } }));\nvar field_value_1 = __webpack_require__(/*! ./field-value */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/field-value.js\");\nObject.defineProperty(exports, \"FieldValue\", ({ enumerable: true, get: function () { return field_value_1.FieldValue; } }));\nObject.defineProperty(exports, \"VectorValue\", ({ enumerable: true, get: function () { return field_value_1.VectorValue; } }));\nvar filter_1 = __webpack_require__(/*! ./filter */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/filter.js\");\nObject.defineProperty(exports, \"Filter\", ({ enumerable: true, get: function () { return filter_1.Filter; } }));\nvar write_batch_2 = __webpack_require__(/*! ./write-batch */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/write-batch.js\");\nObject.defineProperty(exports, \"WriteBatch\", ({ enumerable: true, get: function () { return write_batch_2.WriteBatch; } }));\nObject.defineProperty(exports, \"WriteResult\", ({ enumerable: true, get: function () { return write_batch_2.WriteResult; } }));\nvar transaction_2 = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/transaction.js\");\nObject.defineProperty(exports, \"Transaction\", ({ enumerable: true, get: function () { return transaction_2.Transaction; } }));\nvar timestamp_2 = __webpack_require__(/*! ./timestamp */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js\");\nObject.defineProperty(exports, \"Timestamp\", ({ enumerable: true, get: function () { return timestamp_2.Timestamp; } }));\nvar document_change_1 = __webpack_require__(/*! ./document-change */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document-change.js\");\nObject.defineProperty(exports, \"DocumentChange\", ({ enumerable: true, get: function () { return document_change_1.DocumentChange; } }));\nvar path_2 = __webpack_require__(/*! ./path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nObject.defineProperty(exports, \"FieldPath\", ({ enumerable: true, get: function () { return path_2.FieldPath; } }));\nvar geo_point_1 = __webpack_require__(/*! ./geo-point */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/geo-point.js\");\nObject.defineProperty(exports, \"GeoPoint\", ({ enumerable: true, get: function () { return geo_point_1.GeoPoint; } }));\nvar query_partition_1 = __webpack_require__(/*! ./query-partition */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/query-partition.js\");\nObject.defineProperty(exports, \"QueryPartition\", ({ enumerable: true, get: function () { return query_partition_1.QueryPartition; } }));\nvar logger_2 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\nObject.defineProperty(exports, \"setLogFunction\", ({ enumerable: true, get: function () { return logger_2.setLogFunction; } }));\nvar aggregate_1 = __webpack_require__(/*! ./aggregate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/aggregate.js\");\nObject.defineProperty(exports, \"Aggregate\", ({ enumerable: true, get: function () { return aggregate_1.Aggregate; } }));\nObject.defineProperty(exports, \"AggregateField\", ({ enumerable: true, get: function () { return aggregate_1.AggregateField; } }));\nconst libVersion = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@google-cloud/firestore/package.json\").version);\n(0, logger_1.setLibVersion)(libVersion);\n/*!\n * DO NOT REMOVE THE FOLLOWING NAMESPACE DEFINITIONS\n */\n/**\n * @namespace google.protobuf\n */\n/**\n * @namespace google.rpc\n */\n/**\n * @namespace google.longrunning\n */\n/**\n * @namespace google.firestore.v1\n */\n/**\n * @namespace google.firestore.v1beta1\n */\n/**\n * @namespace google.firestore.admin.v1\n */\n/*!\n * HTTP header for the resource prefix to improve routing and project isolation\n * by the backend.\n */\nconst CLOUD_RESOURCE_HEADER = 'google-cloud-resource-prefix';\n/**\n * The maximum number of times to retry idempotent requests.\n * @private\n */\nexports.MAX_REQUEST_RETRIES = 5;\n/**\n * The maximum number of times to attempt a transaction before failing.\n * @private\n */\nexports.DEFAULT_MAX_TRANSACTION_ATTEMPTS = 5;\n/*!\n * The default number of idle GRPC channel to keep.\n */\nexports.DEFAULT_MAX_IDLE_CHANNELS = 1;\n/*!\n * The maximum number of concurrent requests supported by a single GRPC channel,\n * as enforced by Google's Frontend. If the SDK issues more than 100 concurrent\n * operations, we need to use more than one GAPIC client since these clients\n * multiplex all requests over a single channel.\n */\nconst MAX_CONCURRENT_REQUESTS_PER_CLIENT = 100;\n/**\n * Document data (e.g. for use with\n * [set()]{@link DocumentReference#set}) consisting of fields mapped\n * to values.\n *\n * @typedef {Object.<string, *>} DocumentData\n */\n/**\n * Converter used by [withConverter()]{@link Query#withConverter} to transform\n * user objects of type `AppModelType` into Firestore data of type\n * `DbModelType`.\n *\n * Using the converter allows you to specify generic type arguments when storing\n * and retrieving objects from Firestore.\n *\n * @example\n * ```\n * class Post {\n *   constructor(readonly title: string, readonly author: string) {}\n *\n *   toString(): string {\n *     return this.title + ', by ' + this.author;\n *   }\n * }\n *\n * const postConverter = {\n *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n *     return {title: post.title, author: post.author};\n *   },\n *   fromFirestore(\n *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n *   ): Post {\n *     const data = snapshot.data();\n *     return new Post(data.title, data.author);\n *   }\n * };\n *\n * const postSnap = await Firestore()\n *   .collection('posts')\n *   .withConverter(postConverter)\n *   .doc().get();\n * const post = postSnap.data();\n * if (post !== undefined) {\n *   post.title; // string\n *   post.toString(); // Should be defined\n *   post.someNonExistentProperty; // TS error\n * }\n *\n * ```\n * @property {Function} toFirestore Called by the Firestore SDK to convert a\n * custom model object of type `AppModelType` into a plain Javascript object\n * (suitable for writing directly to the Firestore database).\n * @property {Function} fromFirestore Called by the Firestore SDK to convert\n * Firestore data into an object of type `AppModelType`.\n * @typedef {Object} FirestoreDataConverter\n */\n/**\n * Update data (for use with [update]{@link DocumentReference#update})\n * that contains paths mapped to values. Fields that contain dots\n * reference nested fields within the document.\n *\n * You can update a top-level field in your document by using the field name\n * as a key (e.g. `foo`). The provided value completely replaces the contents\n * for this field.\n *\n * You can also update a nested field directly by using its field path as a key\n * (e.g. `foo.bar`). This nested field update replaces the contents at `bar`\n * but does not modify other data under `foo`.\n *\n * @example\n * ```\n * const documentRef = firestore.doc('coll/doc');\n * documentRef.set({a1: {a2: 'val'}, b1: {b2: 'val'}, c1: {c2: 'val'}});\n * documentRef.update({\n *  b1: {b3: 'val'},\n *  'c1.c3': 'val',\n * });\n * // Value is {a1: {a2: 'val'}, b1: {b3: 'val'}, c1: {c2: 'val', c3: 'val'}}\n *\n * ```\n * @typedef {Object.<string, *>} UpdateData\n */\n/**\n * An options object that configures conditional behavior of\n * [update()]{@link DocumentReference#update} and\n * [delete()]{@link DocumentReference#delete} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, [BulkWriter]{@link BulkWriter}, and\n * [Transaction]{@link Transaction}. Using Preconditions, these calls\n * can be restricted to only apply to documents that match the specified\n * conditions.\n *\n * @example\n * ```\n * const documentRef = firestore.doc('coll/doc');\n *\n * documentRef.get().then(snapshot => {\n *   const updateTime = snapshot.updateTime;\n *\n *   console.log(`Deleting document at update time: ${updateTime.toDate()}`);\n *   return documentRef.delete({ lastUpdateTime: updateTime });\n * });\n *\n * ```\n * @property {Timestamp} lastUpdateTime The update time to enforce. If set,\n *  enforces that the document was last updated at lastUpdateTime. Fails the\n *  operation if the document was last updated at a different time.\n * @property {boolean} exists If set, enforces that the target document must\n * or must not exist.\n * @typedef {Object} Precondition\n */\n/**\n * An options object that configures the behavior of\n * [set()]{@link DocumentReference#set} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. These calls can be\n * configured to perform granular merges instead of overwriting the target\n * documents in their entirety by providing a SetOptions object with\n * { merge : true }.\n *\n * @property {boolean} merge Changes the behavior of a set() call to only\n * replace the values specified in its data argument. Fields omitted from the\n * set() call remain untouched.\n * @property {Array<(string|FieldPath)>} mergeFields Changes the behavior of\n * set() calls to only replace the specified field paths. Any field path that is\n * not specified is ignored and remains untouched.\n * It is an error to pass a SetOptions object to a set() call that is missing a\n * value for any of the fields specified here.\n * @typedef {Object} SetOptions\n */\n/**\n * An options object that can be used to configure the behavior of\n * [getAll()]{@link Firestore#getAll} calls. By providing a `fieldMask`, these\n * calls can be configured to only return a subset of fields.\n *\n * @property {Array<(string|FieldPath)>} fieldMask Specifies the set of fields\n * to return and reduces the amount of data transmitted by the backend.\n * Adding a field mask does not filter results. Documents do not need to\n * contain values for all the fields in the mask to be part of the result set.\n * @typedef {Object} ReadOptions\n */\n/**\n * An options object to configure throttling on BulkWriter.\n *\n * Whether to disable or configure throttling. By default, throttling is\n * enabled. `throttling` can be set to either a boolean or a config object.\n * Setting it to `true` will use default values. You can override the defaults\n * by setting it to `false` to disable throttling, or by setting the config\n * values to enable throttling with the provided values.\n *\n * @property {boolean|Object} throttling Whether to disable or enable\n * throttling. Throttling is enabled by default, if the field is set to `true`\n * or if any custom throttling options are provided. `{ initialOpsPerSecond:\n * number }` sets the initial maximum number of operations per second allowed by\n * the throttler. If `initialOpsPerSecond` is not set, the default is 500\n * operations per second. `{ maxOpsPerSecond: number }` sets the maximum number\n * of operations per second allowed by the throttler. If `maxOpsPerSecond` is\n * not set, no maximum is enforced.\n * @typedef {Object} BulkWriterOptions\n */\n/**\n * An error thrown when a BulkWriter operation fails.\n *\n * The error used by {@link BulkWriter~shouldRetryCallback} set in\n * {@link BulkWriter#onWriteError}.\n *\n * @property {GrpcStatus} code The status code of the error.\n * @property {string} message The error message of the error.\n * @property {DocumentReference} documentRef The document reference the\n * operation was performed on.\n * @property {'create' | 'set' | 'update' | 'delete'} operationType The type\n * of operation performed.\n * @property {number} failedAttempts How many times this operation has been\n * attempted unsuccessfully.\n * @typedef {Error} BulkWriterError\n */\n/**\n * Status codes returned by GRPC operations.\n *\n * @see https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\n *\n * @enum {number}\n * @typedef {Object} GrpcStatus\n */\n/**\n * The Firestore client represents a Firestore Database and is the entry point\n * for all Firestore operations.\n *\n * @see [Firestore Documentation]{@link https://firebase.google.com/docs/firestore/}\n *\n * @class\n *\n * @example Install the client library with <a href=\"https://www.npmjs.com/\">npm</a>:\n * ```\n * npm install --save @google-cloud/firestore\n *\n * ```\n * @example Import the client library\n * ```\n * var Firestore = require('@google-cloud/firestore');\n *\n * ```\n * @example Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:\n * ```\n * var firestore = new Firestore();\n *\n * ```\n * @example Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:\n * ```\n * var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * ```\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\nclass Firestore {\n    /**\n     * Lazy-load the Firestore's default BulkWriter.\n     *\n     * @private\n     * @internal\n     */\n    getBulkWriter() {\n        if (!this._bulkWriter) {\n            this._bulkWriter = this.bulkWriter();\n        }\n        return this._bulkWriter;\n    }\n    /**\n     * @param {Object=} settings [Configuration object](#/docs).\n     * @param {string=} settings.projectId The project ID from the Google\n     * Developer's Console, e.g. 'grape-spaceship-123'. We will also check the\n     * environment variable GCLOUD_PROJECT for your project ID.  Can be omitted in\n     * environments that support\n     * {@link https://cloud.google.com/docs/authentication Application Default\n     * Credentials}\n     * @param {string=} settings.keyFilename Local file containing the Service\n     * Account credentials as downloaded from the Google Developers Console. Can\n     * be omitted in environments that support\n     * {@link https://cloud.google.com/docs/authentication Application Default\n     * Credentials}. To configure Firestore with custom credentials, use\n     * `settings.credentials` and provide the `client_email` and `private_key` of\n     * your service account.\n     * @param {{client_email:string=, private_key:string=}=} settings.credentials\n     * The `client_email` and `private_key` properties of the service account\n     * to use with your Firestore project. Can be omitted in environments that\n     * support {@link https://cloud.google.com/docs/authentication Application\n     * Default Credentials}. If your credentials are stored in a JSON file, you\n     * can specify a `keyFilename` instead.\n     * @param {string=} settings.host The host to connect to.\n     * @param {boolean=} settings.ssl Whether to use SSL when connecting.\n     * @param {number=} settings.maxIdleChannels The maximum number of idle GRPC\n     * channels to keep. A smaller number of idle channels reduces memory usage\n     * but increases request latency for clients with fluctuating request rates.\n     * If set to 0, shuts down all GRPC channels when the client becomes idle.\n     * Defaults to 1.\n     * @param {boolean=} settings.ignoreUndefinedProperties Whether to skip nested\n     * properties that are set to `undefined` during object serialization. If set\n     * to `true`, these properties are skipped and not written to Firestore. If\n     * set `false` or omitted, the SDK throws an exception when it encounters\n     * properties of type `undefined`.\n     * @param {boolean=} settings.preferRest Whether to force the use of HTTP/1.1 REST\n     * transport until a method that requires gRPC is called. When a method requires gRPC,\n     * this Firestore client will load dependent gRPC libraries and then use gRPC transport\n     * for communication from that point forward. Currently the only operation\n     * that requires gRPC is creating a snapshot listener with the method\n     * `DocumentReference<T>.onSnapshot()`, `CollectionReference<T>.onSnapshot()`, or\n     * `Query<T>.onSnapshot()`. If specified, this setting value will take precedent over the\n     * environment variable `FIRESTORE_PREFER_REST`. If not specified, the\n     * SDK will use the value specified in the environment variable `FIRESTORE_PREFER_REST`.\n     * Valid values of `FIRESTORE_PREFER_REST` are `true` ('1') or `false` (`0`). Values are\n     * not case-sensitive. Any other value for the environment variable will be ignored and\n     * a warning will be logged to the console.\n     */\n    constructor(settings) {\n        /**\n         * The configuration options for the GAPIC client.\n         * @private\n         * @internal\n         */\n        this._settings = {};\n        /**\n         * Whether the initialization settings can still be changed by invoking\n         * `settings()`.\n         * @private\n         * @internal\n         */\n        this._settingsFrozen = false;\n        /**\n         * The serializer to use for the Protobuf transformation.\n         * @private\n         * @internal\n         */\n        this._serializer = null;\n        /**\n         * The project ID for this client.\n         *\n         * The project ID is auto-detected during the first request unless a project\n         * ID is passed to the constructor (or provided via `.settings()`).\n         * @private\n         * @internal\n         */\n        this._projectId = undefined;\n        /**\n         * The database ID provided via `.settings()`.\n         *\n         * @private\n         * @internal\n         */\n        this._databaseId = undefined;\n        /**\n         * Count of listeners that have been registered on the client.\n         *\n         * The client can only be terminated when there are no pending writes or\n         * registered listeners.\n         * @private\n         * @internal\n         */\n        this.registeredListenersCount = 0;\n        /**\n         * Number of pending operations on the client.\n         *\n         * The client can only be terminated when there are no pending writes or\n         * registered listeners.\n         * @private\n         * @internal\n         */\n        this.bulkWritersCount = 0;\n        const libraryHeader = {\n            libName: 'gccl',\n            libVersion,\n        };\n        if (settings && settings.firebaseVersion) {\n            libraryHeader.libVersion += ' fire/' + settings.firebaseVersion;\n        }\n        if (settings && settings.firebaseAdminVersion) {\n            libraryHeader.libVersion +=\n                ' fire-admin/' + settings.firebaseAdminVersion;\n        }\n        this.validateAndApplySettings({ ...settings, ...libraryHeader });\n        this._traceUtil = this.newTraceUtilInstance(this._settings);\n        const retryConfig = serviceConfig.retry_params.default;\n        this._backoffSettings = {\n            initialDelayMs: retryConfig.initial_retry_delay_millis,\n            maxDelayMs: retryConfig.max_retry_delay_millis,\n            backoffFactor: retryConfig.retry_delay_multiplier,\n        };\n        const maxIdleChannels = this._settings.maxIdleChannels === undefined\n            ? exports.DEFAULT_MAX_IDLE_CHANNELS\n            : this._settings.maxIdleChannels;\n        this._clientPool = new pool_1.ClientPool(MAX_CONCURRENT_REQUESTS_PER_CLIENT, maxIdleChannels, \n        /* clientFactory= */ (requiresGrpc) => {\n            var _a;\n            let client;\n            // Use the rest fallback if enabled and if the method does not require GRPC\n            const useFallback = !this._settings.preferRest || requiresGrpc ? false : 'rest';\n            let gax;\n            if (useFallback) {\n                if (!this._gaxFallback) {\n                    gax = this._gaxFallback = __webpack_require__(/*! google-gax/build/src/fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\");\n                }\n                else {\n                    gax = this._gaxFallback;\n                }\n            }\n            else {\n                if (!this._gax) {\n                    gax = this._gax = __webpack_require__(/*! google-gax */ \"(rsc)/./node_modules/google-gax/build/src/index.js\");\n                }\n                else {\n                    gax = this._gax;\n                }\n            }\n            if (this._settings.ssl === false) {\n                const grpcModule = (_a = this._settings.grpc) !== null && _a !== void 0 ? _a : (__webpack_require__(/*! google-gax */ \"(rsc)/./node_modules/google-gax/build/src/index.js\").grpc);\n                const sslCreds = grpcModule.credentials.createInsecure();\n                const settings = {\n                    sslCreds,\n                    ...this._settings,\n                    fallback: useFallback,\n                };\n                // Since `ssl === false`, if we're using the GAX fallback then\n                // also set the `protocol` option for GAX fallback to force http\n                if (useFallback) {\n                    settings.protocol = 'http';\n                }\n                client = new module.exports.v1(settings, gax);\n            }\n            else {\n                client = new module.exports.v1({\n                    ...this._settings,\n                    fallback: useFallback,\n                }, gax);\n            }\n            (0, logger_1.logger)('clientFactory', null, 'Initialized Firestore GAPIC Client (useFallback: %s)', useFallback);\n            return client;\n        }, \n        /* clientDestructor= */ client => client.close());\n        (0, logger_1.logger)('Firestore', null, 'Initialized Firestore');\n    }\n    /**\n     * Specifies custom settings to be used to configure the `Firestore`\n     * instance. Can only be invoked once and before any other Firestore method.\n     *\n     * If settings are provided via both `settings()` and the `Firestore`\n     * constructor, both settings objects are merged and any settings provided via\n     * `settings()` take precedence.\n     *\n     * @param {object} settings The settings to use for all Firestore operations.\n     */\n    settings(settings) {\n        (0, validate_1.validateObject)('settings', settings);\n        (0, validate_1.validateString)('settings.projectId', settings.projectId, { optional: true });\n        (0, validate_1.validateString)('settings.databaseId', settings.databaseId, {\n            optional: true,\n        });\n        if (this._settingsFrozen) {\n            throw new Error('Firestore has already been initialized. You can only call ' +\n                'settings() once, and only before calling any other methods on a ' +\n                'Firestore object.');\n        }\n        const mergedSettings = { ...this._settings, ...settings };\n        this.validateAndApplySettings(mergedSettings);\n        this._traceUtil = this.newTraceUtilInstance(this._settings);\n        this._settingsFrozen = true;\n    }\n    validateAndApplySettings(settings) {\n        var _a;\n        if (settings.projectId !== undefined) {\n            (0, validate_1.validateString)('settings.projectId', settings.projectId);\n            this._projectId = settings.projectId;\n        }\n        if (settings.databaseId !== undefined) {\n            (0, validate_1.validateString)('settings.databaseId', settings.databaseId);\n            this._databaseId = settings.databaseId;\n        }\n        let url = null;\n        // If preferRest is not specified in settings, but is set as environment variable,\n        // then use the environment variable value.\n        const preferRestEnvValue = (0, util_1.tryGetPreferRestEnvironmentVariable)();\n        if (settings.preferRest === undefined && preferRestEnvValue !== undefined) {\n            settings = {\n                ...settings,\n                preferRest: preferRestEnvValue,\n            };\n        }\n        // If the environment variable is set, it should always take precedence\n        // over any user passed in settings.\n        if (process.env.FIRESTORE_EMULATOR_HOST) {\n            (0, validate_1.validateHost)('FIRESTORE_EMULATOR_HOST', process.env.FIRESTORE_EMULATOR_HOST);\n            settings = {\n                ...settings,\n                host: process.env.FIRESTORE_EMULATOR_HOST,\n                ssl: false,\n            };\n            url = new url_1.URL(`http://${settings.host}`);\n        }\n        else if (settings.host !== undefined) {\n            (0, validate_1.validateHost)('settings.host', settings.host);\n            url = new url_1.URL(`http://${settings.host}`);\n        }\n        // Only store the host if a valid value was provided in `host`.\n        if (url !== null) {\n            if ((settings.servicePath !== undefined &&\n                settings.servicePath !== url.hostname) ||\n                (settings.apiEndpoint !== undefined &&\n                    settings.apiEndpoint !== url.hostname)) {\n                // eslint-disable-next-line no-console\n                console.warn(`The provided host (${url.hostname}) in \"settings\" does not ` +\n                    `match the existing host (${(_a = settings.servicePath) !== null && _a !== void 0 ? _a : settings.apiEndpoint}). Using the provided host.`);\n            }\n            settings.servicePath = url.hostname;\n            if (url.port !== '' && settings.port === undefined) {\n                settings.port = Number(url.port);\n            }\n            // We need to remove the `host` and `apiEndpoint` setting, in case a user\n            // calls `settings()`, which will compare the the provided `host` to the\n            // existing hostname stored on `servicePath`.\n            delete settings.host;\n            delete settings.apiEndpoint;\n        }\n        if (settings.ssl !== undefined) {\n            (0, validate_1.validateBoolean)('settings.ssl', settings.ssl);\n        }\n        if (settings.maxIdleChannels !== undefined) {\n            (0, validate_1.validateInteger)('settings.maxIdleChannels', settings.maxIdleChannels, {\n                minValue: 0,\n            });\n        }\n        this._settings = settings;\n        this._settings.toJSON = function () {\n            const temp = Object.assign({}, this);\n            if (temp.credentials) {\n                temp.credentials = { private_key: '***', client_email: '***' };\n            }\n            return temp;\n        };\n        this._serializer = new serializer_1.Serializer(this);\n    }\n    newTraceUtilInstance(settings) {\n        let createEnabledInstance = true;\n        // The environment variable can override options to enable/disable telemetry collection.\n        if ('FIRESTORE_ENABLE_TRACING' in process.env) {\n            const enableTracingEnvVar = process.env.FIRESTORE_ENABLE_TRACING.toLowerCase();\n            if (enableTracingEnvVar === 'on' || enableTracingEnvVar === 'true') {\n                createEnabledInstance = true;\n            }\n            if (enableTracingEnvVar === 'off' || enableTracingEnvVar === 'false') {\n                createEnabledInstance = false;\n            }\n        }\n        if (createEnabledInstance) {\n            return new enabled_trace_util_1.EnabledTraceUtil(settings);\n        }\n        else {\n            return new disabled_trace_util_1.DisabledTraceUtil();\n        }\n    }\n    /**\n     * Returns the Project ID for this Firestore instance. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     * @internal\n     */\n    get projectId() {\n        if (this._projectId === undefined) {\n            throw new Error('INTERNAL ERROR: Client is not yet ready to issue requests.');\n        }\n        return this._projectId;\n    }\n    /**\n     * Returns the Database ID for this Firestore instance.\n     */\n    get databaseId() {\n        return this._databaseId || path_1.DEFAULT_DATABASE_ID;\n    }\n    /**\n     * Returns the root path of the database. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     * @internal\n     */\n    get formattedName() {\n        return `projects/${this.projectId}/databases/${this.databaseId}`;\n    }\n    /**\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\n     * refers to the document at the specified path.\n     *\n     * @param {string} documentPath A slash-separated path to a document.\n     * @returns {DocumentReference} The\n     * [DocumentReference]{@link DocumentReference} instance.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('collection/document');\n     * console.log(`Path of document is ${documentRef.path}`);\n     * ```\n     */\n    doc(documentPath) {\n        (0, path_1.validateResourcePath)('documentPath', documentPath);\n        const path = path_1.ResourcePath.EMPTY.append(documentPath);\n        if (!path.isDocument) {\n            throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\n        }\n        return new document_reference_1.DocumentReference(this, path);\n    }\n    /**\n     * Gets a [CollectionReference]{@link CollectionReference} instance\n     * that refers to the collection at the specified path.\n     *\n     * @param {string} collectionPath A slash-separated path to a collection.\n     * @returns {CollectionReference} The\n     * [CollectionReference]{@link CollectionReference} instance.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('collection');\n     *\n     * // Add a document with an auto-generated ID.\n     * collectionRef.add({foo: 'bar'}).then((documentRef) => {\n     *   console.log(`Added document at ${documentRef.path})`);\n     * });\n     * ```\n     */\n    collection(collectionPath) {\n        (0, path_1.validateResourcePath)('collectionPath', collectionPath);\n        const path = path_1.ResourcePath.EMPTY.append(collectionPath);\n        if (!path.isCollection) {\n            throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\n        }\n        return new collection_reference_1.CollectionReference(this, path);\n    }\n    /**\n     * Creates and returns a new Query that includes all documents in the\n     * database that are contained in a collection or subcollection with the\n     * given collectionId.\n     *\n     * @param {string} collectionId Identifies the collections to query over.\n     * Every collection or subcollection with this ID as the last segment of its\n     * path will be included. Cannot contain a slash.\n     * @returns {CollectionGroup} The created CollectionGroup.\n     *\n     * @example\n     * ```\n     * let docA = firestore.doc('mygroup/docA').set({foo: 'bar'});\n     * let docB = firestore.doc('abc/def/mygroup/docB').set({foo: 'bar'});\n     *\n     * Promise.all([docA, docB]).then(() => {\n     *    let query = firestore.collectionGroup('mygroup');\n     *    query = query.where('foo', '==', 'bar');\n     *    return query.get().then(snapshot => {\n     *       console.log(`Found ${snapshot.size} documents.`);\n     *    });\n     * });\n     * ```\n     */\n    collectionGroup(collectionId) {\n        if (collectionId.indexOf('/') !== -1) {\n            throw new Error(`Invalid collectionId '${collectionId}'. Collection IDs must not contain '/'.`);\n        }\n        return new collection_group_1.CollectionGroup(this, collectionId, /* converter= */ undefined);\n    }\n    /**\n     * Creates a [WriteBatch]{@link WriteBatch}, used for performing\n     * multiple writes as a single atomic operation.\n     *\n     * @returns {WriteBatch} A WriteBatch that operates on this Firestore\n     * client.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     *\n     * // Add two documents in an atomic batch.\n     * let data = { foo: 'bar' };\n     * writeBatch.set(firestore.doc('col/doc1'), data);\n     * writeBatch.set(firestore.doc('col/doc2'), data);\n     *\n     * writeBatch.commit().then(res => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    batch() {\n        return new write_batch_1.WriteBatch(this);\n    }\n    /**\n     * Creates a [BulkWriter]{@link BulkWriter}, used for performing\n     * multiple writes in parallel. Gradually ramps up writes as specified\n     * by the 500/50/5 rule.\n     *\n     * If you pass [BulkWriterOptions]{@link BulkWriterOptions}, you can\n     * configure the throttling rates for the created BulkWriter.\n     *\n     * @see [500/50/5 Documentation]{@link https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic}\n     *\n     * @param {BulkWriterOptions=} options BulkWriter options.\n     * @returns {BulkWriter} A BulkWriter that operates on this Firestore\n     * client.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(firestore.doc('col/doc1'), {foo: 'bar'})\n     *   .then(res => {\n     *     console.log(`Added document at ${res.writeTime}`);\n     *   });\n     * bulkWriter.update(firestore.doc('col/doc2'), {foo: 'bar'})\n     *   .then(res => {\n     *     console.log(`Updated document at ${res.writeTime}`);\n     *   });\n     * bulkWriter.delete(firestore.doc('col/doc3'))\n     *   .then(res => {\n     *     console.log(`Deleted document at ${res.writeTime}`);\n     *   });\n     * await bulkWriter.close().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     * ```\n     */\n    bulkWriter(options) {\n        return new bulk_writer_1.BulkWriter(this, options);\n    }\n    /** @private */\n    snapshot_(documentOrName, readTime, encoding) {\n        // TODO: Assert that Firestore Project ID is valid.\n        let convertTimestamp;\n        let convertFields;\n        if (encoding === undefined || encoding === 'protobufJS') {\n            convertTimestamp = data => data;\n            convertFields = data => data;\n        }\n        else if (encoding === 'json') {\n            // Google Cloud Functions calls us with Proto3 JSON format data, which we\n            // must convert to Protobuf JS.\n            convertTimestamp = convert_1.timestampFromJson;\n            convertFields = convert_1.fieldsFromJson;\n        }\n        else {\n            throw new Error('Unsupported encoding format. Expected \"json\" or \"protobufJS\", ' +\n                `but was \"${encoding}\".`);\n        }\n        let ref;\n        let document;\n        if (typeof documentOrName === 'string') {\n            ref = new document_reference_1.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName));\n            document = new document_1.DocumentSnapshotBuilder(ref);\n        }\n        else {\n            ref = new document_reference_1.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName.name));\n            document = new document_1.DocumentSnapshotBuilder(ref);\n            document.fieldsProto = documentOrName.fields\n                ? convertFields(documentOrName.fields)\n                : {};\n            document.createTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.createTime, 'documentOrName.createTime'));\n            document.updateTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.updateTime, 'documentOrName.updateTime'));\n        }\n        if (readTime) {\n            document.readTime = timestamp_1.Timestamp.fromProto(convertTimestamp(readTime, 'readTime'));\n        }\n        return document.build();\n    }\n    /**\n     * Creates a new `BundleBuilder` instance to package selected Firestore data into\n     * a bundle.\n     *\n     * @param bundleId. The id of the bundle. When loaded on clients, client SDKs use this id\n     * and the timestamp associated with the built bundle to tell if it has been loaded already.\n     * If not specified, a random identifier will be used.\n     */\n    bundle(name) {\n        return new bundle_1.BundleBuilder(name || (0, util_1.autoId)());\n    }\n    /**\n     * Function executed by {@link Firestore#runTransaction} within the transaction\n     * context.\n     *\n     * @callback Firestore~updateFunction\n     * @template T\n     * @param {Transaction} transaction The transaction object for this\n     * transaction.\n     * @returns {Promise<T>} The promise returned at the end of the transaction.\n     * This promise will be returned by {@link Firestore#runTransaction} if the\n     * transaction completed successfully.\n     */\n    /**\n     * Options object for {@link Firestore#runTransaction} to configure a\n     * read-only transaction.\n     *\n     * @param {true} readOnly Set to true to indicate a read-only transaction.\n     * @param {Timestamp=} readTime If specified, documents are read at the given\n     * time. This may not be more than 60 seconds in the past from when the\n     * request is processed by the server.\n     * @typedef {Object} Firestore~ReadOnlyTransactionOptions\n     */\n    /**\n     * Options object for {@link Firestore#runTransaction} to configure a\n     * read-write transaction.\n     *\n     * @param {false=} readOnly Set to false or omit to indicate a read-write\n     * transaction.\n     * @param {number=} maxAttempts The maximum number of attempts for this\n     * transaction. Defaults to 5.\n     * @typedef {Object} Firestore~ReadWriteTransactionOptions\n     */\n    /**\n     * Executes the given updateFunction and commits the changes applied within\n     * the transaction.\n     *\n     * You can use the transaction object passed to 'updateFunction' to read and\n     * modify Firestore documents under lock. You have to perform all reads before\n     * before you perform any write.\n     *\n     * Transactions can be performed as read-only or read-write transactions. By\n     * default, transactions are executed in read-write mode.\n     *\n     * A read-write transaction obtains a pessimistic lock on all documents that\n     * are read during the transaction. These locks block other transactions,\n     * batched writes, and other non-transactional writes from changing that\n     * document. Any writes in a read-write transactions are committed once\n     * 'updateFunction' resolves, which also releases all locks.\n     *\n     * If a read-write transaction fails with contention, the transaction is\n     * retried up to five times. The `updateFunction` is invoked once for each\n     * attempt.\n     *\n     * Read-only transactions do not lock documents. They can be used to read\n     * documents at a consistent snapshot in time, which may be up to 60 seconds\n     * in the past. Read-only transactions are not retried.\n     *\n     * Transactions time out after 60 seconds if no documents are read.\n     * Transactions that are not committed within than 270 seconds are also\n     * aborted. Any remaining locks are released when a transaction times out.\n     *\n     * @template T\n     * @param {Firestore~updateFunction} updateFunction The user function to\n     * execute within the transaction context.\n     * @param {\n     * Firestore~ReadWriteTransactionOptions|Firestore~ReadOnlyTransactionOptions=\n     * } transactionOptions Transaction options.\n     * @returns {Promise<T>} If the transaction completed successfully or was\n     * explicitly aborted (by the updateFunction returning a failed Promise), the\n     * Promise returned by the updateFunction will be returned here. Else if the\n     * transaction failed, a rejected Promise with the corresponding failure\n     * error will be returned.\n     *\n     * @example\n     * ```\n     * let counterTransaction = firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       let count =  doc.get('count') || 0;\n     *       if (count > 10) {\n     *         return Promise.reject('Reached maximum count');\n     *       }\n     *       transaction.update(documentRef, { count: ++count });\n     *       return Promise.resolve(count);\n     *     }\n     *\n     *     transaction.create(documentRef, { count: 1 });\n     *     return Promise.resolve(1);\n     *   });\n     * });\n     *\n     * counterTransaction.then(res => {\n     *   console.log(`Count updated to ${res}`);\n     * });\n     * ```\n     */\n    runTransaction(updateFunction, transactionOptions) {\n        (0, validate_1.validateFunction)('updateFunction', updateFunction);\n        const tag = (0, util_1.requestTag)();\n        if (transactionOptions) {\n            (0, validate_1.validateObject)('transactionOptions', transactionOptions);\n            (0, validate_1.validateBoolean)('transactionOptions.readOnly', transactionOptions.readOnly, { optional: true });\n            if (transactionOptions.readOnly) {\n                (0, validate_1.validateTimestamp)('transactionOptions.readTime', transactionOptions.readTime, { optional: true });\n            }\n            else {\n                (0, validate_1.validateInteger)('transactionOptions.maxAttempts', transactionOptions.maxAttempts, { optional: true, minValue: 1 });\n            }\n        }\n        const transaction = new transaction_1.Transaction(this, tag, transactionOptions);\n        return this.initializeIfNeeded(tag).then(() => transaction.runTransaction(updateFunction));\n    }\n    /**\n     * Fetches the root collections that are associated with this Firestore\n     * database.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     *\n     * @example\n     * ```\n     * firestore.listCollections().then(collections => {\n     *   for (let collection of collections) {\n     *     console.log(`Found collection with id: ${collection.id}`);\n     *   }\n     * });\n     * ```\n     */\n    listCollections() {\n        const rootDocument = new document_reference_1.DocumentReference(this, path_1.ResourcePath.EMPTY);\n        return rootDocument.listCollections();\n    }\n    /**\n     * Retrieves multiple documents from Firestore.\n     *\n     * The first argument is required and must be of type `DocumentReference`\n     * followed by any additional `DocumentReference` documents. If used, the\n     * optional `ReadOptions` must be the last argument.\n     *\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n     * `DocumentReferences` to receive, followed by an optional field mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * ```\n     * let docRef1 = firestore.doc('col/doc1');\n     * let docRef2 = firestore.doc('col/doc2');\n     *\n     * firestore.getAll(docRef1, docRef2, { fieldMask: ['user'] }).then(docs => {\n     *   console.log(`First document: ${JSON.stringify(docs[0])}`);\n     *   console.log(`Second document: ${JSON.stringify(docs[1])}`);\n     * });\n     * ```\n     */\n    getAll(...documentRefsOrReadOptions) {\n        return this._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_BATCH_GET_DOCUMENTS, () => {\n            (0, validate_1.validateMinNumberOfArguments)('Firestore.getAll', documentRefsOrReadOptions, 1);\n            const { documents, fieldMask } = (0, transaction_1.parseGetAllArguments)(documentRefsOrReadOptions);\n            this._traceUtil.currentSpan().setAttributes({\n                [trace_util_1.ATTRIBUTE_KEY_IS_TRANSACTIONAL]: false,\n                [trace_util_1.ATTRIBUTE_KEY_DOC_COUNT]: documents.length,\n            });\n            const tag = (0, util_1.requestTag)();\n            // Capture the error stack to preserve stack tracing across async calls.\n            const stack = Error().stack;\n            return this.initializeIfNeeded(tag)\n                .then(() => {\n                const reader = new document_reader_1.DocumentReader(this, documents, fieldMask);\n                return reader.get(tag);\n            })\n                .catch(err => {\n                throw (0, util_1.wrapError)(err, stack);\n            });\n        });\n    }\n    /**\n     * Registers a listener on this client, incrementing the listener count. This\n     * is used to verify that all listeners are unsubscribed when terminate() is\n     * called.\n     *\n     * @private\n     * @internal\n     */\n    registerListener() {\n        this.registeredListenersCount += 1;\n    }\n    /**\n     * Unregisters a listener on this client, decrementing the listener count.\n     * This is used to verify that all listeners are unsubscribed when terminate()\n     * is called.\n     *\n     * @private\n     * @internal\n     */\n    unregisterListener() {\n        this.registeredListenersCount -= 1;\n    }\n    /**\n     * Increments the number of open BulkWriter instances. This is used to verify\n     * that all pending operations are complete when terminate() is called.\n     *\n     * @private\n     * @internal\n     */\n    _incrementBulkWritersCount() {\n        this.bulkWritersCount += 1;\n    }\n    /**\n     * Decrements the number of open BulkWriter instances. This is used to verify\n     * that all pending operations are complete when terminate() is called.\n     *\n     * @private\n     * @internal\n     */\n    _decrementBulkWritersCount() {\n        this.bulkWritersCount -= 1;\n    }\n    /**\n     * Recursively deletes all documents and subcollections at and under the\n     * specified level.\n     *\n     * If any delete fails, the promise is rejected with an error message\n     * containing the number of failed deletes and the stack trace of the last\n     * failed delete. The provided reference is deleted regardless of whether\n     * all deletes succeeded.\n     *\n     * `recursiveDelete()` uses a BulkWriter instance with default settings to\n     * perform the deletes. To customize throttling rates or add success/error\n     * callbacks, pass in a custom BulkWriter instance.\n     *\n     * @param ref The reference of a document or collection to delete.\n     * @param bulkWriter A custom BulkWriter instance used to perform the\n     * deletes.\n     * @return A promise that resolves when all deletes have been performed.\n     * The promise is rejected if any of the deletes fail.\n     *\n     * @example\n     * ```\n     * // Recursively delete a reference and log the references of failures.\n     * const bulkWriter = firestore.bulkWriter();\n     * bulkWriter\n     *   .onWriteError((error) => {\n     *     if (\n     *       error.failedAttempts < MAX_RETRY_ATTEMPTS\n     *     ) {\n     *       return true;\n     *     } else {\n     *       console.log('Failed write at document: ', error.documentRef.path);\n     *       return false;\n     *     }\n     *   });\n     * await firestore.recursiveDelete(docRef, bulkWriter);\n     * ```\n     */\n    recursiveDelete(ref, bulkWriter) {\n        return this._recursiveDelete(ref, recursive_delete_1.RECURSIVE_DELETE_MAX_PENDING_OPS, recursive_delete_1.RECURSIVE_DELETE_MIN_PENDING_OPS, bulkWriter);\n    }\n    /**\n     * This overload is not private in order to test the query resumption with\n     * startAfter() once the RecursiveDelete instance has MAX_PENDING_OPS pending.\n     *\n     * @private\n     * @internal\n     */\n    // Visible for testing\n    _recursiveDelete(ref, maxPendingOps, minPendingOps, bulkWriter) {\n        const writer = bulkWriter !== null && bulkWriter !== void 0 ? bulkWriter : this.getBulkWriter();\n        const deleter = new recursive_delete_1.RecursiveDelete(this, writer, ref, maxPendingOps, minPendingOps);\n        return deleter.run();\n    }\n    /**\n     * Terminates the Firestore client and closes all open streams.\n     *\n     * @return A Promise that resolves when the client is terminated.\n     */\n    async terminate() {\n        if (this._bulkWriter) {\n            await this._bulkWriter.close();\n            this._bulkWriter = undefined;\n        }\n        if (this.registeredListenersCount > 0 || this.bulkWritersCount > 0) {\n            return Promise.reject('All onSnapshot() listeners must be unsubscribed, and all BulkWriter ' +\n                'instances must be closed before terminating the client. ' +\n                `There are ${this.registeredListenersCount} active listeners and ` +\n                `${this.bulkWritersCount} open BulkWriter instances.`);\n        }\n        return this._clientPool.terminate();\n    }\n    /**\n     * Returns the Project ID to serve as the JSON representation of this\n     * Firestore instance.\n     *\n     * @return An object that contains the project ID (or `undefined` if not yet\n     * available).\n     */\n    toJSON() {\n        return { projectId: this._projectId };\n    }\n    /**\n     * Initializes the client if it is not already initialized. All methods in the\n     * SDK can be used after this method completes.\n     *\n     * @private\n     * @internal\n     * @param requestTag A unique client-assigned identifier that caused this\n     * initialization.\n     * @return A Promise that resolves when the client is initialized.\n     */\n    async initializeIfNeeded(requestTag) {\n        this._settingsFrozen = true;\n        if (this._settings.ssl === false) {\n            // If SSL is false, we assume that we are talking to the emulator. We\n            // provide an Authorization header by default so that the connection is\n            // recognized as admin in Firestore Emulator. (If for some reason we're\n            // not connecting to the emulator, then this will result in denials with\n            // invalid token, rather than behave like clients not logged in. The user\n            // can then provide their own Authorization header, which will take\n            // precedence).\n            this._settings.customHeaders = {\n                Authorization: 'Bearer owner',\n                ...this._settings.customHeaders,\n            };\n        }\n        if (this._projectId === undefined) {\n            try {\n                this._projectId = await this._clientPool.run(requestTag, \n                /* requiresGrpc= */ false, gapicClient => gapicClient.getProjectId());\n                (0, logger_1.logger)('Firestore.initializeIfNeeded', null, 'Detected project ID: %s', this._projectId);\n                // If the project ID was undefined when the TraceUtil was set up, we\n                // need to record it.\n                this._traceUtil.recordProjectId(this.projectId);\n            }\n            catch (err) {\n                (0, logger_1.logger)('Firestore.initializeIfNeeded', null, 'Failed to detect project ID: %s', err);\n                return Promise.reject(err);\n            }\n        }\n    }\n    /**\n     * Returns GAX call options that set the cloud resource header.\n     * @private\n     * @internal\n     */\n    createCallOptions(methodName, retryCodes) {\n        var _a;\n        const callOptions = {\n            otherArgs: {\n                headers: {\n                    [CLOUD_RESOURCE_HEADER]: this.formattedName,\n                    ...this._settings.customHeaders,\n                    ...(_a = this._settings[methodName]) === null || _a === void 0 ? void 0 : _a.customHeaders,\n                },\n            },\n        };\n        if (retryCodes) {\n            const retryParams = (0, util_1.getRetryParams)(methodName);\n            callOptions.retry =\n                new ((__webpack_require__(/*! google-gax/build/src/fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\").RetryOptions))(retryCodes, retryParams);\n        }\n        return callOptions;\n    }\n    /**\n     * A function returning a Promise that can be retried.\n     *\n     * @private\n     * @internal\n     * @callback retryFunction\n     * @returns {Promise} A Promise indicating the function's success.\n     */\n    /**\n     * Helper method that retries failed Promises.\n     *\n     * If 'delayMs' is specified, waits 'delayMs' between invocations. Otherwise,\n     * schedules the first attempt immediately, and then waits 100 milliseconds\n     * for further attempts.\n     *\n     * @private\n     * @internal\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param func Method returning a Promise than can be retried.\n     * @returns A Promise with the function's result if successful within\n     * `attemptsRemaining`. Otherwise, returns the last rejected Promise.\n     */\n    async _retry(methodName, requestTag, func) {\n        const backoff = new backoff_1.ExponentialBackoff();\n        let lastError = undefined;\n        for (let attempt = 0; attempt < exports.MAX_REQUEST_RETRIES; ++attempt) {\n            if (lastError) {\n                (0, logger_1.logger)('Firestore._retry', requestTag, 'Retrying request that failed with error:', lastError);\n            }\n            try {\n                await backoff.backoffAndWait();\n                return await func();\n            }\n            catch (err) {\n                lastError = err;\n                if ((0, util_1.isPermanentRpcError)(err, methodName)) {\n                    break;\n                }\n            }\n        }\n        (0, logger_1.logger)('Firestore._retry', requestTag, 'Request failed with error:', lastError);\n        return Promise.reject(lastError);\n    }\n    /**\n     * Waits for the provided stream to become active and returns a paused but\n     * healthy stream. If an error occurs before the first byte is read, the\n     * method rejects the returned Promise.\n     *\n     * @private\n     * @internal\n     * @param backendStream The Node stream to monitor.\n     * @param lifetime A Promise that resolves when the stream receives an 'end',\n     * 'close' or 'finish' message.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param request If specified, the request that should be written to the\n     * stream after opening.\n     * @returns A guaranteed healthy stream that should be used instead of\n     * `backendStream`.\n     */\n    _initializeStream(backendStream, lifetime, requestTag, request) {\n        const resultStream = new stream_1.PassThrough({ objectMode: true });\n        resultStream.pause();\n        /**\n         * Whether we have resolved the Promise and returned the stream to the\n         * caller.\n         */\n        let streamInitialized = false;\n        return new Promise((resolve, reject) => {\n            function streamReady() {\n                if (!streamInitialized) {\n                    streamInitialized = true;\n                    (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Stream ready');\n                    resolve(resultStream);\n                }\n            }\n            function streamEnded() {\n                (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Received stream end');\n                resultStream.unpipe(backendStream);\n                resolve(resultStream);\n                lifetime.resolve();\n            }\n            function streamFailed(err) {\n                if (!streamInitialized) {\n                    // If we receive an error before we were able to receive any data,\n                    // reject this stream.\n                    (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Received initial error:', err);\n                    reject(err);\n                }\n                else {\n                    (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Received stream error:', err);\n                    // We execute the forwarding of the 'error' event via setImmediate() as\n                    // V8 guarantees that the Promise chain returned from this method\n                    // is resolved before any code executed via setImmediate(). This\n                    // allows the caller to attach an error handler.\n                    setImmediate(() => {\n                        resultStream.emit('error', err);\n                    });\n                }\n            }\n            backendStream.on('data', () => streamReady());\n            backendStream.on('error', err => streamFailed(err));\n            backendStream.on('end', () => streamEnded());\n            backendStream.on('close', () => streamEnded());\n            backendStream.on('finish', () => streamEnded());\n            backendStream.pipe(resultStream);\n            if (request) {\n                (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Sending request: %j', request);\n                backendStream.write(request, 'utf-8', err => {\n                    if (err) {\n                        streamFailed(err);\n                    }\n                    else {\n                        (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Marking stream as healthy');\n                        streamReady();\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * A funnel for all non-streaming API requests, assigning a project ID where\n     * necessary within the request options.\n     *\n     * @private\n     * @internal\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param retryCodes If provided, a custom list of retry codes. If not\n     * provided, retry is based on the behavior as defined in the ServiceConfig.\n     * @returns A Promise with the request result.\n     */\n    request(methodName, request, requestTag, retryCodes) {\n        const callOptions = this.createCallOptions(methodName, retryCodes);\n        return this._clientPool.run(requestTag, \n        /* requiresGrpc= */ false, async (gapicClient) => {\n            try {\n                (0, logger_1.logger)('Firestore.request', requestTag, 'Sending request: %j', request);\n                const [result] = await gapicClient[methodName](request, callOptions);\n                (0, logger_1.logger)('Firestore.request', requestTag, 'Received response: %j', result);\n                return result;\n            }\n            catch (err) {\n                (0, logger_1.logger)('Firestore.request', requestTag, 'Received error:', err);\n                return Promise.reject(err);\n            }\n        });\n    }\n    /**\n     * A funnel for streaming API requests, assigning a project ID where necessary\n     * within the request options.\n     *\n     * The stream is returned in paused state and needs to be resumed once all\n     * listeners are attached.\n     *\n     * @private\n     * @internal\n     * @param methodName Name of the streaming Veneer API endpoint that\n     * takes a request and GAX options.\n     * @param bidrectional Whether the request is bidirectional (true) or\n     * unidirectional (false_\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @returns A Promise with the resulting read-only stream.\n     */\n    requestStream(methodName, bidrectional, request, requestTag) {\n        const callOptions = this.createCallOptions(methodName);\n        const bidirectional = methodName === 'listen';\n        let numResponses = 0;\n        const NUM_RESPONSES_PER_TRACE_EVENT = 100;\n        return this._retry(methodName, requestTag, () => {\n            const result = new util_1.Deferred();\n            this._clientPool.run(requestTag, bidrectional, async (gapicClient) => {\n                (0, logger_1.logger)('Firestore.requestStream', requestTag, 'Sending request: %j', request);\n                this._traceUtil\n                    .currentSpan()\n                    .addEvent(`Firestore.${methodName}: Start`);\n                try {\n                    const stream = bidirectional\n                        ? gapicClient[methodName](callOptions)\n                        : gapicClient[methodName](request, callOptions);\n                    const logStream = new stream_1.Transform({\n                        objectMode: true,\n                        transform: (chunk, encoding, callback) => {\n                            (0, logger_1.logger)('Firestore.requestStream', requestTag, 'Received response: %j', chunk);\n                            numResponses++;\n                            if (numResponses === 1) {\n                                this._traceUtil\n                                    .currentSpan()\n                                    .addEvent(`Firestore.${methodName}: First response received`);\n                            }\n                            else if (numResponses % NUM_RESPONSES_PER_TRACE_EVENT === 0) {\n                                this._traceUtil\n                                    .currentSpan()\n                                    .addEvent(`Firestore.${methodName}: Received ${numResponses} responses`);\n                            }\n                            callback();\n                        },\n                    });\n                    stream.pipe(logStream);\n                    const lifetime = new util_1.Deferred();\n                    const resultStream = await this._initializeStream(stream, lifetime, requestTag, bidirectional ? request : undefined);\n                    resultStream.on('end', () => {\n                        stream.end();\n                        this._traceUtil\n                            .currentSpan()\n                            .addEvent(`Firestore.${methodName}: Completed`, {\n                            [trace_util_1.ATTRIBUTE_KEY_NUM_RESPONSES]: numResponses,\n                        });\n                    });\n                    result.resolve(resultStream);\n                    // While we return the stream to the callee early, we don't want to\n                    // release the GAPIC client until the callee has finished processing the\n                    // stream.\n                    return lifetime.promise;\n                }\n                catch (e) {\n                    result.reject(e);\n                }\n            });\n            return result.promise;\n        });\n    }\n}\nexports.Firestore = Firestore;\n/**\n * A logging function that takes a single string.\n *\n * @callback Firestore~logFunction\n * @param {string} Log message\n */\n// tslint:disable-next-line:no-default-export\n/**\n * The default export of the `@google-cloud/firestore` package is the\n * {@link Firestore} class.\n *\n * See {@link Firestore} and {@link ClientConfig} for client methods and\n * configuration options.\n *\n * @module {Firestore} @google-cloud/firestore\n * @alias nodejs-firestore\n *\n * @example Install the client library with <a href=\"https://www.npmjs.com/\">npm</a>:\n * ```\n * npm install --save @google-cloud/firestore\n *\n * ```\n * @example Import the client library\n * ```\n * var Firestore = require('@google-cloud/firestore');\n *\n * ```\n * @example Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:\n * ```\n * var firestore = new Firestore();\n *\n * ```\n * @example Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:\n * ```\n * var firestore = new Firestore({ projectId:\n *   'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * ```\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\n// tslint:disable-next-line:no-default-export\nexports[\"default\"] = Firestore;\n// Horrible hack to ensure backwards compatibility with <= 17.0, which allows\n// users to call the default constructor via\n// `const Fs = require(`@google-cloud/firestore`); new Fs()`;\nconst existingExports = module.exports;\nmodule.exports = Firestore;\nmodule.exports = Object.assign(module.exports, existingExports);\n/**\n * {@link v1beta1} factory function.\n *\n * @private\n * @internal\n * @name Firestore.v1beta1\n * @type {function}\n */\nObject.defineProperty(module.exports, \"v1beta1\", ({\n    // The v1beta1 module is very large. To avoid pulling it in from static\n    // scope, we lazy-load the module.\n    get: () => __webpack_require__(/*! ./v1beta1 */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/v1beta1/index.js\"),\n}));\n/**\n * {@link v1} factory function.\n *\n * @private\n * @internal\n * @name Firestore.v1\n * @type {function}\n */\nObject.defineProperty(module.exports, \"v1\", ({\n    // The v1 module is very large. To avoid pulling it in from static\n    // scope, we lazy-load  the module.\n    get: () => __webpack_require__(/*! ./v1 */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/index.js\"),\n}));\n/**\n * {@link Status} factory function.\n *\n * @private\n * @internal\n * @name Firestore.GrpcStatus\n * @type {function}\n */\nObject.defineProperty(module.exports, \"GrpcStatus\", ({\n    // The gax module is very large. To avoid pulling it in from static\n    // scope, we lazy-load the module.\n    get: () => (__webpack_require__(/*! google-gax */ \"(rsc)/./node_modules/google-gax/build/src/index.js\").Status),\n}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/logger.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.logger = logger;\nexports.setLogFunction = setLogFunction;\nexports.setLibVersion = setLibVersion;\nconst util = __webpack_require__(/*! util */ \"util\");\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\n/*! The Firestore library version */\nlet libVersion;\n/*! The external function used to emit logs. */\nlet logFunction = null;\n/**\n * Log function to use for debug output. By default, we don't perform any\n * logging.\n *\n * @private\n * @internal\n */\nfunction logger(methodName, requestTag, logMessage, ...additionalArgs) {\n    requestTag = requestTag || '#####';\n    if (logFunction) {\n        const formattedMessage = util.format(logMessage, ...additionalArgs);\n        const time = new Date().toISOString();\n        logFunction(`Firestore (${libVersion}) ${time} ${requestTag} [${methodName}]: ` +\n            formattedMessage);\n    }\n}\n/**\n * Sets or disables the log function for all active Firestore instances.\n *\n * @param logger A log function that takes a message (such as `console.log`) or\n * `null` to turn off logging.\n */\nfunction setLogFunction(logger) {\n    if (logger !== null)\n        (0, validate_1.validateFunction)('logger', logger);\n    logFunction = logger;\n}\n/**\n * Sets the library version to be used in log messages.\n *\n * @private\n * @internal\n */\nfunction setLibVersion(version) {\n    libVersion = version;\n}\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL2xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2Qsc0JBQXNCO0FBQ3RCLHFCQUFxQjtBQUNyQixhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0IsbUJBQW1CLG1CQUFPLENBQUMsc0ZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsV0FBVyxJQUFJLE1BQU0sRUFBRSxZQUFZLEdBQUcsV0FBVztBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL2xvZ2dlci5qcz83YzQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyohXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9nZ2VyID0gbG9nZ2VyO1xuZXhwb3J0cy5zZXRMb2dGdW5jdGlvbiA9IHNldExvZ0Z1bmN0aW9uO1xuZXhwb3J0cy5zZXRMaWJWZXJzaW9uID0gc2V0TGliVmVyc2lvbjtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IHZhbGlkYXRlXzEgPSByZXF1aXJlKFwiLi92YWxpZGF0ZVwiKTtcbi8qISBUaGUgRmlyZXN0b3JlIGxpYnJhcnkgdmVyc2lvbiAqL1xubGV0IGxpYlZlcnNpb247XG4vKiEgVGhlIGV4dGVybmFsIGZ1bmN0aW9uIHVzZWQgdG8gZW1pdCBsb2dzLiAqL1xubGV0IGxvZ0Z1bmN0aW9uID0gbnVsbDtcbi8qKlxuICogTG9nIGZ1bmN0aW9uIHRvIHVzZSBmb3IgZGVidWcgb3V0cHV0LiBCeSBkZWZhdWx0LCB3ZSBkb24ndCBwZXJmb3JtIGFueVxuICogbG9nZ2luZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGxvZ2dlcihtZXRob2ROYW1lLCByZXF1ZXN0VGFnLCBsb2dNZXNzYWdlLCAuLi5hZGRpdGlvbmFsQXJncykge1xuICAgIHJlcXVlc3RUYWcgPSByZXF1ZXN0VGFnIHx8ICcjIyMjIyc7XG4gICAgaWYgKGxvZ0Z1bmN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZE1lc3NhZ2UgPSB1dGlsLmZvcm1hdChsb2dNZXNzYWdlLCAuLi5hZGRpdGlvbmFsQXJncyk7XG4gICAgICAgIGNvbnN0IHRpbWUgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIGxvZ0Z1bmN0aW9uKGBGaXJlc3RvcmUgKCR7bGliVmVyc2lvbn0pICR7dGltZX0gJHtyZXF1ZXN0VGFnfSBbJHttZXRob2ROYW1lfV06IGAgK1xuICAgICAgICAgICAgZm9ybWF0dGVkTWVzc2FnZSk7XG4gICAgfVxufVxuLyoqXG4gKiBTZXRzIG9yIGRpc2FibGVzIHRoZSBsb2cgZnVuY3Rpb24gZm9yIGFsbCBhY3RpdmUgRmlyZXN0b3JlIGluc3RhbmNlcy5cbiAqXG4gKiBAcGFyYW0gbG9nZ2VyIEEgbG9nIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBtZXNzYWdlIChzdWNoIGFzIGBjb25zb2xlLmxvZ2ApIG9yXG4gKiBgbnVsbGAgdG8gdHVybiBvZmYgbG9nZ2luZy5cbiAqL1xuZnVuY3Rpb24gc2V0TG9nRnVuY3Rpb24obG9nZ2VyKSB7XG4gICAgaWYgKGxvZ2dlciAhPT0gbnVsbClcbiAgICAgICAgKDAsIHZhbGlkYXRlXzEudmFsaWRhdGVGdW5jdGlvbikoJ2xvZ2dlcicsIGxvZ2dlcik7XG4gICAgbG9nRnVuY3Rpb24gPSBsb2dnZXI7XG59XG4vKipcbiAqIFNldHMgdGhlIGxpYnJhcnkgdmVyc2lvbiB0byBiZSB1c2VkIGluIGxvZyBtZXNzYWdlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHNldExpYlZlcnNpb24odmVyc2lvbikge1xuICAgIGxpYlZlcnNpb24gPSB2ZXJzaW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/map-type.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/map-type.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*!\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VECTOR_MAP_VECTORS_KEY = exports.RESERVED_MAP_KEY_VECTOR_VALUE = exports.RESERVED_MAP_KEY = void 0;\nexports.RESERVED_MAP_KEY = '__type__';\nexports.RESERVED_MAP_KEY_VECTOR_VALUE = '__vector__';\nexports.VECTOR_MAP_VECTORS_KEY = 'value';\n//# sourceMappingURL=map-type.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL21hcC10eXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QixHQUFHLHFDQUFxQyxHQUFHLHdCQUF3QjtBQUNqRyx3QkFBd0I7QUFDeEIscUNBQXFDO0FBQ3JDLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL2ZpcmVzdG9yZS9idWlsZC9zcmMvbWFwLXR5cGUuanM/NGE3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIVxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZFQ1RPUl9NQVBfVkVDVE9SU19LRVkgPSBleHBvcnRzLlJFU0VSVkVEX01BUF9LRVlfVkVDVE9SX1ZBTFVFID0gZXhwb3J0cy5SRVNFUlZFRF9NQVBfS0VZID0gdm9pZCAwO1xuZXhwb3J0cy5SRVNFUlZFRF9NQVBfS0VZID0gJ19fdHlwZV9fJztcbmV4cG9ydHMuUkVTRVJWRURfTUFQX0tFWV9WRUNUT1JfVkFMVUUgPSAnX192ZWN0b3JfXyc7XG5leHBvcnRzLlZFQ1RPUl9NQVBfVkVDVE9SU19LRVkgPSAndmFsdWUnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLXR5cGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/map-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/order.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/order.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.primitiveComparator = primitiveComparator;\nexports.compareArrays = compareArrays;\nexports.compareUtf8Strings = compareUtf8Strings;\nexports.compare = compare;\nconst convert_1 = __webpack_require__(/*! ./convert */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/convert.js\");\nconst path_1 = __webpack_require__(/*! ./path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\n/*!\n * The type order as defined by the backend.\n */\nvar TypeOrder;\n(function (TypeOrder) {\n    TypeOrder[TypeOrder[\"NULL\"] = 0] = \"NULL\";\n    TypeOrder[TypeOrder[\"BOOLEAN\"] = 1] = \"BOOLEAN\";\n    TypeOrder[TypeOrder[\"NUMBER\"] = 2] = \"NUMBER\";\n    TypeOrder[TypeOrder[\"TIMESTAMP\"] = 3] = \"TIMESTAMP\";\n    TypeOrder[TypeOrder[\"STRING\"] = 4] = \"STRING\";\n    TypeOrder[TypeOrder[\"BLOB\"] = 5] = \"BLOB\";\n    TypeOrder[TypeOrder[\"REF\"] = 6] = \"REF\";\n    TypeOrder[TypeOrder[\"GEO_POINT\"] = 7] = \"GEO_POINT\";\n    TypeOrder[TypeOrder[\"ARRAY\"] = 8] = \"ARRAY\";\n    TypeOrder[TypeOrder[\"VECTOR\"] = 9] = \"VECTOR\";\n    TypeOrder[TypeOrder[\"OBJECT\"] = 10] = \"OBJECT\";\n})(TypeOrder || (TypeOrder = {}));\n/*!\n * @private\n * @internal\n */\nfunction typeOrder(val) {\n    const valueType = (0, convert_1.detectValueType)(val);\n    switch (valueType) {\n        case 'nullValue':\n            return TypeOrder.NULL;\n        case 'integerValue':\n            return TypeOrder.NUMBER;\n        case 'doubleValue':\n            return TypeOrder.NUMBER;\n        case 'stringValue':\n            return TypeOrder.STRING;\n        case 'booleanValue':\n            return TypeOrder.BOOLEAN;\n        case 'arrayValue':\n            return TypeOrder.ARRAY;\n        case 'timestampValue':\n            return TypeOrder.TIMESTAMP;\n        case 'geoPointValue':\n            return TypeOrder.GEO_POINT;\n        case 'bytesValue':\n            return TypeOrder.BLOB;\n        case 'referenceValue':\n            return TypeOrder.REF;\n        case 'mapValue':\n            return TypeOrder.OBJECT;\n        case 'vectorValue':\n            return TypeOrder.VECTOR;\n        default:\n            throw new Error('Unexpected value type: ' + valueType);\n    }\n}\n/*!\n * @private\n * @internal\n */\nfunction primitiveComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    if (left > right) {\n        return 1;\n    }\n    return 0;\n}\n/*!\n * Utility function to compare doubles (using Firestore semantics for NaN).\n * @private\n * @internal\n */\nfunction compareNumbers(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    if (left > right) {\n        return 1;\n    }\n    if (left === right) {\n        return 0;\n    }\n    // one or both are NaN.\n    if (isNaN(left)) {\n        return isNaN(right) ? 0 : -1;\n    }\n    return 1;\n}\n/*!\n * @private\n * @internal\n */\nfunction compareNumberProtos(left, right) {\n    let leftValue, rightValue;\n    if (left.integerValue !== undefined) {\n        leftValue = Number(left.integerValue);\n    }\n    else {\n        leftValue = Number(left.doubleValue);\n    }\n    if (right.integerValue !== undefined) {\n        rightValue = Number(right.integerValue);\n    }\n    else {\n        rightValue = Number(right.doubleValue);\n    }\n    return compareNumbers(leftValue, rightValue);\n}\n/*!\n * @private\n * @internal\n */\nfunction compareTimestamps(left, right) {\n    const seconds = primitiveComparator(left.seconds || 0, right.seconds || 0);\n    if (seconds !== 0) {\n        return seconds;\n    }\n    return primitiveComparator(left.nanos || 0, right.nanos || 0);\n}\n/*!\n * @private\n * @internal\n */\nfunction compareBlobs(left, right) {\n    if (!(left instanceof Buffer) || !(right instanceof Buffer)) {\n        throw new Error('Blobs can only be compared if they are Buffers.');\n    }\n    return Buffer.compare(left, right);\n}\n/*!\n * @private\n * @internal\n */\nfunction compareReferenceProtos(left, right) {\n    const leftPath = path_1.QualifiedResourcePath.fromSlashSeparatedString(left.referenceValue);\n    const rightPath = path_1.QualifiedResourcePath.fromSlashSeparatedString(right.referenceValue);\n    return leftPath.compareTo(rightPath);\n}\n/*!\n * @private\n * @internal\n */\nfunction compareGeoPoints(left, right) {\n    return (primitiveComparator(left.latitude || 0, right.latitude || 0) ||\n        primitiveComparator(left.longitude || 0, right.longitude || 0));\n}\n/*!\n * @private\n * @internal\n */\nfunction compareArrays(left, right) {\n    for (let i = 0; i < left.length && i < right.length; i++) {\n        const valueComparison = compare(left[i], right[i]);\n        if (valueComparison !== 0) {\n            return valueComparison;\n        }\n    }\n    // If all the values matched so far, just check the length.\n    return primitiveComparator(left.length, right.length);\n}\n/*!\n * @private\n * @internal\n */\nfunction compareObjects(left, right) {\n    // This requires iterating over the keys in the object in order and doing a\n    // deep comparison.\n    const leftKeys = Object.keys(left);\n    const rightKeys = Object.keys(right);\n    leftKeys.sort();\n    rightKeys.sort();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n        const keyComparison = compareUtf8Strings(leftKeys[i], rightKeys[i]);\n        if (keyComparison !== 0) {\n            return keyComparison;\n        }\n        const key = leftKeys[i];\n        const valueComparison = compare(left[key], right[key]);\n        if (valueComparison !== 0) {\n            return valueComparison;\n        }\n    }\n    // If all the keys matched so far, just check the length.\n    return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n/*!\n * @private\n * @internal\n */\nfunction compareVectors(left, right) {\n    var _a, _b, _c, _d, _e, _f;\n    // The vector is a map, but only vector value is compared.\n    const leftArray = (_c = (_b = (_a = left === null || left === void 0 ? void 0 : left['value']) === null || _a === void 0 ? void 0 : _a.arrayValue) === null || _b === void 0 ? void 0 : _b.values) !== null && _c !== void 0 ? _c : [];\n    const rightArray = (_f = (_e = (_d = right === null || right === void 0 ? void 0 : right['value']) === null || _d === void 0 ? void 0 : _d.arrayValue) === null || _e === void 0 ? void 0 : _e.values) !== null && _f !== void 0 ? _f : [];\n    const lengthCompare = primitiveComparator(leftArray.length, rightArray.length);\n    if (lengthCompare !== 0) {\n        return lengthCompare;\n    }\n    return compareArrays(leftArray, rightArray);\n}\n/*!\n * Compare strings in UTF-8 encoded byte order\n * @private\n * @internal\n */\nfunction compareUtf8Strings(left, right) {\n    // Find the first differing character (a.k.a. \"UTF-16 code unit\") in the two strings and,\n    // if found, use that character to determine the relative ordering of the two strings as a\n    // whole. Comparing UTF-16 strings in UTF-8 byte order can be done simply and efficiently by\n    // comparing the UTF-16 code units (chars). This serendipitously works because of the way UTF-8\n    // and UTF-16 happen to represent Unicode code points.\n    //\n    // After finding the first pair of differing characters, there are two cases:\n    //\n    // Case 1: Both characters are non-surrogates (code points less than or equal to 0xFFFF) or\n    // both are surrogates from a surrogate pair (that collectively represent code points greater\n    // than 0xFFFF). In this case their numeric order as UTF-16 code units is the same as the\n    // lexicographical order of their corresponding UTF-8 byte sequences. A direct comparison is\n    // sufficient.\n    //\n    // Case 2: One character is a surrogate and the other is not. In this case the surrogate-\n    // containing string is always ordered after the non-surrogate. This is because surrogates are\n    // used to represent code points greater than 0xFFFF which have 4-byte UTF-8 representations\n    // and are lexicographically greater than the 1, 2, or 3-byte representations of code points\n    // less than or equal to 0xFFFF.\n    //\n    // An example of why Case 2 is required is comparing the following two Unicode code points:\n    //\n    // |-----------------------|------------|---------------------|-----------------|\n    // | Name                  | Code Point | UTF-8 Encoding      | UTF-16 Encoding |\n    // |-----------------------|------------|---------------------|-----------------|\n    // | Replacement Character | U+FFFD     | 0xEF 0xBF 0xBD      | 0xFFFD          |\n    // | Grinning Face         | U+1F600    | 0xF0 0x9F 0x98 0x80 | 0xD83D 0xDE00   |\n    // |-----------------------|------------|---------------------|-----------------|\n    //\n    // A lexicographical comparison of the UTF-8 encodings of these code points would order\n    // \"Replacement Character\" _before_ \"Grinning Face\" because 0xEF is less than 0xF0. However, a\n    // direct comparison of the UTF-16 code units, as would be done in case 1, would erroneously\n    // produce the _opposite_ ordering, because 0xFFFD is _greater than_ 0xD83D. As it turns out,\n    // this relative ordering holds for all comparisons of UTF-16 code points requiring a surrogate\n    // pair with those that do not.\n    const length = Math.min(left.length, right.length);\n    for (let i = 0; i < length; i++) {\n        const leftChar = left.charAt(i);\n        const rightChar = right.charAt(i);\n        if (leftChar !== rightChar) {\n            return isSurrogate(leftChar) === isSurrogate(rightChar)\n                ? primitiveComparator(leftChar, rightChar)\n                : isSurrogate(leftChar)\n                    ? 1\n                    : -1;\n        }\n    }\n    // Use the lengths of the strings to determine the overall comparison result since either the\n    // strings were equal or one is a prefix of the other.\n    return primitiveComparator(left.length, right.length);\n}\nconst MIN_SURROGATE = 0xd800;\nconst MAX_SURROGATE = 0xdfff;\nfunction isSurrogate(s) {\n    const c = s.charCodeAt(0);\n    return c >= MIN_SURROGATE && c <= MAX_SURROGATE;\n}\n/*!\n * @private\n * @internal\n */\nfunction compare(left, right) {\n    // First compare the types.\n    const leftType = typeOrder(left);\n    const rightType = typeOrder(right);\n    const typeComparison = primitiveComparator(leftType, rightType);\n    if (typeComparison !== 0) {\n        return typeComparison;\n    }\n    // So they are the same type.\n    switch (leftType) {\n        case TypeOrder.NULL:\n            // Nulls are all equal.\n            return 0;\n        case TypeOrder.BOOLEAN:\n            return primitiveComparator(left.booleanValue, right.booleanValue);\n        case TypeOrder.STRING:\n            return compareUtf8Strings(left.stringValue, right.stringValue);\n        case TypeOrder.NUMBER:\n            return compareNumberProtos(left, right);\n        case TypeOrder.TIMESTAMP:\n            return compareTimestamps(left.timestampValue, right.timestampValue);\n        case TypeOrder.BLOB:\n            return compareBlobs(left.bytesValue, right.bytesValue);\n        case TypeOrder.REF:\n            return compareReferenceProtos(left, right);\n        case TypeOrder.GEO_POINT:\n            return compareGeoPoints(left.geoPointValue, right.geoPointValue);\n        case TypeOrder.ARRAY:\n            return compareArrays(left.arrayValue.values || [], right.arrayValue.values || []);\n        case TypeOrder.OBJECT:\n            return compareObjects(left.mapValue.fields || {}, right.mapValue.fields || {});\n        case TypeOrder.VECTOR:\n            return compareVectors(left.mapValue.fields || {}, right.mapValue.fields || {});\n        default:\n            throw new Error(`Encountered unknown type order: ${leftType}`);\n    }\n}\n//# sourceMappingURL=order.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/order.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js":
/*!****************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/path.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FieldPath = exports.QualifiedResourcePath = exports.ResourcePath = exports.DEFAULT_DATABASE_ID = void 0;\nexports.validateResourcePath = validateResourcePath;\nexports.validateFieldPath = validateFieldPath;\nconst order_1 = __webpack_require__(/*! ./order */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/order.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\n/*!\n * The default database ID for this Firestore client. We do not yet expose the\n * ability to use different databases.\n */\nexports.DEFAULT_DATABASE_ID = '(default)';\n/*!\n * A regular expression to verify an absolute Resource Path in Firestore. It\n * extracts the project ID, the database name and the relative resource path\n * if available.\n *\n * @type {RegExp}\n */\nconst RESOURCE_PATH_RE = \n// Note: [\\s\\S] matches all characters including newlines.\n/^projects\\/([^/]*)\\/databases\\/([^/]*)(?:\\/documents\\/)?([\\s\\S]*)$/;\n/*!\n * A regular expression to verify whether a field name can be passed to the\n * backend without escaping.\n *\n * @type {RegExp}\n */\nconst UNESCAPED_FIELD_NAME_RE = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/*!\n * A regular expression to verify field paths that are passed to the API as\n * strings. Field paths that do not match this expression have to be provided\n * as a [FieldPath]{@link FieldPath} object.\n *\n * @type {RegExp}\n */\nconst FIELD_PATH_RE = /^[^*~/[\\]]+$/;\n/**\n * An abstract class representing a Firestore path.\n *\n * Subclasses have to implement `split()` and `canonicalString()`.\n *\n * @private\n * @internal\n * @class\n */\nclass Path {\n    /**\n     * Creates a new Path with the given segments.\n     *\n     * @private\n     * @internal\n     * @private\n     * @param segments Sequence of parts of a path.\n     */\n    constructor(segments) {\n        this.segments = segments;\n    }\n    /**\n     * Returns the number of segments of this field path.\n     *\n     * @private\n     * @internal\n     */\n    get size() {\n        return this.segments.length;\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @internal\n     * @param relativePath Relative path to append to the current path.\n     * @returns The new path.\n     */\n    append(relativePath) {\n        if (relativePath instanceof Path) {\n            return this.construct(this.segments.concat(relativePath.segments));\n        }\n        return this.construct(this.segments.concat(this.split(relativePath)));\n    }\n    /**\n     * Returns the path of the parent node.\n     *\n     * @private\n     * @internal\n     * @returns The new path or null if we are already at the root.\n     */\n    parent() {\n        if (this.segments.length === 0) {\n            return null;\n        }\n        return this.construct(this.segments.slice(0, this.segments.length - 1));\n    }\n    /**\n     * Checks whether the current path is a prefix of the specified path.\n     *\n     * @private\n     * @internal\n     * @param other The path to check against.\n     * @returns 'true' iff the current path is a prefix match with 'other'.\n     */\n    isPrefixOf(other) {\n        if (other.segments.length < this.segments.length) {\n            return false;\n        }\n        for (let i = 0; i < this.segments.length; i++) {\n            if (this.segments[i] !== other.segments[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Compare the current path against another Path object.\n     *\n     * Compare the current path against another Path object. Paths are compared segment by segment,\n     * prioritizing numeric IDs (e.g., \"__id123__\") in numeric ascending order, followed by string\n     * segments in lexicographical order.\n     *\n     * @private\n     * @internal\n     * @param other The path to compare to.\n     * @returns -1 if current < other, 1 if current > other, 0 if equal\n     */\n    compareTo(other) {\n        const len = Math.min(this.segments.length, other.segments.length);\n        for (let i = 0; i < len; i++) {\n            const comparison = this.compareSegments(this.segments[i], other.segments[i]);\n            if (comparison !== 0) {\n                return comparison;\n            }\n        }\n        return (0, order_1.primitiveComparator)(this.segments.length, other.segments.length);\n    }\n    compareSegments(lhs, rhs) {\n        const isLhsNumeric = this.isNumericId(lhs);\n        const isRhsNumeric = this.isNumericId(rhs);\n        if (isLhsNumeric && !isRhsNumeric) {\n            // Only lhs is numeric\n            return -1;\n        }\n        else if (!isLhsNumeric && isRhsNumeric) {\n            // Only rhs is numeric\n            return 1;\n        }\n        else if (isLhsNumeric && isRhsNumeric) {\n            // both numeric\n            return this.compareNumbers(this.extractNumericId(lhs), this.extractNumericId(rhs));\n        }\n        else {\n            // both non-numeric\n            return (0, order_1.compareUtf8Strings)(lhs, rhs);\n        }\n    }\n    // Checks if a segment is a numeric ID (starts with \"__id\" and ends with \"__\").\n    isNumericId(segment) {\n        return segment.startsWith('__id') && segment.endsWith('__');\n    }\n    //  Extracts the long number from a numeric ID segment.\n    extractNumericId(segment) {\n        return BigInt(segment.substring(4, segment.length - 2));\n    }\n    compareNumbers(lhs, rhs) {\n        if (lhs < rhs) {\n            return -1;\n        }\n        else if (lhs > rhs) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * Returns a copy of the underlying segments.\n     *\n     * @private\n     * @internal\n     * @returns A copy of the segments that make up this path.\n     */\n    toArray() {\n        return this.segments.slice();\n    }\n    /**\n     * Pops the last segment from this `Path` and returns a newly constructed\n     * `Path`.\n     *\n     * @private\n     * @internal\n     * @returns The newly created Path.\n     */\n    popLast() {\n        this.segments.pop();\n        return this.construct(this.segments);\n    }\n    /**\n     * Returns true if this `Path` is equal to the provided value.\n     *\n     * @private\n     * @internal\n     * @param other The value to compare against.\n     * @return true if this `Path` is equal to the provided value.\n     */\n    isEqual(other) {\n        return this === other || this.compareTo(other) === 0;\n    }\n}\n/**\n * A slash-separated path for navigating resources within the current Firestore\n * instance.\n *\n * @private\n * @internal\n */\nclass ResourcePath extends Path {\n    /**\n     * Constructs a ResourcePath.\n     *\n     * @private\n     * @internal\n     * @param segments Sequence of names of the parts of the path.\n     */\n    constructor(...segments) {\n        super(segments);\n    }\n    /**\n     * Indicates whether this path points to a document.\n     * @private\n     * @internal\n     */\n    get isDocument() {\n        return this.segments.length > 0 && this.segments.length % 2 === 0;\n    }\n    /**\n     * Indicates whether this path points to a collection.\n     * @private\n     * @internal\n     */\n    get isCollection() {\n        return this.segments.length % 2 === 1;\n    }\n    /**\n     * The last component of the path.\n     * @private\n     * @internal\n     */\n    get id() {\n        if (this.segments.length > 0) {\n            return this.segments[this.segments.length - 1];\n        }\n        return null;\n    }\n    /**\n     * Returns the location of this path relative to the root of the project's\n     * database.\n     * @private\n     * @internal\n     */\n    get relativeName() {\n        return this.segments.join('/');\n    }\n    /**\n     * Constructs a new instance of ResourcePath.\n     *\n     * @private\n     * @internal\n     * @param segments Sequence of parts of the path.\n     * @returns The newly created ResourcePath.\n     */\n    construct(segments) {\n        return new ResourcePath(...segments);\n    }\n    /**\n     * Splits a string into path segments, using slashes as separators.\n     *\n     * @private\n     * @internal\n     * @param relativePath The path to split.\n     * @returns The split path segments.\n     */\n    split(relativePath) {\n        // We may have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        return relativePath.split('/').filter(segment => segment.length > 0);\n    }\n    /**\n     * Converts this path to a fully qualified ResourcePath.\n     *\n     * @private\n     * @internal\n     * @param projectId The project ID of the current Firestore project.\n     * @return A fully-qualified resource path pointing to the same element.\n     */\n    toQualifiedResourcePath(projectId, databaseId) {\n        return new QualifiedResourcePath(projectId, databaseId, ...this.segments);\n    }\n}\nexports.ResourcePath = ResourcePath;\n/**\n * A default instance pointing to the root collection.\n * @private\n * @internal\n */\nResourcePath.EMPTY = new ResourcePath();\n/**\n * A slash-separated path that includes a project and database ID for referring\n * to resources in any Firestore project.\n *\n * @private\n * @internal\n */\nclass QualifiedResourcePath extends ResourcePath {\n    /**\n     * Constructs a Firestore Resource Path.\n     *\n     * @private\n     * @internal\n     * @param projectId The Firestore project id.\n     * @param databaseId The Firestore database id.\n     * @param segments Sequence of names of the parts of the path.\n     */\n    constructor(projectId, databaseId, ...segments) {\n        super(...segments);\n        this.projectId = projectId;\n        this.databaseId = databaseId;\n    }\n    /**\n     * String representation of the path relative to the database root.\n     * @private\n     * @internal\n     */\n    get relativeName() {\n        return this.segments.join('/');\n    }\n    /**\n     * Creates a resource path from an absolute Firestore path.\n     *\n     * @private\n     * @internal\n     * @param absolutePath A string representation of a Resource Path.\n     * @returns The new ResourcePath.\n     */\n    static fromSlashSeparatedString(absolutePath) {\n        const elements = RESOURCE_PATH_RE.exec(absolutePath);\n        if (elements) {\n            const project = elements[1];\n            const database = elements[2];\n            const path = elements[3];\n            return new QualifiedResourcePath(project, database).append(path);\n        }\n        throw new Error(`Resource name '${absolutePath}' is not valid.`);\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @internal\n     * @param relativePath Relative path to append to the current path.\n     * @returns The new path.\n     */\n    append(relativePath) {\n        // `super.append()` calls `QualifiedResourcePath.construct()` when invoked\n        // from here and returns a QualifiedResourcePath.\n        return super.append(relativePath);\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @internal\n     * @returns The new path.\n     */\n    parent() {\n        return super.parent();\n    }\n    /**\n     * String representation of a ResourcePath as expected by the API.\n     *\n     * @private\n     * @internal\n     * @returns The representation as expected by the API.\n     */\n    get formattedName() {\n        const components = [\n            'projects',\n            this.projectId,\n            'databases',\n            this.databaseId,\n            'documents',\n            ...this.segments,\n        ];\n        return components.join('/');\n    }\n    /**\n     * Constructs a new instance of ResourcePath. We need this instead of using\n     * the normal constructor because polymorphic 'this' doesn't work on static\n     * methods.\n     *\n     * @private\n     * @internal\n     * @param segments Sequence of names of the parts of the path.\n     * @returns The newly created QualifiedResourcePath.\n     */\n    construct(segments) {\n        return new QualifiedResourcePath(this.projectId, this.databaseId, ...segments);\n    }\n    /**\n     * Convenience method to match the ResourcePath API. This method always\n     * returns the current instance.\n     *\n     * @private\n     * @internal\n     */\n    toQualifiedResourcePath() {\n        return this;\n    }\n    /**\n     * Compare the current path against another ResourcePath object.\n     *\n     * @private\n     * @internal\n     * @param other The path to compare to.\n     * @returns -1 if current < other, 1 if current > other, 0 if equal\n     */\n    compareTo(other) {\n        if (other instanceof QualifiedResourcePath) {\n            if (this.projectId < other.projectId) {\n                return -1;\n            }\n            if (this.projectId > other.projectId) {\n                return 1;\n            }\n            if (this.databaseId < other.databaseId) {\n                return -1;\n            }\n            if (this.databaseId > other.databaseId) {\n                return 1;\n            }\n        }\n        return super.compareTo(other);\n    }\n    /**\n     * Converts this ResourcePath to the Firestore Proto representation.\n     * @private\n     * @internal\n     */\n    toProto() {\n        return {\n            referenceValue: this.formattedName,\n        };\n    }\n}\nexports.QualifiedResourcePath = QualifiedResourcePath;\n/**\n * Validates that the given string can be used as a relative or absolute\n * resource path.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param resourcePath The path to validate.\n * @throws if the string can't be used as a resource path.\n */\nfunction validateResourcePath(arg, resourcePath) {\n    if (typeof resourcePath !== 'string' || resourcePath === '') {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'resource path')} Path must be a non-empty string.`);\n    }\n    if (resourcePath.indexOf('//') >= 0) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'resource path')} Paths must not contain //.`);\n    }\n}\n/**\n * A dot-separated path for navigating sub-objects (e.g. nested maps) within a document.\n *\n * @class\n */\nclass FieldPath extends Path {\n    /**\n     * Constructs a Firestore Field Path.\n     *\n     * @param {...string} segments Sequence of field names that form this path.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     * let fieldPath = new FieldPath('f.o.o', 'bar');\n     *\n     * query.where(fieldPath, '==', 42).get().then(snapshot => {\n     *   snapshot.forEach(document => {\n     *     console.log(`Document contains {'f.o.o' : {'bar' : 42}}`);\n     *   });\n     * });\n     * ```\n     */\n    constructor(...segments) {\n        if (Array.isArray(segments[0])) {\n            throw new Error('The FieldPath constructor no longer supports an array as its first argument. ' +\n                'Please unpack your array and call FieldPath() with individual arguments.');\n        }\n        (0, validate_1.validateMinNumberOfArguments)('FieldPath', segments, 1);\n        for (let i = 0; i < segments.length; ++i) {\n            (0, validate_1.validateString)(i, segments[i]);\n            if (segments[i].length === 0) {\n                throw new Error(`Element at index ${i} should not be an empty string.`);\n            }\n        }\n        super(segments);\n    }\n    /**\n     * A special FieldPath value to refer to the ID of a document. It can be used\n     * in queries to sort or filter by the document ID.\n     *\n     * @returns {FieldPath}\n     */\n    static documentId() {\n        return FieldPath._DOCUMENT_ID;\n    }\n    /**\n     * Turns a field path argument into a [FieldPath]{@link FieldPath}.\n     * Supports FieldPaths as input (which are passed through) and dot-separated\n     * strings.\n     *\n     * @private\n     * @internal\n     * @param {string|FieldPath} fieldPath The FieldPath to create.\n     * @returns {FieldPath} A field path representation.\n     */\n    static fromArgument(fieldPath) {\n        // validateFieldPath() is used in all public API entry points to validate\n        // that fromArgument() is only called with a Field Path or a string.\n        return fieldPath instanceof FieldPath\n            ? fieldPath\n            : new FieldPath(...fieldPath.split('.'));\n    }\n    /**\n     * String representation of a FieldPath as expected by the API.\n     *\n     * @private\n     * @internal\n     * @override\n     * @returns {string} The representation as expected by the API.\n     */\n    get formattedName() {\n        return this.segments\n            .map(str => {\n            return UNESCAPED_FIELD_NAME_RE.test(str)\n                ? str\n                : '`' + str.replace(/\\\\/g, '\\\\\\\\').replace(/`/g, '\\\\`') + '`';\n        })\n            .join('.');\n    }\n    /**\n     * Returns a string representation of this path.\n     *\n     * @private\n     * @internal\n     * @returns A string representing this path.\n     */\n    toString() {\n        return this.formattedName;\n    }\n    /**\n     * Splits a string into path segments, using dots as separators.\n     *\n     * @private\n     * @internal\n     * @override\n     * @param {string} fieldPath The path to split.\n     * @returns {Array.<string>} - The split path segments.\n     */\n    split(fieldPath) {\n        return fieldPath.split('.');\n    }\n    /**\n     * Constructs a new instance of FieldPath. We need this instead of using\n     * the normal constructor because polymorphic 'this' doesn't work on static\n     * methods.\n     *\n     * @private\n     * @internal\n     * @override\n     * @param segments Sequence of field names.\n     * @returns The newly created FieldPath.\n     */\n    construct(segments) {\n        return new FieldPath(...segments);\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `FieldPath` is equal to the provided value.\n     */\n    isEqual(other) {\n        return super.isEqual(other);\n    }\n}\nexports.FieldPath = FieldPath;\n/**\n * A special sentinel value to refer to the ID of a document.\n *\n * @private\n * @internal\n */\nFieldPath._DOCUMENT_ID = new FieldPath('__name__');\n/**\n * Validates that the provided value can be used as a field path argument.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param fieldPath The value to verify.\n * @throws if the string can't be used as a field path.\n */\nfunction validateFieldPath(arg, fieldPath) {\n    if (fieldPath instanceof FieldPath) {\n        return;\n    }\n    if (fieldPath === undefined) {\n        throw new Error((0, validate_1.invalidArgumentMessage)(arg, 'field path') + ' The path cannot be omitted.');\n    }\n    if ((0, util_1.isObject)(fieldPath) && fieldPath.constructor.name === 'FieldPath') {\n        throw new Error((0, validate_1.customObjectMessage)(arg, fieldPath));\n    }\n    if (typeof fieldPath !== 'string') {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths can only be specified as strings or via a FieldPath object.`);\n    }\n    if (fieldPath.indexOf('..') >= 0) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths must not contain \"..\" in them.`);\n    }\n    if (fieldPath.startsWith('.') || fieldPath.endsWith('.')) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths must not start or end with \".\".`);\n    }\n    if (!FIELD_PATH_RE.test(fieldPath)) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths can't be empty and must not contain\n    \"*~/[]\".`);\n    }\n}\n//# sourceMappingURL=path.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/pool.js":
/*!****************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/pool.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientPool = exports.CLIENT_TERMINATED_ERROR_MSG = void 0;\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nexports.CLIENT_TERMINATED_ERROR_MSG = 'The client has already been terminated';\n/**\n * An auto-resizing pool that distributes concurrent operations over multiple\n * clients of type `T`.\n *\n * ClientPool is used within Firestore to manage a pool of GAPIC clients and\n * automatically initializes multiple clients if we issue more than 100\n * concurrent operations.\n *\n * @private\n * @internal\n */\nclass ClientPool {\n    /**\n     * @param concurrentOperationLimit The number of operations that each client\n     * can handle.\n     * @param maxIdleClients The maximum number of idle clients to keep before\n     * garbage collecting.\n     * @param clientFactory A factory function called as needed when new clients\n     * are required.\n     * @param clientDestructor A cleanup function that is called when a client is\n     * disposed of.\n     */\n    constructor(concurrentOperationLimit, maxIdleClients, clientFactory, clientDestructor = () => Promise.resolve()) {\n        this.concurrentOperationLimit = concurrentOperationLimit;\n        this.maxIdleClients = maxIdleClients;\n        this.clientFactory = clientFactory;\n        this.clientDestructor = clientDestructor;\n        this.grpcEnabled = false;\n        /**\n         * Stores each active clients and how many operations it has outstanding.\n         */\n        this.activeClients = new Map();\n        /**\n         * A set of clients that have seen RST_STREAM errors (see\n         * https://github.com/googleapis/nodejs-firestore/issues/1023) and should\n         * no longer be used.\n         */\n        this.failedClients = new Set();\n        /**\n         * A mapping from \"client\" objects to their corresponding IDs. These IDs have\n         * no semantic meaning but are used for logging to enable tracing the events\n         * of a particular client over time (such as creating, acquiring, and\n         * releasing).\n         */\n        this.clientIdByClient = new WeakMap();\n        /**\n         * Whether the Firestore instance has been terminated. Once terminated, the\n         * ClientPool can longer schedule new operations.\n         */\n        this.terminated = false;\n        /**\n         * Deferred promise that is resolved when there are no active operations on\n         * the client pool after terminate() has been called.\n         */\n        this.terminateDeferred = new util_1.Deferred();\n        this.lazyLogStringForAllClientIds = new LazyLogStringForAllClientIds({\n            activeClients: this.activeClients,\n            failedClients: this.failedClients,\n            clientIdByClient: this.clientIdByClient,\n        });\n    }\n    /**\n     * Returns an already existing client if it has less than the maximum number\n     * of concurrent operations or initializes and returns a new client.\n     *\n     * @private\n     * @internal\n     */\n    acquire(requestTag, requiresGrpc) {\n        let selectedClient = null;\n        let selectedClientRequestCount = -1;\n        // Transition to grpc when we see the first operation that requires grpc.\n        this.grpcEnabled = this.grpcEnabled || requiresGrpc;\n        // Require a grpc client for this operation if we have transitioned to grpc.\n        requiresGrpc = requiresGrpc || this.grpcEnabled;\n        for (const [client, metadata] of this.activeClients) {\n            // Use the \"most-full\" client that can still accommodate the request\n            // in order to maximize the number of idle clients as operations start to\n            // complete.\n            if (!this.failedClients.has(client) &&\n                metadata.activeRequestCount > selectedClientRequestCount &&\n                metadata.activeRequestCount < this.concurrentOperationLimit &&\n                (metadata.grpcEnabled || !requiresGrpc)) {\n                selectedClient = client;\n                selectedClientRequestCount = metadata.activeRequestCount;\n            }\n        }\n        if (selectedClient) {\n            const selectedClientId = this.clientIdByClient.get(selectedClient);\n            (0, logger_1.logger)('ClientPool.acquire', requestTag, 'Re-using existing client [%s] with %s remaining operations', selectedClientId, this.concurrentOperationLimit - selectedClientRequestCount);\n        }\n        else {\n            const newClientId = 'cli' + (0, util_1.requestTag)();\n            (0, logger_1.logger)('ClientPool.acquire', requestTag, 'Creating a new client [%s] (requiresGrpc: %s)', newClientId, requiresGrpc);\n            selectedClient = this.clientFactory(requiresGrpc);\n            this.clientIdByClient.set(selectedClient, newClientId);\n            selectedClientRequestCount = 0;\n            assert(!this.activeClients.has(selectedClient), 'The provided client factory returned an existing instance');\n        }\n        this.activeClients.set(selectedClient, {\n            grpcEnabled: requiresGrpc,\n            activeRequestCount: selectedClientRequestCount + 1,\n        });\n        return selectedClient;\n    }\n    /**\n     * Reduces the number of operations for the provided client, potentially\n     * removing it from the pool of active clients.\n     * @private\n     * @internal\n     */\n    async release(requestTag, client) {\n        const clientId = this.clientIdByClient.get(client);\n        const metadata = this.activeClients.get(client);\n        assert(metadata && metadata.activeRequestCount > 0, 'No active requests');\n        this.activeClients.set(client, {\n            grpcEnabled: metadata.grpcEnabled,\n            activeRequestCount: metadata.activeRequestCount - 1,\n        });\n        if (this.terminated && this.opCount === 0) {\n            this.terminateDeferred.resolve();\n        }\n        const gcDetermination = this.shouldGarbageCollectClient(client);\n        (0, logger_1.logger)('ClientPool.release', requestTag, 'Releasing client [%s] (gc=%s)', clientId, gcDetermination);\n        if (!gcDetermination.shouldGarbageCollectClient) {\n            return;\n        }\n        (0, logger_1.logger)('ClientPool.release', requestTag, 'Garbage collecting client [%s] (%s)', clientId, this.lazyLogStringForAllClientIds);\n        this.activeClients.delete(client);\n        this.failedClients.delete(client);\n        await this.clientDestructor(client);\n        (0, logger_1.logger)('ClientPool.release', requestTag, 'Garbage collected client [%s] (%s)', clientId, this.lazyLogStringForAllClientIds);\n    }\n    /**\n     * Given the current operation counts, determines if the given client should\n     * be garbage collected.\n     * @private\n     * @internal\n     */\n    shouldGarbageCollectClient(client) {\n        const clientMetadata = this.activeClients.get(client);\n        if (clientMetadata.activeRequestCount !== 0) {\n            // Don't garbage collect clients that have active requests.\n            return new ClientHasActiveRequests({\n                shouldGarbageCollectClient: false,\n                clientActiveRequestCount: clientMetadata.activeRequestCount,\n            });\n        }\n        if (this.grpcEnabled !== clientMetadata.grpcEnabled) {\n            // We are transitioning to GRPC. Garbage collect REST clients.\n            return new PoolIsTransitioningToGrpc({\n                shouldGarbageCollectClient: true,\n                clientActiveRequestCount: clientMetadata.activeRequestCount,\n                poolGrpcEnabled: this.grpcEnabled,\n                clientGrpcEnabled: clientMetadata.grpcEnabled,\n            });\n        }\n        // Idle clients that have received RST_STREAM errors are always garbage\n        // collected.\n        if (this.failedClients.has(client)) {\n            return new ClientIsFailed({\n                shouldGarbageCollectClient: true,\n                clientActiveRequestCount: clientMetadata.activeRequestCount,\n            });\n        }\n        // Otherwise, only garbage collect if we have too much idle capacity (e.g.\n        // more than 100 idle capacity with default settings).\n        let idleCapacityCount = 0;\n        for (const [, metadata] of this.activeClients) {\n            idleCapacityCount +=\n                this.concurrentOperationLimit - metadata.activeRequestCount;\n        }\n        const maxIdleCapacityCount = this.maxIdleClients * this.concurrentOperationLimit;\n        return new IdleCapacity({\n            shouldGarbageCollectClient: idleCapacityCount > maxIdleCapacityCount,\n            clientActiveRequestCount: clientMetadata.activeRequestCount,\n            idleCapacityCount: idleCapacityCount,\n            maxIdleCapacityCount: maxIdleCapacityCount,\n            maxIdleClients: this.maxIdleClients,\n            concurrentOperationLimit: this.concurrentOperationLimit,\n        });\n    }\n    /**\n     * The number of currently registered clients.\n     *\n     * @return Number of currently registered clients.\n     * @private\n     * @internal\n     */\n    // Visible for testing.\n    get size() {\n        return this.activeClients.size;\n    }\n    /**\n     * The number of currently active operations.\n     *\n     * @return Number of currently active operations.\n     * @private\n     * @internal\n     */\n    // Visible for testing.\n    get opCount() {\n        let activeOperationCount = 0;\n        this.activeClients.forEach(metadata => (activeOperationCount += metadata.activeRequestCount));\n        return activeOperationCount;\n    }\n    /**\n     * The currently active clients.\n     *\n     * @return The currently active clients.\n     * @private\n     * @internal\n     */\n    // Visible for testing.\n    get _activeClients() {\n        return this.activeClients;\n    }\n    /**\n     * Runs the provided operation in this pool. This function may create an\n     * additional client if all existing clients already operate at the concurrent\n     * operation limit.\n     *\n     * @param requestTag A unique client-assigned identifier for this operation.\n     * @param op A callback function that returns a Promise. The client T will\n     * be returned to the pool when callback finishes.\n     * @return A Promise that resolves with the result of `op`.\n     * @private\n     * @internal\n     */\n    run(requestTag, requiresGrpc, op) {\n        if (this.terminated) {\n            return Promise.reject(new Error(exports.CLIENT_TERMINATED_ERROR_MSG));\n        }\n        const client = this.acquire(requestTag, requiresGrpc);\n        return op(client)\n            .catch(async (err) => {\n            var _a;\n            if ((_a = err.message) === null || _a === void 0 ? void 0 : _a.match(/RST_STREAM/)) {\n                // Once a client has seen a RST_STREAM error, the GRPC channel can\n                // no longer be used. We mark the client as failed, which ensures that\n                // we open a new GRPC channel for the next request.\n                this.failedClients.add(client);\n            }\n            await this.release(requestTag, client);\n            return Promise.reject(err);\n        })\n            .then(async (res) => {\n            await this.release(requestTag, client);\n            return res;\n        });\n    }\n    async terminate() {\n        this.terminated = true;\n        // Wait for all pending operations to complete before terminating.\n        if (this.opCount > 0) {\n            (0, logger_1.logger)('ClientPool.terminate', \n            /* requestTag= */ null, 'Waiting for %s pending operations to complete before terminating (%s)', this.opCount, this.lazyLogStringForAllClientIds);\n            await this.terminateDeferred.promise;\n        }\n        for (const [client] of this.activeClients) {\n            this.activeClients.delete(client);\n            await this.clientDestructor(client);\n        }\n    }\n}\nexports.ClientPool = ClientPool;\n/**\n * Helper class that, when logged as a direct argument of `logger()`, will\n * lazily evaluate to a long string that contains all IDs of both active and\n * failed clients.\n */\nclass LazyLogStringForAllClientIds {\n    constructor(config) {\n        this.activeClients = config.activeClients;\n        this.failedClients = config.failedClients;\n        this.clientIdByClient = config.clientIdByClient;\n    }\n    toString() {\n        return (`${this.activeClients.size} active clients: {` +\n            this.logStringFromClientIds(this.activeClients.keys()) +\n            '}, ' +\n            `${this.failedClients.size} failed clients: {` +\n            this.logStringFromClientIds(this.failedClients) +\n            '}');\n    }\n    logStringFromClientIds(clients) {\n        return Array.from(clients)\n            .map(client => { var _a; return (_a = this.clientIdByClient.get(client)) !== null && _a !== void 0 ? _a : '<unknown>'; })\n            .sort()\n            .join(', ');\n    }\n}\n/**\n * Minimum data to be included in the objects returned from\n * ClientPool.shouldGarbageCollectClient().\n */\nclass BaseShouldGarbageCollectClientResult {\n    /**\n     * Return a terse, one-line string representation. This makes it easy to\n     * grep through log output to find the logged values.\n     */\n    toString() {\n        const propertyStrings = [];\n        for (const propertyName of Object.getOwnPropertyNames(this)) {\n            const propertyValue = this[propertyName];\n            propertyStrings.push(`${propertyName}=${propertyValue}`);\n        }\n        return '{' + propertyStrings.join(', ') + '}';\n    }\n}\nclass ClientHasActiveRequests extends BaseShouldGarbageCollectClientResult {\n    constructor(args) {\n        super();\n        this.name = 'ClientHasActiveRequests';\n        this.shouldGarbageCollectClient = args.shouldGarbageCollectClient;\n        this.clientActiveRequestCount = args.clientActiveRequestCount;\n    }\n}\nclass PoolIsTransitioningToGrpc extends BaseShouldGarbageCollectClientResult {\n    constructor(args) {\n        super();\n        this.name = 'PoolIsTransitioningToGrpc';\n        this.shouldGarbageCollectClient = args.shouldGarbageCollectClient;\n        this.clientActiveRequestCount = args.clientActiveRequestCount;\n        this.poolGrpcEnabled = args.poolGrpcEnabled;\n        this.clientGrpcEnabled = args.clientGrpcEnabled;\n    }\n}\nclass ClientIsFailed extends BaseShouldGarbageCollectClientResult {\n    constructor(args) {\n        super();\n        this.name = 'ClientIsFailed';\n        this.shouldGarbageCollectClient = args.shouldGarbageCollectClient;\n        this.clientActiveRequestCount = args.clientActiveRequestCount;\n    }\n}\nclass IdleCapacity extends BaseShouldGarbageCollectClientResult {\n    constructor(args) {\n        super();\n        this.name = 'IdleCapacity';\n        this.shouldGarbageCollectClient = args.shouldGarbageCollectClient;\n        this.clientActiveRequestCount = args.clientActiveRequestCount;\n        this.idleCapacityCount = args.idleCapacityCount;\n        this.maxIdleCapacityCount = args.maxIdleCapacityCount;\n        this.maxIdleClients = args.maxIdleClients;\n        this.concurrentOperationLimit = args.concurrentOperationLimit;\n    }\n}\n//# sourceMappingURL=pool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/pool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/query-partition.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/query-partition.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.QueryPartition = void 0;\nconst field_order_1 = __webpack_require__(/*! ./reference/field-order */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/field-order.js\");\nconst query_1 = __webpack_require__(/*! ./reference/query */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query.js\");\nconst query_options_1 = __webpack_require__(/*! ./reference/query-options */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-options.js\");\nconst path_1 = __webpack_require__(/*! ./path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst serializer_1 = __webpack_require__(/*! ./serializer */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/serializer.js\");\n/**\n * A split point that can be used in a query as a starting and/or end point for\n * the query results. The cursors returned by {@link #startAt} and {@link\n * #endBefore} can only be used in a query that matches the constraint of query\n * that produced this partition.\n *\n * @class QueryPartition\n */\nclass QueryPartition {\n    /** @private */\n    constructor(_firestore, _collectionId, _converter, _startAt, _endBefore) {\n        this._firestore = _firestore;\n        this._collectionId = _collectionId;\n        this._converter = _converter;\n        this._startAt = _startAt;\n        this._endBefore = _endBefore;\n        this._serializer = new serializer_1.Serializer(_firestore);\n    }\n    /**\n     * The cursor that defines the first result for this partition or `undefined`\n     * if this is the first partition. The cursor value must be\n     * destructured when passed to `startAt()` (for example with\n     * `query.startAt(...queryPartition.startAt)`).\n     *\n     * @example\n     * ```\n     * const query = firestore.collectionGroup('collectionId');\n     * for await (const partition of query.getPartitions(42)) {\n     *   let partitionedQuery = query.orderBy(FieldPath.documentId());\n     *   if (partition.startAt) {\n     *     partitionedQuery = partitionedQuery.startAt(...partition.startAt);\n     *   }\n     *   if (partition.endBefore) {\n     *     partitionedQuery = partitionedQuery.endBefore(...partition.endBefore);\n     *   }\n     *   const querySnapshot = await partitionedQuery.get();\n     *   console.log(`Partition contained ${querySnapshot.length} documents`);\n     * }\n     *\n     * ```\n     * @type {Array<*>}\n     * @return {Array<*>} A cursor value that can be used with {@link\n     * Query#startAt} or `undefined` if this is the first partition.\n     */\n    get startAt() {\n        if (this._startAt && !this._memoizedStartAt) {\n            this._memoizedStartAt = this._startAt.map(v => this._serializer.decodeValue(v));\n        }\n        return this._memoizedStartAt;\n    }\n    /**\n     * The cursor that defines the first result after this partition or\n     * `undefined` if this is the last partition.  The cursor value must be\n     * destructured when passed to `endBefore()` (for example with\n     * `query.endBefore(...queryPartition.endBefore)`).\n     *\n     * @example\n     * ```\n     * const query = firestore.collectionGroup('collectionId');\n     * for await (const partition of query.getPartitions(42)) {\n     *   let partitionedQuery = query.orderBy(FieldPath.documentId());\n     *   if (partition.startAt) {\n     *     partitionedQuery = partitionedQuery.startAt(...partition.startAt);\n     *   }\n     *   if (partition.endBefore) {\n     *     partitionedQuery = partitionedQuery.endBefore(...partition.endBefore);\n     *   }\n     *   const querySnapshot = await partitionedQuery.get();\n     *   console.log(`Partition contained ${querySnapshot.length} documents`);\n     * }\n     *\n     * ```\n     * @type {Array<*>}\n     * @return {Array<*>} A cursor value that can be used with {@link\n     * Query#endBefore} or `undefined` if this is the last partition.\n     */\n    get endBefore() {\n        if (this._endBefore && !this._memoizedEndBefore) {\n            this._memoizedEndBefore = this._endBefore.map(v => this._serializer.decodeValue(v));\n        }\n        return this._memoizedEndBefore;\n    }\n    /**\n     * Returns a query that only encapsulates the documents for this partition.\n     *\n     * @example\n     * ```\n     * const query = firestore.collectionGroup('collectionId');\n     * for await (const partition of query.getPartitions(42)) {\n     *   const partitionedQuery = partition.toQuery();\n     *   const querySnapshot = await partitionedQuery.get();\n     *   console.log(`Partition contained ${querySnapshot.length} documents`);\n     * }\n     *\n     * ```\n     * @return {Query<T>} A query partitioned by a {@link Query#startAt} and\n     * {@link Query#endBefore} cursor.\n     */\n    toQuery() {\n        // Since the api.Value to JavaScript type conversion can be lossy (unless\n        // `useBigInt` is used), we pass the original protobuf representation to the\n        // created query.\n        let queryOptions = query_options_1.QueryOptions.forCollectionGroupQuery(this._collectionId, this._converter);\n        queryOptions = queryOptions.with({\n            fieldOrders: [new field_order_1.FieldOrder(path_1.FieldPath.documentId())],\n        });\n        if (this._startAt !== undefined) {\n            queryOptions = queryOptions.with({\n                startAt: { before: true, values: this._startAt },\n            });\n        }\n        if (this._endBefore !== undefined) {\n            queryOptions = queryOptions.with({\n                endAt: { before: true, values: this._endBefore },\n            });\n        }\n        return new query_1.Query(this._firestore, queryOptions);\n    }\n}\nexports.QueryPartition = QueryPartition;\n//# sourceMappingURL=query-partition.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/query-partition.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/query-profile.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/query-profile.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*!\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExplainResults = exports.ExplainMetrics = exports.ExecutionStats = exports.PlanSummary = void 0;\n/**\n * PlanSummary contains information about the planning stage of a query.\n *\n * @class PlanSummary\n */\nclass PlanSummary {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(indexesUsed) {\n        this.indexesUsed = indexesUsed;\n    }\n    /**\n     * @private\n     * @internal\n     */\n    static _fromProto(plan, serializer) {\n        const indexes = [];\n        if (plan && plan.indexesUsed) {\n            for (const index of plan.indexesUsed) {\n                indexes.push(serializer.decodeGoogleProtobufStruct(index));\n            }\n        }\n        return new PlanSummary(indexes);\n    }\n}\nexports.PlanSummary = PlanSummary;\n/**\n *  ExecutionStats contains information about the execution of a query.\n *\n * @class ExecutionStats\n */\nclass ExecutionStats {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(resultsReturned, executionDuration, readOperations, debugStats) {\n        this.resultsReturned = resultsReturned;\n        this.executionDuration = executionDuration;\n        this.readOperations = readOperations;\n        this.debugStats = debugStats;\n    }\n    /**\n     * @private\n     * @internal\n     */\n    static _fromProto(stats, serializer) {\n        var _a, _b;\n        if (stats) {\n            return new ExecutionStats(Number(stats.resultsReturned), {\n                seconds: Number((_a = stats.executionDuration) === null || _a === void 0 ? void 0 : _a.seconds),\n                nanoseconds: Number((_b = stats.executionDuration) === null || _b === void 0 ? void 0 : _b.nanos),\n            }, Number(stats.readOperations), serializer.decodeGoogleProtobufStruct(stats.debugStats));\n        }\n        return null;\n    }\n}\nexports.ExecutionStats = ExecutionStats;\n/**\n * ExplainMetrics contains information about planning and execution of a query.\n *\n * @class ExplainMetrics\n */\nclass ExplainMetrics {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(planSummary, executionStats) {\n        this.planSummary = planSummary;\n        this.executionStats = executionStats;\n    }\n    /**\n     * @private\n     * @internal\n     */\n    static _fromProto(metrics, serializer) {\n        return new ExplainMetrics(PlanSummary._fromProto(metrics.planSummary, serializer), ExecutionStats._fromProto(metrics.executionStats, serializer));\n    }\n}\nexports.ExplainMetrics = ExplainMetrics;\n/**\n * ExplainResults contains information about planning, execution, and results\n * of a query.\n *\n * @class ExplainResults\n */\nclass ExplainResults {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(metrics, snapshot) {\n        this.metrics = metrics;\n        this.snapshot = snapshot;\n    }\n}\nexports.ExplainResults = ExplainResults;\n//# sourceMappingURL=query-profile.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3F1ZXJ5LXByb2ZpbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsc0JBQXNCLEdBQUcsc0JBQXNCLEdBQUcsbUJBQW1CO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvZmlyZXN0b3JlL2J1aWxkL3NyYy9xdWVyeS1wcm9maWxlLmpzPzhhYTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiFcbiAqIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHBsYWluUmVzdWx0cyA9IGV4cG9ydHMuRXhwbGFpbk1ldHJpY3MgPSBleHBvcnRzLkV4ZWN1dGlvblN0YXRzID0gZXhwb3J0cy5QbGFuU3VtbWFyeSA9IHZvaWQgMDtcbi8qKlxuICogUGxhblN1bW1hcnkgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBsYW5uaW5nIHN0YWdlIG9mIGEgcXVlcnkuXG4gKlxuICogQGNsYXNzIFBsYW5TdW1tYXJ5XG4gKi9cbmNsYXNzIFBsYW5TdW1tYXJ5IHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGluZGV4ZXNVc2VkKSB7XG4gICAgICAgIHRoaXMuaW5kZXhlc1VzZWQgPSBpbmRleGVzVXNlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzdGF0aWMgX2Zyb21Qcm90byhwbGFuLCBzZXJpYWxpemVyKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ZXMgPSBbXTtcbiAgICAgICAgaWYgKHBsYW4gJiYgcGxhbi5pbmRleGVzVXNlZCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBwbGFuLmluZGV4ZXNVc2VkKSB7XG4gICAgICAgICAgICAgICAgaW5kZXhlcy5wdXNoKHNlcmlhbGl6ZXIuZGVjb2RlR29vZ2xlUHJvdG9idWZTdHJ1Y3QoaW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFBsYW5TdW1tYXJ5KGluZGV4ZXMpO1xuICAgIH1cbn1cbmV4cG9ydHMuUGxhblN1bW1hcnkgPSBQbGFuU3VtbWFyeTtcbi8qKlxuICogIEV4ZWN1dGlvblN0YXRzIGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBleGVjdXRpb24gb2YgYSBxdWVyeS5cbiAqXG4gKiBAY2xhc3MgRXhlY3V0aW9uU3RhdHNcbiAqL1xuY2xhc3MgRXhlY3V0aW9uU3RhdHMge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocmVzdWx0c1JldHVybmVkLCBleGVjdXRpb25EdXJhdGlvbiwgcmVhZE9wZXJhdGlvbnMsIGRlYnVnU3RhdHMpIHtcbiAgICAgICAgdGhpcy5yZXN1bHRzUmV0dXJuZWQgPSByZXN1bHRzUmV0dXJuZWQ7XG4gICAgICAgIHRoaXMuZXhlY3V0aW9uRHVyYXRpb24gPSBleGVjdXRpb25EdXJhdGlvbjtcbiAgICAgICAgdGhpcy5yZWFkT3BlcmF0aW9ucyA9IHJlYWRPcGVyYXRpb25zO1xuICAgICAgICB0aGlzLmRlYnVnU3RhdHMgPSBkZWJ1Z1N0YXRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHN0YXRpYyBfZnJvbVByb3RvKHN0YXRzLCBzZXJpYWxpemVyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmIChzdGF0cykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFeGVjdXRpb25TdGF0cyhOdW1iZXIoc3RhdHMucmVzdWx0c1JldHVybmVkKSwge1xuICAgICAgICAgICAgICAgIHNlY29uZHM6IE51bWJlcigoX2EgPSBzdGF0cy5leGVjdXRpb25EdXJhdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNlY29uZHMpLFxuICAgICAgICAgICAgICAgIG5hbm9zZWNvbmRzOiBOdW1iZXIoKF9iID0gc3RhdHMuZXhlY3V0aW9uRHVyYXRpb24pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5uYW5vcyksXG4gICAgICAgICAgICB9LCBOdW1iZXIoc3RhdHMucmVhZE9wZXJhdGlvbnMpLCBzZXJpYWxpemVyLmRlY29kZUdvb2dsZVByb3RvYnVmU3RydWN0KHN0YXRzLmRlYnVnU3RhdHMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5leHBvcnRzLkV4ZWN1dGlvblN0YXRzID0gRXhlY3V0aW9uU3RhdHM7XG4vKipcbiAqIEV4cGxhaW5NZXRyaWNzIGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHBsYW5uaW5nIGFuZCBleGVjdXRpb24gb2YgYSBxdWVyeS5cbiAqXG4gKiBAY2xhc3MgRXhwbGFpbk1ldHJpY3NcbiAqL1xuY2xhc3MgRXhwbGFpbk1ldHJpY3Mge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocGxhblN1bW1hcnksIGV4ZWN1dGlvblN0YXRzKSB7XG4gICAgICAgIHRoaXMucGxhblN1bW1hcnkgPSBwbGFuU3VtbWFyeTtcbiAgICAgICAgdGhpcy5leGVjdXRpb25TdGF0cyA9IGV4ZWN1dGlvblN0YXRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHN0YXRpYyBfZnJvbVByb3RvKG1ldHJpY3MsIHNlcmlhbGl6ZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFeHBsYWluTWV0cmljcyhQbGFuU3VtbWFyeS5fZnJvbVByb3RvKG1ldHJpY3MucGxhblN1bW1hcnksIHNlcmlhbGl6ZXIpLCBFeGVjdXRpb25TdGF0cy5fZnJvbVByb3RvKG1ldHJpY3MuZXhlY3V0aW9uU3RhdHMsIHNlcmlhbGl6ZXIpKTtcbiAgICB9XG59XG5leHBvcnRzLkV4cGxhaW5NZXRyaWNzID0gRXhwbGFpbk1ldHJpY3M7XG4vKipcbiAqIEV4cGxhaW5SZXN1bHRzIGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHBsYW5uaW5nLCBleGVjdXRpb24sIGFuZCByZXN1bHRzXG4gKiBvZiBhIHF1ZXJ5LlxuICpcbiAqIEBjbGFzcyBFeHBsYWluUmVzdWx0c1xuICovXG5jbGFzcyBFeHBsYWluUmVzdWx0cyB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtZXRyaWNzLCBzbmFwc2hvdCkge1xuICAgICAgICB0aGlzLm1ldHJpY3MgPSBtZXRyaWNzO1xuICAgICAgICB0aGlzLnNuYXBzaG90ID0gc25hcHNob3Q7XG4gICAgfVxufVxuZXhwb3J0cy5FeHBsYWluUmVzdWx0cyA9IEV4cGxhaW5SZXN1bHRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnktcHJvZmlsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/query-profile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/rate-limiter.js":
/*!************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/rate-limiter.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RateLimiter = void 0;\n/*!\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\n/**\n * A helper that uses the Token Bucket algorithm to rate limit the number of\n * operations that can be made in a second.\n *\n * Before a given request containing a number of operations can proceed,\n * RateLimiter determines doing so stays under the provided rate limits. It can\n * also determine how much time is required before a request can be made.\n *\n * RateLimiter can also implement a gradually increasing rate limit. This is\n * used to enforce the 500/50/5 rule\n * (https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic).\n *\n * @private\n * @internal\n */\nclass RateLimiter {\n    /**\n     * @param initialCapacity Initial maximum number of operations per second.\n     * @param multiplier Rate by which to increase the capacity.\n     * @param multiplierMillis How often the capacity should increase in\n     * milliseconds.\n     * @param maximumCapacity Maximum number of allowed operations per second.\n     * The number of tokens added per second will never exceed this number.\n     * @param startTimeMillis The starting time in epoch milliseconds that the\n     * rate limit is based on. Used for testing the limiter.\n     */\n    constructor(initialCapacity, multiplier, multiplierMillis, maximumCapacity, startTimeMillis = Date.now()) {\n        this.initialCapacity = initialCapacity;\n        this.multiplier = multiplier;\n        this.multiplierMillis = multiplierMillis;\n        this.maximumCapacity = maximumCapacity;\n        this.startTimeMillis = startTimeMillis;\n        this.availableTokens = initialCapacity;\n        this.lastRefillTimeMillis = startTimeMillis;\n        this.previousCapacity = initialCapacity;\n    }\n    /**\n     * Tries to make the number of operations. Returns true if the request\n     * succeeded and false otherwise.\n     *\n     * @param requestTimeMillis The time used to calculate the number of available\n     * tokens. Used for testing the limiter.\n     * @private\n     * @internal\n     */\n    tryMakeRequest(numOperations, requestTimeMillis = Date.now()) {\n        this.refillTokens(requestTimeMillis);\n        if (numOperations <= this.availableTokens) {\n            this.availableTokens -= numOperations;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns the number of ms needed to make a request with the provided number\n     * of operations. Returns 0 if the request can be made with the existing\n     * capacity. Returns -1 if the request is not possible with the current\n     * capacity.\n     *\n     * @param requestTimeMillis The time used to calculate the number of available\n     * tokens. Used for testing the limiter.\n     * @private\n     * @internal\n     */\n    getNextRequestDelayMs(numOperations, requestTimeMillis = Date.now()) {\n        this.refillTokens(requestTimeMillis);\n        if (numOperations < this.availableTokens) {\n            return 0;\n        }\n        const capacity = this.calculateCapacity(requestTimeMillis);\n        if (capacity < numOperations) {\n            return -1;\n        }\n        const requiredTokens = numOperations - this.availableTokens;\n        return Math.ceil((requiredTokens * 1000) / capacity);\n    }\n    /**\n     * Refills the number of available tokens based on how much time has elapsed\n     * since the last time the tokens were refilled.\n     *\n     * @param requestTimeMillis The time used to calculate the number of available\n     * tokens. Used for testing the limiter.\n     * @private\n     * @internal\n     */\n    refillTokens(requestTimeMillis) {\n        if (requestTimeMillis >= this.lastRefillTimeMillis) {\n            const elapsedTime = requestTimeMillis - this.lastRefillTimeMillis;\n            const capacity = this.calculateCapacity(requestTimeMillis);\n            const tokensToAdd = Math.floor((elapsedTime * capacity) / 1000);\n            if (tokensToAdd > 0) {\n                this.availableTokens = Math.min(capacity, this.availableTokens + tokensToAdd);\n                this.lastRefillTimeMillis = requestTimeMillis;\n            }\n        }\n        else {\n            throw new Error('Request time should not be before the last token refill time.');\n        }\n    }\n    /**\n     * Calculates the maximum capacity based on the provided date.\n     *\n     * @private\n     * @internal\n     */\n    // Visible for testing.\n    calculateCapacity(requestTimeMillis) {\n        assert(requestTimeMillis >= this.startTimeMillis, 'startTime cannot be after currentTime');\n        const millisElapsed = requestTimeMillis - this.startTimeMillis;\n        const operationsPerSecond = Math.min(Math.floor(Math.pow(this.multiplier, Math.floor(millisElapsed / this.multiplierMillis)) * this.initialCapacity), this.maximumCapacity);\n        if (operationsPerSecond !== this.previousCapacity) {\n            (0, logger_1.logger)('RateLimiter.calculateCapacity', null, `New request capacity: ${operationsPerSecond} operations per second.`);\n        }\n        this.previousCapacity = operationsPerSecond;\n        return operationsPerSecond;\n    }\n}\nexports.RateLimiter = RateLimiter;\n//# sourceMappingURL=rate-limiter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/rate-limiter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/recursive-delete.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/recursive-delete.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RecursiveDelete = exports.RECURSIVE_DELETE_MIN_PENDING_OPS = exports.RECURSIVE_DELETE_MAX_PENDING_OPS = exports.REFERENCE_NAME_MIN_ID = void 0;\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst _1 = __webpack_require__(/*! . */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/index.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst query_options_1 = __webpack_require__(/*! ./reference/query-options */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-options.js\");\n/*!\n * Datastore allowed numeric IDs where Firestore only allows strings. Numeric\n * IDs are exposed to Firestore as __idNUM__, so this is the lowest possible\n * negative numeric value expressed in that format.\n *\n * This constant is used to specify startAt/endAt values when querying for all\n * descendants in a single collection.\n */\nexports.REFERENCE_NAME_MIN_ID = '__id-9223372036854775808__';\n/*!\n * The query limit used for recursive deletes when fetching all descendants of\n * the specified reference to delete. This is done to prevent the query stream\n * from streaming documents faster than Firestore can delete.\n */\n// Visible for testing.\nexports.RECURSIVE_DELETE_MAX_PENDING_OPS = 5000;\n/*!\n * The number of pending BulkWriter operations at which RecursiveDelete\n * starts the next limit query to fetch descendants. By starting the query\n * while there are pending operations, Firestore can improve BulkWriter\n * throughput. This helps prevent BulkWriter from idling while Firestore\n * fetches the next query.\n */\nexports.RECURSIVE_DELETE_MIN_PENDING_OPS = 1000;\n/**\n * Class used to store state required for running a recursive delete operation.\n * Each recursive delete call should use a new instance of the class.\n * @private\n * @internal\n */\nclass RecursiveDelete {\n    /**\n     *\n     * @param firestore The Firestore instance to use.\n     * @param writer The BulkWriter instance to use for delete operations.\n     * @param ref The document or collection reference to recursively delete.\n     * @param maxLimit The query limit to use when fetching descendants\n     * @param minLimit The number of pending BulkWriter operations at which\n     * RecursiveDelete starts the next limit query to fetch descendants.\n     */\n    constructor(firestore, writer, ref, maxLimit, minLimit) {\n        this.firestore = firestore;\n        this.writer = writer;\n        this.ref = ref;\n        this.maxLimit = maxLimit;\n        this.minLimit = minLimit;\n        /**\n         * The number of deletes that failed with a permanent error.\n         * @private\n         * @internal\n         */\n        this.errorCount = 0;\n        /**\n         * Whether there are still documents to delete that still need to be fetched.\n         * @private\n         * @internal\n         */\n        this.documentsPending = true;\n        /**\n         * Whether run() has been called.\n         * @private\n         * @internal\n         */\n        this.started = false;\n        /**\n         * A deferred promise that resolves when the recursive delete operation\n         * is completed.\n         * @private\n         * @internal\n         */\n        this.completionDeferred = new util_1.Deferred();\n        /**\n         * Whether a query stream is currently in progress. Only one stream can be\n         * run at a time.\n         * @private\n         * @internal\n         */\n        this.streamInProgress = false;\n        /**\n         * The number of pending BulkWriter operations. Used to determine when the\n         * next query can be run.\n         * @private\n         * @internal\n         */\n        this.pendingOpsCount = 0;\n        this.errorStack = '';\n        this.maxPendingOps = maxLimit;\n        this.minPendingOps = minLimit;\n    }\n    /**\n     * Recursively deletes the reference provided in the class constructor.\n     * Returns a promise that resolves when all descendants have been deleted, or\n     * if an error occurs.\n     */\n    run() {\n        assert(!this.started, 'RecursiveDelete.run() should only be called once.');\n        // Capture the error stack to preserve stack tracing across async calls.\n        this.errorStack = Error().stack;\n        this.writer._verifyNotClosed();\n        this.setupStream();\n        return this.completionDeferred.promise;\n    }\n    /**\n     * Creates a query stream and attaches event handlers to it.\n     * @private\n     * @internal\n     */\n    setupStream() {\n        const stream = this.getAllDescendants(this.ref instanceof _1.CollectionReference\n            ? this.ref\n            : this.ref);\n        this.streamInProgress = true;\n        let streamedDocsCount = 0;\n        stream\n            .on('error', err => {\n            err.code = 14 /* StatusCode.UNAVAILABLE */;\n            err.stack = 'Failed to fetch children documents: ' + err.stack;\n            this.lastError = err;\n            this.onQueryEnd();\n        })\n            .on('data', (snap) => {\n            streamedDocsCount++;\n            this.lastDocumentSnap = snap;\n            this.deleteRef(snap.ref);\n        })\n            .on('end', () => {\n            this.streamInProgress = false;\n            // If there are fewer than the number of documents specified in the\n            // limit() field, we know that the query is complete.\n            if (streamedDocsCount < this.minPendingOps) {\n                this.onQueryEnd();\n            }\n            else if (this.pendingOpsCount === 0) {\n                this.setupStream();\n            }\n        });\n    }\n    /**\n     * Retrieves all descendant documents nested under the provided reference.\n     * @param ref The reference to fetch all descendants for.\n     * @private\n     * @internal\n     * @return {Stream<QueryDocumentSnapshot>} Stream of descendant documents.\n     */\n    getAllDescendants(ref) {\n        // The parent is the closest ancestor document to the location we're\n        // deleting. If we are deleting a document, the parent is the path of that\n        // document. If we are deleting a collection, the parent is the path of the\n        // document containing that collection (or the database root, if it is a\n        // root collection).\n        let parentPath = ref._resourcePath;\n        if (ref instanceof _1.CollectionReference) {\n            parentPath = parentPath.popLast();\n        }\n        const collectionId = ref instanceof _1.CollectionReference\n            ? ref.id\n            : ref.parent.id;\n        let query = new _1.Query(this.firestore, query_options_1.QueryOptions.forKindlessAllDescendants(parentPath, collectionId, \n        /* requireConsistency= */ false));\n        // Query for names only to fetch empty snapshots.\n        query = query.select(_1.FieldPath.documentId()).limit(this.maxPendingOps);\n        if (ref instanceof _1.CollectionReference) {\n            // To find all descendants of a collection reference, we need to use a\n            // composite filter that captures all documents that start with the\n            // collection prefix. The MIN_KEY constant represents the minimum key in\n            // this collection, and a null byte + the MIN_KEY represents the minimum\n            // key is the next possible collection.\n            const nullChar = String.fromCharCode(0);\n            const startAt = collectionId + '/' + exports.REFERENCE_NAME_MIN_ID;\n            const endAt = collectionId + nullChar + '/' + exports.REFERENCE_NAME_MIN_ID;\n            query = query\n                .where(_1.FieldPath.documentId(), '>=', startAt)\n                .where(_1.FieldPath.documentId(), '<', endAt);\n        }\n        if (this.lastDocumentSnap) {\n            query = query.startAfter(this.lastDocumentSnap);\n        }\n        return query.stream();\n    }\n    /**\n     * Called when all descendants of the provided reference have been streamed\n     * or if a permanent error occurs during the stream. Deletes the developer\n     * provided reference and wraps any errors that occurred.\n     * @private\n     * @internal\n     */\n    onQueryEnd() {\n        this.documentsPending = false;\n        if (this.ref instanceof _1.DocumentReference) {\n            this.writer.delete(this.ref).catch(err => this.incrementErrorCount(err));\n        }\n        this.writer.flush().then(async () => {\n            var _a;\n            if (this.lastError === undefined) {\n                this.completionDeferred.resolve();\n            }\n            else {\n                let error = new ((__webpack_require__(/*! google-gax/build/src/fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\").GoogleError))(`${this.errorCount} ` +\n                    `${this.errorCount !== 1 ? 'deletes' : 'delete'} ` +\n                    'failed. The last delete failed with: ');\n                if (this.lastError.code !== undefined) {\n                    error.code = this.lastError.code;\n                }\n                error = (0, util_1.wrapError)(error, this.errorStack);\n                // Wrap the BulkWriter error last to provide the full stack trace.\n                this.completionDeferred.reject(this.lastError.stack\n                    ? (0, util_1.wrapError)(error, (_a = this.lastError.stack) !== null && _a !== void 0 ? _a : '')\n                    : error);\n            }\n        });\n    }\n    /**\n     * Deletes the provided reference and starts the next stream if conditions\n     * are met.\n     * @private\n     * @internal\n     */\n    deleteRef(docRef) {\n        this.pendingOpsCount++;\n        this.writer\n            .delete(docRef)\n            .catch(err => {\n            this.incrementErrorCount(err);\n        })\n            .then(() => {\n            this.pendingOpsCount--;\n            // We wait until the previous stream has ended in order to sure the\n            // startAfter document is correct. Starting the next stream while\n            // there are pending operations allows Firestore to maximize\n            // BulkWriter throughput.\n            if (this.documentsPending &&\n                !this.streamInProgress &&\n                this.pendingOpsCount < this.minPendingOps) {\n                this.setupStream();\n            }\n        });\n    }\n    incrementErrorCount(err) {\n        this.errorCount++;\n        this.lastError = err;\n    }\n}\nexports.RecursiveDelete = RecursiveDelete;\n//# sourceMappingURL=recursive-delete.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/recursive-delete.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/aggregate-query-snapshot.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/aggregate-query-snapshot.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregateQuerySnapshot = void 0;\nconst deepEqual = __webpack_require__(/*! fast-deep-equal */ \"(rsc)/./node_modules/fast-deep-equal/index.js\");\n/**\n * The results of executing an aggregation query.\n */\nclass AggregateQuerySnapshot {\n    /**\n     * @internal\n     *\n     * @param _query The query that was executed to produce this result.\n     * @param _readTime The time this snapshot was read.\n     * @param _data The results of the aggregations performed over the underlying\n     * query.\n     */\n    constructor(_query, _readTime, _data) {\n        this._query = _query;\n        this._readTime = _readTime;\n        this._data = _data;\n    }\n    /** The query that was executed to produce this result. */\n    get query() {\n        return this._query;\n    }\n    /** The time this snapshot was read. */\n    get readTime() {\n        return this._readTime;\n    }\n    /**\n     * Returns the results of the aggregations performed over the underlying\n     * query.\n     *\n     * The keys of the returned object will be the same as those of the\n     * `AggregateSpec` object specified to the aggregation method, and the\n     * values will be the corresponding aggregation result.\n     *\n     * @returns The results of the aggregations performed over the underlying\n     * query.\n     */\n    data() {\n        return this._data;\n    }\n    /**\n     * Compares this object with the given object for equality.\n     *\n     * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they\n     * have the same data and their underlying queries compare \"equal\" using\n     * `AggregateQuery.isEqual()`.\n     *\n     * @param other The object to compare to this object for equality.\n     * @return `true` if this object is \"equal\" to the given object, as\n     * defined above, or `false` otherwise.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof AggregateQuerySnapshot)) {\n            return false;\n        }\n        // Since the read time is different on every read, we explicitly ignore all\n        // document metadata in this comparison, just like\n        // `DocumentSnapshot.isEqual()` does.\n        if (!this.query.isEqual(other.query)) {\n            return false;\n        }\n        return deepEqual(this._data, other._data);\n    }\n}\nexports.AggregateQuerySnapshot = AggregateQuerySnapshot;\n//# sourceMappingURL=aggregate-query-snapshot.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3JlZmVyZW5jZS9hZ2dyZWdhdGUtcXVlcnktc25hcHNob3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCO0FBQzlCLGtCQUFrQixtQkFBTyxDQUFDLHNFQUFpQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3JlZmVyZW5jZS9hZ2dyZWdhdGUtcXVlcnktc25hcHNob3QuanM/MDg0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3QgPSB2b2lkIDA7XG5jb25zdCBkZWVwRXF1YWwgPSByZXF1aXJlKFwiZmFzdC1kZWVwLWVxdWFsXCIpO1xuLyoqXG4gKiBUaGUgcmVzdWx0cyBvZiBleGVjdXRpbmcgYW4gYWdncmVnYXRpb24gcXVlcnkuXG4gKi9cbmNsYXNzIEFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3Qge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqXG4gICAgICogQHBhcmFtIF9xdWVyeSBUaGUgcXVlcnkgdGhhdCB3YXMgZXhlY3V0ZWQgdG8gcHJvZHVjZSB0aGlzIHJlc3VsdC5cbiAgICAgKiBAcGFyYW0gX3JlYWRUaW1lIFRoZSB0aW1lIHRoaXMgc25hcHNob3Qgd2FzIHJlYWQuXG4gICAgICogQHBhcmFtIF9kYXRhIFRoZSByZXN1bHRzIG9mIHRoZSBhZ2dyZWdhdGlvbnMgcGVyZm9ybWVkIG92ZXIgdGhlIHVuZGVybHlpbmdcbiAgICAgKiBxdWVyeS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihfcXVlcnksIF9yZWFkVGltZSwgX2RhdGEpIHtcbiAgICAgICAgdGhpcy5fcXVlcnkgPSBfcXVlcnk7XG4gICAgICAgIHRoaXMuX3JlYWRUaW1lID0gX3JlYWRUaW1lO1xuICAgICAgICB0aGlzLl9kYXRhID0gX2RhdGE7XG4gICAgfVxuICAgIC8qKiBUaGUgcXVlcnkgdGhhdCB3YXMgZXhlY3V0ZWQgdG8gcHJvZHVjZSB0aGlzIHJlc3VsdC4gKi9cbiAgICBnZXQgcXVlcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9xdWVyeTtcbiAgICB9XG4gICAgLyoqIFRoZSB0aW1lIHRoaXMgc25hcHNob3Qgd2FzIHJlYWQuICovXG4gICAgZ2V0IHJlYWRUaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZFRpbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJlc3VsdHMgb2YgdGhlIGFnZ3JlZ2F0aW9ucyBwZXJmb3JtZWQgb3ZlciB0aGUgdW5kZXJseWluZ1xuICAgICAqIHF1ZXJ5LlxuICAgICAqXG4gICAgICogVGhlIGtleXMgb2YgdGhlIHJldHVybmVkIG9iamVjdCB3aWxsIGJlIHRoZSBzYW1lIGFzIHRob3NlIG9mIHRoZVxuICAgICAqIGBBZ2dyZWdhdGVTcGVjYCBvYmplY3Qgc3BlY2lmaWVkIHRvIHRoZSBhZ2dyZWdhdGlvbiBtZXRob2QsIGFuZCB0aGVcbiAgICAgKiB2YWx1ZXMgd2lsbCBiZSB0aGUgY29ycmVzcG9uZGluZyBhZ2dyZWdhdGlvbiByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzdWx0cyBvZiB0aGUgYWdncmVnYXRpb25zIHBlcmZvcm1lZCBvdmVyIHRoZSB1bmRlcmx5aW5nXG4gICAgICogcXVlcnkuXG4gICAgICovXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHRoaXMgb2JqZWN0IHdpdGggdGhlIGdpdmVuIG9iamVjdCBmb3IgZXF1YWxpdHkuXG4gICAgICpcbiAgICAgKiBUd28gYEFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RgIGluc3RhbmNlcyBhcmUgY29uc2lkZXJlZCBcImVxdWFsXCIgaWYgdGhleVxuICAgICAqIGhhdmUgdGhlIHNhbWUgZGF0YSBhbmQgdGhlaXIgdW5kZXJseWluZyBxdWVyaWVzIGNvbXBhcmUgXCJlcXVhbFwiIHVzaW5nXG4gICAgICogYEFnZ3JlZ2F0ZVF1ZXJ5LmlzRXF1YWwoKWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXIgVGhlIG9iamVjdCB0byBjb21wYXJlIHRvIHRoaXMgb2JqZWN0IGZvciBlcXVhbGl0eS5cbiAgICAgKiBAcmV0dXJuIGB0cnVlYCBpZiB0aGlzIG9iamVjdCBpcyBcImVxdWFsXCIgdG8gdGhlIGdpdmVuIG9iamVjdCwgYXNcbiAgICAgKiBkZWZpbmVkIGFib3ZlLCBvciBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBpc0VxdWFsKG90aGVyKSB7XG4gICAgICAgIGlmICh0aGlzID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBBZ2dyZWdhdGVRdWVyeVNuYXBzaG90KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNpbmNlIHRoZSByZWFkIHRpbWUgaXMgZGlmZmVyZW50IG9uIGV2ZXJ5IHJlYWQsIHdlIGV4cGxpY2l0bHkgaWdub3JlIGFsbFxuICAgICAgICAvLyBkb2N1bWVudCBtZXRhZGF0YSBpbiB0aGlzIGNvbXBhcmlzb24sIGp1c3QgbGlrZVxuICAgICAgICAvLyBgRG9jdW1lbnRTbmFwc2hvdC5pc0VxdWFsKClgIGRvZXMuXG4gICAgICAgIGlmICghdGhpcy5xdWVyeS5pc0VxdWFsKG90aGVyLnF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWVwRXF1YWwodGhpcy5fZGF0YSwgb3RoZXIuX2RhdGEpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWdncmVnYXRlUXVlcnlTbmFwc2hvdCA9IEFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZ2dyZWdhdGUtcXVlcnktc25hcHNob3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/aggregate-query-snapshot.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/aggregate-query.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/aggregate-query.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregateQuery = void 0;\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst deepEqual = __webpack_require__(/*! fast-deep-equal */ \"(rsc)/./node_modules/fast-deep-equal/index.js\");\nconst aggregate_1 = __webpack_require__(/*! ../aggregate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/aggregate.js\");\nconst timestamp_1 = __webpack_require__(/*! ../timestamp */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst query_profile_1 = __webpack_require__(/*! ../query-profile */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/query-profile.js\");\nconst logger_1 = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\nconst aggregate_query_snapshot_1 = __webpack_require__(/*! ./aggregate-query-snapshot */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/aggregate-query-snapshot.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst trace_util_1 = __webpack_require__(/*! ../telemetry/trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js\");\n/**\n * A query that calculates aggregations over an underlying query.\n */\nclass AggregateQuery {\n    /**\n     * @internal\n     * @param _query The query whose aggregations will be calculated by this\n     * object.\n     * @param _aggregates The aggregations that will be performed by this query.\n     */\n    constructor(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _query, _aggregates) {\n        this._query = _query;\n        this._aggregates = _aggregates;\n        this.clientAliasToServerAliasMap = {};\n        this.serverAliasToClientAliasMap = {};\n        // Client-side aliases may be too long and exceed the 1500-byte string size limit.\n        // Such long strings do not need to be transferred over the wire either.\n        // The client maps the user's alias to a short form alias and send that to the server.\n        let aggregationNum = 0;\n        for (const clientAlias in this._aggregates) {\n            if (Object.prototype.hasOwnProperty.call(this._aggregates, clientAlias)) {\n                const serverAlias = `aggregate_${aggregationNum++}`;\n                this.clientAliasToServerAliasMap[clientAlias] = serverAlias;\n                this.serverAliasToClientAliasMap[serverAlias] = clientAlias;\n            }\n        }\n    }\n    /** The query whose aggregations will be calculated by this object. */\n    get query() {\n        return this._query;\n    }\n    /**\n     * Executes this query.\n     *\n     * @return A promise that will be resolved with the results of the query.\n     */\n    async get() {\n        return this._query._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_AGGREGATION_QUERY_GET, async () => {\n            const { result } = await this._get();\n            return result;\n        });\n    }\n    /**\n     * Internal get() method that accepts an optional transaction options and\n     * returns a snapshot with transaction and explain metadata.\n     *\n     * @private\n     * @internal\n     * @param transactionOrReadTime A transaction ID, options to start a new\n     *  transaction, or timestamp to use as read time.\n     */\n    async _get(transactionOrReadTime) {\n        const response = await this._getResponse(transactionOrReadTime);\n        if (!response.result) {\n            throw new Error('No AggregateQuery results');\n        }\n        return response;\n    }\n    /**\n     * Internal get() method that accepts an optional transaction id, and returns\n     * transaction metadata.\n     *\n     * @private\n     * @internal\n     * @param transactionOrReadTime A transaction ID, options to start a new\n     *  transaction, or timestamp to use as read time.\n     */\n    _getResponse(transactionOrReadTime, explainOptions) {\n        // Capture the error stack to preserve stack tracing across async calls.\n        const stack = Error().stack;\n        return new Promise((resolve, reject) => {\n            const output = {};\n            const stream = this._stream(transactionOrReadTime, explainOptions);\n            stream.on('error', err => {\n                reject((0, util_1.wrapError)(err, stack));\n            });\n            stream.on('data', (data) => {\n                if (data.transaction) {\n                    output.transaction = data.transaction;\n                }\n                if (data.explainMetrics) {\n                    output.explainMetrics = data.explainMetrics;\n                }\n                if (data.result) {\n                    output.result = data.result;\n                }\n            });\n            stream.on('end', () => {\n                stream.destroy();\n                resolve(output);\n            });\n        });\n    }\n    /**\n     * Internal streaming method that accepts an optional transaction ID.\n     *\n     * BEWARE: If `transactionOrReadTime` is `ITransactionOptions`, then the first\n     * response in the stream will be a transaction response.\n     *\n     * @private\n     * @internal\n     * @param transactionOrReadTime A transaction ID, options to start a new\n     *  transaction, or timestamp to use as read time.\n     * @param explainOptions Options to use for explaining the query (if any).\n     * @returns A stream of document results optionally preceded by a transaction response.\n     */\n    _stream(transactionOrReadTime, explainOptions) {\n        const tag = (0, util_1.requestTag)();\n        const firestore = this._query.firestore;\n        const stream = new stream_1.Transform({\n            objectMode: true,\n            transform: (proto, enc, callback) => {\n                var _a;\n                const output = {};\n                // Proto comes with zero-length buffer by default\n                if ((_a = proto.transaction) === null || _a === void 0 ? void 0 : _a.length) {\n                    output.transaction = proto.transaction;\n                }\n                if (proto.explainMetrics) {\n                    output.explainMetrics = query_profile_1.ExplainMetrics._fromProto(proto.explainMetrics, firestore._serializer);\n                }\n                if (proto.result) {\n                    const readTime = timestamp_1.Timestamp.fromProto(proto.readTime);\n                    const data = this.decodeResult(proto.result);\n                    output.result = new aggregate_query_snapshot_1.AggregateQuerySnapshot(this, readTime, data);\n                }\n                callback(undefined, output);\n            },\n        });\n        firestore\n            .initializeIfNeeded(tag)\n            .then(async () => {\n            // `toProto()` might throw an exception. We rely on the behavior of an\n            // async function to convert this exception into the rejected Promise we\n            // catch below.\n            const request = this.toProto(transactionOrReadTime, explainOptions);\n            const backendStream = await firestore.requestStream('runAggregationQuery', \n            /* bidirectional= */ false, request, tag);\n            stream.on('close', () => {\n                backendStream.resume();\n                backendStream.end();\n            });\n            backendStream.on('error', err => {\n                // TODO(group-by) When group-by queries are supported for aggregates\n                // consider implementing retries if the stream is making progress\n                // receiving results for groups. See the use of lastReceivedDocument\n                // in the retry strategy for runQuery.\n                // Also note that explain queries should not be retried.\n                backendStream.unpipe(stream);\n                (0, logger_1.logger)('AggregateQuery._stream', tag, 'AggregateQuery failed with stream error:', err);\n                this._query._firestore._traceUtil\n                    .currentSpan()\n                    .addEvent(`${trace_util_1.SPAN_NAME_RUN_AGGREGATION_QUERY}: Error.`, {\n                    'error.message': err.message,\n                });\n                stream.destroy(err);\n            });\n            backendStream.resume();\n            backendStream.pipe(stream);\n        })\n            .catch(e => stream.destroy(e));\n        return stream;\n    }\n    /**\n     * Internal method to decode values within result.\n     * @private\n     */\n    decodeResult(proto) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const data = {};\n        const fields = proto.aggregateFields;\n        if (fields) {\n            const serializer = this._query.firestore._serializer;\n            for (const prop of Object.keys(fields)) {\n                const alias = this.serverAliasToClientAliasMap[prop];\n                assert(alias !== null && alias !== undefined, `'${prop}' not present in server-client alias mapping.`);\n                if (this._aggregates[alias] === undefined) {\n                    throw new Error(`Unexpected alias [${prop}] in result aggregate result`);\n                }\n                data[alias] = serializer.decodeValue(fields[prop]);\n            }\n        }\n        return data;\n    }\n    /**\n     * Internal method for serializing a query to its RunAggregationQuery proto\n     * representation with an optional transaction id.\n     *\n     * @private\n     * @internal\n     * @returns Serialized JSON for the query.\n     */\n    toProto(transactionOrReadTime, explainOptions) {\n        const queryProto = this._query.toProto();\n        const runQueryRequest = {\n            parent: queryProto.parent,\n            structuredAggregationQuery: {\n                structuredQuery: queryProto.structuredQuery,\n                aggregations: (0, util_1.mapToArray)(this._aggregates, (aggregate, clientAlias) => {\n                    const serverAlias = this.clientAliasToServerAliasMap[clientAlias];\n                    assert(serverAlias !== null && serverAlias !== undefined, `'${clientAlias}' not present in client-server alias mapping.`);\n                    return new aggregate_1.Aggregate(serverAlias, aggregate.aggregateType, aggregate._field).toProto();\n                }),\n            },\n        };\n        if (transactionOrReadTime instanceof Uint8Array) {\n            runQueryRequest.transaction = transactionOrReadTime;\n        }\n        else if (transactionOrReadTime instanceof timestamp_1.Timestamp) {\n            runQueryRequest.readTime = transactionOrReadTime.toProto().timestampValue;\n        }\n        else if (transactionOrReadTime) {\n            runQueryRequest.newTransaction = transactionOrReadTime;\n        }\n        if (explainOptions) {\n            runQueryRequest.explainOptions = explainOptions;\n        }\n        return runQueryRequest;\n    }\n    /**\n     * Compares this object with the given object for equality.\n     *\n     * This object is considered \"equal\" to the other object if and only if\n     * `other` performs the same aggregations as this `AggregateQuery` and\n     * the underlying Query of `other` compares equal to that of this object\n     * using `Query.isEqual()`.\n     *\n     * @param other The object to compare to this object for equality.\n     * @return `true` if this object is \"equal\" to the given object, as\n     * defined above, or `false` otherwise.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof AggregateQuery)) {\n            return false;\n        }\n        if (!this.query.isEqual(other.query)) {\n            return false;\n        }\n        return deepEqual(this._aggregates, other._aggregates);\n    }\n    /**\n     * Plans and optionally executes this query. Returns a Promise that will be\n     * resolved with the planner information, statistics from the query\n     * execution (if any), and the query results (if any).\n     *\n     * @return A Promise that will be resolved with the planner information,\n     * statistics from the query execution (if any), and the query results (if any).\n     */\n    async explain(options) {\n        const { result, explainMetrics } = await this._getResponse(undefined, options || {});\n        if (!explainMetrics) {\n            throw new Error('No explain results');\n        }\n        return new query_profile_1.ExplainResults(explainMetrics, result || null);\n    }\n}\nexports.AggregateQuery = AggregateQuery;\n//# sourceMappingURL=aggregate-query.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/aggregate-query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/collection-reference.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/collection-reference.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CollectionReference = void 0;\nconst path_1 = __webpack_require__(/*! ../path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst write_batch_1 = __webpack_require__(/*! ../write-batch */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/write-batch.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/types.js\");\nconst query_1 = __webpack_require__(/*! ./query */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query.js\");\nconst document_reference_1 = __webpack_require__(/*! ./document-reference */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/document-reference.js\");\nconst query_options_1 = __webpack_require__(/*! ./query-options */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-options.js\");\nconst trace_util_1 = __webpack_require__(/*! ../telemetry/trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js\");\n/**\n * A CollectionReference object can be used for adding documents, getting\n * document references, and querying for documents (using the methods\n * inherited from [Query]{@link Query}).\n *\n * @class CollectionReference\n * @extends Query\n */\nclass CollectionReference extends query_1.Query {\n    /**\n     * @private\n     *\n     * @param firestore The Firestore Database client.\n     * @param path The Path of this collection.\n     */\n    constructor(firestore, path, converter) {\n        super(firestore, query_options_1.QueryOptions.forCollectionQuery(path, converter));\n    }\n    /**\n     * Returns a resource path for this collection.\n     * @private\n     * @internal\n     */\n    get _resourcePath() {\n        return this._queryOptions.parentPath.append(this._queryOptions.collectionId);\n    }\n    /**\n     * The last path element of the referenced collection.\n     *\n     * @type {string}\n     * @name CollectionReference#id\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * console.log(`ID of the subcollection: ${collectionRef.id}`);\n     * ```\n     */\n    get id() {\n        return this._queryOptions.collectionId;\n    }\n    /**\n     * A reference to the containing Document if this is a subcollection, else\n     * null.\n     *\n     * @type {DocumentReference|null}\n     * @name CollectionReference#parent\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * let documentRef = collectionRef.parent;\n     * console.log(`Parent name: ${documentRef.path}`);\n     * ```\n     */\n    get parent() {\n        if (this._queryOptions.parentPath.isDocument) {\n            return new document_reference_1.DocumentReference(this.firestore, this._queryOptions.parentPath);\n        }\n        return null;\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     *\n     * @type {string}\n     * @name CollectionReference#path\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * console.log(`Path of the subcollection: ${collectionRef.path}`);\n     * ```\n     */\n    get path() {\n        return this._resourcePath.relativeName;\n    }\n    /**\n     * Retrieves the list of documents in this collection.\n     *\n     * The document references returned may include references to \"missing\n     * documents\", i.e. document locations that have no document present but\n     * which contain subcollections with documents. Attempting to read such a\n     * document reference (e.g. via `.get()` or `.onSnapshot()`) will return a\n     * `DocumentSnapshot` whose `.exists` property is false.\n     *\n     * @return {Promise<DocumentReference[]>} The list of documents in this\n     * collection.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * return collectionRef.listDocuments().then(documentRefs => {\n     *    return firestore.getAll(...documentRefs);\n     * }).then(documentSnapshots => {\n     *    for (let documentSnapshot of documentSnapshots) {\n     *       if (documentSnapshot.exists) {\n     *         console.log(`Found document with data: ${documentSnapshot.id}`);\n     *       } else {\n     *         console.log(`Found missing document: ${documentSnapshot.id}`);\n     *       }\n     *    }\n     * });\n     * ```\n     */\n    listDocuments() {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_COL_REF_LIST_DOCUMENTS, () => {\n            const tag = (0, util_1.requestTag)();\n            return this.firestore.initializeIfNeeded(tag).then(() => {\n                const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(this.firestore.projectId, this.firestore.databaseId);\n                const request = {\n                    parent: parentPath.formattedName,\n                    collectionId: this.id,\n                    showMissing: true,\n                    mask: { fieldPaths: [] },\n                };\n                return this.firestore\n                    .request('listDocuments', request, tag)\n                    .then(documents => {\n                    // Note that the backend already orders these documents by name,\n                    // so we do not need to manually sort them.\n                    return documents.map(doc => {\n                        const path = path_1.QualifiedResourcePath.fromSlashSeparatedString(doc.name);\n                        return this.doc(path.id);\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\n     * refers to the document at the specified path. If no path is specified, an\n     * automatically-generated unique ID will be used for the returned\n     * DocumentReference.\n     *\n     * @param {string=} documentPath A slash-separated path to a document.\n     * @returns {DocumentReference} The `DocumentReference`\n     * instance.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     * let documentRefWithName = collectionRef.doc('doc');\n     * let documentRefWithAutoId = collectionRef.doc();\n     * console.log(`Reference with name: ${documentRefWithName.path}`);\n     * console.log(`Reference with auto-id: ${documentRefWithAutoId.path}`);\n     * ```\n     */\n    doc(documentPath) {\n        if (arguments.length === 0) {\n            documentPath = (0, util_1.autoId)();\n        }\n        else {\n            (0, path_1.validateResourcePath)('documentPath', documentPath);\n        }\n        const path = this._resourcePath.append(documentPath);\n        if (!path.isDocument) {\n            throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\n        }\n        return new document_reference_1.DocumentReference(this.firestore, path, this._queryOptions.converter);\n    }\n    /**\n     * Add a new document to this collection with the specified data, assigning\n     * it a document ID automatically.\n     *\n     * @param {DocumentData} data An Object containing the data for the new\n     * document.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {Promise.<DocumentReference>} A Promise resolved with a\n     * [DocumentReference]{@link DocumentReference} pointing to the\n     * newly created document.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document with name: ${documentReference.id}`);\n     * });\n     * ```\n     */\n    add(data) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_COL_REF_ADD, () => {\n            const firestoreData = this._queryOptions.converter.toFirestore(data);\n            (0, write_batch_1.validateDocumentData)('data', firestoreData, \n            /*allowDeletes=*/ false, this._allowUndefined);\n            const documentRef = this.doc();\n            return documentRef.create(data).then(() => documentRef);\n        });\n    }\n    /**\n     * Returns true if this `CollectionReference` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `CollectionReference` is equal to the\n     * provided value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof CollectionReference && super.isEqual(other)));\n    }\n    /**\n     * Applies a custom data converter to this CollectionReference, allowing you\n     * to use your own custom model objects with Firestore. When you call add() on\n     * the returned CollectionReference instance, the provided converter will\n     * convert between Firestore data of type `NewDbModelType` and your custom\n     * type `NewAppModelType`.\n     *\n     * Using the converter allows you to specify generic type arguments when\n     * storing and retrieving objects from Firestore.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @example\n     * ```\n     * class Post {\n     *   constructor(readonly title: string, readonly author: string) {}\n     *\n     *   toString(): string {\n     *     return this.title + ', by ' + this.author;\n     *   }\n     * }\n     *\n     * const postConverter = {\n     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n     *     return {title: post.title, author: post.author};\n     *   },\n     *   fromFirestore(\n     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n     *   ): Post {\n     *     const data = snapshot.data();\n     *     return new Post(data.title, data.author);\n     *   }\n     * };\n     *\n     * const postSnap = await Firestore()\n     *   .collection('posts')\n     *   .withConverter(postConverter)\n     *   .doc().get();\n     * const post = postSnap.data();\n     * if (post !== undefined) {\n     *   post.title; // string\n     *   post.toString(); // Should be defined\n     *   post.someNonExistentProperty; // TS error\n     * }\n     *\n     * ```\n     * @param {FirestoreDataConverter | null} converter Converts objects to and\n     * from Firestore. Passing in `null` removes the current converter.\n     * @return A CollectionReference that uses the provided converter.\n     */\n    withConverter(converter) {\n        return new CollectionReference(this.firestore, this._resourcePath, converter !== null && converter !== void 0 ? converter : (0, types_1.defaultConverter)());\n    }\n}\nexports.CollectionReference = CollectionReference;\n//# sourceMappingURL=collection-reference.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/collection-reference.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/composite-filter-internal.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/composite-filter-internal.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CompositeFilterInternal = void 0;\nconst filter_internal_1 = __webpack_require__(/*! ./filter-internal */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/filter-internal.js\");\nclass CompositeFilterInternal extends filter_internal_1.FilterInternal {\n    constructor(filters, operator) {\n        super();\n        this.filters = filters;\n        this.operator = operator;\n        // Memoized list of all field filters that can be found by traversing the tree of filters\n        // contained in this composite filter.\n        this.memoizedFlattenedFilters = null;\n    }\n    getFilters() {\n        return this.filters;\n    }\n    isConjunction() {\n        return this.operator === 'AND';\n    }\n    getFlattenedFilters() {\n        if (this.memoizedFlattenedFilters !== null) {\n            return this.memoizedFlattenedFilters;\n        }\n        this.memoizedFlattenedFilters = this.filters.reduce((allFilters, subfilter) => allFilters.concat(subfilter.getFlattenedFilters()), []);\n        return this.memoizedFlattenedFilters;\n    }\n    toProto() {\n        if (this.filters.length === 1) {\n            return this.filters[0].toProto();\n        }\n        const proto = {\n            compositeFilter: {\n                op: this.operator,\n                filters: this.filters.map(filter => filter.toProto()),\n            },\n        };\n        return proto;\n    }\n    isEqual(other) {\n        if (other instanceof CompositeFilterInternal) {\n            const otherFilters = other.getFilters();\n            return (this.operator === other.operator &&\n                this.getFilters().length === other.getFilters().length &&\n                this.getFilters().every((filter, index) => filter.isEqual(otherFilters[index])));\n        }\n        else {\n            return false;\n        }\n    }\n}\nexports.CompositeFilterInternal = CompositeFilterInternal;\n//# sourceMappingURL=composite-filter-internal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3JlZmVyZW5jZS9jb21wb3NpdGUtZmlsdGVyLWludGVybmFsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELCtCQUErQjtBQUMvQiwwQkFBMEIsbUJBQU8sQ0FBQyw4R0FBbUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL2ZpcmVzdG9yZS9idWlsZC9zcmMvcmVmZXJlbmNlL2NvbXBvc2l0ZS1maWx0ZXItaW50ZXJuYWwuanM/NDA1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXBvc2l0ZUZpbHRlckludGVybmFsID0gdm9pZCAwO1xuY29uc3QgZmlsdGVyX2ludGVybmFsXzEgPSByZXF1aXJlKFwiLi9maWx0ZXItaW50ZXJuYWxcIik7XG5jbGFzcyBDb21wb3NpdGVGaWx0ZXJJbnRlcm5hbCBleHRlbmRzIGZpbHRlcl9pbnRlcm5hbF8xLkZpbHRlckludGVybmFsIHtcbiAgICBjb25zdHJ1Y3RvcihmaWx0ZXJzLCBvcGVyYXRvcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZpbHRlcnMgPSBmaWx0ZXJzO1xuICAgICAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIC8vIE1lbW9pemVkIGxpc3Qgb2YgYWxsIGZpZWxkIGZpbHRlcnMgdGhhdCBjYW4gYmUgZm91bmQgYnkgdHJhdmVyc2luZyB0aGUgdHJlZSBvZiBmaWx0ZXJzXG4gICAgICAgIC8vIGNvbnRhaW5lZCBpbiB0aGlzIGNvbXBvc2l0ZSBmaWx0ZXIuXG4gICAgICAgIHRoaXMubWVtb2l6ZWRGbGF0dGVuZWRGaWx0ZXJzID0gbnVsbDtcbiAgICB9XG4gICAgZ2V0RmlsdGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVycztcbiAgICB9XG4gICAgaXNDb25qdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlcmF0b3IgPT09ICdBTkQnO1xuICAgIH1cbiAgICBnZXRGbGF0dGVuZWRGaWx0ZXJzKCkge1xuICAgICAgICBpZiAodGhpcy5tZW1vaXplZEZsYXR0ZW5lZEZpbHRlcnMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1lbW9pemVkRmxhdHRlbmVkRmlsdGVycztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1lbW9pemVkRmxhdHRlbmVkRmlsdGVycyA9IHRoaXMuZmlsdGVycy5yZWR1Y2UoKGFsbEZpbHRlcnMsIHN1YmZpbHRlcikgPT4gYWxsRmlsdGVycy5jb25jYXQoc3ViZmlsdGVyLmdldEZsYXR0ZW5lZEZpbHRlcnMoKSksIFtdKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVtb2l6ZWRGbGF0dGVuZWRGaWx0ZXJzO1xuICAgIH1cbiAgICB0b1Byb3RvKCkge1xuICAgICAgICBpZiAodGhpcy5maWx0ZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyc1swXS50b1Byb3RvKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvdG8gPSB7XG4gICAgICAgICAgICBjb21wb3NpdGVGaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICBvcDogdGhpcy5vcGVyYXRvcixcbiAgICAgICAgICAgICAgICBmaWx0ZXJzOiB0aGlzLmZpbHRlcnMubWFwKGZpbHRlciA9PiBmaWx0ZXIudG9Qcm90bygpKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBwcm90bztcbiAgICB9XG4gICAgaXNFcXVhbChvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIgaW5zdGFuY2VvZiBDb21wb3NpdGVGaWx0ZXJJbnRlcm5hbCkge1xuICAgICAgICAgICAgY29uc3Qgb3RoZXJGaWx0ZXJzID0gb3RoZXIuZ2V0RmlsdGVycygpO1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLm9wZXJhdG9yID09PSBvdGhlci5vcGVyYXRvciAmJlxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0RmlsdGVycygpLmxlbmd0aCA9PT0gb3RoZXIuZ2V0RmlsdGVycygpLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0RmlsdGVycygpLmV2ZXJ5KChmaWx0ZXIsIGluZGV4KSA9PiBmaWx0ZXIuaXNFcXVhbChvdGhlckZpbHRlcnNbaW5kZXhdKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Db21wb3NpdGVGaWx0ZXJJbnRlcm5hbCA9IENvbXBvc2l0ZUZpbHRlckludGVybmFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9zaXRlLWZpbHRlci1pbnRlcm5hbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/composite-filter-internal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/constants.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/constants.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NOOP_MESSAGE = exports.comparisonOperators = exports.directionOperators = void 0;\n/**\n * The direction of a `Query.orderBy()` clause is specified as 'desc' or 'asc'\n * (descending or ascending).\n *\n * @private\n * @internal\n */\nexports.directionOperators = {\n    asc: 'ASCENDING',\n    desc: 'DESCENDING',\n};\n/**\n * Filter conditions in a `Query.where()` clause are specified using the\n * strings '<', '<=', '==', '!=', '>=', '>', 'array-contains', 'in', 'not-in',\n * and 'array-contains-any'.\n *\n * @private\n * @internal\n */\nexports.comparisonOperators = {\n    '<': 'LESS_THAN',\n    '<=': 'LESS_THAN_OR_EQUAL',\n    '==': 'EQUAL',\n    '!=': 'NOT_EQUAL',\n    '>': 'GREATER_THAN',\n    '>=': 'GREATER_THAN_OR_EQUAL',\n    'array-contains': 'ARRAY_CONTAINS',\n    in: 'IN',\n    'not-in': 'NOT_IN',\n    'array-contains-any': 'ARRAY_CONTAINS_ANY',\n};\nexports.NOOP_MESSAGE = Symbol('a noop message');\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3JlZmVyZW5jZS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsMkJBQTJCLEdBQUcsMEJBQTBCO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL2ZpcmVzdG9yZS9idWlsZC9zcmMvcmVmZXJlbmNlL2NvbnN0YW50cy5qcz8zMzZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTk9PUF9NRVNTQUdFID0gZXhwb3J0cy5jb21wYXJpc29uT3BlcmF0b3JzID0gZXhwb3J0cy5kaXJlY3Rpb25PcGVyYXRvcnMgPSB2b2lkIDA7XG4vKipcbiAqIFRoZSBkaXJlY3Rpb24gb2YgYSBgUXVlcnkub3JkZXJCeSgpYCBjbGF1c2UgaXMgc3BlY2lmaWVkIGFzICdkZXNjJyBvciAnYXNjJ1xuICogKGRlc2NlbmRpbmcgb3IgYXNjZW5kaW5nKS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydHMuZGlyZWN0aW9uT3BlcmF0b3JzID0ge1xuICAgIGFzYzogJ0FTQ0VORElORycsXG4gICAgZGVzYzogJ0RFU0NFTkRJTkcnLFxufTtcbi8qKlxuICogRmlsdGVyIGNvbmRpdGlvbnMgaW4gYSBgUXVlcnkud2hlcmUoKWAgY2xhdXNlIGFyZSBzcGVjaWZpZWQgdXNpbmcgdGhlXG4gKiBzdHJpbmdzICc8JywgJzw9JywgJz09JywgJyE9JywgJz49JywgJz4nLCAnYXJyYXktY29udGFpbnMnLCAnaW4nLCAnbm90LWluJyxcbiAqIGFuZCAnYXJyYXktY29udGFpbnMtYW55Jy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydHMuY29tcGFyaXNvbk9wZXJhdG9ycyA9IHtcbiAgICAnPCc6ICdMRVNTX1RIQU4nLFxuICAgICc8PSc6ICdMRVNTX1RIQU5fT1JfRVFVQUwnLFxuICAgICc9PSc6ICdFUVVBTCcsXG4gICAgJyE9JzogJ05PVF9FUVVBTCcsXG4gICAgJz4nOiAnR1JFQVRFUl9USEFOJyxcbiAgICAnPj0nOiAnR1JFQVRFUl9USEFOX09SX0VRVUFMJyxcbiAgICAnYXJyYXktY29udGFpbnMnOiAnQVJSQVlfQ09OVEFJTlMnLFxuICAgIGluOiAnSU4nLFxuICAgICdub3QtaW4nOiAnTk9UX0lOJyxcbiAgICAnYXJyYXktY29udGFpbnMtYW55JzogJ0FSUkFZX0NPTlRBSU5TX0FOWScsXG59O1xuZXhwb3J0cy5OT09QX01FU1NBR0UgPSBTeW1ib2woJ2Egbm9vcCBtZXNzYWdlJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/document-reference.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/document-reference.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DocumentReference = void 0;\nconst index_1 = __webpack_require__(/*! ../index */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/index.js\");\nconst path_1 = __webpack_require__(/*! ../path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/types.js\");\nconst collection_reference_1 = __webpack_require__(/*! ./collection-reference */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/collection-reference.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst validate_1 = __webpack_require__(/*! ../validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst document_1 = __webpack_require__(/*! ../document */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document.js\");\nconst trace_util_1 = __webpack_require__(/*! ../telemetry/trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js\");\n/**\n * A DocumentReference refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist. A DocumentReference can\n * also be used to create a\n * [CollectionReference]{@link CollectionReference} to a\n * subcollection.\n *\n * @class DocumentReference\n */\nclass DocumentReference {\n    /**\n     * @private\n     * @internal\n     * @param _firestore The Firestore Database client.\n     * @param _path The Path of this reference.\n     * @param _converter The converter to use when serializing data.\n     */\n    constructor(_firestore, \n    /**\n     * @private\n     * @internal\n     **/\n    _path, \n    /**\n     * @internal\n     * @private\n     **/\n    _converter = (0, types_1.defaultConverter)()) {\n        this._firestore = _firestore;\n        this._path = _path;\n        this._converter = _converter;\n    }\n    /**\n     * The string representation of the DocumentReference's location.\n     * @private\n     * @internal\n     * @type {string}\n     * @name DocumentReference#formattedName\n     */\n    get formattedName() {\n        const projectId = this.firestore.projectId;\n        const databaseId = this.firestore.databaseId;\n        return this._path.toQualifiedResourcePath(projectId, databaseId)\n            .formattedName;\n    }\n    /**\n     * The [Firestore]{@link Firestore} instance for the Firestore\n     * database (useful for performing transactions, etc.).\n     *\n     * @type {Firestore}\n     * @name DocumentReference#firestore\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   let firestore = documentReference.firestore;\n     *   console.log(`Root location for document is ${firestore.formattedName}`);\n     * });\n     * ```\n     */\n    get firestore() {\n        return this._firestore;\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     *\n     * @type {string}\n     * @name DocumentReference#path\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document at '${documentReference.path}'`);\n     * });\n     * ```\n     */\n    get path() {\n        return this._path.relativeName;\n    }\n    /**\n     * The last path element of the referenced document.\n     *\n     * @type {string}\n     * @name DocumentReference#id\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document with name '${documentReference.id}'`);\n     * });\n     * ```\n     */\n    get id() {\n        return this._path.id;\n    }\n    /**\n     * Returns a resource path for this document.\n     * @private\n     * @internal\n     */\n    get _resourcePath() {\n        return this._path;\n    }\n    /**\n     * A reference to the collection to which this DocumentReference belongs.\n     *\n     * @name DocumentReference#parent\n     * @type {CollectionReference}\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     * let collectionRef = documentRef.parent;\n     *\n     * collectionRef.where('foo', '==', 'bar').get().then(results => {\n     *   console.log(`Found ${results.size} matches in parent collection`);\n     * }):\n     * ```\n     */\n    get parent() {\n        return new collection_reference_1.CollectionReference(this._firestore, this._path.parent(), this._converter);\n    }\n    /**\n     * Reads the document referred to by this DocumentReference.\n     *\n     * @returns {Promise.<DocumentSnapshot>} A Promise resolved with a\n     * DocumentSnapshot for the retrieved document on success. For missing\n     * documents, DocumentSnapshot.exists will be false. If the get() fails for\n     * other reasons, the Promise will be rejected.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     console.log('Document retrieved successfully.');\n     *   }\n     * });\n     * ```\n     */\n    get() {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_DOC_REF_GET, () => {\n            return this._firestore.getAll(this).then(([result]) => result);\n        });\n    }\n    /**\n     * Gets a [CollectionReference]{@link CollectionReference} instance\n     * that refers to the collection at the specified path.\n     *\n     * @param {string} collectionPath A slash-separated path to a collection.\n     * @returns {CollectionReference} A reference to the new\n     * subcollection.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     * let subcollection = documentRef.collection('subcollection');\n     * console.log(`Path to subcollection: ${subcollection.path}`);\n     * ```\n     */\n    collection(collectionPath) {\n        (0, path_1.validateResourcePath)('collectionPath', collectionPath);\n        const path = this._path.append(collectionPath);\n        if (!path.isCollection) {\n            throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\n        }\n        return new collection_reference_1.CollectionReference(this._firestore, path);\n    }\n    /**\n     * Fetches the subcollections that are direct children of this document.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.listCollections().then(collections => {\n     *   for (let collection of collections) {\n     *     console.log(`Found subcollection with id: ${collection.id}`);\n     *   }\n     * });\n     * ```\n     */\n    listCollections() {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_DOC_REF_LIST_COLLECTIONS, () => {\n            const tag = (0, util_1.requestTag)();\n            return this.firestore.initializeIfNeeded(tag).then(() => {\n                const request = {\n                    parent: this.formattedName,\n                };\n                return this._firestore\n                    .request('listCollectionIds', request, tag)\n                    .then(collectionIds => {\n                    const collections = [];\n                    // We can just sort this list using the default comparator since it\n                    // will only contain collection ids.\n                    collectionIds.sort();\n                    for (const collectionId of collectionIds) {\n                        collections.push(this.collection(collectionId));\n                    }\n                    return collections;\n                });\n            });\n        });\n    }\n    /**\n     * Create a document with the provided object values. This will fail the write\n     * if a document exists at its location.\n     *\n     * @param {DocumentData} data An object that contains the fields and data to\n     * serialize as the document.\n     * @throws {Error} If the provided input is not a valid Firestore document or if the document already exists.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * write time of this create.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * documentRef.create({foo: 'bar'}).then((res) => {\n     *   console.log(`Document created at ${res.updateTime}`);\n     * }).catch((err) => {\n     *   console.log(`Failed to create document: ${err}`);\n     * });\n     * ```\n     */\n    create(data) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_DOC_REF_CREATE, () => {\n            const writeBatch = new index_1.WriteBatch(this._firestore);\n            return writeBatch\n                .create(this, data)\n                .commit()\n                .then(([writeResult]) => writeResult);\n        });\n    }\n    /**\n     * Deletes the document referred to by this `DocumentReference`.\n     *\n     * A delete for a non-existing document is treated as a success (unless\n     * lastUptimeTime is provided).\n     *\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the delete if the\n     * document was last updated at a different time.\n     * @param {boolean=} precondition.exists If set, enforces that the target\n     * document must or must not exist.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * delete time.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.delete().then(() => {\n     *   console.log('Document successfully deleted.');\n     * });\n     * ```\n     */\n    delete(precondition) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_DOC_REF_DELETE, () => {\n            const writeBatch = new index_1.WriteBatch(this._firestore);\n            return writeBatch\n                .delete(this, precondition)\n                .commit()\n                .then(([writeResult]) => writeResult);\n        });\n    }\n    /**\n     * Writes to the document referred to by this DocumentReference. If the\n     * document does not yet exist, it will be created. If you pass\n     * [SetOptions]{@link SetOptions}, the provided data can be merged into an\n     * existing document.\n     *\n     * @param {T|Partial<AppModelType>} data A map of the fields and values for\n     * the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge If true, set() merges the values specified\n     * in its data argument. Fields omitted from this set() call remain untouched.\n     * If your input sets any field to an empty map, all nested fields are\n     * overwritten.\n     * @param {Array.<string|FieldPath>=} options.mergeFields If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched. If your input sets any field to\n     * an empty map, all nested fields are overwritten.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * write time of this set.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({foo: 'bar'}).then(res => {\n     *   console.log(`Document written at ${res.updateTime}`);\n     * });\n     * ```\n     */\n    set(data, options) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_DOC_REF_SET, () => {\n            let writeBatch = new index_1.WriteBatch(this._firestore);\n            if (options) {\n                writeBatch = writeBatch.set(this, data, options);\n            }\n            else {\n                writeBatch = writeBatch.set(this, data);\n            }\n            return writeBatch.commit().then(([writeResult]) => writeResult);\n        });\n    }\n    /**\n     * Updates fields in the document referred to by this DocumentReference.\n     * If the document doesn't yet exist, the update fails and the returned\n     * Promise will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {UpdateData|string|FieldPath} dataOrField An object containing the\n     * fields and values with which to update the document or the path of the\n     * first field to update.\n     * @param {\n     * ...(*|string|FieldPath|Precondition)} preconditionOrValues An alternating\n     * list of field paths and values to update or a Precondition to restrict\n     * this update.\n     * @throws {Error} If the provided input is not valid Firestore data.\n     * @returns {Promise.<WriteResult>} A Promise that resolves once the\n     * data has been successfully written to the backend.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update({foo: 'bar'}).then(res => {\n     *   console.log(`Document updated at ${res.updateTime}`);\n     * });\n     * ```\n     */\n    update(dataOrField, ...preconditionOrValues) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_DOC_REF_UPDATE, () => {\n            // eslint-disable-next-line prefer-rest-params\n            (0, validate_1.validateMinNumberOfArguments)('DocumentReference.update', arguments, 1);\n            const writeBatch = new index_1.WriteBatch(this._firestore);\n            return writeBatch\n                .update(this, dataOrField, ...preconditionOrValues)\n                .commit()\n                .then(([writeResult]) => writeResult);\n        });\n    }\n    /**\n     * Attaches a listener for DocumentSnapshot events.\n     *\n     * @param {documentSnapshotCallback} onNext A callback to be called every\n     * time a new `DocumentSnapshot` is available.\n     * @param {errorCallback=} onError A callback to be called if the listen fails\n     * or is cancelled. No further callbacks will occur. If unset, errors will be\n     * logged to the console.\n     *\n     * @returns {function()} An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * let unsubscribe = documentRef.onSnapshot(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     console.log(documentSnapshot.data());\n     *   }\n     * }, err => {\n     *   console.log(`Encountered error: ${err}`);\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    onSnapshot(onNext, onError) {\n        (0, validate_1.validateFunction)('onNext', onNext);\n        (0, validate_1.validateFunction)('onError', onError, { optional: true });\n        const watch = new ((__webpack_require__(/*! ../watch */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/watch.js\").DocumentWatch))(this.firestore, this);\n        return watch.onSnapshot((readTime, size, docs) => {\n            for (const document of docs()) {\n                if (document.ref.path === this.path) {\n                    onNext(document);\n                    return;\n                }\n            }\n            // The document is missing.\n            const ref = new DocumentReference(this._firestore, this._path, this._converter);\n            const document = new document_1.DocumentSnapshotBuilder(ref);\n            document.readTime = readTime;\n            onNext(document.build());\n        }, onError || console.error);\n    }\n    /**\n     * Returns true if this `DocumentReference` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `DocumentReference` is equal to the provided\n     * value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof DocumentReference &&\n                this._firestore === other._firestore &&\n                this._path.isEqual(other._path) &&\n                this._converter === other._converter));\n    }\n    /**\n     * Converts this DocumentReference to the Firestore Proto representation.\n     *\n     * @private\n     * @internal\n     */\n    toProto() {\n        return { referenceValue: this.formattedName };\n    }\n    /**\n     * Applies a custom data converter to this DocumentReference, allowing you to\n     * use your own custom model objects with Firestore. When you call set(),\n     * get(), etc. on the returned DocumentReference instance, the provided\n     * converter will convert between Firestore data of type `NewDbModelType` and\n     * your custom type `NewAppModelType`.\n     *\n     * Using the converter allows you to specify generic type arguments when\n     * storing and retrieving objects from Firestore.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @example\n     * ```\n     * class Post {\n     *   constructor(readonly title: string, readonly author: string) {}\n     *\n     *   toString(): string {\n     *     return this.title + ', by ' + this.author;\n     *   }\n     * }\n     *\n     * const postConverter = {\n     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n     *     return {title: post.title, author: post.author};\n     *   },\n     *   fromFirestore(\n     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n     *   ): Post {\n     *     const data = snapshot.data();\n     *     return new Post(data.title, data.author);\n     *   }\n     * };\n     *\n     * const postSnap = await Firestore()\n     *   .collection('posts')\n     *   .withConverter(postConverter)\n     *   .doc().get();\n     * const post = postSnap.data();\n     * if (post !== undefined) {\n     *   post.title; // string\n     *   post.toString(); // Should be defined\n     *   post.someNonExistentProperty; // TS error\n     * }\n     *\n     * ```\n     * @param {FirestoreDataConverter | null} converter Converts objects to and\n     * from Firestore. Passing in `null` removes the current converter.\n     * @return A DocumentReference that uses the provided converter.\n     */\n    withConverter(converter) {\n        return new DocumentReference(this.firestore, this._path, converter !== null && converter !== void 0 ? converter : (0, types_1.defaultConverter)());\n    }\n}\nexports.DocumentReference = DocumentReference;\n//# sourceMappingURL=document-reference.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/document-reference.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/field-filter-internal.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/field-filter-internal.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FieldFilterInternal = void 0;\nconst deepEqual = __webpack_require__(/*! fast-deep-equal */ \"(rsc)/./node_modules/fast-deep-equal/index.js\");\nconst filter_internal_1 = __webpack_require__(/*! ./filter-internal */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/filter-internal.js\");\n/**\n * A field constraint for a Query where clause.\n *\n * @private\n * @internal\n * @class\n */\nclass FieldFilterInternal extends filter_internal_1.FilterInternal {\n    getFlattenedFilters() {\n        return [this];\n    }\n    getFilters() {\n        return [this];\n    }\n    /**\n     * @param serializer The Firestore serializer\n     * @param field The path of the property value to compare.\n     * @param op A comparison operation.\n     * @param value The value to which to compare the field for inclusion in a\n     * query.\n     */\n    constructor(serializer, field, op, value) {\n        super();\n        this.serializer = serializer;\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    /**\n     * Returns whether this FieldFilter uses an equals comparison.\n     *\n     * @private\n     * @internal\n     */\n    isInequalityFilter() {\n        switch (this.op) {\n            case 'GREATER_THAN':\n            case 'GREATER_THAN_OR_EQUAL':\n            case 'LESS_THAN':\n            case 'LESS_THAN_OR_EQUAL':\n            case 'NOT_EQUAL':\n            case 'NOT_IN':\n                return true;\n            default:\n                return false;\n        }\n    }\n    /**\n     * Generates the proto representation for this field filter.\n     *\n     * @private\n     * @internal\n     */\n    toProto() {\n        if (typeof this.value === 'number' && isNaN(this.value)) {\n            return {\n                unaryFilter: {\n                    field: {\n                        fieldPath: this.field.formattedName,\n                    },\n                    op: this.op === 'EQUAL' ? 'IS_NAN' : 'IS_NOT_NAN',\n                },\n            };\n        }\n        if (this.value === null) {\n            return {\n                unaryFilter: {\n                    field: {\n                        fieldPath: this.field.formattedName,\n                    },\n                    op: this.op === 'EQUAL' ? 'IS_NULL' : 'IS_NOT_NULL',\n                },\n            };\n        }\n        return {\n            fieldFilter: {\n                field: {\n                    fieldPath: this.field.formattedName,\n                },\n                op: this.op,\n                value: this.serializer.encodeValue(this.value),\n            },\n        };\n    }\n    isEqual(other) {\n        return (other instanceof FieldFilterInternal &&\n            this.field.isEqual(other.field) &&\n            this.op === other.op &&\n            deepEqual(this.value, other.value));\n    }\n}\nexports.FieldFilterInternal = FieldFilterInternal;\n//# sourceMappingURL=field-filter-internal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3JlZmVyZW5jZS9maWVsZC1maWx0ZXItaW50ZXJuYWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLGtCQUFrQixtQkFBTyxDQUFDLHNFQUFpQjtBQUMzQywwQkFBMEIsbUJBQU8sQ0FBQyw4R0FBbUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3JlZmVyZW5jZS9maWVsZC1maWx0ZXItaW50ZXJuYWwuanM/YTU0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpZWxkRmlsdGVySW50ZXJuYWwgPSB2b2lkIDA7XG5jb25zdCBkZWVwRXF1YWwgPSByZXF1aXJlKFwiZmFzdC1kZWVwLWVxdWFsXCIpO1xuY29uc3QgZmlsdGVyX2ludGVybmFsXzEgPSByZXF1aXJlKFwiLi9maWx0ZXItaW50ZXJuYWxcIik7XG4vKipcbiAqIEEgZmllbGQgY29uc3RyYWludCBmb3IgYSBRdWVyeSB3aGVyZSBjbGF1c2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICogQGNsYXNzXG4gKi9cbmNsYXNzIEZpZWxkRmlsdGVySW50ZXJuYWwgZXh0ZW5kcyBmaWx0ZXJfaW50ZXJuYWxfMS5GaWx0ZXJJbnRlcm5hbCB7XG4gICAgZ2V0RmxhdHRlbmVkRmlsdGVycygpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzXTtcbiAgICB9XG4gICAgZ2V0RmlsdGVycygpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNlcmlhbGl6ZXIgVGhlIEZpcmVzdG9yZSBzZXJpYWxpemVyXG4gICAgICogQHBhcmFtIGZpZWxkIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSBvcCBBIGNvbXBhcmlzb24gb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdG8gY29tcGFyZSB0aGUgZmllbGQgZm9yIGluY2x1c2lvbiBpbiBhXG4gICAgICogcXVlcnkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2VyaWFsaXplciwgZmllbGQsIG9wLCB2YWx1ZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNlcmlhbGl6ZXIgPSBzZXJpYWxpemVyO1xuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIHRoaXMub3AgPSBvcDtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBGaWVsZEZpbHRlciB1c2VzIGFuIGVxdWFscyBjb21wYXJpc29uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBpc0luZXF1YWxpdHlGaWx0ZXIoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5vcCkge1xuICAgICAgICAgICAgY2FzZSAnR1JFQVRFUl9USEFOJzpcbiAgICAgICAgICAgIGNhc2UgJ0dSRUFURVJfVEhBTl9PUl9FUVVBTCc6XG4gICAgICAgICAgICBjYXNlICdMRVNTX1RIQU4nOlxuICAgICAgICAgICAgY2FzZSAnTEVTU19USEFOX09SX0VRVUFMJzpcbiAgICAgICAgICAgIGNhc2UgJ05PVF9FUVVBTCc6XG4gICAgICAgICAgICBjYXNlICdOT1RfSU4nOlxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIHRoZSBwcm90byByZXByZXNlbnRhdGlvbiBmb3IgdGhpcyBmaWVsZCBmaWx0ZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRvUHJvdG8oKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy52YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odGhpcy52YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdW5hcnlGaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogdGhpcy5maWVsZC5mb3JtYXR0ZWROYW1lLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvcDogdGhpcy5vcCA9PT0gJ0VRVUFMJyA/ICdJU19OQU4nIDogJ0lTX05PVF9OQU4nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVuYXJ5RmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFBhdGg6IHRoaXMuZmllbGQuZm9ybWF0dGVkTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb3A6IHRoaXMub3AgPT09ICdFUVVBTCcgPyAnSVNfTlVMTCcgOiAnSVNfTk9UX05VTEwnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZEZpbHRlcjoge1xuICAgICAgICAgICAgICAgIGZpZWxkOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogdGhpcy5maWVsZC5mb3JtYXR0ZWROYW1lLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3A6IHRoaXMub3AsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc2VyaWFsaXplci5lbmNvZGVWYWx1ZSh0aGlzLnZhbHVlKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlzRXF1YWwob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIChvdGhlciBpbnN0YW5jZW9mIEZpZWxkRmlsdGVySW50ZXJuYWwgJiZcbiAgICAgICAgICAgIHRoaXMuZmllbGQuaXNFcXVhbChvdGhlci5maWVsZCkgJiZcbiAgICAgICAgICAgIHRoaXMub3AgPT09IG90aGVyLm9wICYmXG4gICAgICAgICAgICBkZWVwRXF1YWwodGhpcy52YWx1ZSwgb3RoZXIudmFsdWUpKTtcbiAgICB9XG59XG5leHBvcnRzLkZpZWxkRmlsdGVySW50ZXJuYWwgPSBGaWVsZEZpbHRlckludGVybmFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmllbGQtZmlsdGVyLWludGVybmFsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/field-filter-internal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/field-order.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/field-order.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FieldOrder = void 0;\n/**\n * A Query order-by field.\n *\n * @private\n * @internal\n * @class\n */\nclass FieldOrder {\n    /**\n     * @param field The name of a document field (member) on which to order query\n     * results.\n     * @param direction One of 'ASCENDING' (default) or 'DESCENDING' to\n     * set the ordering direction to ascending or descending, respectively.\n     */\n    constructor(field, direction = 'ASCENDING') {\n        this.field = field;\n        this.direction = direction;\n    }\n    /**\n     * Generates the proto representation for this field order.\n     * @private\n     * @internal\n     */\n    toProto() {\n        return {\n            field: {\n                fieldPath: this.field.formattedName,\n            },\n            direction: this.direction,\n        };\n    }\n}\nexports.FieldOrder = FieldOrder;\n//# sourceMappingURL=field-order.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3JlZmVyZW5jZS9maWVsZC1vcmRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvZmlyZXN0b3JlL2J1aWxkL3NyYy9yZWZlcmVuY2UvZmllbGQtb3JkZXIuanM/OWYyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpZWxkT3JkZXIgPSB2b2lkIDA7XG4vKipcbiAqIEEgUXVlcnkgb3JkZXItYnkgZmllbGQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICogQGNsYXNzXG4gKi9cbmNsYXNzIEZpZWxkT3JkZXIge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBmaWVsZCBUaGUgbmFtZSBvZiBhIGRvY3VtZW50IGZpZWxkIChtZW1iZXIpIG9uIHdoaWNoIHRvIG9yZGVyIHF1ZXJ5XG4gICAgICogcmVzdWx0cy5cbiAgICAgKiBAcGFyYW0gZGlyZWN0aW9uIE9uZSBvZiAnQVNDRU5ESU5HJyAoZGVmYXVsdCkgb3IgJ0RFU0NFTkRJTkcnIHRvXG4gICAgICogc2V0IHRoZSBvcmRlcmluZyBkaXJlY3Rpb24gdG8gYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmcsIHJlc3BlY3RpdmVseS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihmaWVsZCwgZGlyZWN0aW9uID0gJ0FTQ0VORElORycpIHtcbiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIHRoZSBwcm90byByZXByZXNlbnRhdGlvbiBmb3IgdGhpcyBmaWVsZCBvcmRlci5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRvUHJvdG8oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZDoge1xuICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogdGhpcy5maWVsZC5mb3JtYXR0ZWROYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogdGhpcy5kaXJlY3Rpb24sXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5GaWVsZE9yZGVyID0gRmllbGRPcmRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpZWxkLW9yZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/field-order.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/filter-internal.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/filter-internal.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FilterInternal = void 0;\nclass FilterInternal {\n}\nexports.FilterInternal = FilterInternal;\n//# sourceMappingURL=filter-internal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3JlZmVyZW5jZS9maWx0ZXItaW50ZXJuYWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3JlZmVyZW5jZS9maWx0ZXItaW50ZXJuYWwuanM/NzYwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbHRlckludGVybmFsID0gdm9pZCAwO1xuY2xhc3MgRmlsdGVySW50ZXJuYWwge1xufVxuZXhwb3J0cy5GaWx0ZXJJbnRlcm5hbCA9IEZpbHRlckludGVybmFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLWludGVybmFsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/filter-internal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/helpers.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/helpers.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateQueryOrder = validateQueryOrder;\nexports.validateQueryOperator = validateQueryOperator;\nexports.validateDocumentReference = validateDocumentReference;\nexports.validateQueryValue = validateQueryValue;\nexports.coalesce = coalesce;\nconst validate_1 = __webpack_require__(/*! ../validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst serializer_1 = __webpack_require__(/*! ../serializer */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/serializer.js\");\nconst document_reference_1 = __webpack_require__(/*! ./document-reference */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/document-reference.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/constants.js\");\n/**\n * Validates the input string as a field order direction.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Order direction to validate.\n * @throws when the direction is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\nfunction validateQueryOrder(arg, op) {\n    // For backwards compatibility, we support both lower and uppercase values.\n    op = typeof op === 'string' ? op.toLowerCase() : op;\n    (0, validate_1.validateEnumValue)(arg, op, Object.keys(constants_1.directionOperators), { optional: true });\n    return op;\n}\n/**\n * Validates the input string as a field comparison operator.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Field comparison operator to validate.\n * @param fieldValue Value that is used in the filter.\n * @throws when the comparison operation is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\nfunction validateQueryOperator(arg, op, fieldValue) {\n    // For backwards compatibility, we support both `=` and `==` for \"equals\".\n    if (op === '=') {\n        op = '==';\n    }\n    (0, validate_1.validateEnumValue)(arg, op, Object.keys(constants_1.comparisonOperators));\n    if (typeof fieldValue === 'number' &&\n        isNaN(fieldValue) &&\n        op !== '==' &&\n        op !== '!=') {\n        throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on NaN.\");\n    }\n    if (fieldValue === null && op !== '==' && op !== '!=') {\n        throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on Null.\");\n    }\n    return op;\n}\n/**\n * Validates that 'value' is a DocumentReference.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @return the DocumentReference if valid\n */\nfunction validateDocumentReference(arg, value) {\n    if (!(value instanceof document_reference_1.DocumentReference)) {\n        throw new Error((0, validate_1.invalidArgumentMessage)(arg, 'DocumentReference'));\n    }\n    return value;\n}\n/**\n * Validates that 'value' can be used as a query value.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\nfunction validateQueryValue(arg, value, allowUndefined) {\n    (0, serializer_1.validateUserInput)(arg, value, 'query constraint', {\n        allowDeletes: 'none',\n        allowTransforms: false,\n        allowUndefined,\n    });\n}\n/**\n * Returns the first non-undefined value or `undefined` if no such value exists.\n * @private\n * @internal\n */\nfunction coalesce(...values) {\n    return values.find(value => value !== undefined);\n}\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3JlZmVyZW5jZS9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQiw2QkFBNkI7QUFDN0IsaUNBQWlDO0FBQ2pDLDBCQUEwQjtBQUMxQixnQkFBZ0I7QUFDaEIsbUJBQW1CLG1CQUFPLENBQUMsdUZBQWE7QUFDeEMscUJBQXFCLG1CQUFPLENBQUMsMkZBQWU7QUFDNUMsNkJBQTZCLG1CQUFPLENBQUMsb0hBQXNCO0FBQzNELG9CQUFvQixtQkFBTyxDQUFDLGtHQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RkFBOEYsZ0JBQWdCO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL2ZpcmVzdG9yZS9idWlsZC9zcmMvcmVmZXJlbmNlL2hlbHBlcnMuanM/YTQ4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlUXVlcnlPcmRlciA9IHZhbGlkYXRlUXVlcnlPcmRlcjtcbmV4cG9ydHMudmFsaWRhdGVRdWVyeU9wZXJhdG9yID0gdmFsaWRhdGVRdWVyeU9wZXJhdG9yO1xuZXhwb3J0cy52YWxpZGF0ZURvY3VtZW50UmVmZXJlbmNlID0gdmFsaWRhdGVEb2N1bWVudFJlZmVyZW5jZTtcbmV4cG9ydHMudmFsaWRhdGVRdWVyeVZhbHVlID0gdmFsaWRhdGVRdWVyeVZhbHVlO1xuZXhwb3J0cy5jb2FsZXNjZSA9IGNvYWxlc2NlO1xuY29uc3QgdmFsaWRhdGVfMSA9IHJlcXVpcmUoXCIuLi92YWxpZGF0ZVwiKTtcbmNvbnN0IHNlcmlhbGl6ZXJfMSA9IHJlcXVpcmUoXCIuLi9zZXJpYWxpemVyXCIpO1xuY29uc3QgZG9jdW1lbnRfcmVmZXJlbmNlXzEgPSByZXF1aXJlKFwiLi9kb2N1bWVudC1yZWZlcmVuY2VcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbi8qKlxuICogVmFsaWRhdGVzIHRoZSBpbnB1dCBzdHJpbmcgYXMgYSBmaWVsZCBvcmRlciBkaXJlY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIGFyZyBUaGUgYXJndW1lbnQgbmFtZSBvciBhcmd1bWVudCBpbmRleCAoZm9yIHZhcmFyZ3MgbWV0aG9kcykuXG4gKiBAcGFyYW0gb3AgT3JkZXIgZGlyZWN0aW9uIHRvIHZhbGlkYXRlLlxuICogQHRocm93cyB3aGVuIHRoZSBkaXJlY3Rpb24gaXMgaW52YWxpZFxuICogQHJldHVybiBhIHZhbGlkYXRlZCBpbnB1dCB2YWx1ZSwgd2hpY2ggbWF5IGJlIGRpZmZlcmVudCBmcm9tIHRoZSBwcm92aWRlZFxuICogdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUXVlcnlPcmRlcihhcmcsIG9wKSB7XG4gICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3ZSBzdXBwb3J0IGJvdGggbG93ZXIgYW5kIHVwcGVyY2FzZSB2YWx1ZXMuXG4gICAgb3AgPSB0eXBlb2Ygb3AgPT09ICdzdHJpbmcnID8gb3AudG9Mb3dlckNhc2UoKSA6IG9wO1xuICAgICgwLCB2YWxpZGF0ZV8xLnZhbGlkYXRlRW51bVZhbHVlKShhcmcsIG9wLCBPYmplY3Qua2V5cyhjb25zdGFudHNfMS5kaXJlY3Rpb25PcGVyYXRvcnMpLCB7IG9wdGlvbmFsOiB0cnVlIH0pO1xuICAgIHJldHVybiBvcDtcbn1cbi8qKlxuICogVmFsaWRhdGVzIHRoZSBpbnB1dCBzdHJpbmcgYXMgYSBmaWVsZCBjb21wYXJpc29uIG9wZXJhdG9yLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSBhcmcgVGhlIGFyZ3VtZW50IG5hbWUgb3IgYXJndW1lbnQgaW5kZXggKGZvciB2YXJhcmdzIG1ldGhvZHMpLlxuICogQHBhcmFtIG9wIEZpZWxkIGNvbXBhcmlzb24gb3BlcmF0b3IgdG8gdmFsaWRhdGUuXG4gKiBAcGFyYW0gZmllbGRWYWx1ZSBWYWx1ZSB0aGF0IGlzIHVzZWQgaW4gdGhlIGZpbHRlci5cbiAqIEB0aHJvd3Mgd2hlbiB0aGUgY29tcGFyaXNvbiBvcGVyYXRpb24gaXMgaW52YWxpZFxuICogQHJldHVybiBhIHZhbGlkYXRlZCBpbnB1dCB2YWx1ZSwgd2hpY2ggbWF5IGJlIGRpZmZlcmVudCBmcm9tIHRoZSBwcm92aWRlZFxuICogdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUXVlcnlPcGVyYXRvcihhcmcsIG9wLCBmaWVsZFZhbHVlKSB7XG4gICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3ZSBzdXBwb3J0IGJvdGggYD1gIGFuZCBgPT1gIGZvciBcImVxdWFsc1wiLlxuICAgIGlmIChvcCA9PT0gJz0nKSB7XG4gICAgICAgIG9wID0gJz09JztcbiAgICB9XG4gICAgKDAsIHZhbGlkYXRlXzEudmFsaWRhdGVFbnVtVmFsdWUpKGFyZywgb3AsIE9iamVjdC5rZXlzKGNvbnN0YW50c18xLmNvbXBhcmlzb25PcGVyYXRvcnMpKTtcbiAgICBpZiAodHlwZW9mIGZpZWxkVmFsdWUgPT09ICdudW1iZXInICYmXG4gICAgICAgIGlzTmFOKGZpZWxkVmFsdWUpICYmXG4gICAgICAgIG9wICE9PSAnPT0nICYmXG4gICAgICAgIG9wICE9PSAnIT0nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcXVlcnkuIFlvdSBjYW4gb25seSBwZXJmb3JtICc9PScgYW5kICchPScgY29tcGFyaXNvbnMgb24gTmFOLlwiKTtcbiAgICB9XG4gICAgaWYgKGZpZWxkVmFsdWUgPT09IG51bGwgJiYgb3AgIT09ICc9PScgJiYgb3AgIT09ICchPScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBxdWVyeS4gWW91IGNhbiBvbmx5IHBlcmZvcm0gJz09JyBhbmQgJyE9JyBjb21wYXJpc29ucyBvbiBOdWxsLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG9wO1xufVxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCAndmFsdWUnIGlzIGEgRG9jdW1lbnRSZWZlcmVuY2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIGFyZyBUaGUgYXJndW1lbnQgbmFtZSBvciBhcmd1bWVudCBpbmRleCAoZm9yIHZhcmFyZ3MgbWV0aG9kcykuXG4gKiBAcGFyYW0gdmFsdWUgVGhlIGFyZ3VtZW50IHRvIHZhbGlkYXRlLlxuICogQHJldHVybiB0aGUgRG9jdW1lbnRSZWZlcmVuY2UgaWYgdmFsaWRcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVEb2N1bWVudFJlZmVyZW5jZShhcmcsIHZhbHVlKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBkb2N1bWVudF9yZWZlcmVuY2VfMS5Eb2N1bWVudFJlZmVyZW5jZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCgwLCB2YWxpZGF0ZV8xLmludmFsaWRBcmd1bWVudE1lc3NhZ2UpKGFyZywgJ0RvY3VtZW50UmVmZXJlbmNlJykpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0ICd2YWx1ZScgY2FuIGJlIHVzZWQgYXMgYSBxdWVyeSB2YWx1ZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKiBAcGFyYW0gYXJnIFRoZSBhcmd1bWVudCBuYW1lIG9yIGFyZ3VtZW50IGluZGV4IChmb3IgdmFyYXJncyBtZXRob2RzKS5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgYXJndW1lbnQgdG8gdmFsaWRhdGUuXG4gKiBAcGFyYW0gYWxsb3dVbmRlZmluZWQgV2hldGhlciB0byBhbGxvdyBuZXN0ZWQgcHJvcGVydGllcyB0aGF0IGFyZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVRdWVyeVZhbHVlKGFyZywgdmFsdWUsIGFsbG93VW5kZWZpbmVkKSB7XG4gICAgKDAsIHNlcmlhbGl6ZXJfMS52YWxpZGF0ZVVzZXJJbnB1dCkoYXJnLCB2YWx1ZSwgJ3F1ZXJ5IGNvbnN0cmFpbnQnLCB7XG4gICAgICAgIGFsbG93RGVsZXRlczogJ25vbmUnLFxuICAgICAgICBhbGxvd1RyYW5zZm9ybXM6IGZhbHNlLFxuICAgICAgICBhbGxvd1VuZGVmaW5lZCxcbiAgICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3Qgbm9uLXVuZGVmaW5lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCBpZiBubyBzdWNoIHZhbHVlIGV4aXN0cy5cbiAqIEBwcml2YXRlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY29hbGVzY2UoLi4udmFsdWVzKSB7XG4gICAgcmV0dXJuIHZhbHVlcy5maW5kKHZhbHVlID0+IHZhbHVlICE9PSB1bmRlZmluZWQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-options.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/query-options.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.QueryOptions = void 0;\nconst deepEqual = __webpack_require__(/*! fast-deep-equal */ \"(rsc)/./node_modules/fast-deep-equal/index.js\");\nconst path_1 = __webpack_require__(/*! ../path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/types.js\");\nconst helpers_1 = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/helpers.js\");\n/**\n * Internal class representing custom Query options.\n *\n * These options are immutable. Modified options can be created using `with()`.\n * @private\n * @internal\n */\nclass QueryOptions {\n    constructor(parentPath, collectionId, converter, allDescendants, filters, fieldOrders, startAt, endAt, limit, limitType, offset, projection, \n    // Whether to select all documents under `parentPath`. By default, only\n    // collections that match `collectionId` are selected.\n    kindless = false, \n    // Whether to require consistent documents when restarting the query. By\n    // default, restarting the query uses the readTime offset of the original\n    // query to provide consistent results.\n    requireConsistency = true) {\n        this.parentPath = parentPath;\n        this.collectionId = collectionId;\n        this.converter = converter;\n        this.allDescendants = allDescendants;\n        this.filters = filters;\n        this.fieldOrders = fieldOrders;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.limit = limit;\n        this.limitType = limitType;\n        this.offset = offset;\n        this.projection = projection;\n        this.kindless = kindless;\n        this.requireConsistency = requireConsistency;\n    }\n    /**\n     * Returns query options for a collection group query.\n     * @private\n     * @internal\n     */\n    static forCollectionGroupQuery(collectionId, converter = (0, types_1.defaultConverter)()) {\n        return new QueryOptions(\n        /*parentPath=*/ path_1.ResourcePath.EMPTY, collectionId, converter, \n        /*allDescendants=*/ true, \n        /*fieldFilters=*/ [], \n        /*fieldOrders=*/ []);\n    }\n    /**\n     * Returns query options for a single-collection query.\n     * @private\n     * @internal\n     */\n    static forCollectionQuery(collectionRef, converter = (0, types_1.defaultConverter)()) {\n        return new QueryOptions(collectionRef.parent(), collectionRef.id, converter, \n        /*allDescendants=*/ false, \n        /*fieldFilters=*/ [], \n        /*fieldOrders=*/ []);\n    }\n    /**\n     * Returns query options for a query that fetches all descendants under the\n     * specified reference.\n     *\n     * @private\n     * @internal\n     */\n    static forKindlessAllDescendants(parent, id, requireConsistency = true) {\n        let options = new QueryOptions(parent, id, (0, types_1.defaultConverter)(), \n        /*allDescendants=*/ true, \n        /*fieldFilters=*/ [], \n        /*fieldOrders=*/ []);\n        options = options.with({\n            kindless: true,\n            requireConsistency,\n        });\n        return options;\n    }\n    /**\n     * Returns the union of the current and the provided options.\n     * @private\n     * @internal\n     */\n    with(settings) {\n        return new QueryOptions((0, helpers_1.coalesce)(settings.parentPath, this.parentPath), (0, helpers_1.coalesce)(settings.collectionId, this.collectionId), this.converter, (0, helpers_1.coalesce)(settings.allDescendants, this.allDescendants), (0, helpers_1.coalesce)(settings.filters, this.filters), (0, helpers_1.coalesce)(settings.fieldOrders, this.fieldOrders), (0, helpers_1.coalesce)(settings.startAt, this.startAt), (0, helpers_1.coalesce)(settings.endAt, this.endAt), (0, helpers_1.coalesce)(settings.limit, this.limit), (0, helpers_1.coalesce)(settings.limitType, this.limitType), (0, helpers_1.coalesce)(settings.offset, this.offset), (0, helpers_1.coalesce)(settings.projection, this.projection), (0, helpers_1.coalesce)(settings.kindless, this.kindless), (0, helpers_1.coalesce)(settings.requireConsistency, this.requireConsistency));\n    }\n    withConverter(converter) {\n        return new QueryOptions(this.parentPath, this.collectionId, converter, this.allDescendants, this.filters, this.fieldOrders, this.startAt, this.endAt, this.limit, this.limitType, this.offset, this.projection);\n    }\n    hasFieldOrders() {\n        return this.fieldOrders.length > 0;\n    }\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        return (other instanceof QueryOptions &&\n            this.parentPath.isEqual(other.parentPath) &&\n            this.filtersEqual(other.filters) &&\n            this.collectionId === other.collectionId &&\n            this.converter === other.converter &&\n            this.allDescendants === other.allDescendants &&\n            this.limit === other.limit &&\n            this.offset === other.offset &&\n            deepEqual(this.fieldOrders, other.fieldOrders) &&\n            deepEqual(this.startAt, other.startAt) &&\n            deepEqual(this.endAt, other.endAt) &&\n            deepEqual(this.projection, other.projection) &&\n            this.kindless === other.kindless &&\n            this.requireConsistency === other.requireConsistency);\n    }\n    filtersEqual(other) {\n        if (this.filters.length !== other.length) {\n            return false;\n        }\n        for (let i = 0; i < other.length; i++) {\n            if (!this.filters[i].isEqual(other[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.QueryOptions = QueryOptions;\n//# sourceMappingURL=query-options.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-snapshot.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/query-snapshot.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.QuerySnapshot = void 0;\nconst validate_1 = __webpack_require__(/*! ../validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\n/**\n * A QuerySnapshot contains zero or more\n * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} objects\n * representing the results of a query. The documents can be accessed as an\n * array via the [documents]{@link QuerySnapshot#documents} property\n * or enumerated using the [forEach]{@link QuerySnapshot#forEach}\n * method. The number of documents can be determined via the\n * [empty]{@link QuerySnapshot#empty} and\n * [size]{@link QuerySnapshot#size} properties.\n *\n * @class QuerySnapshot\n */\nclass QuerySnapshot {\n    /**\n     * @private\n     *\n     * @param _query The originating query.\n     * @param _readTime The time when this query snapshot was obtained.\n     * @param _size The number of documents in the result set.\n     * @param docs A callback returning a sorted array of documents matching\n     * this query\n     * @param changes A callback returning a sorted array of document change\n     * events for this snapshot.\n     */\n    constructor(_query, _readTime, _size, docs, changes) {\n        this._query = _query;\n        this._readTime = _readTime;\n        this._size = _size;\n        this._materializedDocs = null;\n        this._materializedChanges = null;\n        this._docs = null;\n        this._changes = null;\n        this._docs = docs;\n        this._changes = changes;\n    }\n    /**\n     * The query on which you called get() or onSnapshot() in order to get this\n     * QuerySnapshot.\n     *\n     * @type {Query}\n     * @name QuerySnapshot#query\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.limit(10).get().then(querySnapshot => {\n     *   console.log(`Returned first batch of results`);\n     *   let query = querySnapshot.query;\n     *   return query.offset(10).get();\n     * }).then(() => {\n     *   console.log(`Returned second batch of results`);\n     * });\n     * ```\n     */\n    get query() {\n        return this._query;\n    }\n    /**\n     * An array of all the documents in this QuerySnapshot.\n     *\n     * @type {Array.<QueryDocumentSnapshot>}\n     * @name QuerySnapshot#docs\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   let docs = querySnapshot.docs;\n     *   for (let doc of docs) {\n     *     console.log(`Document found at path: ${doc.ref.path}`);\n     *   }\n     * });\n     * ```\n     */\n    get docs() {\n        if (this._materializedDocs) {\n            return this._materializedDocs;\n        }\n        this._materializedDocs = this._docs();\n        this._docs = null;\n        return this._materializedDocs;\n    }\n    /**\n     * True if there are no documents in the QuerySnapshot.\n     *\n     * @type {boolean}\n     * @name QuerySnapshot#empty\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   if (querySnapshot.empty) {\n     *     console.log('No documents found.');\n     *   }\n     * });\n     * ```\n     */\n    get empty() {\n        return this._size === 0;\n    }\n    /**\n     * The number of documents in the QuerySnapshot.\n     *\n     * @type {number}\n     * @name QuerySnapshot#size\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   console.log(`Found ${querySnapshot.size} documents.`);\n     * });\n     * ```\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * The time this query snapshot was obtained.\n     *\n     * @type {Timestamp}\n     * @name QuerySnapshot#readTime\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then((querySnapshot) => {\n     *   let readTime = querySnapshot.readTime;\n     *   console.log(`Query results returned at '${readTime.toDate()}'`);\n     * });\n     * ```\n     */\n    get readTime() {\n        return this._readTime;\n    }\n    /**\n     * Returns an array of the documents changes since the last snapshot. If\n     * this is the first snapshot, all documents will be in the list as added\n     * changes.\n     *\n     * @return {Array.<DocumentChange>}\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.onSnapshot(querySnapshot => {\n     *   let changes = querySnapshot.docChanges();\n     *   for (let change of changes) {\n     *     console.log(`A document was ${change.type}.`);\n     *   }\n     * });\n     * ```\n     */\n    docChanges() {\n        if (this._materializedChanges) {\n            return this._materializedChanges;\n        }\n        this._materializedChanges = this._changes();\n        this._changes = null;\n        return this._materializedChanges;\n    }\n    /**\n     * Enumerates all of the documents in the QuerySnapshot. This is a convenience\n     * method for running the same callback on each {@link QueryDocumentSnapshot}\n     * that is returned.\n     *\n     * @param {function} callback A callback to be called with a\n     * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} for each document in\n     * the snapshot.\n     * @param {*=} thisArg The `this` binding for the callback..\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Document found at path: ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    forEach(callback, thisArg) {\n        (0, validate_1.validateFunction)('callback', callback);\n        for (const doc of this.docs) {\n            callback.call(thisArg, doc);\n        }\n    }\n    /**\n     * Returns true if the document data in this `QuerySnapshot` is equal to the\n     * provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `QuerySnapshot` is equal to the provided\n     * value.\n     */\n    isEqual(other) {\n        // Since the read time is different on every query read, we explicitly\n        // ignore all metadata in this comparison.\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof QuerySnapshot)) {\n            return false;\n        }\n        if (this._size !== other._size) {\n            return false;\n        }\n        if (!this._query.isEqual(other._query)) {\n            return false;\n        }\n        if (this._materializedDocs && !this._materializedChanges) {\n            // If we have only materialized the documents, we compare them first.\n            return ((0, util_1.isArrayEqual)(this.docs, other.docs) &&\n                (0, util_1.isArrayEqual)(this.docChanges(), other.docChanges()));\n        }\n        // Otherwise, we compare the changes first as we expect there to be fewer.\n        return ((0, util_1.isArrayEqual)(this.docChanges(), other.docChanges()) &&\n            (0, util_1.isArrayEqual)(this.docs, other.docs));\n    }\n}\nexports.QuerySnapshot = QuerySnapshot;\n//# sourceMappingURL=query-snapshot.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-snapshot.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-util.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/query-util.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.QueryUtil = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst timestamp_1 = __webpack_require__(/*! ../timestamp */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js\");\nconst document_1 = __webpack_require__(/*! ../document */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst document_change_1 = __webpack_require__(/*! ../document-change */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document-change.js\");\nconst query_profile_1 = __webpack_require__(/*! ../query-profile */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/query-profile.js\");\nconst logger_1 = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\nconst vector_query_1 = __webpack_require__(/*! ./vector-query */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/vector-query.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/types.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/constants.js\");\nconst trace_util_1 = __webpack_require__(/*! ../telemetry/trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js\");\nclass QueryUtil {\n    constructor(\n    /** @private */\n    _firestore, \n    /** @private */\n    _queryOptions, \n    /** @private */\n    _serializer) {\n        this._firestore = _firestore;\n        this._queryOptions = _queryOptions;\n        this._serializer = _serializer;\n    }\n    _getResponse(query, transactionOrReadTime, retryWithCursor = true, explainOptions) {\n        // Capture the error stack to preserve stack tracing across async calls.\n        const stack = Error().stack;\n        return new Promise((resolve, reject) => {\n            const docs = [];\n            const output = {};\n            this._stream(query, transactionOrReadTime, retryWithCursor, explainOptions)\n                .on('error', err => {\n                reject((0, util_1.wrapError)(err, stack));\n            })\n                .on('data', (data) => {\n                if (data.transaction) {\n                    output.transaction = data.transaction;\n                }\n                if (data.readTime) {\n                    output.readTime = data.readTime;\n                }\n                if (data.explainMetrics) {\n                    output.explainMetrics = data.explainMetrics;\n                }\n                if (data.document) {\n                    docs.push(data.document);\n                }\n            })\n                .on('end', () => {\n                if (this._queryOptions.limitType === types_1.LimitType.Last) {\n                    // The results for limitToLast queries need to be flipped since\n                    // we reversed the ordering constraints before sending the query\n                    // to the backend.\n                    docs.reverse();\n                }\n                // Only return a snapshot when we have a readTime\n                // explain queries with analyze !== true will return no documents and no read time\n                const result = output.readTime\n                    ? query._createSnapshot(output.readTime, docs.length, () => docs, () => {\n                        const changes = [];\n                        for (let i = 0; i < docs.length; ++i) {\n                            changes.push(new document_change_1.DocumentChange('added', docs[i], -1, i));\n                        }\n                        return changes;\n                    })\n                    : undefined;\n                resolve({\n                    transaction: output.transaction,\n                    explainMetrics: output.explainMetrics,\n                    result,\n                });\n            });\n        });\n    }\n    // This method exists solely to enable unit tests to mock it.\n    _isPermanentRpcError(err, methodName) {\n        return (0, util_1.isPermanentRpcError)(err, methodName);\n    }\n    _hasRetryTimedOut(methodName, startTime) {\n        const totalTimeout = (0, util_1.getTotalTimeout)(methodName);\n        if (totalTimeout === 0) {\n            return false;\n        }\n        return Date.now() - startTime >= totalTimeout;\n    }\n    stream(query) {\n        if (this._queryOptions.limitType === types_1.LimitType.Last) {\n            throw new Error('Query results for queries that include limitToLast() ' +\n                'constraints cannot be streamed. Use Query.get() instead.');\n        }\n        const responseStream = this._stream(query);\n        const transform = new stream_1.Transform({\n            objectMode: true,\n            transform(chunk, encoding, callback) {\n                callback(undefined, chunk.document);\n            },\n        });\n        responseStream.pipe(transform);\n        responseStream.on('error', e => transform.destroy(e));\n        return transform;\n    }\n    _stream(query, transactionOrReadTime, retryWithCursor = true, explainOptions) {\n        const tag = (0, util_1.requestTag)();\n        const startTime = Date.now();\n        const isExplain = explainOptions !== undefined;\n        const methodName = 'runQuery';\n        let numDocumentsReceived = 0;\n        let lastReceivedDocument = null;\n        let backendStream;\n        const stream = new stream_1.Transform({\n            objectMode: true,\n            transform: (proto, enc, callback) => {\n                var _a;\n                if (proto === constants_1.NOOP_MESSAGE) {\n                    callback(undefined);\n                    return;\n                }\n                const output = {};\n                // Proto comes with zero-length buffer by default\n                if ((_a = proto.transaction) === null || _a === void 0 ? void 0 : _a.length) {\n                    output.transaction = proto.transaction;\n                }\n                if (proto.readTime) {\n                    output.readTime = timestamp_1.Timestamp.fromProto(proto.readTime);\n                }\n                if (proto.document) {\n                    const document = this._firestore.snapshot_(proto.document, proto.readTime);\n                    const finalDoc = new document_1.DocumentSnapshotBuilder(document.ref.withConverter(this._queryOptions.converter));\n                    // Recreate the QueryDocumentSnapshot with the DocumentReference\n                    // containing the original converter.\n                    finalDoc.fieldsProto = document._fieldsProto;\n                    finalDoc.readTime = document.readTime;\n                    finalDoc.createTime = document.createTime;\n                    finalDoc.updateTime = document.updateTime;\n                    lastReceivedDocument = finalDoc.build();\n                    output.document = lastReceivedDocument;\n                }\n                if (proto.explainMetrics) {\n                    output.explainMetrics = query_profile_1.ExplainMetrics._fromProto(proto.explainMetrics, this._serializer);\n                }\n                ++numDocumentsReceived;\n                callback(undefined, output);\n                if (proto.done) {\n                    (0, logger_1.logger)('QueryUtil._stream', tag, 'Trigger Logical Termination.');\n                    this._firestore._traceUtil\n                        .currentSpan()\n                        .addEvent(`Firestore.${methodName}: Received RunQueryResponse.Done.`);\n                    backendStream.unpipe(stream);\n                    backendStream.resume();\n                    backendStream.end();\n                    stream.end();\n                }\n            },\n        });\n        this._firestore\n            .initializeIfNeeded(tag)\n            .then(async () => {\n            // `toProto()` might throw an exception. We rely on the behavior of an\n            // async function to convert this exception into the rejected Promise we\n            // catch below.\n            let request = query.toProto(transactionOrReadTime, explainOptions);\n            let isRetryRequestWithCursor = false;\n            let streamActive;\n            do {\n                streamActive = new util_1.Deferred();\n                this._firestore._traceUtil\n                    .currentSpan()\n                    .addEvent(trace_util_1.SPAN_NAME_RUN_QUERY, {\n                    [trace_util_1.ATTRIBUTE_KEY_IS_TRANSACTIONAL]: !!request.transaction,\n                    [trace_util_1.ATTRIBUTE_KEY_IS_RETRY_WITH_CURSOR]: isRetryRequestWithCursor,\n                });\n                backendStream = await this._firestore.requestStream(methodName, \n                /* bidirectional= */ false, request, tag);\n                backendStream.on('error', err => {\n                    backendStream.unpipe(stream);\n                    // If a non-transactional query failed, attempt to restart.\n                    // Transactional queries are retried via the transaction runner.\n                    // Explain queries are not retried with a cursor. That would produce\n                    // incorrect/partial profiling results.\n                    if (!isExplain &&\n                        !transactionOrReadTime &&\n                        !this._isPermanentRpcError(err, methodName)) {\n                        (0, logger_1.logger)('QueryUtil._stream', tag, 'Query failed with retryable stream error:', err);\n                        this._firestore._traceUtil\n                            .currentSpan()\n                            .addEvent(`${trace_util_1.SPAN_NAME_RUN_QUERY}: Retryable Error.`, {\n                            'error.message': err.message,\n                        });\n                        // Enqueue a \"no-op\" write into the stream and wait for it to be\n                        // read by the downstream consumer. This ensures that all enqueued\n                        // results in the stream are consumed, which will give us an accurate\n                        // value for `lastReceivedDocument`.\n                        stream.write(constants_1.NOOP_MESSAGE, () => {\n                            if (this._hasRetryTimedOut(methodName, startTime)) {\n                                (0, logger_1.logger)('QueryUtil._stream', tag, 'Query failed with retryable stream error but the total retry timeout has exceeded.');\n                                stream.destroy(err);\n                                streamActive.resolve(/* active= */ false);\n                            }\n                            else if (lastReceivedDocument && retryWithCursor) {\n                                if (query instanceof vector_query_1.VectorQuery) {\n                                    throw new Error('Unimplemented: Vector query does not support cursors yet.');\n                                }\n                                (0, logger_1.logger)('Query._stream', tag, 'Query failed with retryable stream error and progress was made receiving ' +\n                                    'documents, so the stream is being retried.');\n                                isRetryRequestWithCursor = true;\n                                // Restart the query but use the last document we received as\n                                // the query cursor. Note that we do not use backoff here. The\n                                // call to `requestStream()` will backoff should the restart\n                                // fail before delivering any results.\n                                let newQuery;\n                                if (!this._queryOptions.limit) {\n                                    newQuery = query;\n                                }\n                                else {\n                                    const newLimit = this._queryOptions.limit - numDocumentsReceived;\n                                    if (this._queryOptions.limitType === undefined ||\n                                        this._queryOptions.limitType === types_1.LimitType.First) {\n                                        newQuery = query.limit(newLimit);\n                                    }\n                                    else {\n                                        newQuery = query.limitToLast(newLimit);\n                                    }\n                                }\n                                if (this._queryOptions.requireConsistency) {\n                                    request = newQuery\n                                        .startAfter(lastReceivedDocument)\n                                        .toProto(lastReceivedDocument.readTime);\n                                }\n                                else {\n                                    request = newQuery\n                                        .startAfter(lastReceivedDocument)\n                                        .toProto();\n                                }\n                                // Set lastReceivedDocument to null before each retry attempt to ensure the retry makes progress\n                                lastReceivedDocument = null;\n                                streamActive.resolve(/* active= */ true);\n                            }\n                            else {\n                                (0, logger_1.logger)('QueryUtil._stream', tag, `Query failed with retryable stream error however either retryWithCursor=\"${retryWithCursor}\", or ` +\n                                    'no progress was made receiving documents, so the stream is being closed.');\n                                stream.destroy(err);\n                                streamActive.resolve(/* active= */ false);\n                            }\n                        });\n                    }\n                    else {\n                        (0, logger_1.logger)('QueryUtil._stream', tag, 'Query failed with stream error:', err);\n                        this._firestore._traceUtil\n                            .currentSpan()\n                            .addEvent(`${trace_util_1.SPAN_NAME_RUN_QUERY}: Error.`, {\n                            'error.message': err.message,\n                        });\n                        stream.destroy(err);\n                        streamActive.resolve(/* active= */ false);\n                    }\n                });\n                backendStream.on('end', () => {\n                    streamActive.resolve(/* active= */ false);\n                });\n                backendStream.resume();\n                backendStream.pipe(stream);\n            } while (await streamActive.promise);\n        })\n            .catch(e => stream.destroy(e));\n        return stream;\n    }\n}\nexports.QueryUtil = QueryUtil;\n//# sourceMappingURL=query-util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/query.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Query = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst query_util_1 = __webpack_require__(/*! ./query-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-util.js\");\nconst index_1 = __webpack_require__(/*! ../index */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/index.js\");\nconst field_order_1 = __webpack_require__(/*! ./field-order */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/field-order.js\");\nconst field_filter_internal_1 = __webpack_require__(/*! ./field-filter-internal */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/field-filter-internal.js\");\nconst composite_filter_internal_1 = __webpack_require__(/*! ./composite-filter-internal */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/composite-filter-internal.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/constants.js\");\nconst document_reference_1 = __webpack_require__(/*! ./document-reference */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/document-reference.js\");\nconst query_snapshot_1 = __webpack_require__(/*! ./query-snapshot */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-snapshot.js\");\nconst serializer_1 = __webpack_require__(/*! ../serializer */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/serializer.js\");\nconst query_profile_1 = __webpack_require__(/*! ../query-profile */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/query-profile.js\");\nconst filter_1 = __webpack_require__(/*! ../filter */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/filter.js\");\nconst path_1 = __webpack_require__(/*! ../path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst helpers_1 = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/helpers.js\");\nconst validate_1 = __webpack_require__(/*! ../validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/types.js\");\nconst aggregate_query_1 = __webpack_require__(/*! ./aggregate-query */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/aggregate-query.js\");\nconst vector_query_1 = __webpack_require__(/*! ./vector-query */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/vector-query.js\");\nconst order_1 = __webpack_require__(/*! ../order */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/order.js\");\nconst types_2 = __webpack_require__(/*! ../types */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/types.js\");\nconst trace_util_1 = __webpack_require__(/*! ../telemetry/trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js\");\n/**\n * A Query refers to a query which you can read or stream from. You can also\n * construct refined Query objects by adding filters and ordering.\n *\n * @class Query\n */\nclass Query {\n    /**\n     * @internal\n     * @private\n     *\n     * @param _firestore The Firestore Database client.\n     * @param _queryOptions Options that define the query.\n     */\n    constructor(\n    /**\n     * @internal\n     * @private\n     **/\n    _firestore, \n    /**\n     * @internal\n     * @private\n     **/\n    _queryOptions) {\n        this._firestore = _firestore;\n        this._queryOptions = _queryOptions;\n        this._serializer = new serializer_1.Serializer(_firestore);\n        this._allowUndefined =\n            !!this._firestore._settings.ignoreUndefinedProperties;\n        this._queryUtil = new query_util_1.QueryUtil(_firestore, _queryOptions, this._serializer);\n    }\n    /**\n     * Extracts field values from the DocumentSnapshot based on the provided\n     * field order.\n     *\n     * @private\n     * @internal\n     * @param documentSnapshot The document to extract the fields from.\n     * @param fieldOrders The field order that defines what fields we should\n     * extract.\n     * @return {Array.<*>} The field values to use.\n     */\n    static _extractFieldValues(documentSnapshot, fieldOrders) {\n        const fieldValues = [];\n        for (const fieldOrder of fieldOrders) {\n            if (index_1.FieldPath.documentId().isEqual(fieldOrder.field)) {\n                fieldValues.push(documentSnapshot.ref);\n            }\n            else {\n                const fieldValue = documentSnapshot.get(fieldOrder.field);\n                if (fieldValue === undefined) {\n                    throw new Error(`Field \"${fieldOrder.field}\" is missing in the provided DocumentSnapshot. ` +\n                        'Please provide a document that contains values for all specified ' +\n                        'orderBy() and where() constraints.');\n                }\n                else {\n                    fieldValues.push(fieldValue);\n                }\n            }\n        }\n        return fieldValues;\n    }\n    /**\n     * The [Firestore]{@link Firestore} instance for the Firestore\n     * database (useful for performing transactions, etc.).\n     *\n     * @type {Firestore}\n     * @name Query#firestore\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   let firestore = documentReference.firestore;\n     *   console.log(`Root location for document is ${firestore.formattedName}`);\n     * });\n     * ```\n     */\n    get firestore() {\n        return this._firestore;\n    }\n    where(fieldPathOrFilter, opStr, value) {\n        let filter;\n        if (fieldPathOrFilter instanceof index_1.Filter) {\n            filter = fieldPathOrFilter;\n        }\n        else {\n            filter = index_1.Filter.where(fieldPathOrFilter, opStr, value);\n        }\n        if (this._queryOptions.startAt || this._queryOptions.endAt) {\n            throw new Error('Cannot specify a where() filter after calling startAt(), ' +\n                'startAfter(), endBefore() or endAt().');\n        }\n        const parsedFilter = this._parseFilter(filter);\n        if (parsedFilter.getFilters().length === 0) {\n            // Return the existing query if not adding any more filters (e.g. an empty composite filter).\n            return this;\n        }\n        const options = this._queryOptions.with({\n            filters: this._queryOptions.filters.concat(parsedFilter),\n        });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * @internal\n     * @private\n     */\n    _parseFilter(filter) {\n        if (filter instanceof filter_1.UnaryFilter) {\n            return this._parseFieldFilter(filter);\n        }\n        return this._parseCompositeFilter(filter);\n    }\n    /**\n     * @internal\n     * @private\n     */\n    _parseFieldFilter(fieldFilterData) {\n        let value = fieldFilterData._getValue();\n        let operator = fieldFilterData._getOperator();\n        const fieldPath = fieldFilterData._getField();\n        (0, path_1.validateFieldPath)('fieldPath', fieldPath);\n        operator = (0, helpers_1.validateQueryOperator)('opStr', operator, value);\n        (0, helpers_1.validateQueryValue)('value', value, this._allowUndefined);\n        const path = index_1.FieldPath.fromArgument(fieldPath);\n        if (index_1.FieldPath.documentId().isEqual(path)) {\n            if (operator === 'array-contains' || operator === 'array-contains-any') {\n                throw new Error(`Invalid Query. You can't perform '${operator}' ` +\n                    'queries on FieldPath.documentId().');\n            }\n            else if (operator === 'in' || operator === 'not-in') {\n                if (!Array.isArray(value) || value.length === 0) {\n                    throw new Error(`Invalid Query. A non-empty array is required for '${operator}' filters.`);\n                }\n                value = value.map(el => this.validateReference(el));\n            }\n            else {\n                value = this.validateReference(value);\n            }\n        }\n        return new field_filter_internal_1.FieldFilterInternal(this._serializer, path, constants_1.comparisonOperators[operator], value);\n    }\n    /**\n     * @internal\n     * @private\n     */\n    _parseCompositeFilter(compositeFilterData) {\n        const parsedFilters = compositeFilterData\n            ._getFilters()\n            .map(filter => this._parseFilter(filter))\n            .filter(parsedFilter => parsedFilter.getFilters().length > 0);\n        // For composite filters containing 1 filter, return the only filter.\n        // For example: AND(FieldFilter1) == FieldFilter1\n        if (parsedFilters.length === 1) {\n            return parsedFilters[0];\n        }\n        return new composite_filter_internal_1.CompositeFilterInternal(parsedFilters, compositeFilterData._getOperator() === 'AND' ? 'AND' : 'OR');\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} instance that applies a\n     * field mask to the result and returns only the specified subset of fields.\n     * You can specify a list of field paths to return, or use an empty list to\n     * only return the references of matching documents.\n     *\n     * Queries that contain field masks cannot be listened to via `onSnapshot()`\n     * listeners.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the field mask.\n     *\n     * @param {...(string|FieldPath)} fieldPaths The field paths to return.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     * let documentRef = collectionRef.doc('doc');\n     *\n     * return documentRef.set({x:10, y:5}).then(() => {\n     *   return collectionRef.where('x', '>', 5).select('y').get();\n     * }).then((res) => {\n     *   console.log(`y is ${res.docs[0].get('y')}.`);\n     * });\n     * ```\n     */\n    select(...fieldPaths) {\n        const fields = [];\n        if (fieldPaths.length === 0) {\n            fields.push({ fieldPath: index_1.FieldPath.documentId().formattedName });\n        }\n        else {\n            for (let i = 0; i < fieldPaths.length; ++i) {\n                (0, path_1.validateFieldPath)(i, fieldPaths[i]);\n                fields.push({\n                    fieldPath: index_1.FieldPath.fromArgument(fieldPaths[i]).formattedName,\n                });\n            }\n        }\n        // By specifying a field mask, the query result no longer conforms to type\n        // `T`. We there return `Query<DocumentData>`;\n        const options = this._queryOptions.with({\n            projection: { fields },\n        });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that's additionally sorted\n     * by the specified field, optionally in descending order instead of\n     * ascending.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the field mask.\n     *\n     * @param {string|FieldPath} fieldPath The field to sort by.\n     * @param {string=} directionStr Optional direction to sort by ('asc' or\n     * 'desc'). If not specified, order will be ascending.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.orderBy('foo', 'desc').get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    orderBy(fieldPath, directionStr) {\n        (0, path_1.validateFieldPath)('fieldPath', fieldPath);\n        directionStr = (0, helpers_1.validateQueryOrder)('directionStr', directionStr);\n        if (this._queryOptions.startAt || this._queryOptions.endAt) {\n            throw new Error('Cannot specify an orderBy() constraint after calling ' +\n                'startAt(), startAfter(), endBefore() or endAt().');\n        }\n        const newOrder = new field_order_1.FieldOrder(index_1.FieldPath.fromArgument(fieldPath), constants_1.directionOperators[directionStr || 'asc']);\n        const options = this._queryOptions.with({\n            fieldOrders: this._queryOptions.fieldOrders.concat(newOrder),\n        });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that only returns the\n     * first matching documents.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the limit.\n     *\n     * @param {number} limit The maximum number of items to return.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limit(1).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    limit(limit) {\n        (0, validate_1.validateInteger)('limit', limit);\n        const options = this._queryOptions.with({\n            limit,\n            limitType: types_1.LimitType.First,\n        });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that only returns the\n     * last matching documents.\n     *\n     * You must specify at least one orderBy clause for limitToLast queries,\n     * otherwise an exception will be thrown during execution.\n     *\n     * Results for limitToLast queries cannot be streamed via the `stream()` API.\n     *\n     * @param limit The maximum number of items to return.\n     * @return The created Query.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limitToLast(1).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Last matching document is ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    limitToLast(limit) {\n        (0, validate_1.validateInteger)('limitToLast', limit);\n        const options = this._queryOptions.with({ limit, limitType: types_1.LimitType.Last });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Specifies the offset of the returned results.\n     *\n     * This function returns a new (immutable) instance of the\n     * [Query]{@link Query} (rather than modify the existing instance)\n     * to impose the offset.\n     *\n     * @param {number} offset The offset to apply to the Query results\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limit(10).offset(20).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    offset(offset) {\n        (0, validate_1.validateInteger)('offset', offset);\n        const options = this._queryOptions.with({ offset });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Returns a query that counts the documents in the result set of this\n     * query.\n     *\n     * The returned query, when executed, counts the documents in the result set\n     * of this query without actually downloading the documents.\n     *\n     * Using the returned query to count the documents is efficient because only\n     * the final count, not the documents' data, is downloaded. The returned\n     * query can count the documents in cases where the result set is\n     * prohibitively large to download entirely (thousands of documents).\n     *\n     * @return a query that counts the documents in the result set of this\n     * query. The count can be retrieved from `snapshot.data().count`, where\n     * `snapshot` is the `AggregateQuerySnapshot` resulting from running the\n     * returned query.\n     */\n    count() {\n        return this.aggregate({\n            count: index_1.AggregateField.count(),\n        });\n    }\n    /**\n     * Returns a query that can perform the given aggregations.\n     *\n     * The returned query, when executed, calculates the specified aggregations\n     * over the documents in the result set of this query without actually\n     * downloading the documents.\n     *\n     * Using the returned query to perform aggregations is efficient because only\n     * the final aggregation values, not the documents' data, is downloaded. The\n     * returned query can perform aggregations of the documents count the\n     * documents in cases where the result set is prohibitively large to download\n     * entirely (thousands of documents).\n     *\n     * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n     * to perform over the result set. The AggregateSpec specifies aliases for each\n     * aggregate, which can be used to retrieve the aggregate result.\n     * @example\n     * ```typescript\n     * const aggregateQuery = col.aggregate(query, {\n     *   countOfDocs: count(),\n     *   totalHours: sum('hours'),\n     *   averageScore: average('score')\n     * });\n     *\n     * const aggregateSnapshot = await aggregateQuery.get();\n     * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n     * const totalHours: number = aggregateSnapshot.data().totalHours;\n     * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n     * ```\n     */\n    aggregate(aggregateSpec) {\n        return new aggregate_query_1.AggregateQuery(this, aggregateSpec);\n    }\n    findNearest(vectorFieldOrOptions, queryVector, options) {\n        if (typeof vectorFieldOrOptions === 'string' ||\n            vectorFieldOrOptions instanceof index_1.FieldPath) {\n            const vqOptions = {\n                distanceMeasure: options.distanceMeasure,\n                limit: options.limit,\n                queryVector: queryVector,\n                vectorField: vectorFieldOrOptions,\n            };\n            return this._findNearest(vqOptions);\n        }\n        else {\n            return this._findNearest(vectorFieldOrOptions);\n        }\n    }\n    _findNearest(options) {\n        (0, path_1.validateFieldPath)('vectorField', options.vectorField);\n        if (options.limit <= 0) {\n            throw (0, validate_1.invalidArgumentMessage)('limit', 'positive limit number');\n        }\n        if ((Array.isArray(options.queryVector)\n            ? options.queryVector.length\n            : options.queryVector.toArray().length) === 0) {\n            throw (0, validate_1.invalidArgumentMessage)('queryVector', 'vector size must be larger than 0');\n        }\n        return new vector_query_1.VectorQuery(this, options);\n    }\n    /**\n     * Returns true if this `Query` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `Query` is equal to the provided value.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        return (other instanceof Query && this._queryOptions.isEqual(other._queryOptions));\n    }\n    /**\n     * Returns the sorted array of inequality filter fields used in this query.\n     *\n     * @return An array of inequality filter fields sorted lexicographically by FieldPath.\n     */\n    getInequalityFilterFields() {\n        const inequalityFields = [];\n        for (const filter of this._queryOptions.filters) {\n            for (const subFilter of filter.getFlattenedFilters()) {\n                if (subFilter.isInequalityFilter()) {\n                    inequalityFields.push(subFilter.field);\n                }\n            }\n        }\n        return inequalityFields.sort((a, b) => a.compareTo(b));\n    }\n    /**\n     * Computes the backend ordering semantics for DocumentSnapshot cursors.\n     *\n     * @private\n     * @internal\n     * @param cursorValuesOrDocumentSnapshot The snapshot of the document or the\n     * set of field values to use as the boundary.\n     * @returns The implicit ordering semantics.\n     */\n    createImplicitOrderBy(cursorValuesOrDocumentSnapshot) {\n        // Add an implicit orderBy if the only cursor value is a DocumentSnapshot.\n        if (cursorValuesOrDocumentSnapshot.length !== 1 ||\n            !(cursorValuesOrDocumentSnapshot[0] instanceof index_1.DocumentSnapshot)) {\n            return this._queryOptions.fieldOrders;\n        }\n        const fieldOrders = this._queryOptions.fieldOrders.slice();\n        const fieldsNormalized = new Set([\n            ...fieldOrders.map(item => item.field.toString()),\n        ]);\n        /** The order of the implicit ordering always matches the last explicit order by. */\n        const lastDirection = fieldOrders.length === 0\n            ? constants_1.directionOperators.ASC\n            : fieldOrders[fieldOrders.length - 1].direction;\n        /**\n         * Any inequality fields not explicitly ordered should be implicitly ordered in a\n         * lexicographical order. When there are multiple inequality filters on the same field, the\n         * field should be added only once.\n         * Note: getInequalityFilterFields function sorts the key field before\n         * other fields. However, we want the key field to be sorted last.\n         */\n        const inequalityFields = this.getInequalityFilterFields();\n        for (const field of inequalityFields) {\n            if (!fieldsNormalized.has(field.toString()) &&\n                !field.isEqual(index_1.FieldPath.documentId())) {\n                fieldOrders.push(new field_order_1.FieldOrder(field, lastDirection));\n                fieldsNormalized.add(field.toString());\n            }\n        }\n        // Add the document key field to the last if it is not explicitly ordered.\n        if (!fieldsNormalized.has(index_1.FieldPath.documentId().toString())) {\n            fieldOrders.push(new field_order_1.FieldOrder(index_1.FieldPath.documentId(), lastDirection));\n        }\n        return fieldOrders;\n    }\n    /**\n     * Builds a Firestore 'Position' proto message.\n     *\n     * @private\n     * @internal\n     * @param {Array.<FieldOrder>} fieldOrders The field orders to use for this\n     * cursor.\n     * @param {Array.<DocumentSnapshot|*>} cursorValuesOrDocumentSnapshot The\n     * snapshot of the document or the set of field values to use as the boundary.\n     * @param before Whether the query boundary lies just before or after the\n     * provided data.\n     * @returns {Object} The proto message.\n     */\n    createCursor(fieldOrders, cursorValuesOrDocumentSnapshot, before) {\n        let fieldValues;\n        if (cursorValuesOrDocumentSnapshot.length === 1 &&\n            cursorValuesOrDocumentSnapshot[0] instanceof index_1.DocumentSnapshot) {\n            fieldValues = Query._extractFieldValues(cursorValuesOrDocumentSnapshot[0], fieldOrders);\n        }\n        else {\n            fieldValues = cursorValuesOrDocumentSnapshot;\n        }\n        if (fieldValues.length > fieldOrders.length) {\n            throw new Error('Too many cursor values specified. The specified ' +\n                'values must match the orderBy() constraints of the query.');\n        }\n        const options = { values: [], before };\n        for (let i = 0; i < fieldValues.length; ++i) {\n            let fieldValue = fieldValues[i];\n            if (index_1.FieldPath.documentId().isEqual(fieldOrders[i].field)) {\n                fieldValue = this.validateReference(fieldValue);\n            }\n            (0, helpers_1.validateQueryValue)(i, fieldValue, this._allowUndefined);\n            options.values.push(this._serializer.encodeValue(fieldValue));\n        }\n        return options;\n    }\n    /**\n     * Validates that a value used with FieldValue.documentId() is either a\n     * string or a DocumentReference that is part of the query`s result set.\n     * Throws a validation error or returns a DocumentReference that can\n     * directly be used in the Query.\n     *\n     * @param val The value to validate.\n     * @throws If the value cannot be used for this query.\n     * @return If valid, returns a DocumentReference that can be used with the\n     * query.\n     * @private\n     * @internal\n     */\n    validateReference(val) {\n        const basePath = this._queryOptions.allDescendants\n            ? this._queryOptions.parentPath\n            : this._queryOptions.parentPath.append(this._queryOptions.collectionId);\n        let reference;\n        if (typeof val === 'string') {\n            const path = basePath.append(val);\n            if (this._queryOptions.allDescendants) {\n                if (!path.isDocument) {\n                    throw new Error('When querying a collection group and ordering by ' +\n                        'FieldPath.documentId(), the corresponding value must result in ' +\n                        `a valid document path, but '${val}' is not because it ` +\n                        'contains an odd number of segments.');\n                }\n            }\n            else if (val.indexOf('/') !== -1) {\n                throw new Error('When querying a collection and ordering by FieldPath.documentId(), ' +\n                    `the corresponding value must be a plain document ID, but '${val}' ` +\n                    'contains a slash.');\n            }\n            reference = new document_reference_1.DocumentReference(this._firestore, basePath.append(val), this._queryOptions.converter);\n        }\n        else if (val instanceof document_reference_1.DocumentReference) {\n            reference = val;\n            if (!basePath.isPrefixOf(reference._path)) {\n                throw new Error(`\"${reference.path}\" is not part of the query result set and ` +\n                    'cannot be used as a query boundary.');\n            }\n        }\n        else {\n            throw new Error('The corresponding value for FieldPath.documentId() must be a ' +\n                `string or a DocumentReference, but was \"${val}\".`);\n        }\n        if (!this._queryOptions.allDescendants &&\n            reference._path.parent().compareTo(basePath) !== 0) {\n            throw new Error('Only a direct child can be used as a query boundary. ' +\n                `Found: \"${reference.path}\".`);\n        }\n        return reference;\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that starts at the provided\n     * set of field values relative to the order of the query. The order of the\n     * provided values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should start at or the field values to\n     * start this query at, in order of the query's order by.\n     * @returns {Query} A query with the new starting point.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').startAt(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    startAt(...fieldValuesOrDocumentSnapshot) {\n        (0, validate_1.validateMinNumberOfArguments)('Query.startAt', fieldValuesOrDocumentSnapshot, 1);\n        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n        const startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);\n        const options = this._queryOptions.with({ fieldOrders, startAt });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that starts after the\n     * provided set of field values relative to the order of the query. The order\n     * of the provided values must match the order of the order by clauses of the\n     * query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should start after or the field values to\n     * start this query after, in order of the query's order by.\n     * @returns {Query} A query with the new starting point.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').startAfter(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    startAfter(...fieldValuesOrDocumentSnapshot) {\n        (0, validate_1.validateMinNumberOfArguments)('Query.startAfter', fieldValuesOrDocumentSnapshot, 1);\n        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n        const startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);\n        const options = this._queryOptions.with({ fieldOrders, startAt });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that ends before the set of\n     * field values relative to the order of the query. The order of the provided\n     * values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should end before or the field values to\n     * end this query before, in order of the query's order by.\n     * @returns {Query} A query with the new ending point.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').endBefore(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    endBefore(...fieldValuesOrDocumentSnapshot) {\n        (0, validate_1.validateMinNumberOfArguments)('Query.endBefore', fieldValuesOrDocumentSnapshot, 1);\n        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n        const endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);\n        const options = this._queryOptions.with({ fieldOrders, endAt });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that ends at the provided\n     * set of field values relative to the order of the query. The order of the\n     * provided values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should end at or the field values to end\n     * this query at, in order of the query's order by.\n     * @returns {Query} A query with the new ending point.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').endAt(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    endAt(...fieldValuesOrDocumentSnapshot) {\n        (0, validate_1.validateMinNumberOfArguments)('Query.endAt', fieldValuesOrDocumentSnapshot, 1);\n        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n        const endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);\n        const options = this._queryOptions.with({ fieldOrders, endAt });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Executes the query and returns the results as a\n     * [QuerySnapshot]{@link QuerySnapshot}.\n     *\n     * @returns {Promise.<QuerySnapshot>} A Promise that resolves with the results\n     * of the Query.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    async get() {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_QUERY_GET, async () => {\n            const { result } = await this._get();\n            return result;\n        });\n    }\n    /**\n     * Plans and optionally executes this query. Returns a Promise that will be\n     * resolved with the planner information, statistics from the query execution (if any),\n     * and the query results (if any).\n     *\n     * @return A Promise that will be resolved with the planner information, statistics\n     *  from the query execution (if any), and the query results (if any).\n     */\n    async explain(options) {\n        if (options === undefined) {\n            options = {};\n        }\n        const { result, explainMetrics } = await this._getResponse(undefined, options);\n        if (!explainMetrics) {\n            throw new Error('No explain results');\n        }\n        return new query_profile_1.ExplainResults(explainMetrics, result || null);\n    }\n    /**\n     * Internal get() method that accepts an optional transaction options, and\n     * returns a query snapshot with transaction and explain metadata.\n     *\n     * @private\n     * @internal\n     * @param transactionOrReadTime A transaction ID, options to start a new\n     *  transaction, or timestamp to use as read time.\n     */\n    async _get(transactionOrReadTime) {\n        const result = await this._getResponse(transactionOrReadTime);\n        if (!result.result) {\n            throw new Error('No QuerySnapshot result');\n        }\n        return result;\n    }\n    _getResponse(transactionOrReadTime, explainOptions) {\n        return this._queryUtil._getResponse(this, transactionOrReadTime, true, explainOptions);\n    }\n    /**\n     * Executes the query and streams the results as\n     * [QueryDocumentSnapshots]{@link QueryDocumentSnapshot}.\n     *\n     * @returns {Stream.<QueryDocumentSnapshot>} A stream of\n     * QueryDocumentSnapshots.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let count = 0;\n     *\n     * query.stream().on('data', (documentSnapshot) => {\n     *   console.log(`Found document with name '${documentSnapshot.id}'`);\n     *   ++count;\n     * }).on('end', () => {\n     *   console.log(`Total count is ${count}`);\n     * });\n     * ```\n     */\n    stream() {\n        return this._queryUtil.stream(this);\n    }\n    /**\n     * Executes the query and streams the results as the following object:\n     * {document?: DocumentSnapshot, metrics?: ExplainMetrics}\n     *\n     * The stream surfaces documents one at a time as they are received from the\n     * server, and at the end, it will surface the metrics associated with\n     * executing the query.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let count = 0;\n     *\n     * query.explainStream({analyze: true}).on('data', (data) => {\n     *   if (data.document) {\n     *     // Use data.document which is a DocumentSnapshot instance.\n     *     console.log(`Found document with name '${data.document.id}'`);\n     *     ++count;\n     *   }\n     *   if (data.metrics) {\n     *     // Use data.metrics which is an ExplainMetrics instance.\n     *   }\n     * }).on('end', () => {\n     *   console.log(`Received ${count} documents.`);\n     * });\n     * ```\n     */\n    explainStream(explainOptions) {\n        if (explainOptions === undefined) {\n            explainOptions = {};\n        }\n        if (this._queryOptions.limitType === types_1.LimitType.Last) {\n            throw new Error('Query results for queries that include limitToLast() ' +\n                'constraints cannot be streamed. Use Query.explain() instead.');\n        }\n        const responseStream = this._stream(undefined, explainOptions);\n        const transform = new stream_1.Transform({\n            objectMode: true,\n            transform(chunk, encoding, callback) {\n                if (chunk.document || chunk.explainMetrics) {\n                    callback(undefined, {\n                        document: chunk.document,\n                        metrics: chunk.explainMetrics,\n                    });\n                }\n            },\n        });\n        responseStream.pipe(transform);\n        responseStream.on('error', e => transform.destroy(e));\n        return transform;\n    }\n    /**\n     * Converts a QueryCursor to its proto representation.\n     *\n     * @param cursor The original cursor value\n     * @private\n     * @internal\n     */\n    toCursor(cursor) {\n        if (cursor) {\n            return cursor.before\n                ? { before: true, values: cursor.values }\n                : { values: cursor.values };\n        }\n        return undefined;\n    }\n    /**\n     * Internal method for serializing a query to its RunQuery proto\n     * representation with an optional transaction id or read time.\n     *\n     * @param transactionOrReadTime A transaction ID, options to start a new\n     *  transaction, or timestamp to use as read time.\n     * @param explainOptions Options to use for explaining the query (if any).\n     * @private\n     * @internal\n     * @returns Serialized JSON for the query.\n     */\n    toProto(transactionOrReadTime, explainOptions) {\n        const projectId = this.firestore.projectId;\n        const databaseId = this.firestore.databaseId;\n        const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(projectId, databaseId);\n        const structuredQuery = this.toStructuredQuery();\n        // For limitToLast queries, the structured query has to be translated to a version with\n        // reversed ordered, and flipped startAt/endAt to work properly.\n        if (this._queryOptions.limitType === types_1.LimitType.Last) {\n            if (!this._queryOptions.hasFieldOrders()) {\n                throw new Error('limitToLast() queries require specifying at least one orderBy() clause.');\n            }\n            structuredQuery.orderBy = this._queryOptions.fieldOrders.map(order => {\n                // Flip the orderBy directions since we want the last results\n                const dir = order.direction === 'DESCENDING' ? 'ASCENDING' : 'DESCENDING';\n                return new field_order_1.FieldOrder(order.field, dir).toProto();\n            });\n            // Swap the cursors to match the now-flipped query ordering.\n            structuredQuery.startAt = this._queryOptions.endAt\n                ? this.toCursor({\n                    values: this._queryOptions.endAt.values,\n                    before: !this._queryOptions.endAt.before,\n                })\n                : undefined;\n            structuredQuery.endAt = this._queryOptions.startAt\n                ? this.toCursor({\n                    values: this._queryOptions.startAt.values,\n                    before: !this._queryOptions.startAt.before,\n                })\n                : undefined;\n        }\n        const runQueryRequest = {\n            parent: parentPath.formattedName,\n            structuredQuery,\n        };\n        if (transactionOrReadTime instanceof Uint8Array) {\n            runQueryRequest.transaction = transactionOrReadTime;\n        }\n        else if (transactionOrReadTime instanceof index_1.Timestamp) {\n            runQueryRequest.readTime = transactionOrReadTime.toProto().timestampValue;\n        }\n        else if (transactionOrReadTime) {\n            runQueryRequest.newTransaction = transactionOrReadTime;\n        }\n        if (explainOptions) {\n            runQueryRequest.explainOptions = explainOptions;\n        }\n        return runQueryRequest;\n    }\n    /**\n     * Converts current Query to an IBundledQuery.\n     *\n     * @private\n     * @internal\n     */\n    _toBundledQuery() {\n        const projectId = this.firestore.projectId;\n        const databaseId = this.firestore.databaseId;\n        const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(projectId, databaseId);\n        const structuredQuery = this.toStructuredQuery();\n        const bundledQuery = {\n            parent: parentPath.formattedName,\n            structuredQuery,\n        };\n        if (this._queryOptions.limitType === types_1.LimitType.First) {\n            bundledQuery.limitType = 'FIRST';\n        }\n        else if (this._queryOptions.limitType === types_1.LimitType.Last) {\n            bundledQuery.limitType = 'LAST';\n        }\n        return bundledQuery;\n    }\n    toStructuredQuery() {\n        const structuredQuery = {\n            from: [{}],\n        };\n        if (this._queryOptions.allDescendants) {\n            structuredQuery.from[0].allDescendants = true;\n        }\n        // Kindless queries select all descendant documents, so we remove the\n        // collectionId field.\n        if (!this._queryOptions.kindless) {\n            structuredQuery.from[0].collectionId = this._queryOptions.collectionId;\n        }\n        if (this._queryOptions.filters.length >= 1) {\n            structuredQuery.where = new composite_filter_internal_1.CompositeFilterInternal(this._queryOptions.filters, 'AND').toProto();\n        }\n        if (this._queryOptions.hasFieldOrders()) {\n            structuredQuery.orderBy = this._queryOptions.fieldOrders.map(o => o.toProto());\n        }\n        structuredQuery.startAt = this.toCursor(this._queryOptions.startAt);\n        structuredQuery.endAt = this.toCursor(this._queryOptions.endAt);\n        if (this._queryOptions.limit) {\n            structuredQuery.limit = { value: this._queryOptions.limit };\n        }\n        structuredQuery.offset = this._queryOptions.offset;\n        structuredQuery.select = this._queryOptions.projection;\n        return structuredQuery;\n    }\n    /**\n     * @internal\n     * @private\n     * This method exists solely to maintain backward compatability.\n     */\n    _isPermanentRpcError(err, methodName) {\n        return this._queryUtil._isPermanentRpcError(err, methodName);\n    }\n    /**\n     * @internal\n     * @private\n     * This method exists solely to maintain backward compatability.\n     */\n    _hasRetryTimedOut(methodName, startTime) {\n        return this._queryUtil._hasRetryTimedOut(methodName, startTime);\n    }\n    /**\n     * Internal streaming method that accepts an optional transaction ID.\n     *\n     * BEWARE: If `transactionOrReadTime` is `ITransactionOptions`, then the first\n     * response in the stream will be a transaction response.\n     *\n     * @param transactionOrReadTime A transaction ID, options to start a new\n     *  transaction, or timestamp to use as read time.\n     * @param explainOptions Options to use for explaining the query (if any).\n     * @private\n     * @internal\n     * @returns A stream of document results, optionally preceded by a transaction response.\n     */\n    _stream(transactionOrReadTime, explainOptions) {\n        return this._queryUtil._stream(this, transactionOrReadTime, true, explainOptions);\n    }\n    /**\n     * Attaches a listener for QuerySnapshot events.\n     *\n     * @param {querySnapshotCallback} onNext A callback to be called every time\n     * a new [QuerySnapshot]{@link QuerySnapshot} is available.\n     * @param {errorCallback=} onError A callback to be called if the listen\n     * fails or is cancelled. No further callbacks will occur.\n     *\n     * @returns {function()} An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   console.log(`Received query snapshot of size ${querySnapshot.size}`);\n     * }, err => {\n     *   console.log(`Encountered error: ${err}`);\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    onSnapshot(onNext, onError) {\n        (0, validate_1.validateFunction)('onNext', onNext);\n        (0, validate_1.validateFunction)('onError', onError, { optional: true });\n        const watch = new ((__webpack_require__(/*! ../watch */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/watch.js\").QueryWatch))(this.firestore, this, this._queryOptions.converter);\n        return watch.onSnapshot((readTime, size, docs, changes) => {\n            onNext(new query_snapshot_1.QuerySnapshot(this, readTime, size, docs, changes));\n        }, onError || console.error);\n    }\n    /**\n     * Returns a function that can be used to sort QueryDocumentSnapshots\n     * according to the sort criteria of this query.\n     *\n     * @private\n     * @internal\n     */\n    comparator() {\n        return (doc1, doc2) => {\n            // Add implicit sorting by name, using the last specified direction.\n            const lastDirection = this._queryOptions.hasFieldOrders()\n                ? this._queryOptions.fieldOrders[this._queryOptions.fieldOrders.length - 1].direction\n                : 'ASCENDING';\n            const orderBys = this._queryOptions.fieldOrders.concat(new field_order_1.FieldOrder(index_1.FieldPath.documentId(), lastDirection));\n            for (const orderBy of orderBys) {\n                let comp;\n                if (index_1.FieldPath.documentId().isEqual(orderBy.field)) {\n                    comp = doc1.ref._path.compareTo(doc2.ref._path);\n                }\n                else {\n                    const v1 = doc1.protoField(orderBy.field);\n                    const v2 = doc2.protoField(orderBy.field);\n                    if (v1 === undefined || v2 === undefined) {\n                        throw new Error('Trying to compare documents on fields that ' +\n                            \"don't exist. Please include the fields you are ordering on \" +\n                            'in your select() call.');\n                    }\n                    comp = (0, order_1.compare)(v1, v2);\n                }\n                if (comp !== 0) {\n                    const direction = orderBy.direction === 'ASCENDING' ? 1 : -1;\n                    return direction * comp;\n                }\n            }\n            return 0;\n        };\n    }\n    /**\n     * Applies a custom data converter to this Query, allowing you to use your\n     * own custom model objects with Firestore. When you call get() on the\n     * returned Query, the provided converter will convert between Firestore\n     * data of type `NewDbModelType` and your custom type `NewAppModelType`.\n     *\n     * Using the converter allows you to specify generic type arguments when\n     * storing and retrieving objects from Firestore.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @example\n     * ```\n     * class Post {\n     *   constructor(readonly title: string, readonly author: string) {}\n     *\n     *   toString(): string {\n     *     return this.title + ', by ' + this.author;\n     *   }\n     * }\n     *\n     * const postConverter = {\n     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n     *     return {title: post.title, author: post.author};\n     *   },\n     *   fromFirestore(\n     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n     *   ): Post {\n     *     const data = snapshot.data();\n     *     return new Post(data.title, data.author);\n     *   }\n     * };\n     *\n     * const postSnap = await Firestore()\n     *   .collection('posts')\n     *   .withConverter(postConverter)\n     *   .doc().get();\n     * const post = postSnap.data();\n     * if (post !== undefined) {\n     *   post.title; // string\n     *   post.toString(); // Should be defined\n     *   post.someNonExistentProperty; // TS error\n     * }\n     *\n     * ```\n     * @param {FirestoreDataConverter | null} converter Converts objects to and\n     * from Firestore. Passing in `null` removes the current converter.\n     * @return A Query that uses the provided converter.\n     */\n    withConverter(converter) {\n        return new Query(this.firestore, this._queryOptions.withConverter(converter !== null && converter !== void 0 ? converter : (0, types_2.defaultConverter)()));\n    }\n    /**\n     * Construct the resulting snapshot for this query with given documents.\n     *\n     * @private\n     * @internal\n     */\n    _createSnapshot(readTime, size, docs, changes) {\n        return new query_snapshot_1.QuerySnapshot(this, readTime, size, docs, changes);\n    }\n}\nexports.Query = Query;\n//# sourceMappingURL=query.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/types.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/types.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LimitType = void 0;\n/*!\n * Denotes whether a provided limit is applied to the beginning or the end of\n * the result set.\n */\nvar LimitType;\n(function (LimitType) {\n    LimitType[LimitType[\"First\"] = 0] = \"First\";\n    LimitType[LimitType[\"Last\"] = 1] = \"Last\";\n})(LimitType || (exports.LimitType = LimitType = {}));\n/**\n * onSnapshot() callback that receives a QuerySnapshot.\n *\n * @callback querySnapshotCallback\n * @param {QuerySnapshot} snapshot A query snapshot.\n */\n/**\n * onSnapshot() callback that receives a DocumentSnapshot.\n *\n * @callback documentSnapshotCallback\n * @param {DocumentSnapshot} snapshot A document snapshot.\n */\n/**\n * onSnapshot() callback that receives an error.\n *\n * @callback errorCallback\n * @param {Error} err An error from a listen.\n */\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3JlZmVyZW5jZS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0JBQWdCLGlCQUFpQixpQkFBaUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL2ZpcmVzdG9yZS9idWlsZC9zcmMvcmVmZXJlbmNlL3R5cGVzLmpzPzZjNWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaW1pdFR5cGUgPSB2b2lkIDA7XG4vKiFcbiAqIERlbm90ZXMgd2hldGhlciBhIHByb3ZpZGVkIGxpbWl0IGlzIGFwcGxpZWQgdG8gdGhlIGJlZ2lubmluZyBvciB0aGUgZW5kIG9mXG4gKiB0aGUgcmVzdWx0IHNldC5cbiAqL1xudmFyIExpbWl0VHlwZTtcbihmdW5jdGlvbiAoTGltaXRUeXBlKSB7XG4gICAgTGltaXRUeXBlW0xpbWl0VHlwZVtcIkZpcnN0XCJdID0gMF0gPSBcIkZpcnN0XCI7XG4gICAgTGltaXRUeXBlW0xpbWl0VHlwZVtcIkxhc3RcIl0gPSAxXSA9IFwiTGFzdFwiO1xufSkoTGltaXRUeXBlIHx8IChleHBvcnRzLkxpbWl0VHlwZSA9IExpbWl0VHlwZSA9IHt9KSk7XG4vKipcbiAqIG9uU25hcHNob3QoKSBjYWxsYmFjayB0aGF0IHJlY2VpdmVzIGEgUXVlcnlTbmFwc2hvdC5cbiAqXG4gKiBAY2FsbGJhY2sgcXVlcnlTbmFwc2hvdENhbGxiYWNrXG4gKiBAcGFyYW0ge1F1ZXJ5U25hcHNob3R9IHNuYXBzaG90IEEgcXVlcnkgc25hcHNob3QuXG4gKi9cbi8qKlxuICogb25TbmFwc2hvdCgpIGNhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgYSBEb2N1bWVudFNuYXBzaG90LlxuICpcbiAqIEBjYWxsYmFjayBkb2N1bWVudFNuYXBzaG90Q2FsbGJhY2tcbiAqIEBwYXJhbSB7RG9jdW1lbnRTbmFwc2hvdH0gc25hcHNob3QgQSBkb2N1bWVudCBzbmFwc2hvdC5cbiAqL1xuLyoqXG4gKiBvblNuYXBzaG90KCkgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyBhbiBlcnJvci5cbiAqXG4gKiBAY2FsbGJhY2sgZXJyb3JDYWxsYmFja1xuICogQHBhcmFtIHtFcnJvcn0gZXJyIEFuIGVycm9yIGZyb20gYSBsaXN0ZW4uXG4gKi9cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/vector-query-snapshot.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/vector-query-snapshot.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VectorQuerySnapshot = void 0;\nconst validate_1 = __webpack_require__(/*! ../validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\n/**\n * A `VectorQuerySnapshot` contains zero or more `QueryDocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */\nclass VectorQuerySnapshot {\n    /**\n     * @private\n     * @internal\n     *\n     * @param _query - The originating query.\n     * @param _readTime - The time when this query snapshot was obtained.\n     * @param _size - The number of documents in the result set.\n     * @param docs - A callback returning a sorted array of documents matching\n     * this query\n     * @param changes - A callback returning a sorted array of document change\n     * events for this snapshot.\n     */\n    constructor(_query, _readTime, _size, docs, changes) {\n        this._query = _query;\n        this._readTime = _readTime;\n        this._size = _size;\n        this._materializedDocs = null;\n        this._materializedChanges = null;\n        this._docs = null;\n        this._changes = null;\n        this._docs = docs;\n        this._changes = changes;\n    }\n    /**\n     * The `VectorQuery` on which you called get() in order to get this\n     * `VectorQuerySnapshot`.\n     *\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"})\n     *   .get().then(querySnapshot => {\n     *     console.log(`Returned first batch of results`);\n     *     let query = querySnapshot.query;\n     *     return query.offset(10).get();\n     *   }).then(() => {\n     *   console.log(`Returned second batch of results`);\n     *   });\n     * ```\n     */\n    get query() {\n        return this._query;\n    }\n    /**\n     * An array of all the documents in this `VectorQuerySnapshot`.\n     *\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col')\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\n     *\n     * query.get().then(querySnapshot => {\n     *   let docs = querySnapshot.docs;\n     *   for (let doc of docs) {\n     *     console.log(`Document found at path: ${doc.ref.path}`);\n     *   }\n     * });\n     * ```\n     */\n    get docs() {\n        if (this._materializedDocs) {\n            return this._materializedDocs;\n        }\n        this._materializedDocs = this._docs();\n        this._docs = null;\n        return this._materializedDocs;\n    }\n    /**\n     * `true` if there are no documents in the `VectorQuerySnapshot`.\n     *\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col')\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\n     *\n     * query.get().then(querySnapshot => {\n     *   if (querySnapshot.empty) {\n     *     console.log('No documents found.');\n     *   }\n     * });\n     * ```\n     */\n    get empty() {\n        return this._size === 0;\n    }\n    /**\n     * The number of documents in the `VectorQuerySnapshot`.\n     *\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col')\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\n     *\n     * query.get().then(querySnapshot => {\n     *   console.log(`Found ${querySnapshot.size} documents.`);\n     * });\n     * ```\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * The time this `VectorQuerySnapshot` was obtained.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col')\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\n     *\n     * query.get().then((querySnapshot) => {\n     *   let readTime = querySnapshot.readTime;\n     *   console.log(`Query results returned at '${readTime.toDate()}'`);\n     * });\n     * ```\n     */\n    get readTime() {\n        return this._readTime;\n    }\n    /**\n     * Returns an array of the documents changes since the last snapshot. If\n     * this is the first snapshot, all documents will be in the list as added\n     * changes.\n     *\n     * @returns An array of the documents changes since the last snapshot.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col')\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\n     *\n     * query.get().then(querySnapshot => {\n     *   let changes = querySnapshot.docChanges();\n     *   for (let change of changes) {\n     *     console.log(`A document was ${change.type}.`);\n     *   }\n     * });\n     * ```\n     */\n    docChanges() {\n        if (this._materializedChanges) {\n            return this._materializedChanges;\n        }\n        this._materializedChanges = this._changes();\n        this._changes = null;\n        return this._materializedChanges;\n    }\n    /**\n     * Enumerates all of the documents in the `VectorQuerySnapshot`. This is a convenience\n     * method for running the same callback on each {@link QueryDocumentSnapshot}\n     * that is returned.\n     *\n     * @param callback - A callback to be called with a\n     * {@link QueryDocumentSnapshot} for each document in\n     * the snapshot.\n     * @param thisArg - The `this` binding for the callback..\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col')\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\n     *\n     * query.get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Document found at path: ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    forEach(callback, thisArg) {\n        (0, validate_1.validateFunction)('callback', callback);\n        for (const doc of this.docs) {\n            callback.call(thisArg, doc);\n        }\n    }\n    /**\n     * Returns true if the document data in this `VectorQuerySnapshot` is equal to the\n     * provided value.\n     *\n     * @param other - The value to compare against.\n     * @returns true if this `VectorQuerySnapshot` is equal to the provided\n     * value.\n     */\n    isEqual(other) {\n        // Since the read time is different on every query read, we explicitly\n        // ignore all metadata in this comparison.\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof VectorQuerySnapshot)) {\n            return false;\n        }\n        if (this._size !== other._size) {\n            return false;\n        }\n        if (!this._query.isEqual(other._query)) {\n            return false;\n        }\n        if (this._materializedDocs && !this._materializedChanges) {\n            // If we have only materialized the documents, we compare them first.\n            return ((0, util_1.isArrayEqual)(this.docs, other.docs) &&\n                (0, util_1.isArrayEqual)(this.docChanges(), other.docChanges()));\n        }\n        // Otherwise, we compare the changes first as we expect there to be fewer.\n        return ((0, util_1.isArrayEqual)(this.docChanges(), other.docChanges()) &&\n            (0, util_1.isArrayEqual)(this.docs, other.docs));\n    }\n}\nexports.VectorQuerySnapshot = VectorQuerySnapshot;\n//# sourceMappingURL=vector-query-snapshot.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/vector-query-snapshot.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/vector-query.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/reference/vector-query.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VectorQuery = void 0;\nconst field_value_1 = __webpack_require__(/*! ../field-value */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/field-value.js\");\nconst path_1 = __webpack_require__(/*! ../path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst query_util_1 = __webpack_require__(/*! ./query-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query-util.js\");\nconst vector_query_snapshot_1 = __webpack_require__(/*! ./vector-query-snapshot */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/vector-query-snapshot.js\");\nconst query_profile_1 = __webpack_require__(/*! ../query-profile */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/query-profile.js\");\n/**\n * A query that finds the documents whose vector fields are closest to a certain query vector.\n * Create an instance of `VectorQuery` with {@link Query.findNearest}.\n */\nclass VectorQuery {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(_query, _options) {\n        this._query = _query;\n        this._options = _options;\n        this._queryUtil = new query_util_1.QueryUtil(_query._firestore, _query._queryOptions, _query._serializer);\n    }\n    /** The query whose results participants in the vector search. Filtering\n     * performed by the query will apply before the vector search.\n     **/\n    get query() {\n        return this._query;\n    }\n    /**\n     * @private\n     * @internal\n     */\n    get _rawVectorField() {\n        return typeof this._options.vectorField === 'string'\n            ? this._options.vectorField\n            : this._options.vectorField.toString();\n    }\n    /**\n     * @private\n     * @internal\n     */\n    get _rawDistanceResultField() {\n        if (typeof this._options.distanceResultField === 'undefined')\n            return;\n        return typeof this._options.distanceResultField === 'string'\n            ? this._options.distanceResultField\n            : this._options.distanceResultField.toString();\n    }\n    /**\n     * @private\n     * @internal\n     */\n    get _rawQueryVector() {\n        return Array.isArray(this._options.queryVector)\n            ? this._options.queryVector\n            : this._options.queryVector.toArray();\n    }\n    /**\n     * Plans and optionally executes this vector search query. Returns a Promise that will be\n     * resolved with the planner information, statistics from the query execution (if any),\n     * and the query results (if any).\n     *\n     * @return A Promise that will be resolved with the planner information, statistics\n     *  from the query execution (if any), and the query results (if any).\n     */\n    async explain(options) {\n        if (options === undefined) {\n            options = {};\n        }\n        const { result, explainMetrics } = await this._getResponse(options);\n        if (!explainMetrics) {\n            throw new Error('No explain results');\n        }\n        return new query_profile_1.ExplainResults(explainMetrics, result || null);\n    }\n    /**\n     * Executes this vector search query.\n     *\n     * @returns A promise that will be resolved with the results of the query.\n     */\n    async get() {\n        const { result } = await this._getResponse();\n        if (!result) {\n            throw new Error('No VectorQuerySnapshot result');\n        }\n        return result;\n    }\n    _getResponse(explainOptions) {\n        return this._queryUtil._getResponse(this, \n        /*transactionOrReadTime*/ undefined, \n        // VectorQuery cannot be retried with cursors as they do not support cursors yet.\n        /*retryWithCursor*/ false, explainOptions);\n    }\n    /**\n     * Internal streaming method that accepts an optional transaction ID.\n     *\n     * @param transactionId - A transaction ID.\n     * @private\n     * @internal\n     * @returns A stream of document results.\n     */\n    _stream(transactionId) {\n        return this._queryUtil._stream(this, transactionId, \n        /*retryWithCursor*/ false);\n    }\n    /**\n     * Internal method for serializing a query to its proto\n     * representation with an optional transaction id.\n     *\n     * @private\n     * @internal\n     * @returns Serialized JSON for the query.\n     */\n    toProto(transactionOrReadTime, explainOptions) {\n        var _a, _b, _c;\n        const queryProto = this._query.toProto(transactionOrReadTime);\n        const queryVector = Array.isArray(this._options.queryVector)\n            ? new field_value_1.VectorValue(this._options.queryVector)\n            : this._options.queryVector;\n        queryProto.structuredQuery.findNearest = {\n            limit: { value: this._options.limit },\n            distanceMeasure: this._options.distanceMeasure,\n            vectorField: {\n                fieldPath: path_1.FieldPath.fromArgument(this._options.vectorField)\n                    .formattedName,\n            },\n            queryVector: queryVector._toProto(this._query._serializer),\n            distanceResultField: ((_a = this._options) === null || _a === void 0 ? void 0 : _a.distanceResultField)\n                ? path_1.FieldPath.fromArgument(this._options.distanceResultField)\n                    .formattedName\n                : undefined,\n            distanceThreshold: ((_b = this._options) === null || _b === void 0 ? void 0 : _b.distanceThreshold)\n                ? { value: (_c = this._options) === null || _c === void 0 ? void 0 : _c.distanceThreshold }\n                : undefined,\n        };\n        if (explainOptions) {\n            queryProto.explainOptions = explainOptions;\n        }\n        return queryProto;\n    }\n    /**\n     * Construct the resulting vector snapshot for this query with given documents.\n     *\n     * @private\n     * @internal\n     */\n    _createSnapshot(readTime, size, docs, changes) {\n        return new vector_query_snapshot_1.VectorQuerySnapshot(this, readTime, size, docs, changes);\n    }\n    /**\n     * Construct a new vector query whose result will start after To support stream().\n     * This now throws an exception because cursors are not supported from the backend for vector queries yet.\n     *\n     * @private\n     * @internal\n     * @returns Serialized JSON for the query.\n     */\n    startAfter(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ...fieldValuesOrDocumentSnapshot) {\n        throw new Error('Unimplemented: Vector query does not support cursors yet.');\n    }\n    /**\n     * Compares this object with the given object for equality.\n     *\n     * This object is considered \"equal\" to the other object if and only if\n     * `other` performs the same vector distance search as this `VectorQuery` and\n     * the underlying Query of `other` compares equal to that of this object\n     * using `Query.isEqual()`.\n     *\n     * @param other - The object to compare to this object for equality.\n     * @returns `true` if this object is \"equal\" to the given object, as\n     * defined above, or `false` otherwise.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof VectorQuery)) {\n            return false;\n        }\n        if (!this.query.isEqual(other.query)) {\n            return false;\n        }\n        return (this._rawVectorField === other._rawVectorField &&\n            (0, util_1.isPrimitiveArrayEqual)(this._rawQueryVector, other._rawQueryVector) &&\n            this._options.limit === other._options.limit &&\n            this._options.distanceMeasure === other._options.distanceMeasure &&\n            this._options.distanceThreshold === other._options.distanceThreshold &&\n            this._rawDistanceResultField === other._rawDistanceResultField);\n    }\n}\nexports.VectorQuery = VectorQuery;\n//# sourceMappingURL=vector-query.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/vector-query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/serializer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/serializer.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Serializer = void 0;\nexports.validateUserInput = validateUserInput;\nconst field_value_1 = __webpack_require__(/*! ./field-value */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/field-value.js\");\nconst convert_1 = __webpack_require__(/*! ./convert */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/convert.js\");\nconst geo_point_1 = __webpack_require__(/*! ./geo-point */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/geo-point.js\");\nconst index_1 = __webpack_require__(/*! ./index */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/index.js\");\nconst path_1 = __webpack_require__(/*! ./path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst timestamp_1 = __webpack_require__(/*! ./timestamp */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst map_type_1 = __webpack_require__(/*! ./map-type */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/map-type.js\");\n/**\n * The maximum depth of a Firestore object.\n *\n * @private\n * @internal\n */\nconst MAX_DEPTH = 20;\n/**\n * Serializer that is used to convert between JavaScript types and their\n * Firestore Protobuf representation.\n *\n * @private\n * @internal\n */\nclass Serializer {\n    constructor(firestore) {\n        // Instead of storing the `firestore` object, we store just a reference to\n        // its `.doc()` method. This avoid a circular reference, which breaks\n        // JSON.stringify().\n        this.createReference = path => firestore.doc(path);\n        this.createInteger = n => firestore._settings.useBigInt ? BigInt(n) : Number(n);\n        this.allowUndefined = !!firestore._settings.ignoreUndefinedProperties;\n    }\n    /**\n     * Encodes a JavaScript object into the Firestore 'Fields' representation.\n     *\n     * @private\n     * @internal\n     * @param obj The object to encode.\n     * @returns The Firestore 'Fields' representation\n     */\n    encodeFields(obj) {\n        const fields = {};\n        for (const prop of Object.keys(obj)) {\n            const val = this.encodeValue(obj[prop]);\n            if (val) {\n                fields[prop] = val;\n            }\n        }\n        return fields;\n    }\n    /**\n     * Encodes a JavaScript value into the Firestore 'Value' representation.\n     *\n     * @private\n     * @internal\n     * @param val The object to encode\n     * @returns The Firestore Proto or null if we are deleting a field.\n     */\n    encodeValue(val) {\n        if (val instanceof field_value_1.FieldTransform) {\n            return null;\n        }\n        if (typeof val === 'string') {\n            return {\n                stringValue: val,\n            };\n        }\n        if (typeof val === 'boolean') {\n            return {\n                booleanValue: val,\n            };\n        }\n        if (typeof val === 'number') {\n            const isNegativeZero = val === 0 && 1 / val === 1 / -0;\n            if (Number.isSafeInteger(val) && !isNegativeZero) {\n                return {\n                    integerValue: val,\n                };\n            }\n            else {\n                return {\n                    doubleValue: val,\n                };\n            }\n        }\n        if (typeof val === 'bigint') {\n            return {\n                integerValue: val.toString(),\n            };\n        }\n        if (val instanceof Date) {\n            const timestamp = timestamp_1.Timestamp.fromDate(val);\n            return {\n                timestampValue: {\n                    seconds: timestamp.seconds,\n                    nanos: timestamp.nanoseconds,\n                },\n            };\n        }\n        if (isMomentJsType(val)) {\n            const timestamp = timestamp_1.Timestamp.fromDate(val.toDate());\n            return {\n                timestampValue: {\n                    seconds: timestamp.seconds,\n                    nanos: timestamp.nanoseconds,\n                },\n            };\n        }\n        if (val === null) {\n            return {\n                nullValue: 'NULL_VALUE',\n            };\n        }\n        if (val instanceof Buffer || val instanceof Uint8Array) {\n            return {\n                bytesValue: val,\n            };\n        }\n        if (val instanceof field_value_1.VectorValue) {\n            return val._toProto(this);\n        }\n        if ((0, util_1.isObject)(val)) {\n            const toProto = val['toProto'];\n            if (typeof toProto === 'function') {\n                return toProto.bind(val)();\n            }\n        }\n        if (Array.isArray(val)) {\n            const array = {\n                arrayValue: {},\n            };\n            if (val.length > 0) {\n                array.arrayValue.values = [];\n                for (let i = 0; i < val.length; ++i) {\n                    const enc = this.encodeValue(val[i]);\n                    if (enc) {\n                        array.arrayValue.values.push(enc);\n                    }\n                }\n            }\n            return array;\n        }\n        if (typeof val === 'object' && (0, util_1.isPlainObject)(val)) {\n            const map = {\n                mapValue: {},\n            };\n            // If we encounter an empty object, we always need to send it to make sure\n            // the server creates a map entry.\n            if (!(0, util_1.isEmpty)(val)) {\n                map.mapValue.fields = this.encodeFields(val);\n                if ((0, util_1.isEmpty)(map.mapValue.fields)) {\n                    return null;\n                }\n            }\n            return map;\n        }\n        if (val === undefined && this.allowUndefined) {\n            return null;\n        }\n        throw new Error(`Cannot encode value: ${val}`);\n    }\n    /**\n     * @private\n     */\n    encodeVector(rawVector) {\n        // A Firestore Vector is a map with reserved key/value pairs.\n        return {\n            mapValue: {\n                fields: {\n                    [map_type_1.RESERVED_MAP_KEY]: {\n                        stringValue: map_type_1.RESERVED_MAP_KEY_VECTOR_VALUE,\n                    },\n                    [map_type_1.VECTOR_MAP_VECTORS_KEY]: {\n                        arrayValue: {\n                            values: rawVector.map(value => {\n                                return {\n                                    doubleValue: value,\n                                };\n                            }),\n                        },\n                    },\n                },\n            },\n        };\n    }\n    /**\n     * Decodes a single Firestore 'Value' Protobuf.\n     *\n     * @private\n     * @internal\n     * @param proto A Firestore 'Value' Protobuf.\n     * @returns The converted JS type.\n     */\n    decodeValue(proto) {\n        const valueType = (0, convert_1.detectValueType)(proto);\n        switch (valueType) {\n            case 'stringValue': {\n                return proto.stringValue;\n            }\n            case 'booleanValue': {\n                return proto.booleanValue;\n            }\n            case 'integerValue': {\n                return this.createInteger(proto.integerValue);\n            }\n            case 'doubleValue': {\n                return proto.doubleValue;\n            }\n            case 'timestampValue': {\n                return timestamp_1.Timestamp.fromProto(proto.timestampValue);\n            }\n            case 'referenceValue': {\n                const resourcePath = path_1.QualifiedResourcePath.fromSlashSeparatedString(proto.referenceValue);\n                return this.createReference(resourcePath.relativeName);\n            }\n            case 'arrayValue': {\n                const array = [];\n                if (Array.isArray(proto.arrayValue.values)) {\n                    for (const value of proto.arrayValue.values) {\n                        array.push(this.decodeValue(value));\n                    }\n                }\n                return array;\n            }\n            case 'nullValue': {\n                return null;\n            }\n            case 'mapValue': {\n                const fields = proto.mapValue.fields;\n                if (fields) {\n                    const obj = {};\n                    for (const prop of Object.keys(fields)) {\n                        obj[prop] = this.decodeValue(fields[prop]);\n                    }\n                    return obj;\n                }\n                else {\n                    return {};\n                }\n            }\n            case 'vectorValue': {\n                const fields = proto.mapValue.fields;\n                return field_value_1.VectorValue._fromProto(fields[map_type_1.VECTOR_MAP_VECTORS_KEY]);\n            }\n            case 'geoPointValue': {\n                return geo_point_1.GeoPoint.fromProto(proto.geoPointValue);\n            }\n            case 'bytesValue': {\n                return proto.bytesValue;\n            }\n            default: {\n                throw new Error('Cannot decode type from Firestore Value: ' + JSON.stringify(proto));\n            }\n        }\n    }\n    /**\n     * Decodes a google.protobuf.Value\n     *\n     * @private\n     * @internal\n     * @param proto A Google Protobuf 'Value'.\n     * @returns The converted JS type.\n     */\n    decodeGoogleProtobufValue(proto) {\n        switch ((0, convert_1.detectGoogleProtobufValueType)(proto)) {\n            case 'nullValue': {\n                return null;\n            }\n            case 'numberValue': {\n                return proto.numberValue;\n            }\n            case 'stringValue': {\n                return proto.stringValue;\n            }\n            case 'boolValue': {\n                return proto.boolValue;\n            }\n            case 'listValue': {\n                return this.decodeGoogleProtobufList(proto.listValue);\n            }\n            case 'structValue': {\n                return this.decodeGoogleProtobufStruct(proto.structValue);\n            }\n            default: {\n                throw new Error('Cannot decode type from google.protobuf.Value: ' +\n                    JSON.stringify(proto));\n            }\n        }\n    }\n    /**\n     * Decodes a google.protobuf.ListValue\n     *\n     * @private\n     * @internal\n     * @param proto A Google Protobuf 'ListValue'.\n     * @returns The converted JS type.\n     */\n    decodeGoogleProtobufList(proto) {\n        const result = [];\n        if (proto && proto.values && Array.isArray(proto.values)) {\n            for (const value of proto.values) {\n                result.push(this.decodeGoogleProtobufValue(value));\n            }\n        }\n        return result;\n    }\n    /**\n     * Decodes a google.protobuf.Struct\n     *\n     * @private\n     * @internal\n     * @param proto A Google Protobuf 'Struct'.\n     * @returns The converted JS type.\n     */\n    decodeGoogleProtobufStruct(proto) {\n        const result = {};\n        if (proto && proto.fields) {\n            for (const prop of Object.keys(proto.fields)) {\n                result[prop] = this.decodeGoogleProtobufValue(proto.fields[prop]);\n            }\n        }\n        return result;\n    }\n}\nexports.Serializer = Serializer;\n/**\n * Validates a JavaScript value for usage as a Firestore value.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value JavaScript value to validate.\n * @param desc A description of the expected type.\n * @param path The field path to validate.\n * @param options Validation options\n * @param level The current depth of the traversal. This is used to decide\n * whether undefined values or deletes are allowed.\n * @param inArray Whether we are inside an array.\n * @throws when the object is invalid.\n */\nfunction validateUserInput(arg, value, desc, options, path, level, inArray) {\n    if (path && path.size - 1 > MAX_DEPTH) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Input object is deeper than ${MAX_DEPTH} levels or contains a cycle.`);\n    }\n    level = level || 0;\n    inArray = inArray || false;\n    const fieldPathMessage = path ? ` (found in field \"${path}\")` : '';\n    if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; ++i) {\n            validateUserInput(arg, value[i], desc, options, path ? path.append(String(i)) : new path_1.FieldPath(String(i)), level + 1, \n            /* inArray= */ true);\n        }\n    }\n    else if ((0, util_1.isPlainObject)(value)) {\n        for (const prop of Object.keys(value)) {\n            validateUserInput(arg, value[prop], desc, options, path ? path.append(new path_1.FieldPath(prop)) : new path_1.FieldPath(prop), level + 1, inArray);\n        }\n    }\n    else if (value === undefined) {\n        if (options.allowUndefined && level === 0) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} \"undefined\" values are only ignored inside of objects.`);\n        }\n        else if (!options.allowUndefined) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Cannot use \"undefined\" as a Firestore value${fieldPathMessage}. ` +\n                'If you want to ignore undefined values, enable `ignoreUndefinedProperties`.');\n        }\n    }\n    else if (value instanceof field_value_1.VectorValue) {\n        // OK\n    }\n    else if (value instanceof field_value_1.DeleteTransform) {\n        if (inArray) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n        }\n        else if (options.allowDeletes === 'none') {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() ` +\n                `or set() with {merge:true}${fieldPathMessage}.`);\n        }\n        else if (options.allowDeletes === 'root') {\n            if (level === 0) {\n                // Ok (update() with UpdateData).\n            }\n            else if (level === 1 && (path === null || path === void 0 ? void 0 : path.size) === 1) {\n                // Ok (update with varargs).\n            }\n            else {\n                throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() ` +\n                    `or set() with {merge:true}${fieldPathMessage}.`);\n            }\n        }\n    }\n    else if (value instanceof field_value_1.FieldTransform) {\n        if (inArray) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n        }\n        else if (!options.allowTransforms) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() can only be used in set(), create() or update()${fieldPathMessage}.`);\n        }\n    }\n    else if (value instanceof path_1.FieldPath) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Cannot use object of type \"FieldPath\" as a Firestore value${fieldPathMessage}.`);\n    }\n    else if (value instanceof index_1.DocumentReference) {\n        // Ok.\n    }\n    else if (value instanceof geo_point_1.GeoPoint) {\n        // Ok.\n    }\n    else if (value instanceof timestamp_1.Timestamp || value instanceof Date) {\n        // Ok.\n    }\n    else if (isMomentJsType(value)) {\n        // Ok.\n    }\n    else if (value instanceof Buffer || value instanceof Uint8Array) {\n        // Ok.\n    }\n    else if (value === null) {\n        // Ok.\n    }\n    else if (typeof value === 'object') {\n        throw new Error((0, validate_1.customObjectMessage)(arg, value, path));\n    }\n}\n/**\n * Returns true if value is a MomentJs date object.\n * @private\n * @internal\n */\nfunction isMomentJsType(value) {\n    return (typeof value === 'object' &&\n        value !== null &&\n        value.constructor &&\n        value.constructor.name === 'Moment' &&\n        typeof value.toDate === 'function');\n}\n//# sourceMappingURL=serializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/serializer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/disabled-trace-util.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/telemetry/disabled-trace-util.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DisabledTraceUtil = void 0;\nconst span_1 = __webpack_require__(/*! ./span */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/span.js\");\n/**\n * @private\n * @internal\n */\nclass DisabledTraceUtil {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startSpan(name) {\n        return new span_1.Span();\n    }\n    startActiveSpan(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    name, fn, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    attributes) {\n        const emptySpan = new span_1.Span();\n        return fn(emptySpan);\n    }\n    currentSpan() {\n        return new span_1.Span();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    recordProjectId(projectId) { }\n}\nexports.DisabledTraceUtil = DisabledTraceUtil;\n//# sourceMappingURL=disabled-trace-util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3RlbGVtZXRyeS9kaXNhYmxlZC10cmFjZS11dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixlQUFlLG1CQUFPLENBQUMsd0ZBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL2ZpcmVzdG9yZS9idWlsZC9zcmMvdGVsZW1ldHJ5L2Rpc2FibGVkLXRyYWNlLXV0aWwuanM/MmMzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGlzYWJsZWRUcmFjZVV0aWwgPSB2b2lkIDA7XG5jb25zdCBzcGFuXzEgPSByZXF1aXJlKFwiLi9zcGFuXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIERpc2FibGVkVHJhY2VVdGlsIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgc3RhcnRTcGFuKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBzcGFuXzEuU3BhbigpO1xuICAgIH1cbiAgICBzdGFydEFjdGl2ZVNwYW4oXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIG5hbWUsIGZuLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgYXR0cmlidXRlcykge1xuICAgICAgICBjb25zdCBlbXB0eVNwYW4gPSBuZXcgc3Bhbl8xLlNwYW4oKTtcbiAgICAgICAgcmV0dXJuIGZuKGVtcHR5U3Bhbik7XG4gICAgfVxuICAgIGN1cnJlbnRTcGFuKCkge1xuICAgICAgICByZXR1cm4gbmV3IHNwYW5fMS5TcGFuKCk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICByZWNvcmRQcm9qZWN0SWQocHJvamVjdElkKSB7IH1cbn1cbmV4cG9ydHMuRGlzYWJsZWRUcmFjZVV0aWwgPSBEaXNhYmxlZFRyYWNlVXRpbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc2FibGVkLXRyYWNlLXV0aWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/disabled-trace-util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/enabled-trace-util.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/telemetry/enabled-trace-util.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EnabledTraceUtil = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst span_1 = __webpack_require__(/*! ./span */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/span.js\");\nconst trace_util_1 = __webpack_require__(/*! ./trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js\");\nconst firestore_client_config_json_1 = __webpack_require__(/*! ../v1/firestore_client_config.json */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_client_config.json\");\nconst v1_1 = __webpack_require__(/*! ../v1 */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/index.js\");\nconst path_1 = __webpack_require__(/*! ../path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst index_1 = __webpack_require__(/*! ../index */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/index.js\");\nconst serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\n/**\n * @private\n * @internal\n */\nclass EnabledTraceUtil {\n    constructor(settings) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n        let provider = (_a = settings.openTelemetry) === null || _a === void 0 ? void 0 : _a.tracerProvider;\n        // If a TracerProvider has not been given to us, we try to use the global one.\n        if (!provider) {\n            const { trace } = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/index.js\");\n            provider = trace.getTracerProvider();\n        }\n        // At this point provider is guaranteed to be defined because\n        // `trace.getTracerProvider()` does not return null or undefined.\n        this.tracerProvider = provider;\n        const libVersion = (__webpack_require__(/*! ../../../package.json */ \"(rsc)/./node_modules/@google-cloud/firestore/package.json\").version);\n        const libName = (__webpack_require__(/*! ../../../package.json */ \"(rsc)/./node_modules/@google-cloud/firestore/package.json\").name);\n        try {\n            this.tracer = this.tracerProvider.getTracer(libName, libVersion);\n        }\n        catch (e) {\n            throw new Error(\"The object provided for 'tracerProvider' does not conform to the TracerProvider interface.\");\n        }\n        this.settingsAttributes = {};\n        this.settingsAttributes['otel.scope.name'] = libName;\n        this.settingsAttributes['otel.scope.version'] = libVersion;\n        if (settings.projectId) {\n            this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.project_id`] =\n                settings.projectId;\n        }\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.database_id`] =\n            settings.databaseId || path_1.DEFAULT_DATABASE_ID;\n        const host = (_c = (_b = settings.servicePath) !== null && _b !== void 0 ? _b : settings.host) !== null && _c !== void 0 ? _c : 'firestore.googleapis.com';\n        const port = (_d = settings.port) !== null && _d !== void 0 ? _d : v1_1.FirestoreClient.port;\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.host`] =\n            `${host}:${port}`;\n        if (settings.preferRest !== undefined) {\n            this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.prefer_REST`] =\n                settings.preferRest;\n        }\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.max_idle_channels`] =\n            (_e = settings.maxIdleChannels) !== null && _e !== void 0 ? _e : index_1.DEFAULT_MAX_IDLE_CHANNELS;\n        const defaultRetrySettings = serviceConfig.retry_params.default;\n        const customRetrySettings = (_j = (_h = (_g = (_f = settings.clientConfig) === null || _f === void 0 ? void 0 : _f.interfaces) === null || _g === void 0 ? void 0 : _g['google.firestore.v1.Firestore']) === null || _h === void 0 ? void 0 : _h['retry_params']) === null || _j === void 0 ? void 0 : _j['default'];\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.initial_retry_delay`] = this.millisToSecondString((_k = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.initial_retry_delay_millis) !== null && _k !== void 0 ? _k : defaultRetrySettings.initial_retry_delay_millis);\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.initial_rpc_timeout`] = this.millisToSecondString((_l = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.initial_rpc_timeout_millis) !== null && _l !== void 0 ? _l : defaultRetrySettings.initial_rpc_timeout_millis);\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.total_timeout`] =\n            this.millisToSecondString((_m = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.total_timeout_millis) !== null && _m !== void 0 ? _m : defaultRetrySettings.total_timeout_millis);\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.max_retry_delay`] =\n            this.millisToSecondString((_o = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.max_retry_delay_millis) !== null && _o !== void 0 ? _o : defaultRetrySettings.max_retry_delay_millis);\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.max_rpc_timeout`] =\n            this.millisToSecondString((_p = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.max_rpc_timeout_millis) !== null && _p !== void 0 ? _p : defaultRetrySettings.max_rpc_timeout_millis);\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.retry_delay_multiplier`] =\n            (_q = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.retry_delay_multiplier.toString()) !== null && _q !== void 0 ? _q : defaultRetrySettings.retry_delay_multiplier.toString();\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.rpc_timeout_multiplier`] =\n            (_r = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.rpc_timeout_multiplier.toString()) !== null && _r !== void 0 ? _r : defaultRetrySettings.rpc_timeout_multiplier.toString();\n    }\n    recordProjectId(projectId) {\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.project_id`] =\n            projectId;\n        this.currentSpan().setAttributes(this.settingsAttributes);\n    }\n    millisToSecondString(millis) {\n        return `${millis / 1000}s`;\n    }\n    endSpan(otelSpan, error) {\n        otelSpan.setStatus({\n            code: api_1.SpanStatusCode.ERROR,\n            message: error.message,\n        });\n        otelSpan.recordException(error);\n        otelSpan.end();\n    }\n    startActiveSpan(name, fn, attributes) {\n        return this.tracer.startActiveSpan(name, {\n            attributes: attributes,\n        }, (otelSpan) => {\n            this.addCommonAttributes(otelSpan);\n            // Note that if `fn` returns a `Promise`, we want the otelSpan to end\n            // after the `Promise` has resolved, NOT after the `fn` has returned.\n            // Therefore, we should not use a `finally` clause to end the otelSpan.\n            try {\n                let result = fn(new span_1.Span(otelSpan));\n                if (result instanceof Promise) {\n                    result = result\n                        .then(value => {\n                        otelSpan.end();\n                        return value;\n                    })\n                        .catch(error => {\n                        this.endSpan(otelSpan, error);\n                        // Returns a Promise.reject the same as the underlying function.\n                        return Promise.reject(error);\n                    });\n                }\n                else {\n                    otelSpan.end();\n                }\n                return result;\n            }\n            catch (error) {\n                this.endSpan(otelSpan, error);\n                // Re-throw the exception to maintain normal error handling.\n                throw error;\n            }\n        });\n    }\n    startSpan(name) {\n        const otelSpan = this.tracer.startSpan(name, undefined, api_1.context.active());\n        this.addCommonAttributes(otelSpan);\n        return new span_1.Span(otelSpan);\n    }\n    currentSpan() {\n        return new span_1.Span(api_1.trace.getActiveSpan());\n    }\n    addCommonAttributes(otelSpan) {\n        otelSpan.setAttributes(this.settingsAttributes);\n    }\n}\nexports.EnabledTraceUtil = EnabledTraceUtil;\n//# sourceMappingURL=enabled-trace-util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/enabled-trace-util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/span.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/telemetry/span.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Span = void 0;\n/**\n * @private\n * @internal\n */\nclass Span {\n    constructor(span) {\n        this.span = span;\n    }\n    end() {\n        var _a;\n        (_a = this.span) === null || _a === void 0 ? void 0 : _a.end();\n    }\n    addEvent(name, attributes) {\n        var _a;\n        this.span = (_a = this.span) === null || _a === void 0 ? void 0 : _a.addEvent(name, attributes);\n        return this;\n    }\n    setAttributes(attributes) {\n        var _a;\n        this.span = (_a = this.span) === null || _a === void 0 ? void 0 : _a.setAttributes(attributes);\n        return this;\n    }\n}\nexports.Span = Span;\n//# sourceMappingURL=span.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3RlbGVtZXRyeS9zcGFuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvZmlyZXN0b3JlL2J1aWxkL3NyYy90ZWxlbWV0cnkvc3Bhbi5qcz9mNzkwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3BhbiA9IHZvaWQgMDtcbi8qKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBTcGFuIHtcbiAgICBjb25zdHJ1Y3RvcihzcGFuKSB7XG4gICAgICAgIHRoaXMuc3BhbiA9IHNwYW47XG4gICAgfVxuICAgIGVuZCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLnNwYW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbmQoKTtcbiAgICB9XG4gICAgYWRkRXZlbnQobmFtZSwgYXR0cmlidXRlcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuc3BhbiA9IChfYSA9IHRoaXMuc3BhbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFkZEV2ZW50KG5hbWUsIGF0dHJpYnV0ZXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0QXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5zcGFuID0gKF9hID0gdGhpcy5zcGFuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QXR0cmlidXRlcyhhdHRyaWJ1dGVzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5TcGFuID0gU3Bhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwYW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/span.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ATTRIBUTE_KEY_ATTEMPTS_REMAINING = exports.ATTRIBUTE_KEY_ATTEMPTS_ALLOWED = exports.ATTRIBUTE_KEY_TRANSACTION_TYPE = exports.ATTRIBUTE_KEY_IS_RETRY_WITH_CURSOR = exports.ATTRIBUTE_KEY_NUM_RESPONSES = exports.ATTRIBUTE_KEY_IS_TRANSACTIONAL = exports.ATTRIBUTE_KEY_DOC_COUNT = exports.ATTRIBUTE_SETTINGS_PREFIX = exports.ATTRIBUTE_SERVICE_PREFIX = exports.SPAN_NAME_BULK_WRITER_COMMIT = exports.SPAN_NAME_PARTITION_QUERY = exports.SPAN_NAME_BATCH_COMMIT = exports.SPAN_NAME_TRANSACTION_COMMIT = exports.SPAN_NAME_TRANSACTION_ROLLBACK = exports.SPAN_NAME_TRANSACTION_GET_DOCUMENTS = exports.SPAN_NAME_TRANSACTION_GET_DOCUMENT = exports.SPAN_NAME_TRANSACTION_GET_AGGREGATION_QUERY = exports.SPAN_NAME_TRANSACTION_GET_QUERY = exports.SPAN_NAME_TRANSACTION_RUN = exports.SPAN_NAME_AGGREGATION_QUERY_GET = exports.SPAN_NAME_QUERY_GET = exports.SPAN_NAME_COL_REF_LIST_DOCUMENTS = exports.SPAN_NAME_COL_REF_ADD = exports.SPAN_NAME_DOC_REF_LIST_COLLECTIONS = exports.SPAN_NAME_DOC_REF_GET = exports.SPAN_NAME_DOC_REF_DELETE = exports.SPAN_NAME_DOC_REF_UPDATE = exports.SPAN_NAME_DOC_REF_SET = exports.SPAN_NAME_DOC_REF_CREATE = exports.SPAN_NAME_RUN_AGGREGATION_QUERY = exports.SPAN_NAME_RUN_QUERY = exports.SPAN_NAME_BATCH_GET_DOCUMENTS = exports.SERVICE = void 0;\n/**\n * Span names for instrumented operations.\n */\nexports.SERVICE = 'google.firestore.v1.Firestore/';\nexports.SPAN_NAME_BATCH_GET_DOCUMENTS = 'BatchGetDocuments';\nexports.SPAN_NAME_RUN_QUERY = 'RunQuery';\nexports.SPAN_NAME_RUN_AGGREGATION_QUERY = 'RunAggregationQuery';\nexports.SPAN_NAME_DOC_REF_CREATE = 'DocumentReference.Create';\nexports.SPAN_NAME_DOC_REF_SET = 'DocumentReference.Set';\nexports.SPAN_NAME_DOC_REF_UPDATE = 'DocumentReference.Update';\nexports.SPAN_NAME_DOC_REF_DELETE = 'DocumentReference.Delete';\nexports.SPAN_NAME_DOC_REF_GET = 'DocumentReference.Get';\nexports.SPAN_NAME_DOC_REF_LIST_COLLECTIONS = 'DocumentReference.ListCollections';\nexports.SPAN_NAME_COL_REF_ADD = 'CollectionReference.Add';\nexports.SPAN_NAME_COL_REF_LIST_DOCUMENTS = 'CollectionReference.ListDocuments';\nexports.SPAN_NAME_QUERY_GET = 'Query.Get';\nexports.SPAN_NAME_AGGREGATION_QUERY_GET = 'AggregationQuery.Get';\nexports.SPAN_NAME_TRANSACTION_RUN = 'Transaction.Run';\nexports.SPAN_NAME_TRANSACTION_GET_QUERY = 'Transaction.Get.Query';\nexports.SPAN_NAME_TRANSACTION_GET_AGGREGATION_QUERY = 'Transaction.Get.AggregationQuery';\nexports.SPAN_NAME_TRANSACTION_GET_DOCUMENT = 'Transaction.Get.Document';\nexports.SPAN_NAME_TRANSACTION_GET_DOCUMENTS = 'Transaction.Get.Documents';\nexports.SPAN_NAME_TRANSACTION_ROLLBACK = 'Transaction.Rollback';\nexports.SPAN_NAME_TRANSACTION_COMMIT = 'Transaction.Commit';\nexports.SPAN_NAME_BATCH_COMMIT = 'Batch.Commit';\nexports.SPAN_NAME_PARTITION_QUERY = 'PartitionQuery';\nexports.SPAN_NAME_BULK_WRITER_COMMIT = 'BulkWriter.Commit';\nexports.ATTRIBUTE_SERVICE_PREFIX = 'gcp.firestore';\nexports.ATTRIBUTE_SETTINGS_PREFIX = `${exports.ATTRIBUTE_SERVICE_PREFIX}.settings`;\nexports.ATTRIBUTE_KEY_DOC_COUNT = 'doc_count';\nexports.ATTRIBUTE_KEY_IS_TRANSACTIONAL = 'transactional';\nexports.ATTRIBUTE_KEY_NUM_RESPONSES = 'response_count';\nexports.ATTRIBUTE_KEY_IS_RETRY_WITH_CURSOR = 'retry_query_with_cursor';\nexports.ATTRIBUTE_KEY_TRANSACTION_TYPE = 'transaction_type';\nexports.ATTRIBUTE_KEY_ATTEMPTS_ALLOWED = 'attempts_allowed';\nexports.ATTRIBUTE_KEY_ATTEMPTS_REMAINING = 'attempts_remaining';\n//# sourceMappingURL=trace-util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3RlbGVtZXRyeS90cmFjZS11dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdDQUF3QyxHQUFHLHNDQUFzQyxHQUFHLHNDQUFzQyxHQUFHLDBDQUEwQyxHQUFHLG1DQUFtQyxHQUFHLHNDQUFzQyxHQUFHLCtCQUErQixHQUFHLGlDQUFpQyxHQUFHLGdDQUFnQyxHQUFHLG9DQUFvQyxHQUFHLGlDQUFpQyxHQUFHLDhCQUE4QixHQUFHLG9DQUFvQyxHQUFHLHNDQUFzQyxHQUFHLDJDQUEyQyxHQUFHLDBDQUEwQyxHQUFHLG1EQUFtRCxHQUFHLHVDQUF1QyxHQUFHLGlDQUFpQyxHQUFHLHVDQUF1QyxHQUFHLDJCQUEyQixHQUFHLHdDQUF3QyxHQUFHLDZCQUE2QixHQUFHLDBDQUEwQyxHQUFHLDZCQUE2QixHQUFHLGdDQUFnQyxHQUFHLGdDQUFnQyxHQUFHLDZCQUE2QixHQUFHLGdDQUFnQyxHQUFHLHVDQUF1QyxHQUFHLDJCQUEyQixHQUFHLHFDQUFxQyxHQUFHLGVBQWU7QUFDcnVDO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixxQ0FBcUM7QUFDckMsMkJBQTJCO0FBQzNCLHVDQUF1QztBQUN2QyxnQ0FBZ0M7QUFDaEMsNkJBQTZCO0FBQzdCLGdDQUFnQztBQUNoQyxnQ0FBZ0M7QUFDaEMsNkJBQTZCO0FBQzdCLDBDQUEwQztBQUMxQyw2QkFBNkI7QUFDN0Isd0NBQXdDO0FBQ3hDLDJCQUEyQjtBQUMzQix1Q0FBdUM7QUFDdkMsaUNBQWlDO0FBQ2pDLHVDQUF1QztBQUN2QyxtREFBbUQ7QUFDbkQsMENBQTBDO0FBQzFDLDJDQUEyQztBQUMzQyxzQ0FBc0M7QUFDdEMsb0NBQW9DO0FBQ3BDLDhCQUE4QjtBQUM5QixpQ0FBaUM7QUFDakMsb0NBQW9DO0FBQ3BDLGdDQUFnQztBQUNoQyxpQ0FBaUMsTUFBTSxpQ0FBaUM7QUFDeEUsK0JBQStCO0FBQy9CLHNDQUFzQztBQUN0QyxtQ0FBbUM7QUFDbkMsMENBQTBDO0FBQzFDLHNDQUFzQztBQUN0QyxzQ0FBc0M7QUFDdEMsd0NBQXdDO0FBQ3hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvZmlyZXN0b3JlL2J1aWxkL3NyYy90ZWxlbWV0cnkvdHJhY2UtdXRpbC5qcz82ZjJkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQVRUUklCVVRFX0tFWV9BVFRFTVBUU19SRU1BSU5JTkcgPSBleHBvcnRzLkFUVFJJQlVURV9LRVlfQVRURU1QVFNfQUxMT1dFRCA9IGV4cG9ydHMuQVRUUklCVVRFX0tFWV9UUkFOU0FDVElPTl9UWVBFID0gZXhwb3J0cy5BVFRSSUJVVEVfS0VZX0lTX1JFVFJZX1dJVEhfQ1VSU09SID0gZXhwb3J0cy5BVFRSSUJVVEVfS0VZX05VTV9SRVNQT05TRVMgPSBleHBvcnRzLkFUVFJJQlVURV9LRVlfSVNfVFJBTlNBQ1RJT05BTCA9IGV4cG9ydHMuQVRUUklCVVRFX0tFWV9ET0NfQ09VTlQgPSBleHBvcnRzLkFUVFJJQlVURV9TRVRUSU5HU19QUkVGSVggPSBleHBvcnRzLkFUVFJJQlVURV9TRVJWSUNFX1BSRUZJWCA9IGV4cG9ydHMuU1BBTl9OQU1FX0JVTEtfV1JJVEVSX0NPTU1JVCA9IGV4cG9ydHMuU1BBTl9OQU1FX1BBUlRJVElPTl9RVUVSWSA9IGV4cG9ydHMuU1BBTl9OQU1FX0JBVENIX0NPTU1JVCA9IGV4cG9ydHMuU1BBTl9OQU1FX1RSQU5TQUNUSU9OX0NPTU1JVCA9IGV4cG9ydHMuU1BBTl9OQU1FX1RSQU5TQUNUSU9OX1JPTExCQUNLID0gZXhwb3J0cy5TUEFOX05BTUVfVFJBTlNBQ1RJT05fR0VUX0RPQ1VNRU5UUyA9IGV4cG9ydHMuU1BBTl9OQU1FX1RSQU5TQUNUSU9OX0dFVF9ET0NVTUVOVCA9IGV4cG9ydHMuU1BBTl9OQU1FX1RSQU5TQUNUSU9OX0dFVF9BR0dSRUdBVElPTl9RVUVSWSA9IGV4cG9ydHMuU1BBTl9OQU1FX1RSQU5TQUNUSU9OX0dFVF9RVUVSWSA9IGV4cG9ydHMuU1BBTl9OQU1FX1RSQU5TQUNUSU9OX1JVTiA9IGV4cG9ydHMuU1BBTl9OQU1FX0FHR1JFR0FUSU9OX1FVRVJZX0dFVCA9IGV4cG9ydHMuU1BBTl9OQU1FX1FVRVJZX0dFVCA9IGV4cG9ydHMuU1BBTl9OQU1FX0NPTF9SRUZfTElTVF9ET0NVTUVOVFMgPSBleHBvcnRzLlNQQU5fTkFNRV9DT0xfUkVGX0FERCA9IGV4cG9ydHMuU1BBTl9OQU1FX0RPQ19SRUZfTElTVF9DT0xMRUNUSU9OUyA9IGV4cG9ydHMuU1BBTl9OQU1FX0RPQ19SRUZfR0VUID0gZXhwb3J0cy5TUEFOX05BTUVfRE9DX1JFRl9ERUxFVEUgPSBleHBvcnRzLlNQQU5fTkFNRV9ET0NfUkVGX1VQREFURSA9IGV4cG9ydHMuU1BBTl9OQU1FX0RPQ19SRUZfU0VUID0gZXhwb3J0cy5TUEFOX05BTUVfRE9DX1JFRl9DUkVBVEUgPSBleHBvcnRzLlNQQU5fTkFNRV9SVU5fQUdHUkVHQVRJT05fUVVFUlkgPSBleHBvcnRzLlNQQU5fTkFNRV9SVU5fUVVFUlkgPSBleHBvcnRzLlNQQU5fTkFNRV9CQVRDSF9HRVRfRE9DVU1FTlRTID0gZXhwb3J0cy5TRVJWSUNFID0gdm9pZCAwO1xuLyoqXG4gKiBTcGFuIG5hbWVzIGZvciBpbnN0cnVtZW50ZWQgb3BlcmF0aW9ucy5cbiAqL1xuZXhwb3J0cy5TRVJWSUNFID0gJ2dvb2dsZS5maXJlc3RvcmUudjEuRmlyZXN0b3JlLyc7XG5leHBvcnRzLlNQQU5fTkFNRV9CQVRDSF9HRVRfRE9DVU1FTlRTID0gJ0JhdGNoR2V0RG9jdW1lbnRzJztcbmV4cG9ydHMuU1BBTl9OQU1FX1JVTl9RVUVSWSA9ICdSdW5RdWVyeSc7XG5leHBvcnRzLlNQQU5fTkFNRV9SVU5fQUdHUkVHQVRJT05fUVVFUlkgPSAnUnVuQWdncmVnYXRpb25RdWVyeSc7XG5leHBvcnRzLlNQQU5fTkFNRV9ET0NfUkVGX0NSRUFURSA9ICdEb2N1bWVudFJlZmVyZW5jZS5DcmVhdGUnO1xuZXhwb3J0cy5TUEFOX05BTUVfRE9DX1JFRl9TRVQgPSAnRG9jdW1lbnRSZWZlcmVuY2UuU2V0JztcbmV4cG9ydHMuU1BBTl9OQU1FX0RPQ19SRUZfVVBEQVRFID0gJ0RvY3VtZW50UmVmZXJlbmNlLlVwZGF0ZSc7XG5leHBvcnRzLlNQQU5fTkFNRV9ET0NfUkVGX0RFTEVURSA9ICdEb2N1bWVudFJlZmVyZW5jZS5EZWxldGUnO1xuZXhwb3J0cy5TUEFOX05BTUVfRE9DX1JFRl9HRVQgPSAnRG9jdW1lbnRSZWZlcmVuY2UuR2V0JztcbmV4cG9ydHMuU1BBTl9OQU1FX0RPQ19SRUZfTElTVF9DT0xMRUNUSU9OUyA9ICdEb2N1bWVudFJlZmVyZW5jZS5MaXN0Q29sbGVjdGlvbnMnO1xuZXhwb3J0cy5TUEFOX05BTUVfQ09MX1JFRl9BREQgPSAnQ29sbGVjdGlvblJlZmVyZW5jZS5BZGQnO1xuZXhwb3J0cy5TUEFOX05BTUVfQ09MX1JFRl9MSVNUX0RPQ1VNRU5UUyA9ICdDb2xsZWN0aW9uUmVmZXJlbmNlLkxpc3REb2N1bWVudHMnO1xuZXhwb3J0cy5TUEFOX05BTUVfUVVFUllfR0VUID0gJ1F1ZXJ5LkdldCc7XG5leHBvcnRzLlNQQU5fTkFNRV9BR0dSRUdBVElPTl9RVUVSWV9HRVQgPSAnQWdncmVnYXRpb25RdWVyeS5HZXQnO1xuZXhwb3J0cy5TUEFOX05BTUVfVFJBTlNBQ1RJT05fUlVOID0gJ1RyYW5zYWN0aW9uLlJ1bic7XG5leHBvcnRzLlNQQU5fTkFNRV9UUkFOU0FDVElPTl9HRVRfUVVFUlkgPSAnVHJhbnNhY3Rpb24uR2V0LlF1ZXJ5JztcbmV4cG9ydHMuU1BBTl9OQU1FX1RSQU5TQUNUSU9OX0dFVF9BR0dSRUdBVElPTl9RVUVSWSA9ICdUcmFuc2FjdGlvbi5HZXQuQWdncmVnYXRpb25RdWVyeSc7XG5leHBvcnRzLlNQQU5fTkFNRV9UUkFOU0FDVElPTl9HRVRfRE9DVU1FTlQgPSAnVHJhbnNhY3Rpb24uR2V0LkRvY3VtZW50JztcbmV4cG9ydHMuU1BBTl9OQU1FX1RSQU5TQUNUSU9OX0dFVF9ET0NVTUVOVFMgPSAnVHJhbnNhY3Rpb24uR2V0LkRvY3VtZW50cyc7XG5leHBvcnRzLlNQQU5fTkFNRV9UUkFOU0FDVElPTl9ST0xMQkFDSyA9ICdUcmFuc2FjdGlvbi5Sb2xsYmFjayc7XG5leHBvcnRzLlNQQU5fTkFNRV9UUkFOU0FDVElPTl9DT01NSVQgPSAnVHJhbnNhY3Rpb24uQ29tbWl0JztcbmV4cG9ydHMuU1BBTl9OQU1FX0JBVENIX0NPTU1JVCA9ICdCYXRjaC5Db21taXQnO1xuZXhwb3J0cy5TUEFOX05BTUVfUEFSVElUSU9OX1FVRVJZID0gJ1BhcnRpdGlvblF1ZXJ5JztcbmV4cG9ydHMuU1BBTl9OQU1FX0JVTEtfV1JJVEVSX0NPTU1JVCA9ICdCdWxrV3JpdGVyLkNvbW1pdCc7XG5leHBvcnRzLkFUVFJJQlVURV9TRVJWSUNFX1BSRUZJWCA9ICdnY3AuZmlyZXN0b3JlJztcbmV4cG9ydHMuQVRUUklCVVRFX1NFVFRJTkdTX1BSRUZJWCA9IGAke2V4cG9ydHMuQVRUUklCVVRFX1NFUlZJQ0VfUFJFRklYfS5zZXR0aW5nc2A7XG5leHBvcnRzLkFUVFJJQlVURV9LRVlfRE9DX0NPVU5UID0gJ2RvY19jb3VudCc7XG5leHBvcnRzLkFUVFJJQlVURV9LRVlfSVNfVFJBTlNBQ1RJT05BTCA9ICd0cmFuc2FjdGlvbmFsJztcbmV4cG9ydHMuQVRUUklCVVRFX0tFWV9OVU1fUkVTUE9OU0VTID0gJ3Jlc3BvbnNlX2NvdW50JztcbmV4cG9ydHMuQVRUUklCVVRFX0tFWV9JU19SRVRSWV9XSVRIX0NVUlNPUiA9ICdyZXRyeV9xdWVyeV93aXRoX2N1cnNvcic7XG5leHBvcnRzLkFUVFJJQlVURV9LRVlfVFJBTlNBQ1RJT05fVFlQRSA9ICd0cmFuc2FjdGlvbl90eXBlJztcbmV4cG9ydHMuQVRUUklCVVRFX0tFWV9BVFRFTVBUU19BTExPV0VEID0gJ2F0dGVtcHRzX2FsbG93ZWQnO1xuZXhwb3J0cy5BVFRSSUJVVEVfS0VZX0FUVEVNUFRTX1JFTUFJTklORyA9ICdhdHRlbXB0c19yZW1haW5pbmcnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2UtdXRpbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/timestamp.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Timestamp = void 0;\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\n/*!\n * Number of nanoseconds in a millisecond.\n *\n * @type {number}\n */\nconst MS_TO_NANOS = 1000000;\n/*!\n * The minimum legal value for the \"seconds\" property of a Timestamp object.\n *\n * This value corresponds to 0001-01-01T00:00:00Z.\n *\n * @type {number}\n */\nconst MIN_SECONDS = -62135596800;\n/*!\n * The maximum legal value for the \"seconds\" property of a Timestamp object.\n *\n * This value corresponds to 9999-12-31T23:59:59.999999999Z.\n *\n * @type {number}\n */\nconst MAX_SECONDS = 253402300799;\n/**\n * A Timestamp represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time. It is encoded using the Proleptic Gregorian\n * Calendar which extends the Gregorian calendar backwards to year one. It is\n * encoded assuming all minutes are 60 seconds long, i.e. leap seconds are\n * \"smeared\" so that no leap second table is needed for interpretation. Range is\n * from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.\n *\n * @see https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto\n */\nclass Timestamp {\n    /**\n     * Creates a new timestamp with the current date, with millisecond precision.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({ updateTime:Firestore.Timestamp.now() });\n     *\n     * ```\n     * @return {Timestamp} A new `Timestamp` representing the current date.\n     */\n    static now() {\n        return Timestamp.fromMillis(Date.now());\n    }\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * let date = Date.parse('01 Jan 2000 00:00:00 GMT');\n     * documentRef.set({ startTime:Firestore.Timestamp.fromDate(date) });\n     *\n     * ```\n     * @param {Date} date The date to initialize the `Timestamp` from.\n     * @return {Timestamp} A new `Timestamp` representing the same point in time\n     * as the given date.\n     */\n    static fromDate(date) {\n        return Timestamp.fromMillis(date.getTime());\n    }\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({ startTime:Firestore.Timestamp.fromMillis(42) });\n     *\n     * ```\n     * @param {number} milliseconds Number of milliseconds since Unix epoch\n     * 1970-01-01T00:00:00Z.\n     * @return {Timestamp}  A new `Timestamp` representing the same point in time\n     * as the given number of milliseconds.\n     */\n    static fromMillis(milliseconds) {\n        const seconds = Math.floor(milliseconds / 1000);\n        const nanos = Math.floor((milliseconds - seconds * 1000) * MS_TO_NANOS);\n        return new Timestamp(seconds, nanos);\n    }\n    /**\n     * Generates a `Timestamp` object from a Timestamp proto.\n     *\n     * @private\n     * @internal\n     * @param {Object} timestamp The `Timestamp` Protobuf object.\n     */\n    static fromProto(timestamp) {\n        return new Timestamp(Number(timestamp.seconds || 0), timestamp.nanos || 0);\n    }\n    /**\n     * Creates a new timestamp.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({ startTime:new Firestore.Timestamp(42, 0) });\n     *\n     * ```\n     * @param {number} seconds The number of seconds of UTC time since Unix epoch\n     * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n     * 9999-12-31T23:59:59Z inclusive.\n     * @param {number} nanoseconds The non-negative fractions of a second at\n     * nanosecond resolution. Negative second values with fractions must still\n     * have non-negative nanoseconds values that count forward in time. Must be\n     * from 0 to 999,999,999 inclusive.\n     */\n    constructor(seconds, nanoseconds) {\n        (0, validate_1.validateInteger)('seconds', seconds, {\n            minValue: MIN_SECONDS,\n            maxValue: MAX_SECONDS,\n        });\n        (0, validate_1.validateInteger)('nanoseconds', nanoseconds, {\n            minValue: 0,\n            maxValue: 999999999,\n        });\n        this._seconds = seconds;\n        this._nanoseconds = nanoseconds;\n    }\n    /**\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(snap => {\n     *   let updated = snap.updateTime;\n     *   console.log(`Updated at ${updated.seconds}s ${updated.nanoseconds}ns`);\n     * });\n     *\n     * ```\n     * @type {number}\n     */\n    get seconds() {\n        return this._seconds;\n    }\n    /**\n     * The non-negative fractions of a second at nanosecond resolution.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(snap => {\n     *   let updated = snap.updateTime;\n     *   console.log(`Updated at ${updated.seconds}s ${updated.nanoseconds}ns`);\n     * });\n     *\n     * ```\n     * @type {number}\n     */\n    get nanoseconds() {\n        return this._nanoseconds;\n    }\n    /**\n     * Returns a new `Date` corresponding to this timestamp. This may lose\n     * precision.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(snap => {\n     *   console.log(`Document updated at: ${snap.updateTime.toDate()}`);\n     * });\n     *\n     * ```\n     * @return {Date} JavaScript `Date` object representing the same point in time\n     * as this `Timestamp`, with millisecond precision.\n     */\n    toDate() {\n        return new Date(this._seconds * 1000 + Math.round(this._nanoseconds / MS_TO_NANOS));\n    }\n    /**\n     * Returns the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(snap => {\n     *   let startTime = snap.get('startTime');\n     *   let endTime = snap.get('endTime');\n     *   console.log(`Duration: ${endTime - startTime}`);\n     * });\n     *\n     * ```\n     * @return {number} The point in time corresponding to this timestamp,\n     * represented as the number of milliseconds since Unix epoch\n     * 1970-01-01T00:00:00Z.\n     */\n    toMillis() {\n        return this._seconds * 1000 + Math.floor(this._nanoseconds / MS_TO_NANOS);\n    }\n    /**\n     * Returns 'true' if this `Timestamp` is equal to the provided one.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(snap => {\n     *   if (snap.createTime.isEqual(snap.updateTime)) {\n     *     console.log('Document is in its initial state.');\n     *   }\n     * });\n     *\n     * ```\n     * @param {any} other The `Timestamp` to compare against.\n     * @return {boolean} 'true' if this `Timestamp` is equal to the provided one.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof Timestamp &&\n                this._seconds === other.seconds &&\n                this._nanoseconds === other.nanoseconds));\n    }\n    /**\n     * Generates the Protobuf `Timestamp` object for this timestamp.\n     *\n     * @private\n     * @internal\n     * @returns {Object} The `Timestamp` Protobuf object.\n     */\n    toProto() {\n        const timestamp = {};\n        if (this.seconds) {\n            timestamp.seconds = this.seconds.toString();\n        }\n        if (this.nanoseconds) {\n            timestamp.nanos = this.nanoseconds;\n        }\n        return { timestampValue: timestamp };\n    }\n    /**\n     * Converts this object to a primitive `string`, which allows `Timestamp` objects to be compared\n     * using the `>`, `<=`, `>=` and `>` operators.\n     *\n     * @return {string} a string encoding of this object.\n     */\n    valueOf() {\n        // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n        // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n        // with zeroes to be a consistent length. Strings with this format then have a lexicographical\n        // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n        // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n        // which would affect its lexicographical ordering.\n        const adjustedSeconds = this.seconds - MIN_SECONDS;\n        // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n        const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n        const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n        return formattedSeconds + '.' + formattedNanoseconds;\n    }\n}\nexports.Timestamp = Timestamp;\n//# sourceMappingURL=timestamp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3RpbWVzdGFtcC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsbUJBQW1CLG1CQUFPLENBQUMsc0ZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixzQ0FBc0M7QUFDL0Q7QUFDQTtBQUNBLGdCQUFnQixXQUFXO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw4Q0FBOEM7QUFDdkU7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQixnQkFBZ0IsV0FBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsOENBQThDO0FBQ3ZFO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxnQkFBZ0IsWUFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiwwQ0FBMEM7QUFDbkU7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxnQkFBZ0IsSUFBSSxvQkFBb0I7QUFDM0UsUUFBUTtBQUNSO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsZ0JBQWdCLElBQUksb0JBQW9CO0FBQzNFLFFBQVE7QUFDUjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLHlCQUF5QjtBQUN0RSxRQUFRO0FBQ1I7QUFDQTtBQUNBLGdCQUFnQixNQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxvQkFBb0I7QUFDdEQsUUFBUTtBQUNSO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxlQUFlLEtBQUs7QUFDcEIsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3RpbWVzdGFtcC5qcz9lZDdiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyohXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGltZXN0YW1wID0gdm9pZCAwO1xuY29uc3QgdmFsaWRhdGVfMSA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRlXCIpO1xuLyohXG4gKiBOdW1iZXIgb2YgbmFub3NlY29uZHMgaW4gYSBtaWxsaXNlY29uZC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5jb25zdCBNU19UT19OQU5PUyA9IDEwMDAwMDA7XG4vKiFcbiAqIFRoZSBtaW5pbXVtIGxlZ2FsIHZhbHVlIGZvciB0aGUgXCJzZWNvbmRzXCIgcHJvcGVydHkgb2YgYSBUaW1lc3RhbXAgb2JqZWN0LlxuICpcbiAqIFRoaXMgdmFsdWUgY29ycmVzcG9uZHMgdG8gMDAwMS0wMS0wMVQwMDowMDowMFouXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuY29uc3QgTUlOX1NFQ09ORFMgPSAtNjIxMzU1OTY4MDA7XG4vKiFcbiAqIFRoZSBtYXhpbXVtIGxlZ2FsIHZhbHVlIGZvciB0aGUgXCJzZWNvbmRzXCIgcHJvcGVydHkgb2YgYSBUaW1lc3RhbXAgb2JqZWN0LlxuICpcbiAqIFRoaXMgdmFsdWUgY29ycmVzcG9uZHMgdG8gOTk5OS0xMi0zMVQyMzo1OTo1OS45OTk5OTk5OTlaLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmNvbnN0IE1BWF9TRUNPTkRTID0gMjUzNDAyMzAwNzk5O1xuLyoqXG4gKiBBIFRpbWVzdGFtcCByZXByZXNlbnRzIGEgcG9pbnQgaW4gdGltZSBpbmRlcGVuZGVudCBvZiBhbnkgdGltZSB6b25lIG9yXG4gKiBjYWxlbmRhciwgcmVwcmVzZW50ZWQgYXMgc2Vjb25kcyBhbmQgZnJhY3Rpb25zIG9mIHNlY29uZHMgYXQgbmFub3NlY29uZFxuICogcmVzb2x1dGlvbiBpbiBVVEMgRXBvY2ggdGltZS4gSXQgaXMgZW5jb2RlZCB1c2luZyB0aGUgUHJvbGVwdGljIEdyZWdvcmlhblxuICogQ2FsZW5kYXIgd2hpY2ggZXh0ZW5kcyB0aGUgR3JlZ29yaWFuIGNhbGVuZGFyIGJhY2t3YXJkcyB0byB5ZWFyIG9uZS4gSXQgaXNcbiAqIGVuY29kZWQgYXNzdW1pbmcgYWxsIG1pbnV0ZXMgYXJlIDYwIHNlY29uZHMgbG9uZywgaS5lLiBsZWFwIHNlY29uZHMgYXJlXG4gKiBcInNtZWFyZWRcIiBzbyB0aGF0IG5vIGxlYXAgc2Vjb25kIHRhYmxlIGlzIG5lZWRlZCBmb3IgaW50ZXJwcmV0YXRpb24uIFJhbmdlIGlzXG4gKiBmcm9tIDAwMDEtMDEtMDFUMDA6MDA6MDBaIHRvIDk5OTktMTItMzFUMjM6NTk6NTkuOTk5OTk5OTk5Wi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvcHJvdG9idWYvYmxvYi9tYXN0ZXIvc3JjL2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG9cbiAqL1xuY2xhc3MgVGltZXN0YW1wIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRpbWVzdGFtcCB3aXRoIHRoZSBjdXJyZW50IGRhdGUsIHdpdGggbWlsbGlzZWNvbmQgcHJlY2lzaW9uLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBsZXQgZG9jdW1lbnRSZWYgPSBmaXJlc3RvcmUuZG9jKCdjb2wvZG9jJyk7XG4gICAgICpcbiAgICAgKiBkb2N1bWVudFJlZi5zZXQoeyB1cGRhdGVUaW1lOkZpcmVzdG9yZS5UaW1lc3RhbXAubm93KCkgfSk7XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJuIHtUaW1lc3RhbXB9IEEgbmV3IGBUaW1lc3RhbXBgIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBkYXRlLlxuICAgICAqL1xuICAgIHN0YXRpYyBub3coKSB7XG4gICAgICAgIHJldHVybiBUaW1lc3RhbXAuZnJvbU1pbGxpcyhEYXRlLm5vdygpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0aW1lc3RhbXAgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogbGV0IGRvY3VtZW50UmVmID0gZmlyZXN0b3JlLmRvYygnY29sL2RvYycpO1xuICAgICAqXG4gICAgICogbGV0IGRhdGUgPSBEYXRlLnBhcnNlKCcwMSBKYW4gMjAwMCAwMDowMDowMCBHTVQnKTtcbiAgICAgKiBkb2N1bWVudFJlZi5zZXQoeyBzdGFydFRpbWU6RmlyZXN0b3JlLlRpbWVzdGFtcC5mcm9tRGF0ZShkYXRlKSB9KTtcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSB7RGF0ZX0gZGF0ZSBUaGUgZGF0ZSB0byBpbml0aWFsaXplIHRoZSBgVGltZXN0YW1wYCBmcm9tLlxuICAgICAqIEByZXR1cm4ge1RpbWVzdGFtcH0gQSBuZXcgYFRpbWVzdGFtcGAgcmVwcmVzZW50aW5nIHRoZSBzYW1lIHBvaW50IGluIHRpbWVcbiAgICAgKiBhcyB0aGUgZ2l2ZW4gZGF0ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbURhdGUoZGF0ZSkge1xuICAgICAgICByZXR1cm4gVGltZXN0YW1wLmZyb21NaWxsaXMoZGF0ZS5nZXRUaW1lKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRpbWVzdGFtcCBmcm9tIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBsZXQgZG9jdW1lbnRSZWYgPSBmaXJlc3RvcmUuZG9jKCdjb2wvZG9jJyk7XG4gICAgICpcbiAgICAgKiBkb2N1bWVudFJlZi5zZXQoeyBzdGFydFRpbWU6RmlyZXN0b3JlLlRpbWVzdGFtcC5mcm9tTWlsbGlzKDQyKSB9KTtcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaWxsaXNlY29uZHMgTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSBVbml4IGVwb2NoXG4gICAgICogMTk3MC0wMS0wMVQwMDowMDowMFouXG4gICAgICogQHJldHVybiB7VGltZXN0YW1wfSAgQSBuZXcgYFRpbWVzdGFtcGAgcmVwcmVzZW50aW5nIHRoZSBzYW1lIHBvaW50IGluIHRpbWVcbiAgICAgKiBhcyB0aGUgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbU1pbGxpcyhtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgY29uc3Qgc2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgICAgIGNvbnN0IG5hbm9zID0gTWF0aC5mbG9vcigobWlsbGlzZWNvbmRzIC0gc2Vjb25kcyAqIDEwMDApICogTVNfVE9fTkFOT1MpO1xuICAgICAgICByZXR1cm4gbmV3IFRpbWVzdGFtcChzZWNvbmRzLCBuYW5vcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIGBUaW1lc3RhbXBgIG9iamVjdCBmcm9tIGEgVGltZXN0YW1wIHByb3RvLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGltZXN0YW1wIFRoZSBgVGltZXN0YW1wYCBQcm90b2J1ZiBvYmplY3QuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21Qcm90byh0aW1lc3RhbXApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW1lc3RhbXAoTnVtYmVyKHRpbWVzdGFtcC5zZWNvbmRzIHx8IDApLCB0aW1lc3RhbXAubmFub3MgfHwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGltZXN0YW1wLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBsZXQgZG9jdW1lbnRSZWYgPSBmaXJlc3RvcmUuZG9jKCdjb2wvZG9jJyk7XG4gICAgICpcbiAgICAgKiBkb2N1bWVudFJlZi5zZXQoeyBzdGFydFRpbWU6bmV3IEZpcmVzdG9yZS5UaW1lc3RhbXAoNDIsIDApIH0pO1xuICAgICAqXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHMgVGhlIG51bWJlciBvZiBzZWNvbmRzIG9mIFVUQyB0aW1lIHNpbmNlIFVuaXggZXBvY2hcbiAgICAgKiAxOTcwLTAxLTAxVDAwOjAwOjAwWi4gTXVzdCBiZSBmcm9tIDAwMDEtMDEtMDFUMDA6MDA6MDBaIHRvXG4gICAgICogOTk5OS0xMi0zMVQyMzo1OTo1OVogaW5jbHVzaXZlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuYW5vc2Vjb25kcyBUaGUgbm9uLW5lZ2F0aXZlIGZyYWN0aW9ucyBvZiBhIHNlY29uZCBhdFxuICAgICAqIG5hbm9zZWNvbmQgcmVzb2x1dGlvbi4gTmVnYXRpdmUgc2Vjb25kIHZhbHVlcyB3aXRoIGZyYWN0aW9ucyBtdXN0IHN0aWxsXG4gICAgICogaGF2ZSBub24tbmVnYXRpdmUgbmFub3NlY29uZHMgdmFsdWVzIHRoYXQgY291bnQgZm9yd2FyZCBpbiB0aW1lLiBNdXN0IGJlXG4gICAgICogZnJvbSAwIHRvIDk5OSw5OTksOTk5IGluY2x1c2l2ZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzZWNvbmRzLCBuYW5vc2Vjb25kcykge1xuICAgICAgICAoMCwgdmFsaWRhdGVfMS52YWxpZGF0ZUludGVnZXIpKCdzZWNvbmRzJywgc2Vjb25kcywge1xuICAgICAgICAgICAgbWluVmFsdWU6IE1JTl9TRUNPTkRTLFxuICAgICAgICAgICAgbWF4VmFsdWU6IE1BWF9TRUNPTkRTLFxuICAgICAgICB9KTtcbiAgICAgICAgKDAsIHZhbGlkYXRlXzEudmFsaWRhdGVJbnRlZ2VyKSgnbmFub3NlY29uZHMnLCBuYW5vc2Vjb25kcywge1xuICAgICAgICAgICAgbWluVmFsdWU6IDAsXG4gICAgICAgICAgICBtYXhWYWx1ZTogOTk5OTk5OTk5LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc2Vjb25kcyA9IHNlY29uZHM7XG4gICAgICAgIHRoaXMuX25hbm9zZWNvbmRzID0gbmFub3NlY29uZHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBvZiBVVEMgdGltZSBzaW5jZSBVbml4IGVwb2NoIDE5NzAtMDEtMDFUMDA6MDA6MDBaLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBsZXQgZG9jdW1lbnRSZWYgPSBmaXJlc3RvcmUuZG9jKCdjb2wvZG9jJyk7XG4gICAgICpcbiAgICAgKiBkb2N1bWVudFJlZi5nZXQoKS50aGVuKHNuYXAgPT4ge1xuICAgICAqICAgbGV0IHVwZGF0ZWQgPSBzbmFwLnVwZGF0ZVRpbWU7XG4gICAgICogICBjb25zb2xlLmxvZyhgVXBkYXRlZCBhdCAke3VwZGF0ZWQuc2Vjb25kc31zICR7dXBkYXRlZC5uYW5vc2Vjb25kc31uc2ApO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogYGBgXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgc2Vjb25kcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlY29uZHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBub24tbmVnYXRpdmUgZnJhY3Rpb25zIG9mIGEgc2Vjb25kIGF0IG5hbm9zZWNvbmQgcmVzb2x1dGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogbGV0IGRvY3VtZW50UmVmID0gZmlyZXN0b3JlLmRvYygnY29sL2RvYycpO1xuICAgICAqXG4gICAgICogZG9jdW1lbnRSZWYuZ2V0KCkudGhlbihzbmFwID0+IHtcbiAgICAgKiAgIGxldCB1cGRhdGVkID0gc25hcC51cGRhdGVUaW1lO1xuICAgICAqICAgY29uc29sZS5sb2coYFVwZGF0ZWQgYXQgJHt1cGRhdGVkLnNlY29uZHN9cyAke3VwZGF0ZWQubmFub3NlY29uZHN9bnNgKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IG5hbm9zZWNvbmRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFub3NlY29uZHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgYERhdGVgIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyB0aW1lc3RhbXAuIFRoaXMgbWF5IGxvc2VcbiAgICAgKiBwcmVjaXNpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIGxldCBkb2N1bWVudFJlZiA9IGZpcmVzdG9yZS5kb2MoJ2NvbC9kb2MnKTtcbiAgICAgKlxuICAgICAqIGRvY3VtZW50UmVmLmdldCgpLnRoZW4oc25hcCA9PiB7XG4gICAgICogICBjb25zb2xlLmxvZyhgRG9jdW1lbnQgdXBkYXRlZCBhdDogJHtzbmFwLnVwZGF0ZVRpbWUudG9EYXRlKCl9YCk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJuIHtEYXRlfSBKYXZhU2NyaXB0IGBEYXRlYCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzYW1lIHBvaW50IGluIHRpbWVcbiAgICAgKiBhcyB0aGlzIGBUaW1lc3RhbXBgLCB3aXRoIG1pbGxpc2Vjb25kIHByZWNpc2lvbi5cbiAgICAgKi9cbiAgICB0b0RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLl9zZWNvbmRzICogMTAwMCArIE1hdGgucm91bmQodGhpcy5fbmFub3NlY29uZHMgLyBNU19UT19OQU5PUykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIFVuaXggZXBvY2ggMTk3MC0wMS0wMVQwMDowMDowMFouXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIGxldCBkb2N1bWVudFJlZiA9IGZpcmVzdG9yZS5kb2MoJ2NvbC9kb2MnKTtcbiAgICAgKlxuICAgICAqIGRvY3VtZW50UmVmLmdldCgpLnRoZW4oc25hcCA9PiB7XG4gICAgICogICBsZXQgc3RhcnRUaW1lID0gc25hcC5nZXQoJ3N0YXJ0VGltZScpO1xuICAgICAqICAgbGV0IGVuZFRpbWUgPSBzbmFwLmdldCgnZW5kVGltZScpO1xuICAgICAqICAgY29uc29sZS5sb2coYER1cmF0aW9uOiAke2VuZFRpbWUgLSBzdGFydFRpbWV9YCk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBwb2ludCBpbiB0aW1lIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyB0aW1lc3RhbXAsXG4gICAgICogcmVwcmVzZW50ZWQgYXMgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgVW5peCBlcG9jaFxuICAgICAqIDE5NzAtMDEtMDFUMDA6MDA6MDBaLlxuICAgICAqL1xuICAgIHRvTWlsbGlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2Vjb25kcyAqIDEwMDAgKyBNYXRoLmZsb29yKHRoaXMuX25hbm9zZWNvbmRzIC8gTVNfVE9fTkFOT1MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zICd0cnVlJyBpZiB0aGlzIGBUaW1lc3RhbXBgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIGxldCBkb2N1bWVudFJlZiA9IGZpcmVzdG9yZS5kb2MoJ2NvbC9kb2MnKTtcbiAgICAgKlxuICAgICAqIGRvY3VtZW50UmVmLmdldCgpLnRoZW4oc25hcCA9PiB7XG4gICAgICogICBpZiAoc25hcC5jcmVhdGVUaW1lLmlzRXF1YWwoc25hcC51cGRhdGVUaW1lKSkge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnRG9jdW1lbnQgaXMgaW4gaXRzIGluaXRpYWwgc3RhdGUuJyk7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0ge2FueX0gb3RoZXIgVGhlIGBUaW1lc3RhbXBgIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSAndHJ1ZScgaWYgdGhpcyBgVGltZXN0YW1wYCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqL1xuICAgIGlzRXF1YWwob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzID09PSBvdGhlciB8fFxuICAgICAgICAgICAgKG90aGVyIGluc3RhbmNlb2YgVGltZXN0YW1wICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fc2Vjb25kcyA9PT0gb3RoZXIuc2Vjb25kcyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX25hbm9zZWNvbmRzID09PSBvdGhlci5uYW5vc2Vjb25kcykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgdGhlIFByb3RvYnVmIGBUaW1lc3RhbXBgIG9iamVjdCBmb3IgdGhpcyB0aW1lc3RhbXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBgVGltZXN0YW1wYCBQcm90b2J1ZiBvYmplY3QuXG4gICAgICovXG4gICAgdG9Qcm90bygpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0ge307XG4gICAgICAgIGlmICh0aGlzLnNlY29uZHMpIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcC5zZWNvbmRzID0gdGhpcy5zZWNvbmRzLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubmFub3NlY29uZHMpIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcC5uYW5vcyA9IHRoaXMubmFub3NlY29uZHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdGltZXN0YW1wVmFsdWU6IHRpbWVzdGFtcCB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGlzIG9iamVjdCB0byBhIHByaW1pdGl2ZSBgc3RyaW5nYCwgd2hpY2ggYWxsb3dzIGBUaW1lc3RhbXBgIG9iamVjdHMgdG8gYmUgY29tcGFyZWRcbiAgICAgKiB1c2luZyB0aGUgYD5gLCBgPD1gLCBgPj1gIGFuZCBgPmAgb3BlcmF0b3JzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBhIHN0cmluZyBlbmNvZGluZyBvZiB0aGlzIG9iamVjdC5cbiAgICAgKi9cbiAgICB2YWx1ZU9mKCkge1xuICAgICAgICAvLyBUaGlzIG1ldGhvZCByZXR1cm5zIGEgc3RyaW5nIG9mIHRoZSBmb3JtIDxzZWNvbmRzPi48bmFub3NlY29uZHM+IHdoZXJlIDxzZWNvbmRzPiBpc1xuICAgICAgICAvLyB0cmFuc2xhdGVkIHRvIGhhdmUgYSBub24tbmVnYXRpdmUgdmFsdWUgYW5kIGJvdGggPHNlY29uZHM+IGFuZCA8bmFub3NlY29uZHM+IGFyZSBsZWZ0LXBhZGRlZFxuICAgICAgICAvLyB3aXRoIHplcm9lcyB0byBiZSBhIGNvbnNpc3RlbnQgbGVuZ3RoLiBTdHJpbmdzIHdpdGggdGhpcyBmb3JtYXQgdGhlbiBoYXZlIGEgbGV4aWNvZ3JhcGhpY2FsXG4gICAgICAgIC8vIG9yZGVyaW5nIHRoYXQgbWF0Y2hlcyB0aGUgZXhwZWN0ZWQgb3JkZXJpbmcuIFRoZSA8c2Vjb25kcz4gdHJhbnNsYXRpb24gaXMgZG9uZSB0byBhdm9pZFxuICAgICAgICAvLyBoYXZpbmcgYSBsZWFkaW5nIG5lZ2F0aXZlIHNpZ24gKGkuZS4gYSBsZWFkaW5nICctJyBjaGFyYWN0ZXIpIGluIGl0cyBzdHJpbmcgcmVwcmVzZW50YXRpb24sXG4gICAgICAgIC8vIHdoaWNoIHdvdWxkIGFmZmVjdCBpdHMgbGV4aWNvZ3JhcGhpY2FsIG9yZGVyaW5nLlxuICAgICAgICBjb25zdCBhZGp1c3RlZFNlY29uZHMgPSB0aGlzLnNlY29uZHMgLSBNSU5fU0VDT05EUztcbiAgICAgICAgLy8gTm90ZTogVXAgdG8gMTIgZGVjaW1hbCBkaWdpdHMgYXJlIHJlcXVpcmVkIHRvIHJlcHJlc2VudCBhbGwgdmFsaWQgJ3NlY29uZHMnIHZhbHVlcy5cbiAgICAgICAgY29uc3QgZm9ybWF0dGVkU2Vjb25kcyA9IFN0cmluZyhhZGp1c3RlZFNlY29uZHMpLnBhZFN0YXJ0KDEyLCAnMCcpO1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWROYW5vc2Vjb25kcyA9IFN0cmluZyh0aGlzLm5hbm9zZWNvbmRzKS5wYWRTdGFydCg5LCAnMCcpO1xuICAgICAgICByZXR1cm4gZm9ybWF0dGVkU2Vjb25kcyArICcuJyArIGZvcm1hdHRlZE5hbm9zZWNvbmRzO1xuICAgIH1cbn1cbmV4cG9ydHMuVGltZXN0YW1wID0gVGltZXN0YW1wO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXN0YW1wLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/transaction.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/transaction.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Transaction = void 0;\nexports.parseGetAllArguments = parseGetAllArguments;\nconst backoff_1 = __webpack_require__(/*! ./backoff */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/backoff.js\");\nconst index_1 = __webpack_require__(/*! ./index */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/index.js\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\nconst path_1 = __webpack_require__(/*! ./path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst aggregate_query_1 = __webpack_require__(/*! ./reference/aggregate-query */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/aggregate-query.js\");\nconst document_reference_1 = __webpack_require__(/*! ./reference/document-reference */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/document-reference.js\");\nconst query_1 = __webpack_require__(/*! ./reference/query */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/query.js\");\nconst helpers_1 = __webpack_require__(/*! ./reference/helpers */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/helpers.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst document_reader_1 = __webpack_require__(/*! ./document-reader */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document-reader.js\");\nconst trace_util_1 = __webpack_require__(/*! ./telemetry/trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js\");\n/*!\n * Error message for transactional reads that were executed after performing\n * writes.\n */\nconst READ_AFTER_WRITE_ERROR_MSG = 'Firestore transactions require all reads to be executed before all writes.';\nconst READ_ONLY_WRITE_ERROR_MSG = 'Firestore read-only transactions cannot execute writes.';\n/**\n * A reference to a transaction.\n *\n * The Transaction object passed to a transaction's updateFunction provides\n * the methods to read and write data within the transaction context. See\n * [runTransaction()]{@link Firestore#runTransaction}.\n *\n * @class Transaction\n */\nclass Transaction {\n    /**\n     * @private\n     *\n     * @param firestore The Firestore Database client.\n     * @param requestTag A unique client-assigned identifier for the scope of\n     * this transaction.\n     * @param transactionOptions The user-defined options for this transaction.\n     */\n    constructor(firestore, requestTag, transactionOptions) {\n        this._maxAttempts = index_1.DEFAULT_MAX_TRANSACTION_ATTEMPTS;\n        this._firestore = firestore;\n        this._requestTag = requestTag;\n        if (transactionOptions === null || transactionOptions === void 0 ? void 0 : transactionOptions.readOnly) {\n            // Avoid initialising write batch and backoff unnecessarily for read-only transactions\n            this._maxAttempts = 1;\n            this._readOnlyReadTime = transactionOptions.readTime;\n        }\n        else {\n            this._maxAttempts =\n                (transactionOptions === null || transactionOptions === void 0 ? void 0 : transactionOptions.maxAttempts) || index_1.DEFAULT_MAX_TRANSACTION_ATTEMPTS;\n            this._writeBatch = firestore.batch();\n            this._backoff = new backoff_1.ExponentialBackoff();\n        }\n    }\n    /**\n     * Retrieve a document or a query result from the database. Holds a\n     * pessimistic lock on all returned documents.\n     *\n     * @param {DocumentReference|Query} refOrQuery The document or query to\n     * return.\n     * @returns {Promise} A Promise that resolves with a DocumentSnapshot or\n     * QuerySnapshot for the returned documents.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n     *     } else {\n     *       transaction.create(documentRef, { count: 1 });\n     *     }\n     *   });\n     * });\n     * ```\n     */\n    get(refOrQuery) {\n        if (this._writeBatch && !this._writeBatch.isEmpty) {\n            throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n        }\n        if (refOrQuery instanceof document_reference_1.DocumentReference) {\n            return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_TRANSACTION_GET_DOCUMENT, () => {\n                return this.withLazyStartedTransaction(refOrQuery, this.getSingleFn);\n            });\n        }\n        if (refOrQuery instanceof query_1.Query || refOrQuery instanceof aggregate_query_1.AggregateQuery) {\n            return this._firestore._traceUtil.startActiveSpan(refOrQuery instanceof query_1.Query\n                ? trace_util_1.SPAN_NAME_TRANSACTION_GET_QUERY\n                : trace_util_1.SPAN_NAME_TRANSACTION_GET_AGGREGATION_QUERY, () => {\n                return this.withLazyStartedTransaction(refOrQuery, this.getQueryFn);\n            });\n        }\n        throw new Error('Value for argument \"refOrQuery\" must be a DocumentReference, Query, or AggregateQuery.');\n    }\n    /**\n     * Retrieves multiple documents from Firestore. Holds a pessimistic lock on\n     * all returned documents.\n     *\n     * The first argument is required and must be of type `DocumentReference`\n     * followed by any additional `DocumentReference` documents. If used, the\n     * optional `ReadOptions` must be the last argument.\n     *\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n     * `DocumentReferences` to receive, followed by an optional field mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * ```\n     * let firstDoc = firestore.doc('col/doc1');\n     * let secondDoc = firestore.doc('col/doc2');\n     * let resultDoc = firestore.doc('col/doc3');\n     *\n     * firestore.runTransaction(transaction => {\n     *   return transaction.getAll(firstDoc, secondDoc).then(docs => {\n     *     transaction.set(resultDoc, {\n     *       sum: docs[0].get('count') + docs[1].get('count')\n     *     });\n     *   });\n     * });\n     * ```\n     */\n    getAll(...documentRefsOrReadOptions) {\n        if (this._writeBatch && !this._writeBatch.isEmpty) {\n            throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n        }\n        (0, validate_1.validateMinNumberOfArguments)('Transaction.getAll', documentRefsOrReadOptions, 1);\n        return this.withLazyStartedTransaction(parseGetAllArguments(documentRefsOrReadOptions), this.getBatchFn);\n    }\n    /**\n     * Create the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. The operation will\n     * fail the transaction if a document exists at the specified location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {DocumentData} data The object data to serialize as the document.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (!doc.exists) {\n     *       transaction.create(documentRef, { foo: 'bar' });\n     *     }\n     *   });\n     * });\n     * ```\n     */\n    create(documentRef, data) {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        this._writeBatch.create(documentRef, data);\n        return this;\n    }\n    /**\n     * Writes to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document\n     * does not exist yet, it will be created. If you pass\n     * [SetOptions]{@link SetOptions}, the provided data can be merged into the\n     * existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T|Partial<T>} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call remain\n     * untouched. If your input sets any field to an empty map, all nested fields\n     * are overwritten.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched. If your input sets any field to\n     * an empty map, all nested fields are overwritten.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   transaction.set(documentRef, { foo: 'bar' });\n     *   return Promise.resolve();\n     * });\n     * ```\n     */\n    set(documentRef, data, options) {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        if (options) {\n            this._writeBatch.set(documentRef, data, options);\n        }\n        else {\n            this._writeBatch.set(documentRef, data);\n        }\n        return this;\n    }\n    /**\n     * Updates fields in the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. The update will\n     * fail if applied to a document that does not exist.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object\n     * containing the fields and values with which to update the document\n     * or the path of the first field to update.\n     * @param {\n     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n     * An alternating list of field paths and values to update or a Precondition\n     * to to enforce on this update.\n     * @throws {Error} If the provided input is not valid Firestore data.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n     *     } else {\n     *       transaction.create(documentRef, { count: 1 });\n     *     }\n     *   });\n     * });\n     * ```\n     */\n    update(documentRef, dataOrField, ...preconditionOrValues) {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        // eslint-disable-next-line prefer-rest-params\n        (0, validate_1.validateMinNumberOfArguments)('Transaction.update', arguments, 2);\n        this._writeBatch.update(documentRef, dataOrField, ...preconditionOrValues);\n        return this;\n    }\n    /**\n     * Deletes the document referred to by the provided [DocumentReference]\n     * {@link DocumentReference}.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the transaction if the\n     * document doesn't exist or was last updated at a different time.\n     * @param {boolean=} precondition.exists If set, enforces that the target\n     * document must or must not exist.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   transaction.delete(documentRef);\n     *   return Promise.resolve();\n     * });\n     * ```\n     */\n    delete(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    documentRef, precondition) {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        this._writeBatch.delete(documentRef, precondition);\n        return this;\n    }\n    /**\n     * Commits all queued-up changes in this transaction and releases all locks.\n     *\n     * @private\n     * @internal\n     */\n    async commit() {\n        var _a;\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_TRANSACTION_COMMIT, async () => {\n            if (!this._writeBatch) {\n                throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n            }\n            // If we have not performed any reads in this particular attempt\n            // then the writes will be atomically committed without a transaction ID\n            let transactionId;\n            if (this._transactionIdPromise) {\n                transactionId = await this._transactionIdPromise;\n            }\n            else if (this._writeBatch.isEmpty) {\n                // If we have not started a transaction (no reads) and we have no writes\n                // then the commit is a no-op (success)\n                return;\n            }\n            await this._writeBatch._commit({\n                transactionId,\n                requestTag: this._requestTag,\n            });\n            this._transactionIdPromise = undefined;\n            this._prevTransactionId = transactionId;\n        }, {\n            [trace_util_1.ATTRIBUTE_KEY_IS_TRANSACTIONAL]: true,\n            [trace_util_1.ATTRIBUTE_KEY_DOC_COUNT]: (_a = this._writeBatch) === null || _a === void 0 ? void 0 : _a._opCount,\n        });\n    }\n    /**\n     * Releases all locks and rolls back this transaction. The rollback process\n     * is completed asynchronously and this function resolves before the operation\n     * is completed.\n     *\n     * @private\n     * @internal\n     */\n    async rollback() {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_TRANSACTION_ROLLBACK, async () => {\n            // No need to roll back if we have not lazily started the transaction\n            // or if we are read only\n            if (!this._transactionIdPromise || !this._writeBatch) {\n                return;\n            }\n            let transactionId;\n            try {\n                transactionId = await this._transactionIdPromise;\n            }\n            catch (_a) {\n                // This means the initial read operation rejected\n                // and we do not have a transaction ID to roll back\n                this._transactionIdPromise = undefined;\n                return;\n            }\n            const request = {\n                database: this._firestore.formattedName,\n                transaction: transactionId,\n            };\n            this._transactionIdPromise = undefined;\n            this._prevTransactionId = transactionId;\n            // We don't need to wait for rollback to completed before continuing.\n            // If there are any locks held, then rollback will eventually release them.\n            // Rollback can be done concurrently thereby reducing latency caused by\n            // otherwise blocking.\n            this._firestore\n                .request('rollback', request, this._requestTag)\n                .catch(err => {\n                (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Best effort to rollback failed with error:', err);\n            });\n        });\n    }\n    /**\n     * Executes `updateFunction()` and commits the transaction with retry.\n     *\n     * @private\n     * @internal\n     * @param updateFunction The user function to execute within the transaction\n     * context.\n     */\n    async runTransaction(updateFunction) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_TRANSACTION_RUN, async (span) => {\n            // No backoff is set for readonly transactions (i.e. attempts == 1)\n            if (!this._writeBatch) {\n                return this.runTransactionOnce(updateFunction);\n            }\n            let lastError = undefined;\n            for (let attempt = 0; attempt < this._maxAttempts; ++attempt) {\n                span.setAttributes({\n                    [trace_util_1.ATTRIBUTE_KEY_TRANSACTION_TYPE]: this._writeBatch\n                        ? 'READ_WRITE'\n                        : 'READ_ONLY',\n                    [trace_util_1.ATTRIBUTE_KEY_ATTEMPTS_ALLOWED]: this._maxAttempts,\n                    [trace_util_1.ATTRIBUTE_KEY_ATTEMPTS_REMAINING]: this._maxAttempts - attempt - 1,\n                });\n                try {\n                    if (lastError) {\n                        (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Retrying transaction after error:', lastError);\n                        span.addEvent('Initiate transaction retry');\n                    }\n                    this._writeBatch._reset();\n                    await maybeBackoff(this._backoff, lastError);\n                    return await this.runTransactionOnce(updateFunction);\n                }\n                catch (err) {\n                    lastError = err;\n                    if (!isRetryableTransactionError(err)) {\n                        break;\n                    }\n                }\n            }\n            (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Transaction not eligible for retry, returning error: %s', lastError);\n            return Promise.reject(lastError);\n        });\n    }\n    /**\n     * Make single attempt to execute `updateFunction()` and commit the\n     * transaction. Will rollback upon error.\n     *\n     * @private\n     * @internal\n     * @param updateFunction The user function to execute within the transaction\n     * context.\n     */\n    async runTransactionOnce(updateFunction) {\n        try {\n            const promise = updateFunction(this);\n            if (!(promise instanceof Promise)) {\n                throw new Error('You must return a Promise in your transaction()-callback.');\n            }\n            const result = await promise;\n            if (this._writeBatch) {\n                await this.commit();\n            }\n            return result;\n        }\n        catch (err) {\n            (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Rolling back transaction after callback error:', err);\n            await this.rollback();\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Given a function that performs a read operation, ensures that the first one\n     * is provided with new transaction options and all subsequent ones are queued\n     * upon the resulting transaction ID.\n     */\n    withLazyStartedTransaction(param, resultFn) {\n        if (this._transactionIdPromise) {\n            // Simply queue this subsequent read operation after the first read\n            // operation has resolved and we don't expect a transaction ID in the\n            // response because we are not starting a new transaction\n            return this._transactionIdPromise\n                .then(opts => resultFn.call(this, param, opts))\n                .then(r => r.result);\n        }\n        else {\n            if (this._readOnlyReadTime) {\n                // We do not start a transaction for read-only transactions\n                // do not set _prevTransactionId\n                return resultFn\n                    .call(this, param, this._readOnlyReadTime)\n                    .then(r => r.result);\n            }\n            else {\n                // This is the first read of the transaction so we create the appropriate\n                // options for lazily starting the transaction inside this first read op\n                const opts = {};\n                if (this._writeBatch) {\n                    opts.readWrite = this._prevTransactionId\n                        ? { retryTransaction: this._prevTransactionId }\n                        : {};\n                }\n                else {\n                    opts.readOnly = {};\n                }\n                const resultPromise = resultFn.call(this, param, opts);\n                // Ensure the _transactionIdPromise is set synchronously so that\n                // subsequent operations will not race to start another transaction\n                this._transactionIdPromise = resultPromise.then(r => {\n                    if (!r.transaction) {\n                        // Illegal state\n                        // The read operation was provided with new transaction options but did not return a transaction ID\n                        // Rejecting here will cause all queued reads to reject\n                        throw new Error('Transaction ID was missing from server response');\n                    }\n                    return r.transaction;\n                });\n                return resultPromise.then(r => r.result);\n            }\n        }\n    }\n    async getSingleFn(document, opts) {\n        const documentReader = new document_reader_1.DocumentReader(this._firestore, [document], undefined, opts);\n        const { transaction, result: [result], } = await documentReader._get(this._requestTag);\n        return { transaction, result };\n    }\n    async getBatchFn({ documents, fieldMask, }, opts) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_TRANSACTION_GET_DOCUMENTS, async () => {\n            const documentReader = new document_reader_1.DocumentReader(this._firestore, documents, fieldMask, opts);\n            return documentReader._get(this._requestTag);\n        });\n    }\n    async getQueryFn(query, opts) {\n        return query._get(opts);\n    }\n}\nexports.Transaction = Transaction;\n/**\n * Parses the arguments for the `getAll()` call supported by both the Firestore\n * and Transaction class.\n *\n * @private\n * @internal\n * @param documentRefsOrReadOptions An array of document references followed by\n * an optional ReadOptions object.\n */\nfunction parseGetAllArguments(documentRefsOrReadOptions) {\n    let documents;\n    let readOptions = undefined;\n    if (Array.isArray(documentRefsOrReadOptions[0])) {\n        throw new Error('getAll() no longer accepts an array as its first argument. ' +\n            'Please unpack your array and call getAll() with individual arguments.');\n    }\n    if (documentRefsOrReadOptions.length > 0 &&\n        (0, util_1.isPlainObject)(documentRefsOrReadOptions[documentRefsOrReadOptions.length - 1])) {\n        readOptions = documentRefsOrReadOptions.pop();\n        documents = documentRefsOrReadOptions;\n    }\n    else {\n        documents = documentRefsOrReadOptions;\n    }\n    for (let i = 0; i < documents.length; ++i) {\n        (0, helpers_1.validateDocumentReference)(i, documents[i]);\n    }\n    validateReadOptions('options', readOptions, { optional: true });\n    const fieldMask = readOptions && readOptions.fieldMask\n        ? readOptions.fieldMask.map(fieldPath => path_1.FieldPath.fromArgument(fieldPath))\n        : undefined;\n    return { fieldMask, documents };\n}\n/**\n * Validates the use of 'options' as ReadOptions and enforces that 'fieldMask'\n * is an array of strings or field paths.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the ReadOptions can be omitted.\n */\nfunction validateReadOptions(arg, value, options) {\n    if (!(0, validate_1.validateOptional)(value, options)) {\n        if (!(0, util_1.isObject)(value)) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'read option')} Input is not an object.'`);\n        }\n        const options = value;\n        if (options.fieldMask !== undefined) {\n            if (!Array.isArray(options.fieldMask)) {\n                throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'read option')} \"fieldMask\" is not an array.`);\n            }\n            for (let i = 0; i < options.fieldMask.length; ++i) {\n                try {\n                    (0, path_1.validateFieldPath)(i, options.fieldMask[i]);\n                }\n                catch (err) {\n                    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'read option')} \"fieldMask\" is not valid: ${err.message}`);\n                }\n            }\n        }\n    }\n}\nfunction isRetryableTransactionError(error) {\n    if (error.code !== undefined) {\n        // This list is based on https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/core/transaction_runner.ts#L112\n        switch (error.code) {\n            case 10 /* StatusCode.ABORTED */:\n            case 1 /* StatusCode.CANCELLED */:\n            case 2 /* StatusCode.UNKNOWN */:\n            case 4 /* StatusCode.DEADLINE_EXCEEDED */:\n            case 13 /* StatusCode.INTERNAL */:\n            case 14 /* StatusCode.UNAVAILABLE */:\n            case 16 /* StatusCode.UNAUTHENTICATED */:\n            case 8 /* StatusCode.RESOURCE_EXHAUSTED */:\n                return true;\n            case 3 /* StatusCode.INVALID_ARGUMENT */:\n                // The Firestore backend uses \"INVALID_ARGUMENT\" for transactions\n                // IDs that have expired. While INVALID_ARGUMENT is generally not\n                // retryable, we retry this specific case.\n                return !!error.message.match(/transaction has expired/);\n            default:\n                return false;\n        }\n    }\n    return false;\n}\n/**\n * Delays further operations based on the provided error.\n *\n * @private\n * @internal\n * @return A Promise that resolves after the delay expired.\n */\nasync function maybeBackoff(backoff, error) {\n    if ((error === null || error === void 0 ? void 0 : error.code) === 8 /* StatusCode.RESOURCE_EXHAUSTED */) {\n        backoff.resetToMax();\n    }\n    await backoff.backoffAndWait();\n}\n//# sourceMappingURL=transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/transaction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultConverter = defaultConverter;\n/**\n * A default converter to use when none is provided.\n *\n * By declaring the converter as a variable instead of creating the object\n * inside defaultConverter(), object equality when comparing default converters\n * is preserved.\n * @private\n * @internal\n */\nconst defaultConverterObj = {\n    toFirestore(modelObject) {\n        return modelObject;\n    },\n    fromFirestore(snapshot) {\n        return snapshot.data();\n    },\n};\n/**\n * A default converter to use when none is provided.\n * @private\n * @internal\n */\nfunction defaultConverter() {\n    return defaultConverterObj;\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL2ZpcmVzdG9yZS9idWlsZC9zcmMvdHlwZXMuanM/OWE0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRDb252ZXJ0ZXIgPSBkZWZhdWx0Q29udmVydGVyO1xuLyoqXG4gKiBBIGRlZmF1bHQgY29udmVydGVyIHRvIHVzZSB3aGVuIG5vbmUgaXMgcHJvdmlkZWQuXG4gKlxuICogQnkgZGVjbGFyaW5nIHRoZSBjb252ZXJ0ZXIgYXMgYSB2YXJpYWJsZSBpbnN0ZWFkIG9mIGNyZWF0aW5nIHRoZSBvYmplY3RcbiAqIGluc2lkZSBkZWZhdWx0Q29udmVydGVyKCksIG9iamVjdCBlcXVhbGl0eSB3aGVuIGNvbXBhcmluZyBkZWZhdWx0IGNvbnZlcnRlcnNcbiAqIGlzIHByZXNlcnZlZC5cbiAqIEBwcml2YXRlXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgZGVmYXVsdENvbnZlcnRlck9iaiA9IHtcbiAgICB0b0ZpcmVzdG9yZShtb2RlbE9iamVjdCkge1xuICAgICAgICByZXR1cm4gbW9kZWxPYmplY3Q7XG4gICAgfSxcbiAgICBmcm9tRmlyZXN0b3JlKHNuYXBzaG90KSB7XG4gICAgICAgIHJldHVybiBzbmFwc2hvdC5kYXRhKCk7XG4gICAgfSxcbn07XG4vKipcbiAqIEEgZGVmYXVsdCBjb252ZXJ0ZXIgdG8gdXNlIHdoZW4gbm9uZSBpcyBwcm92aWRlZC5cbiAqIEBwcml2YXRlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdENvbnZlcnRlcigpIHtcbiAgICByZXR1cm4gZGVmYXVsdENvbnZlcnRlck9iajtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js":
/*!****************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/util.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Deferred = void 0;\nexports.autoId = autoId;\nexports.requestTag = requestTag;\nexports.isObject = isObject;\nexports.isPlainObject = isPlainObject;\nexports.isEmpty = isEmpty;\nexports.isFunction = isFunction;\nexports.isPermanentRpcError = isPermanentRpcError;\nexports.getRetryCodes = getRetryCodes;\nexports.getTotalTimeout = getTotalTimeout;\nexports.getRetryParams = getRetryParams;\nexports.silencePromise = silencePromise;\nexports.wrapError = wrapError;\nexports.tryGetPreferRestEnvironmentVariable = tryGetPreferRestEnvironmentVariable;\nexports.mapToArray = mapToArray;\nexports.isArrayEqual = isArrayEqual;\nexports.isPrimitiveArrayEqual = isPrimitiveArrayEqual;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst gapicConfig = __webpack_require__(/*! ./v1/firestore_client_config.json */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_client_config.json\");\n/**\n * A Promise implementation that supports deferred resolution.\n * @private\n * @internal\n */\nclass Deferred {\n    constructor() {\n        this.resolve = () => { };\n        this.reject = () => { };\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexports.Deferred = Deferred;\n/**\n * Generate a unique client-side identifier.\n *\n * Used for the creation of new documents.\n *\n * @private\n * @internal\n * @returns {string} A unique 20-character wide identifier.\n */\nfunction autoId() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let autoId = '';\n    while (autoId.length < 20) {\n        const bytes = (0, crypto_1.randomBytes)(40);\n        bytes.forEach(b => {\n            // Length of `chars` is 62. We only take bytes between 0 and 62*4-1\n            // (both inclusive). The value is then evenly mapped to indices of `char`\n            // via a modulo operation.\n            const maxValue = 62 * 4 - 1;\n            if (autoId.length < 20 && b <= maxValue) {\n                autoId += chars.charAt(b % 62);\n            }\n        });\n    }\n    return autoId;\n}\n/**\n * Generate a short and semi-random client-side identifier.\n *\n * Used for the creation of request tags.\n *\n * @private\n * @internal\n * @returns {string} A random 5-character wide identifier.\n */\nfunction requestTag() {\n    return autoId().substr(0, 5);\n}\n/**\n * Determines whether `value` is a JavaScript object.\n *\n * @private\n * @internal\n */\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Verifies that 'obj' is a plain JavaScript object that can be encoded as a\n * 'Map' in Firestore.\n *\n * @private\n * @internal\n * @param input The argument to verify.\n * @returns 'true' if the input can be a treated as a plain object.\n */\nfunction isPlainObject(input) {\n    return (isObject(input) &&\n        (Object.getPrototypeOf(input) === Object.prototype ||\n            Object.getPrototypeOf(input) === null ||\n            input.constructor.name === 'Object'));\n}\n/**\n * Returns whether `value` has no custom properties.\n *\n * @private\n * @internal\n */\nfunction isEmpty(value) {\n    return Object.keys(value).length === 0;\n}\n/**\n * Determines whether `value` is a JavaScript function.\n *\n * @private\n * @internal\n */\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * Determines whether the provided error is considered permanent for the given\n * RPC.\n *\n * @private\n * @internal\n */\nfunction isPermanentRpcError(err, methodName) {\n    if (err.code !== undefined) {\n        const retryCodes = getRetryCodes(methodName);\n        return retryCodes.indexOf(err.code) === -1;\n    }\n    else {\n        return false;\n    }\n}\nlet serviceConfig;\n/**\n * Lazy-loads the service config when first accessed.\n * @private\n * @internal\n **/\nfunction getServiceConfig(methodName) {\n    if (!serviceConfig) {\n        serviceConfig = (__webpack_require__(/*! google-gax/build/src/fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\").constructSettings)('google.firestore.v1.Firestore', gapicConfig, {}, (__webpack_require__(/*! google-gax/build/src/status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\").Status));\n    }\n    return serviceConfig[methodName];\n}\n/**\n * Returns the list of retryable error codes specified in the service\n * configuration.\n * @private\n * @internal\n */\nfunction getRetryCodes(methodName) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.retryCodes) !== null && _c !== void 0 ? _c : [];\n}\n/**\n * Gets the total timeout in milliseconds from the retry settings in\n * the service config for the given RPC. If the total timeout is not\n * set, then `0` is returned.\n *\n * @private\n * @internal\n */\nfunction getTotalTimeout(methodName) {\n    var _a, _b, _c, _d;\n    return ((_d = (_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.backoffSettings) === null || _c === void 0 ? void 0 : _c.totalTimeoutMillis) !== null && _d !== void 0 ? _d : 0);\n}\n/**\n * Returns the backoff setting from the service configuration.\n * @private\n * @internal\n */\nfunction getRetryParams(methodName) {\n    var _a, _b, _c;\n    return ((_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.backoffSettings) !== null && _c !== void 0 ? _c : (__webpack_require__(/*! google-gax/build/src/fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\").createDefaultBackoffSettings)());\n}\n/**\n * Returns a promise with a void return type. The returned promise swallows all\n * errors and never throws.\n *\n * This is primarily used to wait for a promise to complete when the result of\n * the promise will be discarded.\n *\n * @private\n * @internal\n */\nfunction silencePromise(promise) {\n    return promise.then(() => { }, () => { });\n}\n/**\n * Wraps the provided error in a new error that includes the provided stack.\n *\n * Used to preserve stack traces across async calls.\n * @private\n * @internal\n */\nfunction wrapError(err, stack) {\n    err.stack += '\\nCaused by: ' + stack;\n    return err;\n}\n/**\n * Parses the value of the environment variable FIRESTORE_PREFER_REST, and\n * returns a value indicating if the environment variable enables or disables\n * preferRest.\n *\n * This function will warn to the console if the environment variable is set\n * to an unsupported value.\n *\n * @return `true` if the environment variable enables `preferRest`,\n * `false` if the environment variable disables `preferRest`, or `undefined`\n * if the environment variable is not set or is set to an unsupported value.\n *\n * @internal\n * @private\n */\nfunction tryGetPreferRestEnvironmentVariable() {\n    var _a;\n    const rawValue = (_a = process.env.FIRESTORE_PREFER_REST) === null || _a === void 0 ? void 0 : _a.trim().toLowerCase();\n    if (rawValue === undefined) {\n        return undefined;\n    }\n    else if (rawValue === '1' || rawValue === 'true') {\n        return true;\n    }\n    else if (rawValue === '0' || rawValue === 'false') {\n        return false;\n    }\n    else {\n        // eslint-disable-next-line no-console\n        console.warn(`An unsupported value was specified for the environment variable FIRESTORE_PREFER_REST. Value ${rawValue} is unsupported.`);\n        return undefined;\n    }\n}\n/**\n * Returns an array of values that are calculated by performing the given `fn`\n * on all keys in the given `obj` dictionary.\n *\n * @private\n * @internal\n */\nfunction mapToArray(obj, fn) {\n    const result = [];\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result.push(fn(obj[key], key, obj));\n        }\n    }\n    return result;\n}\n/**\n * Verifies equality for an array of objects using the `isEqual` interface.\n *\n * @private\n * @internal\n * @param left Array of objects supporting `isEqual`.\n * @param right Array of objects supporting `isEqual`.\n * @return True if arrays are equal.\n */\nfunction isArrayEqual(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (let i = 0; i < left.length; ++i) {\n        if (!left[i].isEqual(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Verifies equality for an array of primitives.\n *\n * @private\n * @internal\n * @param left Array of primitives.\n * @param right Array of primitives.\n * @return True if arrays are equal.\n */\nfunction isPrimitiveArrayEqual(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (let i = 0; i < left.length; ++i) {\n        if (left[i] !== right[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCLGNBQWM7QUFDZCxrQkFBa0I7QUFDbEIsZ0JBQWdCO0FBQ2hCLHFCQUFxQjtBQUNyQixlQUFlO0FBQ2Ysa0JBQWtCO0FBQ2xCLDJCQUEyQjtBQUMzQixxQkFBcUI7QUFDckIsdUJBQXVCO0FBQ3ZCLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIsaUJBQWlCO0FBQ2pCLDJDQUEyQztBQUMzQyxrQkFBa0I7QUFDbEIsb0JBQW9CO0FBQ3BCLDZCQUE2QjtBQUM3QixpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQyxvQkFBb0IsbUJBQU8sQ0FBQyxpSUFBbUM7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxSUFBMEQsaURBQWlELEVBQUUsc0hBQTZDO0FBQ2xMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxTUFBcU0sZ0pBQXFFO0FBQzFRO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxXQUFXO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxSEFBcUgsVUFBVTtBQUMvSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3V0aWwuanM/NTZkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRlZmVycmVkID0gdm9pZCAwO1xuZXhwb3J0cy5hdXRvSWQgPSBhdXRvSWQ7XG5leHBvcnRzLnJlcXVlc3RUYWcgPSByZXF1ZXN0VGFnO1xuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuZXhwb3J0cy5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbmV4cG9ydHMuaXNFbXB0eSA9IGlzRW1wdHk7XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuZXhwb3J0cy5pc1Blcm1hbmVudFJwY0Vycm9yID0gaXNQZXJtYW5lbnRScGNFcnJvcjtcbmV4cG9ydHMuZ2V0UmV0cnlDb2RlcyA9IGdldFJldHJ5Q29kZXM7XG5leHBvcnRzLmdldFRvdGFsVGltZW91dCA9IGdldFRvdGFsVGltZW91dDtcbmV4cG9ydHMuZ2V0UmV0cnlQYXJhbXMgPSBnZXRSZXRyeVBhcmFtcztcbmV4cG9ydHMuc2lsZW5jZVByb21pc2UgPSBzaWxlbmNlUHJvbWlzZTtcbmV4cG9ydHMud3JhcEVycm9yID0gd3JhcEVycm9yO1xuZXhwb3J0cy50cnlHZXRQcmVmZXJSZXN0RW52aXJvbm1lbnRWYXJpYWJsZSA9IHRyeUdldFByZWZlclJlc3RFbnZpcm9ubWVudFZhcmlhYmxlO1xuZXhwb3J0cy5tYXBUb0FycmF5ID0gbWFwVG9BcnJheTtcbmV4cG9ydHMuaXNBcnJheUVxdWFsID0gaXNBcnJheUVxdWFsO1xuZXhwb3J0cy5pc1ByaW1pdGl2ZUFycmF5RXF1YWwgPSBpc1ByaW1pdGl2ZUFycmF5RXF1YWw7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCBnYXBpY0NvbmZpZyA9IHJlcXVpcmUoXCIuL3YxL2ZpcmVzdG9yZV9jbGllbnRfY29uZmlnLmpzb25cIik7XG4vKipcbiAqIEEgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiB0aGF0IHN1cHBvcnRzIGRlZmVycmVkIHJlc29sdXRpb24uXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIERlZmVycmVkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gKCkgPT4geyB9O1xuICAgICAgICB0aGlzLnJlamVjdCA9ICgpID0+IHsgfTtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkRlZmVycmVkID0gRGVmZXJyZWQ7XG4vKipcbiAqIEdlbmVyYXRlIGEgdW5pcXVlIGNsaWVudC1zaWRlIGlkZW50aWZpZXIuXG4gKlxuICogVXNlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIG5ldyBkb2N1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICogQHJldHVybnMge3N0cmluZ30gQSB1bmlxdWUgMjAtY2hhcmFjdGVyIHdpZGUgaWRlbnRpZmllci5cbiAqL1xuZnVuY3Rpb24gYXV0b0lkKCkge1xuICAgIGNvbnN0IGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcbiAgICBsZXQgYXV0b0lkID0gJyc7XG4gICAgd2hpbGUgKGF1dG9JZC5sZW5ndGggPCAyMCkge1xuICAgICAgICBjb25zdCBieXRlcyA9ICgwLCBjcnlwdG9fMS5yYW5kb21CeXRlcykoNDApO1xuICAgICAgICBieXRlcy5mb3JFYWNoKGIgPT4ge1xuICAgICAgICAgICAgLy8gTGVuZ3RoIG9mIGBjaGFyc2AgaXMgNjIuIFdlIG9ubHkgdGFrZSBieXRlcyBiZXR3ZWVuIDAgYW5kIDYyKjQtMVxuICAgICAgICAgICAgLy8gKGJvdGggaW5jbHVzaXZlKS4gVGhlIHZhbHVlIGlzIHRoZW4gZXZlbmx5IG1hcHBlZCB0byBpbmRpY2VzIG9mIGBjaGFyYFxuICAgICAgICAgICAgLy8gdmlhIGEgbW9kdWxvIG9wZXJhdGlvbi5cbiAgICAgICAgICAgIGNvbnN0IG1heFZhbHVlID0gNjIgKiA0IC0gMTtcbiAgICAgICAgICAgIGlmIChhdXRvSWQubGVuZ3RoIDwgMjAgJiYgYiA8PSBtYXhWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGF1dG9JZCArPSBjaGFycy5jaGFyQXQoYiAlIDYyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhdXRvSWQ7XG59XG4vKipcbiAqIEdlbmVyYXRlIGEgc2hvcnQgYW5kIHNlbWktcmFuZG9tIGNsaWVudC1zaWRlIGlkZW50aWZpZXIuXG4gKlxuICogVXNlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIHJlcXVlc3QgdGFncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHJhbmRvbSA1LWNoYXJhY3RlciB3aWRlIGlkZW50aWZpZXIuXG4gKi9cbmZ1bmN0aW9uIHJlcXVlc3RUYWcoKSB7XG4gICAgcmV0dXJuIGF1dG9JZCgpLnN1YnN0cigwLCA1KTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGB2YWx1ZWAgaXMgYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuLyoqXG4gKiBWZXJpZmllcyB0aGF0ICdvYmonIGlzIGEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3QgdGhhdCBjYW4gYmUgZW5jb2RlZCBhcyBhXG4gKiAnTWFwJyBpbiBGaXJlc3RvcmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIGlucHV0IFRoZSBhcmd1bWVudCB0byB2ZXJpZnkuXG4gKiBAcmV0dXJucyAndHJ1ZScgaWYgdGhlIGlucHV0IGNhbiBiZSBhIHRyZWF0ZWQgYXMgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaW5wdXQpIHtcbiAgICByZXR1cm4gKGlzT2JqZWN0KGlucHV0KSAmJlxuICAgICAgICAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGlucHV0KSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fFxuICAgICAgICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKGlucHV0KSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgaW5wdXQuY29uc3RydWN0b3IubmFtZSA9PT0gJ09iamVjdCcpKTtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGB2YWx1ZWAgaGFzIG5vIGN1c3RvbSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYHZhbHVlYCBpcyBhIEphdmFTY3JpcHQgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwcm92aWRlZCBlcnJvciBpcyBjb25zaWRlcmVkIHBlcm1hbmVudCBmb3IgdGhlIGdpdmVuXG4gKiBSUEMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc1Blcm1hbmVudFJwY0Vycm9yKGVyciwgbWV0aG9kTmFtZSkge1xuICAgIGlmIChlcnIuY29kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHJldHJ5Q29kZXMgPSBnZXRSZXRyeUNvZGVzKG1ldGhvZE5hbWUpO1xuICAgICAgICByZXR1cm4gcmV0cnlDb2Rlcy5pbmRleE9mKGVyci5jb2RlKSA9PT0gLTE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxubGV0IHNlcnZpY2VDb25maWc7XG4vKipcbiAqIExhenktbG9hZHMgdGhlIHNlcnZpY2UgY29uZmlnIHdoZW4gZmlyc3QgYWNjZXNzZWQuXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKiovXG5mdW5jdGlvbiBnZXRTZXJ2aWNlQ29uZmlnKG1ldGhvZE5hbWUpIHtcbiAgICBpZiAoIXNlcnZpY2VDb25maWcpIHtcbiAgICAgICAgc2VydmljZUNvbmZpZyA9IHJlcXVpcmUoJ2dvb2dsZS1nYXgvYnVpbGQvc3JjL2ZhbGxiYWNrJykuY29uc3RydWN0U2V0dGluZ3MoJ2dvb2dsZS5maXJlc3RvcmUudjEuRmlyZXN0b3JlJywgZ2FwaWNDb25maWcsIHt9LCByZXF1aXJlKCdnb29nbGUtZ2F4L2J1aWxkL3NyYy9zdGF0dXMnKS5TdGF0dXMpO1xuICAgIH1cbiAgICByZXR1cm4gc2VydmljZUNvbmZpZ1ttZXRob2ROYW1lXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbGlzdCBvZiByZXRyeWFibGUgZXJyb3IgY29kZXMgc3BlY2lmaWVkIGluIHRoZSBzZXJ2aWNlXG4gKiBjb25maWd1cmF0aW9uLlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXRSZXRyeUNvZGVzKG1ldGhvZE5hbWUpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICByZXR1cm4gKF9jID0gKF9iID0gKF9hID0gZ2V0U2VydmljZUNvbmZpZyhtZXRob2ROYW1lKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJldHJ5KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmV0cnlDb2RlcykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogW107XG59XG4vKipcbiAqIEdldHMgdGhlIHRvdGFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIGZyb20gdGhlIHJldHJ5IHNldHRpbmdzIGluXG4gKiB0aGUgc2VydmljZSBjb25maWcgZm9yIHRoZSBnaXZlbiBSUEMuIElmIHRoZSB0b3RhbCB0aW1lb3V0IGlzIG5vdFxuICogc2V0LCB0aGVuIGAwYCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldFRvdGFsVGltZW91dChtZXRob2ROYW1lKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIHJldHVybiAoKF9kID0gKF9jID0gKF9iID0gKF9hID0gZ2V0U2VydmljZUNvbmZpZyhtZXRob2ROYW1lKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJldHJ5KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYmFja29mZlNldHRpbmdzKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudG90YWxUaW1lb3V0TWlsbGlzKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAwKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYmFja29mZiBzZXR0aW5nIGZyb20gdGhlIHNlcnZpY2UgY29uZmlndXJhdGlvbi5cbiAqIEBwcml2YXRlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZ2V0UmV0cnlQYXJhbXMobWV0aG9kTmFtZSkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHJldHVybiAoKF9jID0gKF9iID0gKF9hID0gZ2V0U2VydmljZUNvbmZpZyhtZXRob2ROYW1lKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJldHJ5KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYmFja29mZlNldHRpbmdzKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiByZXF1aXJlKCdnb29nbGUtZ2F4L2J1aWxkL3NyYy9mYWxsYmFjaycpLmNyZWF0ZURlZmF1bHRCYWNrb2ZmU2V0dGluZ3MoKSk7XG59XG4vKipcbiAqIFJldHVybnMgYSBwcm9taXNlIHdpdGggYSB2b2lkIHJldHVybiB0eXBlLiBUaGUgcmV0dXJuZWQgcHJvbWlzZSBzd2FsbG93cyBhbGxcbiAqIGVycm9ycyBhbmQgbmV2ZXIgdGhyb3dzLlxuICpcbiAqIFRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gd2FpdCBmb3IgYSBwcm9taXNlIHRvIGNvbXBsZXRlIHdoZW4gdGhlIHJlc3VsdCBvZlxuICogdGhlIHByb21pc2Ugd2lsbCBiZSBkaXNjYXJkZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBzaWxlbmNlUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbigoKSA9PiB7IH0sICgpID0+IHsgfSk7XG59XG4vKipcbiAqIFdyYXBzIHRoZSBwcm92aWRlZCBlcnJvciBpbiBhIG5ldyBlcnJvciB0aGF0IGluY2x1ZGVzIHRoZSBwcm92aWRlZCBzdGFjay5cbiAqXG4gKiBVc2VkIHRvIHByZXNlcnZlIHN0YWNrIHRyYWNlcyBhY3Jvc3MgYXN5bmMgY2FsbHMuXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHdyYXBFcnJvcihlcnIsIHN0YWNrKSB7XG4gICAgZXJyLnN0YWNrICs9ICdcXG5DYXVzZWQgYnk6ICcgKyBzdGFjaztcbiAgICByZXR1cm4gZXJyO1xufVxuLyoqXG4gKiBQYXJzZXMgdGhlIHZhbHVlIG9mIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBGSVJFU1RPUkVfUFJFRkVSX1JFU1QsIGFuZFxuICogcmV0dXJucyBhIHZhbHVlIGluZGljYXRpbmcgaWYgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGVuYWJsZXMgb3IgZGlzYWJsZXNcbiAqIHByZWZlclJlc3QuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIHdhcm4gdG8gdGhlIGNvbnNvbGUgaWYgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHNldFxuICogdG8gYW4gdW5zdXBwb3J0ZWQgdmFsdWUuXG4gKlxuICogQHJldHVybiBgdHJ1ZWAgaWYgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGVuYWJsZXMgYHByZWZlclJlc3RgLFxuICogYGZhbHNlYCBpZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgZGlzYWJsZXMgYHByZWZlclJlc3RgLCBvciBgdW5kZWZpbmVkYFxuICogaWYgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIG5vdCBzZXQgb3IgaXMgc2V0IHRvIGFuIHVuc3VwcG9ydGVkIHZhbHVlLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdHJ5R2V0UHJlZmVyUmVzdEVudmlyb25tZW50VmFyaWFibGUoKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHJhd1ZhbHVlID0gKF9hID0gcHJvY2Vzcy5lbnYuRklSRVNUT1JFX1BSRUZFUl9SRVNUKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHJhd1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSBpZiAocmF3VmFsdWUgPT09ICcxJyB8fCByYXdWYWx1ZSA9PT0gJ3RydWUnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChyYXdWYWx1ZSA9PT0gJzAnIHx8IHJhd1ZhbHVlID09PSAnZmFsc2UnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihgQW4gdW5zdXBwb3J0ZWQgdmFsdWUgd2FzIHNwZWNpZmllZCBmb3IgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIEZJUkVTVE9SRV9QUkVGRVJfUkVTVC4gVmFsdWUgJHtyYXdWYWx1ZX0gaXMgdW5zdXBwb3J0ZWQuYCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIHZhbHVlcyB0aGF0IGFyZSBjYWxjdWxhdGVkIGJ5IHBlcmZvcm1pbmcgdGhlIGdpdmVuIGBmbmBcbiAqIG9uIGFsbCBrZXlzIGluIHRoZSBnaXZlbiBgb2JqYCBkaWN0aW9uYXJ5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShvYmosIGZuKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChmbihvYmpba2V5XSwga2V5LCBvYmopKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBWZXJpZmllcyBlcXVhbGl0eSBmb3IgYW4gYXJyYXkgb2Ygb2JqZWN0cyB1c2luZyB0aGUgYGlzRXF1YWxgIGludGVyZmFjZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKiBAcGFyYW0gbGVmdCBBcnJheSBvZiBvYmplY3RzIHN1cHBvcnRpbmcgYGlzRXF1YWxgLlxuICogQHBhcmFtIHJpZ2h0IEFycmF5IG9mIG9iamVjdHMgc3VwcG9ydGluZyBgaXNFcXVhbGAuXG4gKiBAcmV0dXJuIFRydWUgaWYgYXJyYXlzIGFyZSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gaXNBcnJheUVxdWFsKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQubGVuZ3RoICE9PSByaWdodC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlZnQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKCFsZWZ0W2ldLmlzRXF1YWwocmlnaHRbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIFZlcmlmaWVzIGVxdWFsaXR5IGZvciBhbiBhcnJheSBvZiBwcmltaXRpdmVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSBsZWZ0IEFycmF5IG9mIHByaW1pdGl2ZXMuXG4gKiBAcGFyYW0gcmlnaHQgQXJyYXkgb2YgcHJpbWl0aXZlcy5cbiAqIEByZXR1cm4gVHJ1ZSBpZiBhcnJheXMgYXJlIGVxdWFsLlxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZUFycmF5RXF1YWwobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5sZW5ndGggIT09IHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVmdC5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAobGVmdFtpXSAhPT0gcmlnaHRbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2025 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FirestoreAdminClient = void 0;\nconst jsonProtos = __webpack_require__(/*! ../../protos/admin_v1.json */ \"(rsc)/./node_modules/@google-cloud/firestore/build/protos/admin_v1.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/firestore_admin_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = __webpack_require__(/*! ./firestore_admin_client_config.json */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client_config.json\");\nconst version = (__webpack_require__(/*! ../../../package.json */ \"(rsc)/./node_modules/@google-cloud/firestore/package.json\").version);\n/**\n *  The Cloud Firestore Admin API.\n *\n *  This API provides several administrative services for Cloud Firestore.\n *\n *  Project, Database, Namespace, Collection, Collection Group, and Document are\n *  used as defined in the Google Cloud Firestore API.\n *\n *  Operation: An Operation represents work being performed in the background.\n *\n *  The index service manages Cloud Firestore indexes.\n *\n *  Index creation is performed asynchronously.\n *  An Operation resource is created for each such asynchronous operation.\n *  The state of the operation (including any errors encountered)\n *  may be queried via the Operation resource.\n *\n *  The Operations collection provides a record of actions performed for the\n *  specified Project (including any Operations in progress). Operations are not\n *  created directly but through calls on other collections or resources.\n *\n *  An Operation that is done may be deleted so that it is no longer listed as\n *  part of the Operation collection. Operations are garbage collected after\n *  30 days. By default, ListOperations will only return in progress and failed\n *  operations. To list completed operation, issue a ListOperations request with\n *  the filter `done: true`.\n *\n *  Operations are created by service `FirestoreAdmin`, but are accessed via\n *  service `google.longrunning.Operations`.\n * @class\n * @memberof v1\n */\nclass FirestoreAdminClient {\n    /**\n     * Construct an instance of FirestoreAdminClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n     *     For more information, please check the\n     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n     *     need to avoid loading the default gRPC version and want to use the fallback\n     *     HTTP implementation. Load only fallback version and pass it to the constructor:\n     *     ```\n     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n     *     const client = new FirestoreAdminClient({fallback: true}, gax);\n     *     ```\n     */\n    constructor(opts, gaxInstance) {\n        var _a, _b, _c, _d, _e;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {\n            throw new Error('Please set either universe_domain or universeDomain, but not both.');\n        }\n        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'\n            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']\n            : undefined;\n        this._universeDomain =\n            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';\n        this._servicePath = 'firestore.' + this._universeDomain;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};\n        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // Request numeric enum values if REST transport is used.\n        opts.numericEnums = true;\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== this._servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Load google-gax module synchronously if needed\n        if (!gaxInstance) {\n            gaxInstance = __webpack_require__(/*! google-gax */ \"(rsc)/./node_modules/google-gax/build/src/index.js\");\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set useJWTAccessWithScope on the auth object.\n        this.auth.useJWTAccessWithScope = true;\n        // Set defaultServicePath on the auth object.\n        this.auth.defaultServicePath = this._servicePath;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === this._servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process === 'object' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            backupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/backups/{backup}'),\n            backupSchedulePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/backupSchedules/{backup_schedule}'),\n            collectionGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}'),\n            databasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}'),\n            fieldPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}'),\n            indexPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}'),\n            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),\n            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listIndexes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),\n            listFields: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fields'),\n        };\n        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        const lroOptions = {\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        };\n        if (opts.fallback) {\n            lroOptions.protoJson = protoFilesRoot;\n            lroOptions.httpRules = [\n                {\n                    selector: 'google.longrunning.Operations.CancelOperation',\n                    post: '/v1/{name=projects/*/databases/*/operations/*}:cancel',\n                    body: '*',\n                },\n                {\n                    selector: 'google.longrunning.Operations.DeleteOperation',\n                    delete: '/v1/{name=projects/*/databases/*/operations/*}',\n                },\n                {\n                    selector: 'google.longrunning.Operations.GetOperation',\n                    get: '/v1/{name=projects/*/databases/*/operations/*}',\n                },\n                {\n                    selector: 'google.longrunning.Operations.ListOperations',\n                    get: '/v1/{name=projects/*/databases/*}/operations',\n                },\n            ];\n        }\n        this.operationsClient = this._gaxModule\n            .lro(lroOptions)\n            .operationsClient(opts);\n        const createIndexResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Index');\n        const createIndexMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.IndexOperationMetadata');\n        const updateFieldResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Field');\n        const updateFieldMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.FieldOperationMetadata');\n        const exportDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsResponse');\n        const exportDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsMetadata');\n        const importDocumentsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\n        const importDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ImportDocumentsMetadata');\n        const bulkDeleteDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.BulkDeleteDocumentsResponse');\n        const bulkDeleteDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.BulkDeleteDocumentsMetadata');\n        const createDatabaseResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Database');\n        const createDatabaseMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.CreateDatabaseMetadata');\n        const updateDatabaseResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Database');\n        const updateDatabaseMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.UpdateDatabaseMetadata');\n        const deleteDatabaseResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Database');\n        const deleteDatabaseMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.DeleteDatabaseMetadata');\n        const restoreDatabaseResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Database');\n        const restoreDatabaseMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.RestoreDatabaseMetadata');\n        this.descriptors.longrunning = {\n            createIndex: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createIndexResponse.decode.bind(createIndexResponse), createIndexMetadata.decode.bind(createIndexMetadata)),\n            updateField: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFieldResponse.decode.bind(updateFieldResponse), updateFieldMetadata.decode.bind(updateFieldMetadata)),\n            exportDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDocumentsResponse.decode.bind(exportDocumentsResponse), exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)),\n            importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata)),\n            bulkDeleteDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, bulkDeleteDocumentsResponse.decode.bind(bulkDeleteDocumentsResponse), bulkDeleteDocumentsMetadata.decode.bind(bulkDeleteDocumentsMetadata)),\n            createDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createDatabaseResponse.decode.bind(createDatabaseResponse), createDatabaseMetadata.decode.bind(createDatabaseMetadata)),\n            updateDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateDatabaseResponse.decode.bind(updateDatabaseResponse), updateDatabaseMetadata.decode.bind(updateDatabaseMetadata)),\n            deleteDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteDatabaseResponse.decode.bind(deleteDatabaseResponse), deleteDatabaseMetadata.decode.bind(deleteDatabaseMetadata)),\n            restoreDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, restoreDatabaseResponse.decode.bind(restoreDatabaseResponse), restoreDatabaseMetadata.decode.bind(restoreDatabaseMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = this._gaxModule.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.firestoreAdminStub) {\n            return this.firestoreAdminStub;\n        }\n        // Put together the \"service stub\" for\n        // google.firestore.admin.v1.FirestoreAdmin.\n        this.firestoreAdminStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.firestore.admin.v1.FirestoreAdmin')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.firestore.admin.v1.FirestoreAdmin, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreAdminStubMethods = [\n            'createIndex',\n            'listIndexes',\n            'getIndex',\n            'deleteIndex',\n            'getField',\n            'updateField',\n            'listFields',\n            'exportDocuments',\n            'importDocuments',\n            'bulkDeleteDocuments',\n            'createDatabase',\n            'getDatabase',\n            'listDatabases',\n            'updateDatabase',\n            'deleteDatabase',\n            'getBackup',\n            'listBackups',\n            'deleteBackup',\n            'restoreDatabase',\n            'createBackupSchedule',\n            'getBackupSchedule',\n            'listBackupSchedules',\n            'updateBackupSchedule',\n            'deleteBackupSchedule',\n        ];\n        for (const methodName of firestoreAdminStubMethods) {\n            const callPromise = this.firestoreAdminStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] ||\n                this.descriptors.longrunning[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.firestoreAdminStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    get apiEndpoint() {\n        return this._servicePath;\n    }\n    get universeDomain() {\n        return this._universeDomain;\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    getIndex(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getIndex(request, options, callback);\n    }\n    deleteIndex(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteIndex(request, options, callback);\n    }\n    getField(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getField(request, options, callback);\n    }\n    getDatabase(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getDatabase(request, options, callback);\n    }\n    listDatabases(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listDatabases(request, options, callback);\n    }\n    getBackup(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getBackup(request, options, callback);\n    }\n    listBackups(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listBackups(request, options, callback);\n    }\n    deleteBackup(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteBackup(request, options, callback);\n    }\n    createBackupSchedule(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createBackupSchedule(request, options, callback);\n    }\n    getBackupSchedule(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getBackupSchedule(request, options, callback);\n    }\n    listBackupSchedules(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listBackupSchedules(request, options, callback);\n    }\n    updateBackupSchedule(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'backup_schedule.name': (_a = request.backupSchedule.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateBackupSchedule(request, options, callback);\n    }\n    deleteBackupSchedule(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteBackupSchedule(request, options, callback);\n    }\n    createIndex(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createIndex(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `createIndex()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.create_index.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_CreateIndex_async\n     */\n    async checkCreateIndexProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createIndex, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    updateField(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'field.name': (_a = request.field.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateField(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `updateField()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.update_field.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_UpdateField_async\n     */\n    async checkUpdateFieldProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateField, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    exportDocuments(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.exportDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `exportDocuments()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.export_documents.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_ExportDocuments_async\n     */\n    async checkExportDocumentsProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.exportDocuments, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    importDocuments(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.importDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `importDocuments()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.import_documents.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_ImportDocuments_async\n     */\n    async checkImportDocumentsProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.importDocuments, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    bulkDeleteDocuments(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.bulkDeleteDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `bulkDeleteDocuments()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.bulk_delete_documents.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_BulkDeleteDocuments_async\n     */\n    async checkBulkDeleteDocumentsProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.bulkDeleteDocuments, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    createDatabase(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createDatabase(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `createDatabase()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.create_database.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_CreateDatabase_async\n     */\n    async checkCreateDatabaseProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createDatabase, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    updateDatabase(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'database.name': (_a = request.database.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateDatabase(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `updateDatabase()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.update_database.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_UpdateDatabase_async\n     */\n    async checkUpdateDatabaseProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDatabase, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    deleteDatabase(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteDatabase(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `deleteDatabase()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.delete_database.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_DeleteDatabase_async\n     */\n    async checkDeleteDatabaseProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteDatabase, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    restoreDatabase(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.restoreDatabase(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `restoreDatabase()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.restore_database.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_RestoreDatabase_async\n     */\n    async checkRestoreDatabaseProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.restoreDatabase, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    listIndexes(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listIndexes(request, options, callback);\n    }\n    /**\n     * Equivalent to `listIndexes`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes},\n     *   that may be used to get the next page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.firestore.admin.v1.Index|Index} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listIndexesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listIndexesStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listIndexes'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listIndexes.createStream(this.innerApiCalls.listIndexes, request, callSettings);\n    }\n    /**\n     * Equivalent to `listIndexes`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes},\n     *   that may be used to get the next page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.firestore.admin.v1.Index|Index}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.list_indexes.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_ListIndexes_async\n     */\n    listIndexesAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listIndexes'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listIndexes.asyncIterate(this.innerApiCalls['listIndexes'], request, callSettings);\n    }\n    listFields(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listFields(request, options, callback);\n    }\n    /**\n     * Equivalent to `listFields`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}\n     *   only supports listing fields that have been explicitly overridden. To issue\n     *   this query, call\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}\n     *   with a filter that includes `indexConfig.usesAncestorConfig:false` or\n     *   `ttlConfig:*`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields},\n     *   that may be used to get the next page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.firestore.admin.v1.Field|Field} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listFieldsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listFieldsStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listFields'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listFields.createStream(this.innerApiCalls.listFields, request, callSettings);\n    }\n    /**\n     * Equivalent to `listFields`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}\n     *   only supports listing fields that have been explicitly overridden. To issue\n     *   this query, call\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}\n     *   with a filter that includes `indexConfig.usesAncestorConfig:false` or\n     *   `ttlConfig:*`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields},\n     *   that may be used to get the next page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.firestore.admin.v1.Field|Field}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.list_fields.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_ListFields_async\n     */\n    listFieldsAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listFields'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listFields.asyncIterate(this.innerApiCalls['listFields'], request, callSettings);\n    }\n    /**\n     * Gets information about a location.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Resource name for the location.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }\n     *   for more details and examples.\n     * @example\n     * ```\n     * const [response] = await client.getLocation(request);\n     * ```\n     */\n    getLocation(request, options, callback) {\n        return this.locationsClient.getLocation(request, options, callback);\n    }\n    /**\n     * Lists information about the supported locations for this service. Returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example\n     * ```\n     * const iterable = client.listLocationsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     * ```\n     */\n    listLocationsAsync(request, options) {\n        return this.locationsClient.listLocationsAsync(request, options);\n    }\n    /**\n     * Gets the latest state of a long-running operation.  Clients can use this\n     * method to poll the operation result at intervals as recommended by the API\n     * service.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See {@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}\n     *   for the details.\n     * @param {function(?Error, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing\n     *   {@link google.longrunning.Operation | google.longrunning.Operation}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     * {@link google.longrunning.Operation | google.longrunning.Operation}.\n     * The promise has a method named \"cancel\" which cancels the ongoing API call.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * const name = '';\n     * const [response] = await client.getOperation({name});\n     * // doThingsWith(response)\n     * ```\n     */\n    getOperation(request, optionsOrCallback, callback) {\n        var _a;\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        return this.operationsClient.getOperation(request, options, callback);\n    }\n    /**\n     * Lists operations that match the specified filter in the request. If the\n     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.\n     *\n     * For-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See {@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the\n     *   details.\n     * @returns {Object}\n     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * for await (const response of client.listOperationsAsync(request));\n     * // doThingsWith(response)\n     * ```\n     */\n    listOperationsAsync(request, options) {\n        var _a;\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        return this.operationsClient.listOperationsAsync(request, options);\n    }\n    /**\n     * Starts asynchronous cancellation on a long-running operation.  The server\n     * makes a best effort to cancel the operation, but success is not\n     * guaranteed.  If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n     * {@link Operations.GetOperation} or\n     * other methods to check whether the cancellation succeeded or whether the\n     * operation completed despite cancellation. On successful cancellation,\n     * the operation is not deleted; instead, it becomes an operation with\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n     * 1, corresponding to `Code.CANCELLED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be cancelled.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See {@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * await client.cancelOperation({name: ''});\n     * ```\n     */\n    cancelOperation(request, optionsOrCallback, callback) {\n        var _a;\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        return this.operationsClient.cancelOperation(request, options, callback);\n    }\n    /**\n     * Deletes a long-running operation. This method indicates that the client is\n     * no longer interested in the operation result. It does not cancel the\n     * operation. If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be deleted.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See {@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}\n     * for the details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * await client.deleteOperation({name: ''});\n     * ```\n     */\n    deleteOperation(request, optionsOrCallback, callback) {\n        var _a;\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        return this.operationsClient.deleteOperation(request, options, callback);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified backup resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} backup\n     * @returns {string} Resource name string.\n     */\n    backupPath(project, location, backup) {\n        return this.pathTemplates.backupPathTemplate.render({\n            project: project,\n            location: location,\n            backup: backup,\n        });\n    }\n    /**\n     * Parse the project from Backup resource.\n     *\n     * @param {string} backupName\n     *   A fully-qualified path representing Backup resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromBackupName(backupName) {\n        return this.pathTemplates.backupPathTemplate.match(backupName).project;\n    }\n    /**\n     * Parse the location from Backup resource.\n     *\n     * @param {string} backupName\n     *   A fully-qualified path representing Backup resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromBackupName(backupName) {\n        return this.pathTemplates.backupPathTemplate.match(backupName).location;\n    }\n    /**\n     * Parse the backup from Backup resource.\n     *\n     * @param {string} backupName\n     *   A fully-qualified path representing Backup resource.\n     * @returns {string} A string representing the backup.\n     */\n    matchBackupFromBackupName(backupName) {\n        return this.pathTemplates.backupPathTemplate.match(backupName).backup;\n    }\n    /**\n     * Return a fully-qualified backupSchedule resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} backup_schedule\n     * @returns {string} Resource name string.\n     */\n    backupSchedulePath(project, database, backupSchedule) {\n        return this.pathTemplates.backupSchedulePathTemplate.render({\n            project: project,\n            database: database,\n            backup_schedule: backupSchedule,\n        });\n    }\n    /**\n     * Parse the project from BackupSchedule resource.\n     *\n     * @param {string} backupScheduleName\n     *   A fully-qualified path representing BackupSchedule resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromBackupScheduleName(backupScheduleName) {\n        return this.pathTemplates.backupSchedulePathTemplate.match(backupScheduleName).project;\n    }\n    /**\n     * Parse the database from BackupSchedule resource.\n     *\n     * @param {string} backupScheduleName\n     *   A fully-qualified path representing BackupSchedule resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromBackupScheduleName(backupScheduleName) {\n        return this.pathTemplates.backupSchedulePathTemplate.match(backupScheduleName).database;\n    }\n    /**\n     * Parse the backup_schedule from BackupSchedule resource.\n     *\n     * @param {string} backupScheduleName\n     *   A fully-qualified path representing BackupSchedule resource.\n     * @returns {string} A string representing the backup_schedule.\n     */\n    matchBackupScheduleFromBackupScheduleName(backupScheduleName) {\n        return this.pathTemplates.backupSchedulePathTemplate.match(backupScheduleName).backup_schedule;\n    }\n    /**\n     * Return a fully-qualified collectionGroup resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @returns {string} Resource name string.\n     */\n    collectionGroupPath(project, database, collection) {\n        return this.pathTemplates.collectionGroupPathTemplate.render({\n            project: project,\n            database: database,\n            collection: collection,\n        });\n    }\n    /**\n     * Parse the project from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromCollectionGroupName(collectionGroupName) {\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).project;\n    }\n    /**\n     * Parse the database from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromCollectionGroupName(collectionGroupName) {\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).database;\n    }\n    /**\n     * Parse the collection from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromCollectionGroupName(collectionGroupName) {\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).collection;\n    }\n    /**\n     * Return a fully-qualified database resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @returns {string} Resource name string.\n     */\n    databasePath(project, database) {\n        return this.pathTemplates.databasePathTemplate.render({\n            project: project,\n            database: database,\n        });\n    }\n    /**\n     * Parse the project from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromDatabaseName(databaseName) {\n        return this.pathTemplates.databasePathTemplate.match(databaseName).project;\n    }\n    /**\n     * Parse the database from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromDatabaseName(databaseName) {\n        return this.pathTemplates.databasePathTemplate.match(databaseName).database;\n    }\n    /**\n     * Return a fully-qualified field resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} field\n     * @returns {string} Resource name string.\n     */\n    fieldPath(project, database, collection, field) {\n        return this.pathTemplates.fieldPathTemplate.render({\n            project: project,\n            database: database,\n            collection: collection,\n            field: field,\n        });\n    }\n    /**\n     * Parse the project from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).project;\n    }\n    /**\n     * Parse the database from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).database;\n    }\n    /**\n     * Parse the collection from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).collection;\n    }\n    /**\n     * Parse the field from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the field.\n     */\n    matchFieldFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).field;\n    }\n    /**\n     * Return a fully-qualified index resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} index\n     * @returns {string} Resource name string.\n     */\n    indexPath(project, database, collection, index) {\n        return this.pathTemplates.indexPathTemplate.render({\n            project: project,\n            database: database,\n            collection: collection,\n            index: index,\n        });\n    }\n    /**\n     * Parse the project from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).project;\n    }\n    /**\n     * Parse the database from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).database;\n    }\n    /**\n     * Parse the collection from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).collection;\n    }\n    /**\n     * Parse the index from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the index.\n     */\n    matchIndexFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).index;\n    }\n    /**\n     * Return a fully-qualified location resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @returns {string} Resource name string.\n     */\n    locationPath(project, location) {\n        return this.pathTemplates.locationPathTemplate.render({\n            project: project,\n            location: location,\n        });\n    }\n    /**\n     * Parse the project from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).project;\n    }\n    /**\n     * Parse the location from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).location;\n    }\n    /**\n     * Return a fully-qualified project resource name string.\n     *\n     * @param {string} project\n     * @returns {string} Resource name string.\n     */\n    projectPath(project) {\n        return this.pathTemplates.projectPathTemplate.render({\n            project: project,\n        });\n    }\n    /**\n     * Parse the project from Project resource.\n     *\n     * @param {string} projectName\n     *   A fully-qualified path representing Project resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectName(projectName) {\n        return this.pathTemplates.projectPathTemplate.match(projectName).project;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        if (this.firestoreAdminStub && !this._terminated) {\n            return this.firestoreAdminStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n                this.locationsClient.close();\n                this.operationsClient.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreAdminClient = FirestoreAdminClient;\n//# sourceMappingURL=firestore_admin_client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_client.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/v1/firestore_client.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2025 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FirestoreClient = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst jsonProtos = __webpack_require__(/*! ../../protos/v1.json */ \"(rsc)/./node_modules/@google-cloud/firestore/build/protos/v1.json\");\nconst logger_1 = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/firestore_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = __webpack_require__(/*! ./firestore_client_config.json */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_client_config.json\");\nconst version = (__webpack_require__(/*! ../../../package.json */ \"(rsc)/./node_modules/@google-cloud/firestore/package.json\").version);\n/**\n *  The Cloud Firestore service.\n *\n *  Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL\n *  document database that simplifies storing, syncing, and querying data for\n *  your mobile, web, and IoT apps at global scale. Its client libraries provide\n *  live synchronization and offline support, while its security features and\n *  integrations with Firebase and Google Cloud Platform accelerate building\n *  truly serverless apps.\n * @class\n * @memberof v1\n */\nclass FirestoreClient {\n    /**\n     * Construct an instance of FirestoreClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n     *     For more information, please check the\n     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n     *     need to avoid loading the default gRPC version and want to use the fallback\n     *     HTTP implementation. Load only fallback version and pass it to the constructor:\n     *     ```\n     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n     *     const client = new FirestoreClient({fallback: true}, gax);\n     *     ```\n     */\n    constructor(opts, gaxInstance) {\n        var _a, _b, _c, _d, _e;\n        this._terminated = false;\n        this._stubFailed = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {\n            throw new Error('Please set either universe_domain or universeDomain, but not both.');\n        }\n        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'\n            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']\n            : undefined;\n        this._universeDomain =\n            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';\n        this._servicePath = 'firestore.' + this._universeDomain;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};\n        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // Request numeric enum values if REST transport is used.\n        opts.numericEnums = true;\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== this._servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Load google-gax module synchronously if needed\n        if (!gaxInstance) {\n            gaxInstance = __webpack_require__(/*! google-gax */ \"(rsc)/./node_modules/google-gax/build/src/index.js\");\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set useJWTAccessWithScope on the auth object.\n        this.auth.useJWTAccessWithScope = true;\n        // Set defaultServicePath on the auth object.\n        this.auth.defaultServicePath = this._servicePath;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === this._servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process === 'object' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n            partitionQuery: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'partitions'),\n            listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds'),\n        };\n        // Some of the methods on this service provide streaming responses.\n        // Provide descriptors for these.\n        this.descriptors.stream = {\n            batchGetDocuments: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            runQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            runAggregationQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            write: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            listen: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1.Firestore', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = this._gaxModule.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.firestoreStub && !this._stubFailed) {\n            return this.firestoreStub;\n        }\n        // Reset _stubFailed because we are re-attempting create\n        this._stubFailed = false;\n        // Put together the \"service stub\" for\n        // google.firestore.v1.Firestore.\n        this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.firestore.v1.Firestore')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.firestore.v1.Firestore, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreStubMethods = [\n            'getDocument',\n            'listDocuments',\n            'updateDocument',\n            'deleteDocument',\n            'batchGetDocuments',\n            'beginTransaction',\n            'commit',\n            'rollback',\n            'runQuery',\n            'runAggregationQuery',\n            'partitionQuery',\n            'write',\n            'listen',\n            'listCollectionIds',\n            'batchWrite',\n            'createDocument',\n        ];\n        for (const methodName of firestoreStubMethods) {\n            const callPromise = this.firestoreStub.then(stub => {\n                return (...args) => {\n                    if (this._terminated) {\n                        if (methodName in this.descriptors.stream) {\n                            const stream = new stream_1.PassThrough({ objectMode: true });\n                            setImmediate(() => {\n                                stream.emit('error', new this._gaxModule.GoogleError('The client has already been closed.'));\n                            });\n                            return stream;\n                        }\n                        return Promise.reject('The client has already been closed.');\n                    }\n                    const func = stub[methodName];\n                    return func.apply(stub, args);\n                };\n            }, (err) => {\n                this._stubFailed = true;\n                (0, logger_1.logger)('initialize', null, 'Failed to create the gax client stub.', err);\n                return () => {\n                    throw err;\n                };\n            });\n            const descriptor = this.descriptors.page[methodName] ||\n                this.descriptors.stream[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.firestoreStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    get apiEndpoint() {\n        return this._servicePath;\n    }\n    get universeDomain() {\n        return this._universeDomain;\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    getDocument(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getDocument(request, options, callback);\n    }\n    updateDocument(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'document.name': (_a = request.document.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateDocument(request, options, callback);\n    }\n    deleteDocument(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteDocument(request, options, callback);\n    }\n    beginTransaction(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.beginTransaction(request, options, callback);\n    }\n    commit(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.commit(request, options, callback);\n    }\n    rollback(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.rollback(request, options, callback);\n    }\n    batchWrite(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.batchWrite(request, options, callback);\n    }\n    createDocument(request, optionsOrCallback, callback) {\n        var _a, _b;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createDocument(request, options, callback);\n    }\n    /**\n     * Gets multiple documents.\n     *\n     * Documents returned by this method are not guaranteed to be returned in the\n     * same order that they were requested.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.documents\n     *   The names of the documents to retrieve. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   The request will fail if any of the document is not a child resource of the\n     *   given `database`. Duplicate names will be elided.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field will\n     *   not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits {@link protos.google.firestore.v1.BatchGetDocumentsResponse|BatchGetDocumentsResponse} on 'data' event.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.batch_get_documents.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_BatchGetDocuments_async\n     */\n    batchGetDocuments(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.batchGetDocuments(request, options);\n    }\n    /**\n     * Runs a query.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     * @param {Buffer} request.transaction\n     *   Run the query within an already active transaction.\n     *\n     *   The value here is the opaque transaction ID to execute the query in.\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {google.firestore.v1.ExplainOptions} [request.explainOptions]\n     *   Optional. Explain options for the query. If set, additional query\n     *   statistics will be returned. If not, only query results will be returned.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits {@link protos.google.firestore.v1.RunQueryResponse|RunQueryResponse} on 'data' event.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.run_query.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_RunQuery_async\n     */\n    runQuery(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.runQuery(request, options);\n    }\n    /**\n     * Runs an aggregation query.\n     *\n     * Rather than producing {@link protos.google.firestore.v1.Document|Document} results like\n     * {@link protos.google.firestore.v1.Firestore.RunQuery|Firestore.RunQuery}, this API\n     * allows running an aggregation to produce a series of\n     * {@link protos.google.firestore.v1.AggregationResult|AggregationResult} server-side.\n     *\n     * High-Level Example:\n     *\n     * ```\n     * -- Return the number of documents in table given a filter.\n     * SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );\n     * ```\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {google.firestore.v1.StructuredAggregationQuery} request.structuredAggregationQuery\n     *   An aggregation query.\n     * @param {Buffer} request.transaction\n     *   Run the aggregation within an already active transaction.\n     *\n     *   The value here is the opaque transaction ID to execute the query in.\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction as part of the query, defaulting to read-only.\n     *\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Executes the query at the given timestamp.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {google.firestore.v1.ExplainOptions} [request.explainOptions]\n     *   Optional. Explain options for the query. If set, additional query\n     *   statistics will be returned. If not, only query results will be returned.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits {@link protos.google.firestore.v1.RunAggregationQueryResponse|RunAggregationQueryResponse} on 'data' event.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.run_aggregation_query.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_RunAggregationQuery_async\n     */\n    runAggregationQuery(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.runAggregationQuery(request, options);\n    }\n    /**\n     * Streams batches of document updates and deletes, in order. This method is\n     * only available via gRPC or WebChannel (not REST).\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing {@link protos.google.firestore.v1.WriteRequest|WriteRequest} for write() method, and\n     *   will emit objects representing {@link protos.google.firestore.v1.WriteResponse|WriteResponse} on 'data' event asynchronously.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.write.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_Write_async\n     */\n    write(options) {\n        this.initialize();\n        return this.innerApiCalls.write(null, options);\n    }\n    /**\n     * Listens to changes. This method is only available via gRPC or WebChannel\n     * (not REST).\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing {@link protos.google.firestore.v1.ListenRequest|ListenRequest} for write() method, and\n     *   will emit objects representing {@link protos.google.firestore.v1.ListenResponse|ListenResponse} on 'data' event asynchronously.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.listen.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_Listen_async\n     */\n    listen(options) {\n        this.initialize();\n        return this.innerApiCalls.listen(null, options);\n    }\n    listDocuments(request, optionsOrCallback, callback) {\n        var _a, _b;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listDocuments(request, options, callback);\n    }\n    /**\n     * Equivalent to `listDocuments`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} [request.collectionId]\n     *   Optional. The collection ID, relative to `parent`, to list.\n     *\n     *   For example: `chatrooms` or `messages`.\n     *\n     *   This is optional, and when not provided, Firestore will list documents\n     *   from all collections under the provided `parent`.\n     * @param {number} [request.pageSize]\n     *   Optional. The maximum number of documents to return in a single response.\n     *\n     *   Firestore may return fewer than this value.\n     * @param {string} [request.pageToken]\n     *   Optional. A page token, received from a previous `ListDocuments` response.\n     *\n     *   Provide this to retrieve the subsequent page. When paginating, all other\n     *   parameters (with the exception of `page_size`) must match the values set\n     *   in the request that generated the page token.\n     * @param {string} [request.orderBy]\n     *   Optional. The optional ordering of the documents to return.\n     *\n     *   For example: `priority desc, __name__ desc`.\n     *\n     *   This mirrors the {@link protos.google.firestore.v1.StructuredQuery.order_by|`ORDER BY`}\n     *   used in Firestore queries but in a string representation. When absent,\n     *   documents are ordered based on `__name__ ASC`.\n     * @param {google.firestore.v1.DocumentMask} [request.mask]\n     *   Optional. The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Perform the read as part of an already active transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Perform the read at the provided time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents.\n     *\n     *   A document is missing if it does not exist, but there are sub-documents\n     *   nested underneath it. When true, such missing documents will be returned\n     *   with a key but will not have fields,\n     *   {@link protos.google.firestore.v1.Document.create_time|`create_time`}, or\n     *   {@link protos.google.firestore.v1.Document.update_time|`update_time`} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.firestore.v1.Document|Document} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listDocumentsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listDocumentsStream(request, options) {\n        var _a, _b;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        const defaultCallSettings = this._defaults['listDocuments'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);\n    }\n    /**\n     * Equivalent to `listDocuments`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} [request.collectionId]\n     *   Optional. The collection ID, relative to `parent`, to list.\n     *\n     *   For example: `chatrooms` or `messages`.\n     *\n     *   This is optional, and when not provided, Firestore will list documents\n     *   from all collections under the provided `parent`.\n     * @param {number} [request.pageSize]\n     *   Optional. The maximum number of documents to return in a single response.\n     *\n     *   Firestore may return fewer than this value.\n     * @param {string} [request.pageToken]\n     *   Optional. A page token, received from a previous `ListDocuments` response.\n     *\n     *   Provide this to retrieve the subsequent page. When paginating, all other\n     *   parameters (with the exception of `page_size`) must match the values set\n     *   in the request that generated the page token.\n     * @param {string} [request.orderBy]\n     *   Optional. The optional ordering of the documents to return.\n     *\n     *   For example: `priority desc, __name__ desc`.\n     *\n     *   This mirrors the {@link protos.google.firestore.v1.StructuredQuery.order_by|`ORDER BY`}\n     *   used in Firestore queries but in a string representation. When absent,\n     *   documents are ordered based on `__name__ ASC`.\n     * @param {google.firestore.v1.DocumentMask} [request.mask]\n     *   Optional. The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Perform the read as part of an already active transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Perform the read at the provided time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents.\n     *\n     *   A document is missing if it does not exist, but there are sub-documents\n     *   nested underneath it. When true, such missing documents will be returned\n     *   with a key but will not have fields,\n     *   {@link protos.google.firestore.v1.Document.create_time|`create_time`}, or\n     *   {@link protos.google.firestore.v1.Document.update_time|`update_time`} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.firestore.v1.Document|Document}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.list_documents.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_ListDocuments_async\n     */\n    listDocumentsAsync(request, options) {\n        var _a, _b;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        const defaultCallSettings = this._defaults['listDocuments'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);\n    }\n    partitionQuery(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.partitionQuery(request, options, callback);\n    }\n    /**\n     * Equivalent to `partitionQuery`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents`.\n     *   Document resource names are not supported; only database resource names\n     *   can be specified.\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     *   Query must specify collection with all descendants and be ordered by name\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\n     *   cursors are not supported.\n     * @param {number} request.partitionCount\n     *   The desired maximum number of partition points.\n     *   The partitions may be returned across multiple pages of results.\n     *   The number must be positive. The actual number of partitions\n     *   returned may be fewer.\n     *\n     *   For example, this may be set to one fewer than the number of parallel\n     *   queries to be run, or in running a data pipeline job, one fewer than the\n     *   number of workers or compute instances available.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous call to\n     *   PartitionQuery that may be used to get an additional set of results.\n     *   There are no ordering guarantees between sets of results. Thus, using\n     *   multiple sets of results will require merging the different result sets.\n     *\n     *   For example, two subsequent calls using a page_token may return:\n     *\n     *    * cursor B, cursor M, cursor Q\n     *    * cursor A, cursor U, cursor W\n     *\n     *   To obtain a complete result set ordered with respect to the results of the\n     *   query supplied to PartitionQuery, the results sets should be merged:\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n     * @param {number} request.pageSize\n     *   The maximum number of partitions to return in this call, subject to\n     *   `partition_count`.\n     *\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n     *   if more results exist. A second call to PartitionQuery will return up to\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.firestore.v1.Cursor|Cursor} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `partitionQueryAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    partitionQueryStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['partitionQuery'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.partitionQuery.createStream(this.innerApiCalls.partitionQuery, request, callSettings);\n    }\n    /**\n     * Equivalent to `partitionQuery`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents`.\n     *   Document resource names are not supported; only database resource names\n     *   can be specified.\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     *   Query must specify collection with all descendants and be ordered by name\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\n     *   cursors are not supported.\n     * @param {number} request.partitionCount\n     *   The desired maximum number of partition points.\n     *   The partitions may be returned across multiple pages of results.\n     *   The number must be positive. The actual number of partitions\n     *   returned may be fewer.\n     *\n     *   For example, this may be set to one fewer than the number of parallel\n     *   queries to be run, or in running a data pipeline job, one fewer than the\n     *   number of workers or compute instances available.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous call to\n     *   PartitionQuery that may be used to get an additional set of results.\n     *   There are no ordering guarantees between sets of results. Thus, using\n     *   multiple sets of results will require merging the different result sets.\n     *\n     *   For example, two subsequent calls using a page_token may return:\n     *\n     *    * cursor B, cursor M, cursor Q\n     *    * cursor A, cursor U, cursor W\n     *\n     *   To obtain a complete result set ordered with respect to the results of the\n     *   query supplied to PartitionQuery, the results sets should be merged:\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n     * @param {number} request.pageSize\n     *   The maximum number of partitions to return in this call, subject to\n     *   `partition_count`.\n     *\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n     *   if more results exist. A second call to PartitionQuery will return up to\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.firestore.v1.Cursor|Cursor}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.partition_query.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_PartitionQuery_async\n     */\n    partitionQueryAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['partitionQuery'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.partitionQuery.asyncIterate(this.innerApiCalls['partitionQuery'], request, callSettings);\n    }\n    listCollectionIds(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listCollectionIds(request, options, callback);\n    }\n    /**\n     * Equivalent to `listCollectionIds`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link protos.google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing string on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listCollectionIdsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listCollectionIdsStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listCollectionIds'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);\n    }\n    /**\n     * Equivalent to `listCollectionIds`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link protos.google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   string. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.list_collection_ids.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_ListCollectionIds_async\n     */\n    listCollectionIdsAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listCollectionIds'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls['listCollectionIds'], request, callSettings);\n    }\n    /**\n     * Gets information about a location.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Resource name for the location.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }\n     *   for more details and examples.\n     * @example\n     * ```\n     * const [response] = await client.getLocation(request);\n     * ```\n     */\n    getLocation(request, options, callback) {\n        return this.locationsClient.getLocation(request, options, callback);\n    }\n    /**\n     * Lists information about the supported locations for this service. Returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example\n     * ```\n     * const iterable = client.listLocationsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     * ```\n     */\n    listLocationsAsync(request, options) {\n        return this.locationsClient.listLocationsAsync(request, options);\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        if (this.firestoreStub && !this._terminated) {\n            return this.firestoreStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n                this.locationsClient.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreClient = FirestoreClient;\n//# sourceMappingURL=firestore_client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/v1/index.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FirestoreAdminClient = exports.FirestoreClient = void 0;\nconst firestore_admin_client_1 = __webpack_require__(/*! ./firestore_admin_client */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.js\");\nObject.defineProperty(exports, \"FirestoreAdminClient\", ({ enumerable: true, get: function () { return firestore_admin_client_1.FirestoreAdminClient; } }));\nconst firestore_client_1 = __webpack_require__(/*! ./firestore_client */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_client.js\");\nObject.defineProperty(exports, \"FirestoreClient\", ({ enumerable: true, get: function () { return firestore_client_1.FirestoreClient; } }));\n// Doing something really horrible for reverse compatibility with original JavaScript exports\nconst existingExports = module.exports;\nmodule.exports = firestore_client_1.FirestoreClient;\nmodule.exports = Object.assign(module.exports, existingExports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3YxL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsdUJBQXVCO0FBQ3RELGlDQUFpQyxtQkFBTyxDQUFDLHFIQUEwQjtBQUNuRSx3REFBdUQsRUFBRSxxQ0FBcUMseURBQXlELEVBQUM7QUFDeEosMkJBQTJCLG1CQUFPLENBQUMseUdBQW9CO0FBQ3ZELG1EQUFrRCxFQUFFLHFDQUFxQyw4Q0FBOEMsRUFBQztBQUN4STtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvZmlyZXN0b3JlL2J1aWxkL3NyYy92MS9pbmRleC5qcz80MjVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpcmVzdG9yZUFkbWluQ2xpZW50ID0gZXhwb3J0cy5GaXJlc3RvcmVDbGllbnQgPSB2b2lkIDA7XG5jb25zdCBmaXJlc3RvcmVfYWRtaW5fY2xpZW50XzEgPSByZXF1aXJlKFwiLi9maXJlc3RvcmVfYWRtaW5fY2xpZW50XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRmlyZXN0b3JlQWRtaW5DbGllbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZpcmVzdG9yZV9hZG1pbl9jbGllbnRfMS5GaXJlc3RvcmVBZG1pbkNsaWVudDsgfSB9KTtcbmNvbnN0IGZpcmVzdG9yZV9jbGllbnRfMSA9IHJlcXVpcmUoXCIuL2ZpcmVzdG9yZV9jbGllbnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGaXJlc3RvcmVDbGllbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZpcmVzdG9yZV9jbGllbnRfMS5GaXJlc3RvcmVDbGllbnQ7IH0gfSk7XG4vLyBEb2luZyBzb21ldGhpbmcgcmVhbGx5IGhvcnJpYmxlIGZvciByZXZlcnNlIGNvbXBhdGliaWxpdHkgd2l0aCBvcmlnaW5hbCBKYXZhU2NyaXB0IGV4cG9ydHNcbmNvbnN0IGV4aXN0aW5nRXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzO1xubW9kdWxlLmV4cG9ydHMgPSBmaXJlc3RvcmVfY2xpZW50XzEuRmlyZXN0b3JlQ2xpZW50O1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKG1vZHVsZS5leHBvcnRzLCBleGlzdGluZ0V4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2025 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FirestoreClient = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst jsonProtos = __webpack_require__(/*! ../../protos/v1beta1.json */ \"(rsc)/./node_modules/@google-cloud/firestore/build/protos/v1beta1.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1beta1/firestore_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = __webpack_require__(/*! ./firestore_client_config.json */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client_config.json\");\n// tslint:disable deprecation\nconst version = (__webpack_require__(/*! ../../../package.json */ \"(rsc)/./node_modules/@google-cloud/firestore/package.json\").version);\n/**\n *  The Cloud Firestore service.\n *\n *  Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL\n *  document database that simplifies storing, syncing, and querying data for\n *  your mobile, web, and IoT apps at global scale. Its client libraries provide\n *  live synchronization and offline support, while its security features and\n *  integrations with Firebase and Google Cloud Platform (GCP) accelerate\n *  building truly serverless apps.\n * @class\n * @deprecated Use v1/firestore_client instead.\n * @memberof v1beta1\n */\nclass FirestoreClient {\n    /**\n     * Construct an instance of FirestoreClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n     *     For more information, please check the\n     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n     *     need to avoid loading the default gRPC version and want to use the fallback\n     *     HTTP implementation. Load only fallback version and pass it to the constructor:\n     *     ```\n     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n     *     const client = new FirestoreClient({fallback: true}, gax);\n     *     ```\n     */\n    constructor(opts, gaxInstance) {\n        var _a, _b, _c, _d, _e;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {\n            throw new Error('Please set either universe_domain or universeDomain, but not both.');\n        }\n        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'\n            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']\n            : undefined;\n        this._universeDomain =\n            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';\n        this._servicePath = 'firestore.' + this._universeDomain;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};\n        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // Request numeric enum values if REST transport is used.\n        opts.numericEnums = true;\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== this._servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Load google-gax module synchronously if needed\n        if (!gaxInstance) {\n            gaxInstance = __webpack_require__(/*! google-gax */ \"(rsc)/./node_modules/google-gax/build/src/index.js\");\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set useJWTAccessWithScope on the auth object.\n        this.auth.useJWTAccessWithScope = true;\n        // Set defaultServicePath on the auth object.\n        this.auth.defaultServicePath = this._servicePath;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === this._servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process === 'object' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n            partitionQuery: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'partitions'),\n            listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds'),\n        };\n        // Some of the methods on this service provide streaming responses.\n        // Provide descriptors for these.\n        this.descriptors.stream = {\n            batchGetDocuments: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            runQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            write: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            listen: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1beta1.Firestore', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = this._gaxModule.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.firestoreStub) {\n            return this.firestoreStub;\n        }\n        // Put together the \"service stub\" for\n        // google.firestore.v1beta1.Firestore.\n        this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.firestore.v1beta1.Firestore')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.firestore.v1beta1.Firestore, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreStubMethods = [\n            'getDocument',\n            'listDocuments',\n            'updateDocument',\n            'deleteDocument',\n            'batchGetDocuments',\n            'beginTransaction',\n            'commit',\n            'rollback',\n            'runQuery',\n            'partitionQuery',\n            'write',\n            'listen',\n            'listCollectionIds',\n            'batchWrite',\n            'createDocument',\n        ];\n        for (const methodName of firestoreStubMethods) {\n            const callPromise = this.firestoreStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    if (methodName in this.descriptors.stream) {\n                        const stream = new stream_1.PassThrough({ objectMode: true });\n                        setImmediate(() => {\n                            stream.emit('error', new this._gaxModule.GoogleError('The client has already been closed.'));\n                        });\n                        return stream;\n                    }\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] ||\n                this.descriptors.stream[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.firestoreStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    get apiEndpoint() {\n        return this._servicePath;\n    }\n    get universeDomain() {\n        return this._universeDomain;\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    getDocument(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getDocument(request, options, callback);\n    }\n    updateDocument(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'document.name': (_a = request.document.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateDocument(request, options, callback);\n    }\n    deleteDocument(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteDocument(request, options, callback);\n    }\n    beginTransaction(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.beginTransaction(request, options, callback);\n    }\n    commit(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.commit(request, options, callback);\n    }\n    rollback(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.rollback(request, options, callback);\n    }\n    batchWrite(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.batchWrite(request, options, callback);\n    }\n    createDocument(request, optionsOrCallback, callback) {\n        var _a, _b;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createDocument(request, options, callback);\n    }\n    /**\n     * Gets multiple documents.\n     *\n     * Documents returned by this method are not guaranteed to be returned in the\n     * same order that they were requested.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.documents\n     *   The names of the documents to retrieve. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   The request will fail if any of the document is not a child resource of the\n     *   given `database`. Duplicate names will be elided.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field will\n     *   not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits {@link protos.google.firestore.v1beta1.BatchGetDocumentsResponse|BatchGetDocumentsResponse} on 'data' event.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.batch_get_documents.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_BatchGetDocuments_async\n     */\n    batchGetDocuments(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.batchGetDocuments(request, options);\n    }\n    /**\n     * Runs a query.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {google.firestore.v1beta1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits {@link protos.google.firestore.v1beta1.RunQueryResponse|RunQueryResponse} on 'data' event.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.run_query.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_RunQuery_async\n     */\n    runQuery(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.runQuery(request, options);\n    }\n    /**\n     * Streams batches of document updates and deletes, in order.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing {@link protos.google.firestore.v1beta1.WriteRequest|WriteRequest} for write() method, and\n     *   will emit objects representing {@link protos.google.firestore.v1beta1.WriteResponse|WriteResponse} on 'data' event asynchronously.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.write.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_Write_async\n     */\n    write(options) {\n        this.initialize();\n        return this.innerApiCalls.write(null, options);\n    }\n    /**\n     * Listens to changes.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing {@link protos.google.firestore.v1beta1.ListenRequest|ListenRequest} for write() method, and\n     *   will emit objects representing {@link protos.google.firestore.v1beta1.ListenResponse|ListenResponse} on 'data' event asynchronously.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.listen.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_Listen_async\n     */\n    listen(options) {\n        this.initialize();\n        return this.innerApiCalls.listen(null, options);\n    }\n    listDocuments(request, optionsOrCallback, callback) {\n        var _a, _b;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listDocuments(request, options, callback);\n    }\n    /**\n     * Equivalent to `listDocuments`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link protos.google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link protos.google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.firestore.v1beta1.Document|Document} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listDocumentsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listDocumentsStream(request, options) {\n        var _a, _b;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        const defaultCallSettings = this._defaults['listDocuments'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);\n    }\n    /**\n     * Equivalent to `listDocuments`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link protos.google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link protos.google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.firestore.v1beta1.Document|Document}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.list_documents.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_ListDocuments_async\n     */\n    listDocumentsAsync(request, options) {\n        var _a, _b;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        const defaultCallSettings = this._defaults['listDocuments'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);\n    }\n    partitionQuery(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.partitionQuery(request, options, callback);\n    }\n    /**\n     * Equivalent to `partitionQuery`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents`.\n     *   Document resource names are not supported; only database resource names\n     *   can be specified.\n     * @param {google.firestore.v1beta1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     *   Query must specify collection with all descendants and be ordered by name\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\n     *   cursors are not supported.\n     * @param {number} request.partitionCount\n     *   The desired maximum number of partition points.\n     *   The partitions may be returned across multiple pages of results.\n     *   The number must be positive. The actual number of partitions\n     *   returned may be fewer.\n     *\n     *   For example, this may be set to one fewer than the number of parallel\n     *   queries to be run, or in running a data pipeline job, one fewer than the\n     *   number of workers or compute instances available.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous call to\n     *   PartitionQuery that may be used to get an additional set of results.\n     *   There are no ordering guarantees between sets of results. Thus, using\n     *   multiple sets of results will require merging the different result sets.\n     *\n     *   For example, two subsequent calls using a page_token may return:\n     *\n     *    * cursor B, cursor M, cursor Q\n     *    * cursor A, cursor U, cursor W\n     *\n     *   To obtain a complete result set ordered with respect to the results of the\n     *   query supplied to PartitionQuery, the results sets should be merged:\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n     * @param {number} request.pageSize\n     *   The maximum number of partitions to return in this call, subject to\n     *   `partition_count`.\n     *\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n     *   if more results exist. A second call to PartitionQuery will return up to\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.firestore.v1beta1.Cursor|Cursor} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `partitionQueryAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    partitionQueryStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['partitionQuery'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.partitionQuery.createStream(this.innerApiCalls.partitionQuery, request, callSettings);\n    }\n    /**\n     * Equivalent to `partitionQuery`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents`.\n     *   Document resource names are not supported; only database resource names\n     *   can be specified.\n     * @param {google.firestore.v1beta1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     *   Query must specify collection with all descendants and be ordered by name\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\n     *   cursors are not supported.\n     * @param {number} request.partitionCount\n     *   The desired maximum number of partition points.\n     *   The partitions may be returned across multiple pages of results.\n     *   The number must be positive. The actual number of partitions\n     *   returned may be fewer.\n     *\n     *   For example, this may be set to one fewer than the number of parallel\n     *   queries to be run, or in running a data pipeline job, one fewer than the\n     *   number of workers or compute instances available.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous call to\n     *   PartitionQuery that may be used to get an additional set of results.\n     *   There are no ordering guarantees between sets of results. Thus, using\n     *   multiple sets of results will require merging the different result sets.\n     *\n     *   For example, two subsequent calls using a page_token may return:\n     *\n     *    * cursor B, cursor M, cursor Q\n     *    * cursor A, cursor U, cursor W\n     *\n     *   To obtain a complete result set ordered with respect to the results of the\n     *   query supplied to PartitionQuery, the results sets should be merged:\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n     * @param {number} request.pageSize\n     *   The maximum number of partitions to return in this call, subject to\n     *   `partition_count`.\n     *\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n     *   if more results exist. A second call to PartitionQuery will return up to\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.firestore.v1beta1.Cursor|Cursor}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.partition_query.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_PartitionQuery_async\n     */\n    partitionQueryAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['partitionQuery'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.partitionQuery.asyncIterate(this.innerApiCalls['partitionQuery'], request, callSettings);\n    }\n    listCollectionIds(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listCollectionIds(request, options, callback);\n    }\n    /**\n     * Equivalent to `listCollectionIds`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link protos.google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing string on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listCollectionIdsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listCollectionIdsStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listCollectionIds'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);\n    }\n    /**\n     * Equivalent to `listCollectionIds`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link protos.google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   string. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.list_collection_ids.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_ListCollectionIds_async\n     */\n    listCollectionIdsAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listCollectionIds'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls['listCollectionIds'], request, callSettings);\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        if (this.firestoreStub && !this._terminated) {\n            return this.firestoreStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreClient = FirestoreClient;\n//# sourceMappingURL=firestore_client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/v1beta1/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/v1beta1/index.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FirestoreClient = void 0;\n// tslint:disable deprecation\nconst firestore_client_1 = __webpack_require__(/*! ./firestore_client */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client.js\");\nObject.defineProperty(exports, \"FirestoreClient\", ({ enumerable: true, get: function () { return firestore_client_1.FirestoreClient; } }));\n// Doing something really horrible for reverse compatibility with original JavaScript exports\nconst existingExports = module.exports;\nmodule.exports = firestore_client_1.FirestoreClient;\nmodule.exports = Object.assign(module.exports, existingExports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9maXJlc3RvcmUvYnVpbGQvc3JjL3YxYmV0YTEvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QjtBQUNBLDJCQUEyQixtQkFBTyxDQUFDLDhHQUFvQjtBQUN2RCxtREFBa0QsRUFBRSxxQ0FBcUMsOENBQThDLEVBQUM7QUFDeEk7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL2ZpcmVzdG9yZS9idWlsZC9zcmMvdjFiZXRhMS9pbmRleC5qcz8xNzU3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vL1xuLy8gKiogVGhpcyBmaWxlIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IGdhcGljLWdlbmVyYXRvci10eXBlc2NyaXB0LiAqKlxuLy8gKiogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZWFwaXMvZ2FwaWMtZ2VuZXJhdG9yLXR5cGVzY3JpcHQgKipcbi8vICoqIEFsbCBjaGFuZ2VzIHRvIHRoaXMgZmlsZSBtYXkgYmUgb3ZlcndyaXR0ZW4uICoqXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpcmVzdG9yZUNsaWVudCA9IHZvaWQgMDtcbi8vIHRzbGludDpkaXNhYmxlIGRlcHJlY2F0aW9uXG5jb25zdCBmaXJlc3RvcmVfY2xpZW50XzEgPSByZXF1aXJlKFwiLi9maXJlc3RvcmVfY2xpZW50XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRmlyZXN0b3JlQ2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmaXJlc3RvcmVfY2xpZW50XzEuRmlyZXN0b3JlQ2xpZW50OyB9IH0pO1xuLy8gRG9pbmcgc29tZXRoaW5nIHJlYWxseSBob3JyaWJsZSBmb3IgcmV2ZXJzZSBjb21wYXRpYmlsaXR5IHdpdGggb3JpZ2luYWwgSmF2YVNjcmlwdCBleHBvcnRzXG5jb25zdCBleGlzdGluZ0V4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cztcbm1vZHVsZS5leHBvcnRzID0gZmlyZXN0b3JlX2NsaWVudF8xLkZpcmVzdG9yZUNsaWVudDtcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbihtb2R1bGUuZXhwb3J0cywgZXhpc3RpbmdFeHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/v1beta1/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/validate.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.customObjectMessage = customObjectMessage;\nexports.validateFunction = validateFunction;\nexports.validateObject = validateObject;\nexports.validateString = validateString;\nexports.validateHost = validateHost;\nexports.validateBoolean = validateBoolean;\nexports.validateNumber = validateNumber;\nexports.validateInteger = validateInteger;\nexports.validateTimestamp = validateTimestamp;\nexports.invalidArgumentMessage = invalidArgumentMessage;\nexports.validateOptional = validateOptional;\nexports.validateMinNumberOfArguments = validateMinNumberOfArguments;\nexports.validateMaxNumberOfArguments = validateMaxNumberOfArguments;\nexports.validateEnumValue = validateEnumValue;\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst timestamp_1 = __webpack_require__(/*! ./timestamp */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js\");\n/**\n * Generates an error message to use with custom objects that cannot be\n * serialized.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value that failed serialization.\n * @param path The field path that the object is assigned to.\n */\nfunction customObjectMessage(arg, value, path) {\n    const fieldPathMessage = path ? ` (found in field \"${path}\")` : '';\n    if ((0, util_1.isObject)(value)) {\n        // We use the base class name as the type name as the sentinel classes\n        // returned by the public FieldValue API are subclasses of FieldValue. By\n        // using the base name, we reduce the number of special cases below.\n        const typeName = value.constructor.name;\n        switch (typeName) {\n            case 'DocumentReference':\n            case 'FieldPath':\n            case 'FieldValue':\n            case 'GeoPoint':\n            case 'Timestamp':\n                return (`${invalidArgumentMessage(arg, 'Firestore document')} Detected an object of type \"${typeName}\" that doesn't match the ` +\n                    `expected instance${fieldPathMessage}. Please ensure that the ` +\n                    'Firestore types you are using are from the same NPM package.)');\n            case 'Object':\n                return `${invalidArgumentMessage(arg, 'Firestore document')} Invalid use of type \"${typeof value}\" as a Firestore argument${fieldPathMessage}.`;\n            default:\n                return (`${invalidArgumentMessage(arg, 'Firestore document')} Couldn't serialize object of type \"${typeName}\"${fieldPathMessage}. Firestore doesn't support JavaScript ` +\n                    'objects with custom prototypes (i.e. objects that were created ' +\n                    'via the \"new\" operator).');\n        }\n    }\n    else {\n        return `${invalidArgumentMessage(arg, 'Firestore document')} Input is not a plain JavaScript object${fieldPathMessage}.`;\n    }\n}\n/**\n * Validates that 'value' is a function.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the function can be omitted.\n */\nfunction validateFunction(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (!(0, util_1.isFunction)(value)) {\n            throw new Error(invalidArgumentMessage(arg, 'function'));\n        }\n    }\n}\n/**\n * Validates that 'value' is an object.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the object can be omitted.\n */\nfunction validateObject(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (!(0, util_1.isObject)(value)) {\n            throw new Error(invalidArgumentMessage(arg, 'object'));\n        }\n    }\n}\n/**\n * Validates that 'value' is a string.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the string can be omitted.\n */\nfunction validateString(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (typeof value !== 'string') {\n            throw new Error(invalidArgumentMessage(arg, 'string'));\n        }\n    }\n}\n/**\n * Validates that 'value' is a host.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the host can be omitted.\n */\nfunction validateHost(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        validateString(arg, value);\n        const urlString = `http://${value}/`;\n        let parsed;\n        try {\n            parsed = new url_1.URL(urlString);\n        }\n        catch (e) {\n            throw new Error(invalidArgumentMessage(arg, 'host'));\n        }\n        if (parsed.search !== '' ||\n            parsed.pathname !== '/' ||\n            parsed.username !== '') {\n            throw new Error(invalidArgumentMessage(arg, 'host'));\n        }\n    }\n}\n/**\n * Validates that 'value' is a boolean.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the boolean can be omitted.\n */\nfunction validateBoolean(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (typeof value !== 'boolean') {\n            throw new Error(invalidArgumentMessage(arg, 'boolean'));\n        }\n    }\n}\n/**\n * Validates that 'value' is a number.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the number can be omitted.\n */\nfunction validateNumber(arg, value, options) {\n    const min = options !== undefined && options.minValue !== undefined\n        ? options.minValue\n        : -Infinity;\n    const max = options !== undefined && options.maxValue !== undefined\n        ? options.maxValue\n        : Infinity;\n    if (!validateOptional(value, options)) {\n        if (typeof value !== 'number' || isNaN(value)) {\n            throw new Error(invalidArgumentMessage(arg, 'number'));\n        }\n        else if (value < min || value > max) {\n            throw new Error(`${formatArgumentName(arg)} must be within [${min}, ${max}] inclusive, but was: ${value}`);\n        }\n    }\n}\n/**\n * Validates that 'value' is a integer.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the integer can be omitted.\n */\nfunction validateInteger(arg, value, options) {\n    const min = options !== undefined && options.minValue !== undefined\n        ? options.minValue\n        : -Infinity;\n    const max = options !== undefined && options.maxValue !== undefined\n        ? options.maxValue\n        : Infinity;\n    if (!validateOptional(value, options)) {\n        if (typeof value !== 'number' || isNaN(value) || value % 1 !== 0) {\n            throw new Error(invalidArgumentMessage(arg, 'integer'));\n        }\n        else if (value < min || value > max) {\n            throw new Error(`${formatArgumentName(arg)} must be within [${min}, ${max}] inclusive, but was: ${value}`);\n        }\n    }\n}\n/**\n * Validates that 'value' is a Timestamp.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the Timestamp can be omitted.\n */\nfunction validateTimestamp(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (!(value instanceof timestamp_1.Timestamp)) {\n            throw new Error(invalidArgumentMessage(arg, 'Timestamp'));\n        }\n    }\n}\n/**\n * Generates an error message to use with invalid arguments.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param expectedType The expected input type.\n */\nfunction invalidArgumentMessage(arg, expectedType) {\n    return `${formatArgumentName(arg)} is not a valid ${expectedType}.`;\n}\n/**\n * Enforces the 'options.optional' constraint for 'value'.\n *\n * @private\n * @internal\n * @param value The input to validate.\n * @param options Whether the function can be omitted.\n * @return Whether the object is omitted and is allowed to be omitted.\n */\nfunction validateOptional(value, options) {\n    return (value === undefined && options !== undefined && options.optional === true);\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n *\n * @private\n * @internal\n * @param num The number to use for formatting.\n * @param str The string to format.\n */\nfunction formatPlural(num, str) {\n    return `${num} ${str}` + (num === 1 ? '' : 's');\n}\n/**\n * Creates a descriptive name for the provided argument name or index.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @return Either the argument name or its index description.\n */\nfunction formatArgumentName(arg) {\n    return typeof arg === 'string'\n        ? `Value for argument \"${arg}\"`\n        : `Element at index ${arg}`;\n}\n/**\n * Verifies that 'args' has at least 'minSize' elements.\n *\n * @private\n * @internal\n * @param funcName The function name to use in the error message.\n * @param args The array (or array-like structure) to verify.\n * @param minSize The minimum number of elements to enforce.\n * @throws if the expectation is not met.\n */\nfunction validateMinNumberOfArguments(funcName, args, minSize) {\n    if (args.length < minSize) {\n        throw new Error(`Function \"${funcName}()\" requires at least ` +\n            `${formatPlural(minSize, 'argument')}.`);\n    }\n}\n/**\n * Verifies that 'args' has at most 'maxSize' elements.\n *\n * @private\n * @internal\n * @param funcName The function name to use in the error message.\n * @param args The array (or array-like structure) to verify.\n * @param maxSize The maximum number of elements to enforce.\n * @throws if the expectation is not met.\n */\nfunction validateMaxNumberOfArguments(funcName, args, maxSize) {\n    if (args.length > maxSize) {\n        throw new Error(`Function \"${funcName}()\" accepts at most ` +\n            `${formatPlural(maxSize, 'argument')}.`);\n    }\n}\n/**\n * Validates that the provided named option equals one of the expected values.\n *\n * @param arg The argument name or argument index (for varargs methods).).\n * @param value The input to validate.\n * @param allowedValues A list of expected values.\n * @param options Whether the input can be omitted.\n * @private\n * @internal\n */\nfunction validateEnumValue(arg, value, allowedValues, options) {\n    if (!validateOptional(value, options)) {\n        const expectedDescription = [];\n        for (const allowed of allowedValues) {\n            if (allowed === value) {\n                return;\n            }\n            expectedDescription.push(allowed);\n        }\n        throw new Error(`${formatArgumentName(arg)} is invalid. Acceptable values are: ${expectedDescription.join(', ')}`);\n    }\n}\n//# sourceMappingURL=validate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/watch.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/watch.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.QueryWatch = exports.DocumentWatch = exports.WATCH_IDLE_TIMEOUT_MS = void 0;\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst rbtree = __webpack_require__(/*! functional-red-black-tree */ \"(rsc)/./node_modules/functional-red-black-tree/rbtree.js\");\nconst google_gax_1 = __webpack_require__(/*! google-gax */ \"(rsc)/./node_modules/google-gax/build/src/index.js\");\nconst backoff_1 = __webpack_require__(/*! ./backoff */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/backoff.js\");\nconst document_1 = __webpack_require__(/*! ./document */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document.js\");\nconst document_change_1 = __webpack_require__(/*! ./document-change */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document-change.js\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\nconst path_1 = __webpack_require__(/*! ./path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst timestamp_1 = __webpack_require__(/*! ./timestamp */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/types.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\n/*!\n * Target ID used by watch. Watch uses a fixed target id since we only support\n * one target per stream.\n * @type {number}\n */\nconst WATCH_TARGET_ID = 0x1;\n/*!\n * Idle timeout used to detect Watch streams that stall (see\n * https://github.com/googleapis/nodejs-firestore/issues/1057, b/156308554).\n * Under normal load, the Watch backend will send a TARGET_CHANGE message\n * roughly every 30 seconds. As discussed with the backend team, we reset the\n * Watch stream if we do not receive any message within 120 seconds.\n */\nexports.WATCH_IDLE_TIMEOUT_MS = 120 * 1000;\n/*!\n * Sentinel value for a document remove.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst REMOVED = {};\n/*!\n * The change type for document change events.\n */\n// tslint:disable-next-line:variable-name\nconst ChangeType = {\n    added: 'added',\n    modified: 'modified',\n    removed: 'removed',\n};\n/*!\n * The comparator used for document watches (which should always get called with\n * the same document).\n */\nconst DOCUMENT_WATCH_COMPARATOR = (doc1, doc2) => {\n    assert(doc1 === doc2, 'Document watches only support one document.');\n    return 0;\n};\nconst EMPTY_FUNCTION = () => { };\n/**\n * Watch provides listen functionality and exposes the 'onSnapshot' observer. It\n * can be used with a valid Firestore Listen target.\n *\n * @class\n * @private\n * @internal\n */\nclass Watch {\n    /**\n     * @private\n     * @internal\n     *\n     * @param firestore The Firestore Database client.\n     */\n    constructor(firestore, _converter = (0, types_1.defaultConverter)()) {\n        this._converter = _converter;\n        /**\n         * Indicates whether we are interested in data from the stream. Set to false in the\n         * 'unsubscribe()' callback.\n         * @private\n         * @internal\n         */\n        this.isActive = true;\n        /**\n         * The current stream to the backend.\n         * @private\n         * @internal\n         */\n        this.currentStream = null;\n        /**\n         * The server assigns and updates the resume token.\n         * @private\n         * @internal\n         */\n        this.resumeToken = undefined;\n        /**\n         * A map of document names to QueryDocumentSnapshots for the last sent snapshot.\n         * @private\n         * @internal\n         */\n        this.docMap = new Map();\n        /**\n         * The accumulated map of document changes (keyed by document name) for the\n         * current snapshot.\n         * @private\n         * @internal\n         */\n        this.changeMap = new Map();\n        /**\n         * The current state of the query results. *\n         * @private\n         * @internal\n         */\n        this.current = false;\n        /**\n         * We need this to track whether we've pushed an initial set of changes,\n         * since we should push those even when there are no changes, if there\n         * aren't docs.\n         * @private\n         * @internal\n         */\n        this.hasPushed = false;\n        this.firestore = firestore;\n        this.backoff = new backoff_1.ExponentialBackoff();\n        this.requestTag = (0, util_1.requestTag)();\n        this.onNext = EMPTY_FUNCTION;\n        this.onError = EMPTY_FUNCTION;\n    }\n    /**\n     * Starts a watch and attaches a listener for document change events.\n     *\n     * @private\n     * @internal\n     * @param onNext A callback to be called every time a new snapshot is\n     * available.\n     * @param onError A callback to be called if the listen fails or is cancelled.\n     * No further callbacks will occur.\n     *\n     * @returns An unsubscribe function that can be called to cancel the snapshot\n     * listener.\n     */\n    onSnapshot(onNext, onError) {\n        assert(this.onNext === EMPTY_FUNCTION, 'onNext should not already be defined.');\n        assert(this.onError === EMPTY_FUNCTION, 'onError should not already be defined.');\n        assert(this.docTree === undefined, 'docTree should not already be defined.');\n        this.onNext = onNext;\n        this.onError = onError;\n        this.docTree = rbtree(this.getComparator());\n        this.initStream();\n        const unsubscribe = () => {\n            (0, logger_1.logger)('Watch.onSnapshot', this.requestTag, 'Unsubscribe called');\n            // Prevent further callbacks.\n            this.onNext = () => { };\n            this.onError = () => { };\n            this.shutdown();\n        };\n        this.firestore.registerListener();\n        return unsubscribe;\n    }\n    /**\n     * Returns the current count of all documents, including the changes from\n     * the current changeMap.\n     * @private\n     * @internal\n     */\n    currentSize() {\n        const changes = this.extractCurrentChanges(timestamp_1.Timestamp.now());\n        return this.docMap.size + changes.adds.length - changes.deletes.length;\n    }\n    /**\n     * Splits up document changes into removals, additions, and updates.\n     * @private\n     * @internal\n     */\n    extractCurrentChanges(readTime) {\n        const deletes = [];\n        const adds = [];\n        const updates = [];\n        this.changeMap.forEach((value, name) => {\n            if (value === REMOVED) {\n                if (this.docMap.has(name)) {\n                    deletes.push(name);\n                }\n            }\n            else if (this.docMap.has(name)) {\n                value.readTime = readTime;\n                updates.push(value.build());\n            }\n            else {\n                value.readTime = readTime;\n                adds.push(value.build());\n            }\n        });\n        return { deletes, adds, updates };\n    }\n    /**\n     * Helper to clear the docs on RESET or filter mismatch.\n     * @private\n     * @internal\n     */\n    resetDocs() {\n        (0, logger_1.logger)('Watch.resetDocs', this.requestTag, 'Resetting documents');\n        this.changeMap.clear();\n        this.resumeToken = undefined;\n        this.docTree.forEach((snapshot) => {\n            // Mark each document as deleted. If documents are not deleted, they\n            // will be send again by the server.\n            this.changeMap.set(snapshot.ref.path, REMOVED);\n        });\n        this.current = false;\n    }\n    /**\n     * Closes the stream and calls onError() if the stream is still active.\n     * @private\n     * @internal\n     */\n    closeStream(err) {\n        if (this.isActive) {\n            (0, logger_1.logger)('Watch.closeStream', this.requestTag, 'Invoking onError: ', err);\n            this.onError(err);\n        }\n        this.shutdown();\n    }\n    /**\n     * Re-opens the stream unless the specified error is considered permanent.\n     * Clears the change map.\n     * @private\n     * @internal\n     */\n    maybeReopenStream(err) {\n        if (this.isActive && !this.isPermanentWatchError(err)) {\n            (0, logger_1.logger)('Watch.maybeReopenStream', this.requestTag, 'Stream ended, re-opening after retryable error:', err);\n            this.changeMap.clear();\n            if (this.isResourceExhaustedError(err)) {\n                this.backoff.resetToMax();\n            }\n            this.initStream();\n        }\n        else {\n            this.closeStream(err);\n        }\n    }\n    /**\n     * Cancels the current idle timeout and reschedules a new timer.\n     *\n     * @private\n     * @internal\n     */\n    resetIdleTimeout() {\n        if (this.idleTimeoutHandle) {\n            clearTimeout(this.idleTimeoutHandle);\n        }\n        this.idleTimeoutHandle = (0, backoff_1.delayExecution)(() => {\n            var _a;\n            (0, logger_1.logger)('Watch.resetIdleTimeout', this.requestTag, 'Resetting stream after idle timeout');\n            (_a = this.currentStream) === null || _a === void 0 ? void 0 : _a.end();\n            this.currentStream = null;\n            const error = new google_gax_1.GoogleError('Watch stream idle timeout');\n            error.code = google_gax_1.Status.UNKNOWN;\n            this.maybeReopenStream(error);\n        }, exports.WATCH_IDLE_TIMEOUT_MS);\n    }\n    /**\n     * Helper to restart the outgoing stream to the backend.\n     * @private\n     * @internal\n     */\n    resetStream() {\n        (0, logger_1.logger)('Watch.resetStream', this.requestTag, 'Restarting stream');\n        if (this.currentStream) {\n            this.currentStream.end();\n            this.currentStream = null;\n        }\n        this.initStream();\n    }\n    /**\n     * Initializes a new stream to the backend with backoff.\n     * @private\n     * @internal\n     */\n    initStream() {\n        this.backoff\n            .backoffAndWait()\n            .then(async () => {\n            if (!this.isActive) {\n                (0, logger_1.logger)('Watch.initStream', this.requestTag, 'Not initializing inactive stream');\n                return;\n            }\n            await this.firestore.initializeIfNeeded(this.requestTag);\n            const request = {};\n            request.database = this.firestore.formattedName;\n            request.addTarget = this.getTarget(this.resumeToken);\n            // Note that we need to call the internal _listen API to pass additional\n            // header values in readWriteStream.\n            return this.firestore\n                .requestStream('listen', \n            /* bidirectional= */ true, request, this.requestTag)\n                .then(backendStream => {\n                if (!this.isActive) {\n                    (0, logger_1.logger)('Watch.initStream', this.requestTag, 'Closing inactive stream');\n                    backendStream.emit('end');\n                    backendStream.on('error', () => {\n                        // Note that emitting 'end' above does not prevent the Duplex\n                        // from receiving potential errors from the backend. Since the\n                        // stream is no longer active (`isActive` is false), we\n                        // swallow / ignore any errors it may receive.\n                    });\n                    return;\n                }\n                (0, logger_1.logger)('Watch.initStream', this.requestTag, 'Opened new stream');\n                this.currentStream = backendStream;\n                this.resetIdleTimeout();\n                this.currentStream.on('data', (proto) => {\n                    this.resetIdleTimeout();\n                    this.onData(proto);\n                })\n                    .on('error', err => {\n                    if (this.currentStream === backendStream) {\n                        this.currentStream = null;\n                        this.maybeReopenStream(err);\n                    }\n                })\n                    .on('end', () => {\n                    if (this.currentStream === backendStream) {\n                        this.currentStream = null;\n                        const err = new google_gax_1.GoogleError('Stream ended unexpectedly');\n                        err.code = google_gax_1.Status.UNKNOWN;\n                        this.maybeReopenStream(err);\n                    }\n                });\n                this.currentStream.resume();\n            });\n        })\n            .catch(err => {\n            this.closeStream(err);\n        });\n    }\n    /**\n     * Handles 'data' events and closes the stream if the response type is\n     * invalid.\n     * @private\n     * @internal\n     */\n    onData(proto) {\n        if (proto.targetChange) {\n            (0, logger_1.logger)('Watch.onData', this.requestTag, 'Processing target change');\n            const change = proto.targetChange;\n            const noTargetIds = !change.targetIds || change.targetIds.length === 0;\n            if (change.targetChangeType === 'NO_CHANGE') {\n                if (noTargetIds && change.readTime && this.current) {\n                    // This means everything is up-to-date, so emit the current\n                    // set of docs as a snapshot, if there were changes.\n                    this.pushSnapshot(timestamp_1.Timestamp.fromProto(change.readTime), change.resumeToken);\n                }\n            }\n            else if (change.targetChangeType === 'ADD') {\n                if (WATCH_TARGET_ID !== change.targetIds[0]) {\n                    this.closeStream(Error('Unexpected target ID sent by server'));\n                }\n            }\n            else if (change.targetChangeType === 'REMOVE') {\n                let code = google_gax_1.Status.INTERNAL;\n                let message = 'internal error';\n                if (change.cause) {\n                    code = change.cause.code;\n                    message = change.cause.message;\n                }\n                // @todo: Surface a .code property on the exception.\n                this.closeStream(new Error('Error ' + code + ': ' + message));\n            }\n            else if (change.targetChangeType === 'RESET') {\n                // Whatever changes have happened so far no longer matter.\n                this.resetDocs();\n            }\n            else if (change.targetChangeType === 'CURRENT') {\n                this.current = true;\n            }\n            else {\n                this.closeStream(new Error('Unknown target change type: ' + JSON.stringify(change)));\n            }\n            if (change.resumeToken &&\n                this.affectsTarget(change.targetIds, WATCH_TARGET_ID)) {\n                this.backoff.reset();\n            }\n        }\n        else if (proto.documentChange) {\n            (0, logger_1.logger)('Watch.onData', this.requestTag, 'Processing change event');\n            // No other targetIds can show up here, but we still need to see\n            // if the targetId was in the added list or removed list.\n            const targetIds = proto.documentChange.targetIds || [];\n            const removedTargetIds = proto.documentChange.removedTargetIds || [];\n            let changed = false;\n            let removed = false;\n            for (let i = 0; i < targetIds.length; i++) {\n                if (targetIds[i] === WATCH_TARGET_ID) {\n                    changed = true;\n                }\n            }\n            for (let i = 0; i < removedTargetIds.length; i++) {\n                if (removedTargetIds[i] === WATCH_TARGET_ID) {\n                    removed = true;\n                }\n            }\n            const document = proto.documentChange.document;\n            const name = document.name;\n            const relativeName = path_1.QualifiedResourcePath.fromSlashSeparatedString(name).relativeName;\n            if (changed) {\n                (0, logger_1.logger)('Watch.onData', this.requestTag, 'Received document change');\n                const ref = this.firestore.doc(relativeName);\n                const snapshot = new document_1.DocumentSnapshotBuilder(ref.withConverter(this._converter));\n                snapshot.fieldsProto = document.fields || {};\n                snapshot.createTime = timestamp_1.Timestamp.fromProto(document.createTime);\n                snapshot.updateTime = timestamp_1.Timestamp.fromProto(document.updateTime);\n                this.changeMap.set(relativeName, snapshot);\n            }\n            else if (removed) {\n                (0, logger_1.logger)('Watch.onData', this.requestTag, 'Received document remove');\n                this.changeMap.set(relativeName, REMOVED);\n            }\n        }\n        else if (proto.documentDelete || proto.documentRemove) {\n            (0, logger_1.logger)('Watch.onData', this.requestTag, 'Processing remove event');\n            const name = (proto.documentDelete || proto.documentRemove).document;\n            const relativeName = path_1.QualifiedResourcePath.fromSlashSeparatedString(name).relativeName;\n            this.changeMap.set(relativeName, REMOVED);\n        }\n        else if (proto.filter) {\n            (0, logger_1.logger)('Watch.onData', this.requestTag, 'Processing filter update');\n            if (proto.filter.count !== this.currentSize()) {\n                // We need to remove all the current results.\n                this.resetDocs();\n                // The filter didn't match, so re-issue the query.\n                this.resetStream();\n            }\n        }\n        else {\n            this.closeStream(new Error('Unknown listen response type: ' + JSON.stringify(proto)));\n        }\n    }\n    /**\n     * Checks if the current target id is included in the list of target ids.\n     * If no targetIds are provided, returns true.\n     * @private\n     * @internal\n     */\n    affectsTarget(targetIds, currentId) {\n        if (targetIds === undefined || targetIds.length === 0) {\n            return true;\n        }\n        for (const targetId of targetIds) {\n            if (targetId === currentId) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Assembles a new snapshot from the current set of changes and invokes the\n     * user's callback. Clears the current changes on completion.\n     * @private\n     * @internal\n     */\n    pushSnapshot(readTime, nextResumeToken) {\n        const appliedChanges = this.computeSnapshot(readTime);\n        if (!this.hasPushed || appliedChanges.length > 0) {\n            (0, logger_1.logger)('Watch.pushSnapshot', this.requestTag, 'Sending snapshot with %d changes and %d documents', String(appliedChanges.length), this.docTree.length);\n            // We pass the current set of changes, even if `docTree` is modified later.\n            const currentTree = this.docTree;\n            this.onNext(readTime, currentTree.length, () => currentTree.keys, () => appliedChanges);\n            this.hasPushed = true;\n        }\n        this.changeMap.clear();\n        this.resumeToken = nextResumeToken;\n    }\n    /**\n     * Applies a document delete to the document tree and the document map.\n     * Returns the corresponding DocumentChange event.\n     * @private\n     * @internal\n     */\n    deleteDoc(name) {\n        assert(this.docMap.has(name), 'Document to delete does not exist');\n        const oldDocument = this.docMap.get(name);\n        const existing = this.docTree.find(oldDocument);\n        const oldIndex = existing.index;\n        this.docTree = existing.remove();\n        this.docMap.delete(name);\n        return new document_change_1.DocumentChange(ChangeType.removed, oldDocument, oldIndex, -1);\n    }\n    /**\n     * Applies a document add to the document tree and the document map. Returns\n     * the corresponding DocumentChange event.\n     * @private\n     * @internal\n     */\n    addDoc(newDocument) {\n        const name = newDocument.ref.path;\n        assert(!this.docMap.has(name), 'Document to add already exists');\n        this.docTree = this.docTree.insert(newDocument, null);\n        const newIndex = this.docTree.find(newDocument).index;\n        this.docMap.set(name, newDocument);\n        return new document_change_1.DocumentChange(ChangeType.added, newDocument, -1, newIndex);\n    }\n    /**\n     * Applies a document modification to the document tree and the document map.\n     * Returns the DocumentChange event for successful modifications.\n     * @private\n     * @internal\n     */\n    modifyDoc(newDocument) {\n        const name = newDocument.ref.path;\n        assert(this.docMap.has(name), 'Document to modify does not exist');\n        const oldDocument = this.docMap.get(name);\n        if (!oldDocument.updateTime.isEqual(newDocument.updateTime)) {\n            const removeChange = this.deleteDoc(name);\n            const addChange = this.addDoc(newDocument);\n            return new document_change_1.DocumentChange(ChangeType.modified, newDocument, removeChange.oldIndex, addChange.newIndex);\n        }\n        return null;\n    }\n    /**\n     * Applies the mutations in changeMap to both the document tree and the\n     * document lookup map. Modified docMap in-place and returns the updated\n     * state.\n     * @private\n     * @internal\n     */\n    computeSnapshot(readTime) {\n        const changeSet = this.extractCurrentChanges(readTime);\n        const appliedChanges = [];\n        // Process the sorted changes in the order that is expected by our clients\n        // (removals, additions, and then modifications). We also need to sort the\n        // individual changes to assure that oldIndex/newIndex keep incrementing.\n        changeSet.deletes.sort((name1, name2) => {\n            // Deletes are sorted based on the order of the existing document.\n            return this.getComparator()(this.docMap.get(name1), this.docMap.get(name2));\n        });\n        changeSet.deletes.forEach(name => {\n            const change = this.deleteDoc(name);\n            appliedChanges.push(change);\n        });\n        changeSet.adds.sort(this.getComparator());\n        changeSet.adds.forEach(snapshot => {\n            const change = this.addDoc(snapshot);\n            appliedChanges.push(change);\n        });\n        changeSet.updates.sort(this.getComparator());\n        changeSet.updates.forEach(snapshot => {\n            const change = this.modifyDoc(snapshot);\n            if (change) {\n                appliedChanges.push(change);\n            }\n        });\n        assert(this.docTree.length === this.docMap.size, 'The update document ' +\n            'tree and document map should have the same number of entries.');\n        return appliedChanges;\n    }\n    /**\n     * Determines whether a watch error is considered permanent and should not be\n     * retried. Errors that don't provide a GRPC error code are always considered\n     * transient in this context.\n     *\n     * @private\n     * @internal\n     * @param error An error object.\n     * @return Whether the error is permanent.\n     */\n    isPermanentWatchError(error) {\n        if (error.code === undefined) {\n            (0, logger_1.logger)('Watch.isPermanentError', this.requestTag, 'Unable to determine error code: ', error);\n            return false;\n        }\n        switch (error.code) {\n            case google_gax_1.Status.ABORTED:\n            case google_gax_1.Status.CANCELLED:\n            case google_gax_1.Status.UNKNOWN:\n            case google_gax_1.Status.DEADLINE_EXCEEDED:\n            case google_gax_1.Status.RESOURCE_EXHAUSTED:\n            case google_gax_1.Status.INTERNAL:\n            case google_gax_1.Status.UNAVAILABLE:\n            case google_gax_1.Status.UNAUTHENTICATED:\n                return false;\n            default:\n                return true;\n        }\n    }\n    /**\n     * Determines whether we need to initiate a longer backoff due to system\n     * overload.\n     *\n     * @private\n     * @internal\n     * @param error A GRPC Error object that exposes an error code.\n     * @return Whether we need to back off our retries.\n     */\n    isResourceExhaustedError(error) {\n        return error.code === google_gax_1.Status.RESOURCE_EXHAUSTED;\n    }\n    /** Closes the stream and clears all timeouts. */\n    shutdown() {\n        var _a;\n        if (this.isActive) {\n            this.isActive = false;\n            if (this.idleTimeoutHandle) {\n                clearTimeout(this.idleTimeoutHandle);\n                this.idleTimeoutHandle = undefined;\n            }\n            this.firestore.unregisterListener();\n        }\n        (_a = this.currentStream) === null || _a === void 0 ? void 0 : _a.end();\n        this.currentStream = null;\n    }\n}\n/**\n * Creates a new Watch instance to listen on DocumentReferences.\n *\n * @private\n * @internal\n */\nclass DocumentWatch extends Watch {\n    constructor(firestore, ref) {\n        super(firestore, ref._converter);\n        this.ref = ref;\n    }\n    getComparator() {\n        return DOCUMENT_WATCH_COMPARATOR;\n    }\n    getTarget(resumeToken) {\n        const formattedName = this.ref.formattedName;\n        return {\n            documents: {\n                documents: [formattedName],\n            },\n            targetId: WATCH_TARGET_ID,\n            resumeToken,\n        };\n    }\n}\nexports.DocumentWatch = DocumentWatch;\n/**\n * Creates a new Watch instance to listen on Queries.\n *\n * @private\n * @internal\n */\nclass QueryWatch extends Watch {\n    constructor(firestore, query, converter) {\n        super(firestore, converter);\n        this.query = query;\n        this.comparator = query.comparator();\n    }\n    getComparator() {\n        return this.query.comparator();\n    }\n    getTarget(resumeToken) {\n        const query = this.query.toProto();\n        return { query, targetId: WATCH_TARGET_ID, resumeToken };\n    }\n}\nexports.QueryWatch = QueryWatch;\n//# sourceMappingURL=watch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/watch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/write-batch.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/write-batch.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WriteBatch = exports.WriteResult = void 0;\nexports.validateSetOptions = validateSetOptions;\nexports.validateDocumentData = validateDocumentData;\nexports.validateFieldValue = validateFieldValue;\nconst document_1 = __webpack_require__(/*! ./document */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/document.js\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/logger.js\");\nconst path_1 = __webpack_require__(/*! ./path */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/path.js\");\nconst helpers_1 = __webpack_require__(/*! ./reference/helpers */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/reference/helpers.js\");\nconst serializer_1 = __webpack_require__(/*! ./serializer */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/serializer.js\");\nconst timestamp_1 = __webpack_require__(/*! ./timestamp */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/timestamp.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/util.js\");\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/validate.js\");\nconst trace_util_1 = __webpack_require__(/*! ./telemetry/trace-util */ \"(rsc)/./node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js\");\n/**\n * A WriteResult wraps the write time set by the Firestore servers on sets(),\n * updates(), and creates().\n *\n * @class WriteResult\n */\nclass WriteResult {\n    /**\n     * @private\n     *\n     * @param _writeTime The time of the corresponding document write.\n     */\n    constructor(_writeTime) {\n        this._writeTime = _writeTime;\n    }\n    /**\n     * The write time as set by the Firestore servers.\n     *\n     * @type {Timestamp}\n     * @name WriteResult#writeTime\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({foo: 'bar'}).then(writeResult => {\n     *   console.log(`Document written at: ${writeResult.writeTime.toDate()}`);\n     * });\n     * ```\n     */\n    get writeTime() {\n        return this._writeTime;\n    }\n    /**\n     * Returns true if this `WriteResult` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return true if this `WriteResult` is equal to the provided value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof WriteResult &&\n                this._writeTime.isEqual(other._writeTime)));\n    }\n}\nexports.WriteResult = WriteResult;\n/**\n * A Firestore WriteBatch that can be used to atomically commit multiple write\n * operations at once.\n *\n * @class WriteBatch\n */\nclass WriteBatch {\n    /**\n     * The number of writes in this batch.\n     * @private\n     * @internal\n     */\n    get _opCount() {\n        return this._ops.length;\n    }\n    /** @private */\n    constructor(firestore) {\n        /**\n         * An array of document paths and the corresponding write operations that are\n         * executed as part of the commit. The resulting `api.IWrite` will be sent to\n         * the backend.\n         *\n         * @private\n         * @internal\n         */\n        this._ops = [];\n        this._committed = false;\n        this._firestore = firestore;\n        this._serializer = new serializer_1.Serializer(firestore);\n        this._allowUndefined = !!firestore._settings.ignoreUndefinedProperties;\n    }\n    /**\n     * Checks if this write batch has any pending operations.\n     *\n     * @private\n     * @internal\n     */\n    get isEmpty() {\n        return this._ops.length === 0;\n    }\n    /**\n     * Throws an error if this batch has already been committed.\n     *\n     * @private\n     * @internal\n     */\n    verifyNotCommitted() {\n        if (this._committed) {\n            throw new Error('Cannot modify a WriteBatch that has been committed.');\n        }\n    }\n    /**\n     * Create a document with the provided object values. This will fail the batch\n     * if a document exists at its location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {T} data The object to serialize as the document.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * writeBatch.create(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    create(documentRef, data) {\n        const ref = (0, helpers_1.validateDocumentReference)('documentRef', documentRef);\n        const firestoreData = ref._converter.toFirestore(data);\n        validateDocumentData('data', firestoreData, \n        /* allowDeletes= */ false, this._allowUndefined);\n        this.verifyNotCommitted();\n        const transform = document_1.DocumentTransform.fromObject(ref, firestoreData);\n        transform.validate();\n        const precondition = new document_1.Precondition({ exists: false });\n        const op = () => {\n            const document = document_1.DocumentSnapshot.fromObject(ref, firestoreData);\n            const write = document.toWriteProto();\n            if (!transform.isEmpty) {\n                write.updateTransforms = transform.toProto(this._serializer);\n            }\n            write.currentDocument = precondition.toProto();\n            return write;\n        };\n        this._ops.push({ docPath: documentRef.path, op });\n        return this;\n    }\n    /**\n     * Deletes a document from the database.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the batch if the\n     * document doesn't exist or was last updated at a different time.\n     * @param {boolean= } precondition.exists If set to true, enforces that the target\n     * document must or must not exist.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.delete(documentRef);\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    delete(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    documentRef, precondition) {\n        const ref = (0, helpers_1.validateDocumentReference)('documentRef', documentRef);\n        validateDeletePrecondition('precondition', precondition, { optional: true });\n        this.verifyNotCommitted();\n        const conditions = new document_1.Precondition(precondition);\n        const op = () => {\n            const write = { delete: ref.formattedName };\n            if (!conditions.isEmpty) {\n                write.currentDocument = conditions.toProto();\n            }\n            return write;\n        };\n        this._ops.push({ docPath: documentRef.path, op });\n        return this;\n    }\n    /**\n     * Write to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document does not\n     * exist yet, it will be created. If you pass [SetOptions]{@link SetOptions},\n     * the provided data can be merged into the existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T|Partial<T>} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call\n     * remain untouched. If your input sets any field to an empty map, all nested\n     * fields are overwritten.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n     * set() only replaces the specified field paths. Any field path that is no\n     * specified is ignored and remains untouched. If your input sets any field to\n     * an empty map, all nested fields are overwritten.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.set(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    set(documentRef, data, options) {\n        validateSetOptions('options', options, { optional: true });\n        const mergeLeaves = options && 'merge' in options && options.merge;\n        const mergePaths = options && 'mergeFields' in options;\n        const ref = (0, helpers_1.validateDocumentReference)('documentRef', documentRef);\n        let firestoreData;\n        if (mergeLeaves || mergePaths) {\n            firestoreData = ref._converter.toFirestore(data, options);\n        }\n        else {\n            firestoreData = ref._converter.toFirestore(data);\n        }\n        validateDocumentData('data', firestoreData, \n        /* allowDeletes= */ !!(mergePaths || mergeLeaves), this._allowUndefined);\n        this.verifyNotCommitted();\n        let documentMask;\n        if (mergePaths) {\n            documentMask = document_1.DocumentMask.fromFieldMask(options.mergeFields);\n            firestoreData = documentMask.applyTo(firestoreData);\n        }\n        const transform = document_1.DocumentTransform.fromObject(ref, firestoreData);\n        transform.validate();\n        const op = () => {\n            const document = document_1.DocumentSnapshot.fromObject(ref, firestoreData);\n            if (mergePaths) {\n                documentMask.removeFields(transform.fields);\n            }\n            else if (mergeLeaves) {\n                documentMask = document_1.DocumentMask.fromObject(firestoreData);\n            }\n            const write = document.toWriteProto();\n            if (!transform.isEmpty) {\n                write.updateTransforms = transform.toProto(this._serializer);\n            }\n            if (mergePaths || mergeLeaves) {\n                write.updateMask = documentMask.toProto();\n            }\n            return write;\n        };\n        this._ops.push({ docPath: documentRef.path, op });\n        return this;\n    }\n    /**\n     * Update fields of the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document\n     * doesn't yet exist, the update fails and the entire batch will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object\n     * containing the fields and values with which to update the document\n     * or the path of the first field to update.\n     * @param {\n     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n     * An alternating list of field paths and values to update or a Precondition\n     * to restrict this update.\n     * @throws {Error} If the provided input is not valid Firestore data.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.update(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    update(documentRef, dataOrField, ...preconditionOrValues) {\n        // eslint-disable-next-line prefer-rest-params\n        (0, validate_1.validateMinNumberOfArguments)('WriteBatch.update', arguments, 2);\n        (0, helpers_1.validateDocumentReference)('documentRef', documentRef);\n        this.verifyNotCommitted();\n        const updateMap = new Map();\n        let precondition = new document_1.Precondition({ exists: true });\n        const argumentError = 'Update() requires either a single JavaScript ' +\n            'object or an alternating list of field/value pairs that can be ' +\n            'followed by an optional precondition.';\n        const usesVarargs = typeof dataOrField === 'string' || dataOrField instanceof path_1.FieldPath;\n        if (usesVarargs) {\n            const argumentOffset = 1; // Respect 'documentRef' in the error message\n            const fieldOrValues = [dataOrField, ...preconditionOrValues];\n            try {\n                for (let i = 0; i < fieldOrValues.length; i += 2) {\n                    if (i === fieldOrValues.length - 1) {\n                        const maybePrecondition = fieldOrValues[i];\n                        validateUpdatePrecondition(i + argumentOffset, maybePrecondition);\n                        precondition = new document_1.Precondition(maybePrecondition);\n                    }\n                    else {\n                        const maybeFieldPath = fieldOrValues[i];\n                        (0, path_1.validateFieldPath)(i + argumentOffset, maybeFieldPath);\n                        // Unlike the `validateMinNumberOfArguments` invocation above, this\n                        // validation can be triggered both from `WriteBatch.update()` and\n                        // `DocumentReference.update()`. Hence, we don't use the fully\n                        // qualified API name in the error message.\n                        (0, validate_1.validateMinNumberOfArguments)('update', fieldOrValues, i + 1);\n                        const fieldPath = path_1.FieldPath.fromArgument(maybeFieldPath);\n                        validateFieldValue(i + argumentOffset, fieldOrValues[i + 1], this._allowUndefined, fieldPath);\n                        updateMap.set(fieldPath, fieldOrValues[i + 1]);\n                    }\n                }\n            }\n            catch (err) {\n                (0, logger_1.logger)('WriteBatch.update', null, 'Varargs validation failed:', err);\n                // We catch the validation error here and re-throw to provide a better\n                // error message.\n                throw new Error(`${argumentError} ${err.message}`);\n            }\n        }\n        else {\n            try {\n                validateUpdateMap('dataOrField', dataOrField, this._allowUndefined);\n                // eslint-disable-next-line prefer-rest-params\n                (0, validate_1.validateMaxNumberOfArguments)('update', arguments, 3);\n                Object.entries(dataOrField).forEach(([key, value]) => {\n                    // Skip `undefined` values (can be hit if `ignoreUndefinedProperties`\n                    // is set)\n                    if (value !== undefined) {\n                        (0, path_1.validateFieldPath)(key, key);\n                        updateMap.set(path_1.FieldPath.fromArgument(key), value);\n                    }\n                });\n                if (preconditionOrValues.length > 0) {\n                    validateUpdatePrecondition('preconditionOrValues', preconditionOrValues[0]);\n                    precondition = new document_1.Precondition(preconditionOrValues[0]);\n                }\n            }\n            catch (err) {\n                (0, logger_1.logger)('WriteBatch.update', null, 'Non-varargs validation failed:', err);\n                // We catch the validation error here and prefix the error with a custom\n                // message to describe the usage of update() better.\n                throw new Error(`${argumentError} ${err.message}`);\n            }\n        }\n        validateNoConflictingFields('dataOrField', updateMap);\n        const transform = document_1.DocumentTransform.fromUpdateMap(documentRef, updateMap);\n        transform.validate();\n        const documentMask = document_1.DocumentMask.fromUpdateMap(updateMap);\n        const op = () => {\n            const document = document_1.DocumentSnapshot.fromUpdateMap(documentRef, updateMap);\n            const write = document.toWriteProto();\n            write.updateMask = documentMask.toProto();\n            if (!transform.isEmpty) {\n                write.updateTransforms = transform.toProto(this._serializer);\n            }\n            write.currentDocument = precondition.toProto();\n            return write;\n        };\n        this._ops.push({ docPath: documentRef.path, op });\n        return this;\n    }\n    /**\n     * Atomically commits all pending operations to the database and verifies all\n     * preconditions. Fails the entire write if any precondition is not met.\n     *\n     * @returns {Promise.<Array.<WriteResult>>} A Promise that resolves\n     * when this batch completes.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.set(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    commit() {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_BATCH_COMMIT, async () => {\n            // Capture the error stack to preserve stack tracing across async calls.\n            const stack = Error().stack;\n            // Commits should also be retried when they fail with status code ABORTED.\n            const retryCodes = [10 /* StatusCode.ABORTED */, ...(0, util_1.getRetryCodes)('commit')];\n            return this._commit({ retryCodes })\n                .then(response => {\n                return (response.writeResults || []).map(writeResult => new WriteResult(timestamp_1.Timestamp.fromProto(writeResult.updateTime || response.commitTime)));\n            })\n                .catch(err => {\n                throw (0, util_1.wrapError)(err, stack);\n            });\n        }, {\n            [trace_util_1.ATTRIBUTE_KEY_IS_TRANSACTIONAL]: false,\n            [trace_util_1.ATTRIBUTE_KEY_DOC_COUNT]: this._opCount,\n        });\n    }\n    /**\n     * Commit method that takes an optional transaction ID.\n     *\n     * @private\n     * @internal\n     * @param commitOptions Options to use for this commit.\n     * @param commitOptions.transactionId The transaction ID of this commit.\n     * @param commitOptions.requestTag A unique client-assigned identifier for\n     * this request.\n     * @returns  A Promise that resolves when this batch completes.\n     */\n    async _commit(commitOptions) {\n        var _a;\n        // Note: We don't call `verifyNotCommitted()` to allow for retries.\n        this._committed = true;\n        const tag = (_a = commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.requestTag) !== null && _a !== void 0 ? _a : (0, util_1.requestTag)();\n        await this._firestore.initializeIfNeeded(tag);\n        // Note that the request may not always be of type ICommitRequest. This is\n        // just here to ensure type safety.\n        const request = {\n            database: this._firestore.formattedName,\n            writes: this._ops.map(op => op.op()),\n        };\n        if (commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.transactionId) {\n            request.transaction = commitOptions.transactionId;\n        }\n        (0, logger_1.logger)('WriteBatch.commit', tag, 'Sending %d writes', request.writes.length);\n        return this._firestore.request((commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.methodName) || 'commit', request, tag, commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.retryCodes);\n    }\n    /**\n     * Resets the WriteBatch and dequeues all pending operations.\n     * @private\n     * @internal\n     */\n    _reset() {\n        this._ops.splice(0);\n        this._committed = false;\n    }\n}\nexports.WriteBatch = WriteBatch;\n/**\n * Validates the use of 'value' as a Precondition and enforces that 'exists'\n * and 'lastUpdateTime' use valid types.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate\n * @param options Options describing other things for this function to validate.\n */\nfunction validatePrecondition(arg, value, options) {\n    if (typeof value !== 'object' || value === null) {\n        throw new Error('Input is not an object.');\n    }\n    const precondition = value;\n    let conditions = 0;\n    if (precondition.exists !== undefined) {\n        ++conditions;\n        if (typeof precondition.exists !== 'boolean') {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'precondition')} \"exists\" is not a boolean.'`);\n        }\n        if ((options === null || options === void 0 ? void 0 : options.allowedExistsValues) &&\n            options.allowedExistsValues.indexOf(precondition.exists) < 0) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'precondition')} ` +\n                `\"exists\" is not allowed to have the value ${precondition.exists} ` +\n                `(allowed values: ${options.allowedExistsValues.join(', ')})`);\n        }\n    }\n    if (precondition.lastUpdateTime !== undefined) {\n        ++conditions;\n        if (!(precondition.lastUpdateTime instanceof timestamp_1.Timestamp)) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'precondition')} \"lastUpdateTime\" is not a Firestore Timestamp.`);\n        }\n    }\n    if (conditions > 1) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'precondition')} Input specifies more than one precondition.`);\n    }\n}\n/**\n * Validates the use of 'value' as an update Precondition.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n */\nfunction validateUpdatePrecondition(arg, value, options) {\n    if (!(0, validate_1.validateOptional)(value, options)) {\n        validatePrecondition(arg, value, { allowedExistsValues: [true] });\n    }\n}\n/**\n * Validates the use of 'value' as a delete Precondition.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n */\nfunction validateDeletePrecondition(arg, value, options) {\n    if (!(0, validate_1.validateOptional)(value, options)) {\n        validatePrecondition(arg, value);\n    }\n}\n/**\n * Validates the use of 'value' as SetOptions and enforces that 'merge' is a\n * boolean.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n * @throws if the input is not a valid SetOptions object.\n */\nfunction validateSetOptions(arg, value, options) {\n    if (!(0, validate_1.validateOptional)(value, options)) {\n        if (!(0, util_1.isObject)(value)) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'set() options argument')} Input is not an object.`);\n        }\n        const setOptions = value;\n        if ('mergeFields' in setOptions) {\n            for (let i = 0; i < setOptions.mergeFields.length; ++i) {\n                try {\n                    (0, path_1.validateFieldPath)(i, setOptions.mergeFields[i]);\n                }\n                catch (err) {\n                    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'set() options argument')} \"mergeFields\" is not valid: ${err.message}`);\n                }\n            }\n        }\n        if ('merge' in setOptions && 'mergeFields' in setOptions) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'set() options argument')} You cannot specify both \"merge\" and \"mergeFields\".`);\n        }\n    }\n}\n/**\n * Validates a JavaScript object for usage as a Firestore document.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param obj JavaScript object to validate.\n * @param allowDeletes Whether to allow FieldValue.delete() sentinels.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n * @throws when the object is invalid.\n */\nfunction validateDocumentData(arg, obj, allowDeletes, allowUndefined) {\n    if (!(0, util_1.isPlainObject)(obj)) {\n        throw new Error((0, validate_1.customObjectMessage)(arg, obj));\n    }\n    (0, serializer_1.validateUserInput)(arg, obj, 'Firestore document', {\n        allowDeletes: allowDeletes ? 'all' : 'none',\n        allowTransforms: true,\n        allowUndefined,\n    });\n}\n/**\n * Validates that a value can be used as field value during an update.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param val The value to verify.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n * @param path The path to show in the error message.\n */\nfunction validateFieldValue(arg, val, allowUndefined, path) {\n    (0, serializer_1.validateUserInput)(arg, val, 'Firestore value', { allowDeletes: 'root', allowTransforms: true, allowUndefined }, path);\n}\n/**\n * Validates that the update data does not contain any ambiguous field\n * definitions (such as 'a.b' and 'a').\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param data An update map with field/value pairs.\n */\nfunction validateNoConflictingFields(arg, data) {\n    const fields = [];\n    data.forEach((value, key) => {\n        fields.push(key);\n    });\n    fields.sort((left, right) => left.compareTo(right));\n    for (let i = 1; i < fields.length; ++i) {\n        if (fields[i - 1].isPrefixOf(fields[i])) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'update map')} Field \"${fields[i - 1]}\" was specified multiple times.`);\n        }\n    }\n}\n/**\n * Validates that a JavaScript object is a map of field paths to field values.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param obj JavaScript object to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n * @throws when the object is invalid.\n */\nfunction validateUpdateMap(arg, obj, allowUndefined) {\n    if (!(0, util_1.isPlainObject)(obj)) {\n        throw new Error((0, validate_1.customObjectMessage)(arg, obj));\n    }\n    if (Object.keys(obj).length === 0) {\n        throw new Error('At least one field must be updated.');\n    }\n    validateFieldValue(arg, obj, allowUndefined);\n}\n//# sourceMappingURL=write-batch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/firestore/build/src/write-batch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/protos/admin_v1.json":
/*!*************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/protos/admin_v1.json ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"options":{"syntax":"proto3"},"nested":{"google":{"nested":{"firestore":{"nested":{"admin":{"nested":{"v1":{"options":{"csharp_namespace":"Google.Cloud.Firestore.Admin.V1","go_package":"cloud.google.com/go/firestore/apiv1/admin/adminpb;adminpb","java_multiple_files":true,"java_outer_classname":"LocationProto","java_package":"com.google.firestore.admin.v1","objc_class_prefix":"GCFS","php_namespace":"Google\\\\Cloud\\\\Firestore\\\\Admin\\\\V1","ruby_package":"Google::Cloud::Firestore::Admin::V1","(google.api.resource_definition).type":"firestore.googleapis.com/CollectionGroup","(google.api.resource_definition).pattern":"projects/{project}/databases/{database}/collectionGroups/{collection}"},"nested":{"Backup":{"options":{"(google.api.resource).type":"firestore.googleapis.com/Backup","(google.api.resource).pattern":"projects/{project}/locations/{location}/backups/{backup}"},"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"database":{"type":"string","id":2,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY","(google.api.resource_reference).type":"firestore.googleapis.com/Database"}},"databaseUid":{"type":"string","id":7,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"snapshotTime":{"type":"google.protobuf.Timestamp","id":3,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"expireTime":{"type":"google.protobuf.Timestamp","id":4,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"stats":{"type":"Stats","id":6,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"state":{"type":"State","id":8,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}}},"nested":{"Stats":{"fields":{"sizeBytes":{"type":"int64","id":1,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"documentCount":{"type":"int64","id":2,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"indexCount":{"type":"int64","id":3,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}}}},"State":{"values":{"STATE_UNSPECIFIED":0,"CREATING":1,"READY":2,"NOT_AVAILABLE":3}}}},"Database":{"options":{"(google.api.resource).type":"firestore.googleapis.com/Database","(google.api.resource).pattern":"projects/{project}/databases/{database}","(google.api.resource).style":"DECLARATIVE_FRIENDLY"},"fields":{"name":{"type":"string","id":1},"uid":{"type":"string","id":3,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"createTime":{"type":"google.protobuf.Timestamp","id":5,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"updateTime":{"type":"google.protobuf.Timestamp","id":6,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"deleteTime":{"type":"google.protobuf.Timestamp","id":7,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"locationId":{"type":"string","id":9},"type":{"type":"DatabaseType","id":10},"concurrencyMode":{"type":"ConcurrencyMode","id":15},"versionRetentionPeriod":{"type":"google.protobuf.Duration","id":17,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"earliestVersionTime":{"type":"google.protobuf.Timestamp","id":18,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"pointInTimeRecoveryEnablement":{"type":"PointInTimeRecoveryEnablement","id":21},"appEngineIntegrationMode":{"type":"AppEngineIntegrationMode","id":19},"keyPrefix":{"type":"string","id":20,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"deleteProtectionState":{"type":"DeleteProtectionState","id":22},"cmekConfig":{"type":"CmekConfig","id":23,"options":{"(google.api.field_behavior)":"OPTIONAL"}},"previousId":{"type":"string","id":25,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"sourceInfo":{"type":"SourceInfo","id":26,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"etag":{"type":"string","id":99}},"nested":{"DatabaseType":{"values":{"DATABASE_TYPE_UNSPECIFIED":0,"FIRESTORE_NATIVE":1,"DATASTORE_MODE":2}},"ConcurrencyMode":{"values":{"CONCURRENCY_MODE_UNSPECIFIED":0,"OPTIMISTIC":1,"PESSIMISTIC":2,"OPTIMISTIC_WITH_ENTITY_GROUPS":3}},"PointInTimeRecoveryEnablement":{"values":{"POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED":0,"POINT_IN_TIME_RECOVERY_ENABLED":1,"POINT_IN_TIME_RECOVERY_DISABLED":2}},"AppEngineIntegrationMode":{"values":{"APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED":0,"ENABLED":1,"DISABLED":2}},"DeleteProtectionState":{"values":{"DELETE_PROTECTION_STATE_UNSPECIFIED":0,"DELETE_PROTECTION_DISABLED":1,"DELETE_PROTECTION_ENABLED":2}},"CmekConfig":{"fields":{"kmsKeyName":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"activeKeyVersion":{"rule":"repeated","type":"string","id":2,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}}}},"SourceInfo":{"oneofs":{"source":{"oneof":["backup"]}},"fields":{"backup":{"type":"BackupSource","id":1},"operation":{"type":"string","id":3,"options":{"(google.api.resource_reference).type":"firestore.googleapis.com/Operation"}}},"nested":{"BackupSource":{"fields":{"backup":{"type":"string","id":1,"options":{"(google.api.resource_reference).type":"firestore.googleapis.com/Backup"}}}}}},"EncryptionConfig":{"oneofs":{"encryptionType":{"oneof":["googleDefaultEncryption","useSourceEncryption","customerManagedEncryption"]}},"fields":{"googleDefaultEncryption":{"type":"GoogleDefaultEncryptionOptions","id":1},"useSourceEncryption":{"type":"SourceEncryptionOptions","id":2},"customerManagedEncryption":{"type":"CustomerManagedEncryptionOptions","id":3}},"nested":{"GoogleDefaultEncryptionOptions":{"fields":{}},"SourceEncryptionOptions":{"fields":{}},"CustomerManagedEncryptionOptions":{"fields":{"kmsKeyName":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}}}}}}}},"Field":{"options":{"(google.api.resource).type":"firestore.googleapis.com/Field","(google.api.resource).pattern":"projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}"},"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"indexConfig":{"type":"IndexConfig","id":2},"ttlConfig":{"type":"TtlConfig","id":3}},"nested":{"IndexConfig":{"fields":{"indexes":{"rule":"repeated","type":"Index","id":1},"usesAncestorConfig":{"type":"bool","id":2},"ancestorField":{"type":"string","id":3},"reverting":{"type":"bool","id":4}}},"TtlConfig":{"fields":{"state":{"type":"State","id":1,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}}},"nested":{"State":{"values":{"STATE_UNSPECIFIED":0,"CREATING":1,"ACTIVE":2,"NEEDS_REPAIR":3}}}}}},"Index":{"options":{"(google.api.resource).type":"firestore.googleapis.com/Index","(google.api.resource).pattern":"projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}"},"fields":{"name":{"type":"string","id":1},"queryScope":{"type":"QueryScope","id":2},"apiScope":{"type":"ApiScope","id":5},"fields":{"rule":"repeated","type":"IndexField","id":3},"state":{"type":"State","id":4}},"nested":{"QueryScope":{"values":{"QUERY_SCOPE_UNSPECIFIED":0,"COLLECTION":1,"COLLECTION_GROUP":2,"COLLECTION_RECURSIVE":3}},"ApiScope":{"values":{"ANY_API":0,"DATASTORE_MODE_API":1}},"IndexField":{"oneofs":{"valueMode":{"oneof":["order","arrayConfig","vectorConfig"]}},"fields":{"fieldPath":{"type":"string","id":1},"order":{"type":"Order","id":2},"arrayConfig":{"type":"ArrayConfig","id":3},"vectorConfig":{"type":"VectorConfig","id":4}},"nested":{"Order":{"values":{"ORDER_UNSPECIFIED":0,"ASCENDING":1,"DESCENDING":2}},"ArrayConfig":{"values":{"ARRAY_CONFIG_UNSPECIFIED":0,"CONTAINS":1}},"VectorConfig":{"oneofs":{"type":{"oneof":["flat"]}},"fields":{"dimension":{"type":"int32","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"flat":{"type":"FlatIndex","id":2}},"nested":{"FlatIndex":{"fields":{}}}}}},"State":{"values":{"STATE_UNSPECIFIED":0,"CREATING":1,"READY":2,"NEEDS_REPAIR":3}}}},"FirestoreAdmin":{"options":{"(google.api.default_host)":"firestore.googleapis.com","(google.api.oauth_scopes)":"https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/datastore"},"methods":{"CreateIndex":{"requestType":"CreateIndexRequest","responseType":"google.longrunning.Operation","options":{"(google.api.http).post":"/v1/{parent=projects/*/databases/*/collectionGroups/*}/indexes","(google.api.http).body":"index","(google.api.method_signature)":"parent,index","(google.longrunning.operation_info).response_type":"Index","(google.longrunning.operation_info).metadata_type":"IndexOperationMetadata"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{parent=projects/*/databases/*/collectionGroups/*}/indexes","body":"index"}},{"(google.api.method_signature)":"parent,index"},{"(google.longrunning.operation_info)":{"response_type":"Index","metadata_type":"IndexOperationMetadata"}}]},"ListIndexes":{"requestType":"ListIndexesRequest","responseType":"ListIndexesResponse","options":{"(google.api.http).get":"/v1/{parent=projects/*/databases/*/collectionGroups/*}/indexes","(google.api.method_signature)":"parent"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{parent=projects/*/databases/*/collectionGroups/*}/indexes"}},{"(google.api.method_signature)":"parent"}]},"GetIndex":{"requestType":"GetIndexRequest","responseType":"Index","options":{"(google.api.http).get":"/v1/{name=projects/*/databases/*/collectionGroups/*/indexes/*}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=projects/*/databases/*/collectionGroups/*/indexes/*}"}},{"(google.api.method_signature)":"name"}]},"DeleteIndex":{"requestType":"DeleteIndexRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).delete":"/v1/{name=projects/*/databases/*/collectionGroups/*/indexes/*}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"delete":"/v1/{name=projects/*/databases/*/collectionGroups/*/indexes/*}"}},{"(google.api.method_signature)":"name"}]},"GetField":{"requestType":"GetFieldRequest","responseType":"Field","options":{"(google.api.http).get":"/v1/{name=projects/*/databases/*/collectionGroups/*/fields/*}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=projects/*/databases/*/collectionGroups/*/fields/*}"}},{"(google.api.method_signature)":"name"}]},"UpdateField":{"requestType":"UpdateFieldRequest","responseType":"google.longrunning.Operation","options":{"(google.api.http).patch":"/v1/{field.name=projects/*/databases/*/collectionGroups/*/fields/*}","(google.api.http).body":"field","(google.api.method_signature)":"field","(google.longrunning.operation_info).response_type":"Field","(google.longrunning.operation_info).metadata_type":"FieldOperationMetadata"},"parsedOptions":[{"(google.api.http)":{"patch":"/v1/{field.name=projects/*/databases/*/collectionGroups/*/fields/*}","body":"field"}},{"(google.api.method_signature)":"field"},{"(google.longrunning.operation_info)":{"response_type":"Field","metadata_type":"FieldOperationMetadata"}}]},"ListFields":{"requestType":"ListFieldsRequest","responseType":"ListFieldsResponse","options":{"(google.api.http).get":"/v1/{parent=projects/*/databases/*/collectionGroups/*}/fields","(google.api.method_signature)":"parent"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{parent=projects/*/databases/*/collectionGroups/*}/fields"}},{"(google.api.method_signature)":"parent"}]},"ExportDocuments":{"requestType":"ExportDocumentsRequest","responseType":"google.longrunning.Operation","options":{"(google.api.http).post":"/v1/{name=projects/*/databases/*}:exportDocuments","(google.api.http).body":"*","(google.api.method_signature)":"name","(google.longrunning.operation_info).response_type":"ExportDocumentsResponse","(google.longrunning.operation_info).metadata_type":"ExportDocumentsMetadata"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{name=projects/*/databases/*}:exportDocuments","body":"*"}},{"(google.api.method_signature)":"name"},{"(google.longrunning.operation_info)":{"response_type":"ExportDocumentsResponse","metadata_type":"ExportDocumentsMetadata"}}]},"ImportDocuments":{"requestType":"ImportDocumentsRequest","responseType":"google.longrunning.Operation","options":{"(google.api.http).post":"/v1/{name=projects/*/databases/*}:importDocuments","(google.api.http).body":"*","(google.api.method_signature)":"name","(google.longrunning.operation_info).response_type":"google.protobuf.Empty","(google.longrunning.operation_info).metadata_type":"ImportDocumentsMetadata"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{name=projects/*/databases/*}:importDocuments","body":"*"}},{"(google.api.method_signature)":"name"},{"(google.longrunning.operation_info)":{"response_type":"google.protobuf.Empty","metadata_type":"ImportDocumentsMetadata"}}]},"BulkDeleteDocuments":{"requestType":"BulkDeleteDocumentsRequest","responseType":"google.longrunning.Operation","options":{"(google.api.http).post":"/v1/{name=projects/*/databases/*}:bulkDeleteDocuments","(google.api.http).body":"*","(google.api.method_signature)":"name","(google.longrunning.operation_info).response_type":"BulkDeleteDocumentsResponse","(google.longrunning.operation_info).metadata_type":"BulkDeleteDocumentsMetadata"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{name=projects/*/databases/*}:bulkDeleteDocuments","body":"*"}},{"(google.api.method_signature)":"name"},{"(google.longrunning.operation_info)":{"response_type":"BulkDeleteDocumentsResponse","metadata_type":"BulkDeleteDocumentsMetadata"}}]},"CreateDatabase":{"requestType":"CreateDatabaseRequest","responseType":"google.longrunning.Operation","options":{"(google.api.http).post":"/v1/{parent=projects/*}/databases","(google.api.http).body":"database","(google.api.method_signature)":"parent,database,database_id","(google.longrunning.operation_info).response_type":"Database","(google.longrunning.operation_info).metadata_type":"CreateDatabaseMetadata"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{parent=projects/*}/databases","body":"database"}},{"(google.api.method_signature)":"parent,database,database_id"},{"(google.longrunning.operation_info)":{"response_type":"Database","metadata_type":"CreateDatabaseMetadata"}}]},"GetDatabase":{"requestType":"GetDatabaseRequest","responseType":"Database","options":{"(google.api.http).get":"/v1/{name=projects/*/databases/*}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=projects/*/databases/*}"}},{"(google.api.method_signature)":"name"}]},"ListDatabases":{"requestType":"ListDatabasesRequest","responseType":"ListDatabasesResponse","options":{"(google.api.http).get":"/v1/{parent=projects/*}/databases","(google.api.method_signature)":"parent"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{parent=projects/*}/databases"}},{"(google.api.method_signature)":"parent"}]},"UpdateDatabase":{"requestType":"UpdateDatabaseRequest","responseType":"google.longrunning.Operation","options":{"(google.api.http).patch":"/v1/{database.name=projects/*/databases/*}","(google.api.http).body":"database","(google.api.method_signature)":"database,update_mask","(google.longrunning.operation_info).response_type":"Database","(google.longrunning.operation_info).metadata_type":"UpdateDatabaseMetadata"},"parsedOptions":[{"(google.api.http)":{"patch":"/v1/{database.name=projects/*/databases/*}","body":"database"}},{"(google.api.method_signature)":"database,update_mask"},{"(google.longrunning.operation_info)":{"response_type":"Database","metadata_type":"UpdateDatabaseMetadata"}}]},"DeleteDatabase":{"requestType":"DeleteDatabaseRequest","responseType":"google.longrunning.Operation","options":{"(google.api.http).delete":"/v1/{name=projects/*/databases/*}","(google.api.method_signature)":"name","(google.longrunning.operation_info).response_type":"Database","(google.longrunning.operation_info).metadata_type":"DeleteDatabaseMetadata"},"parsedOptions":[{"(google.api.http)":{"delete":"/v1/{name=projects/*/databases/*}"}},{"(google.api.method_signature)":"name"},{"(google.longrunning.operation_info)":{"response_type":"Database","metadata_type":"DeleteDatabaseMetadata"}}]},"GetBackup":{"requestType":"GetBackupRequest","responseType":"Backup","options":{"(google.api.http).get":"/v1/{name=projects/*/locations/*/backups/*}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=projects/*/locations/*/backups/*}"}},{"(google.api.method_signature)":"name"}]},"ListBackups":{"requestType":"ListBackupsRequest","responseType":"ListBackupsResponse","options":{"(google.api.http).get":"/v1/{parent=projects/*/locations/*}/backups","(google.api.method_signature)":"parent"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{parent=projects/*/locations/*}/backups"}},{"(google.api.method_signature)":"parent"}]},"DeleteBackup":{"requestType":"DeleteBackupRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).delete":"/v1/{name=projects/*/locations/*/backups/*}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"delete":"/v1/{name=projects/*/locations/*/backups/*}"}},{"(google.api.method_signature)":"name"}]},"RestoreDatabase":{"requestType":"RestoreDatabaseRequest","responseType":"google.longrunning.Operation","options":{"(google.api.http).post":"/v1/{parent=projects/*}/databases:restore","(google.api.http).body":"*","(google.longrunning.operation_info).response_type":"Database","(google.longrunning.operation_info).metadata_type":"RestoreDatabaseMetadata"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{parent=projects/*}/databases:restore","body":"*"}},{"(google.longrunning.operation_info)":{"response_type":"Database","metadata_type":"RestoreDatabaseMetadata"}}]},"CreateBackupSchedule":{"requestType":"CreateBackupScheduleRequest","responseType":"BackupSchedule","options":{"(google.api.http).post":"/v1/{parent=projects/*/databases/*}/backupSchedules","(google.api.http).body":"backup_schedule","(google.api.method_signature)":"parent,backup_schedule"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{parent=projects/*/databases/*}/backupSchedules","body":"backup_schedule"}},{"(google.api.method_signature)":"parent,backup_schedule"}]},"GetBackupSchedule":{"requestType":"GetBackupScheduleRequest","responseType":"BackupSchedule","options":{"(google.api.http).get":"/v1/{name=projects/*/databases/*/backupSchedules/*}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=projects/*/databases/*/backupSchedules/*}"}},{"(google.api.method_signature)":"name"}]},"ListBackupSchedules":{"requestType":"ListBackupSchedulesRequest","responseType":"ListBackupSchedulesResponse","options":{"(google.api.http).get":"/v1/{parent=projects/*/databases/*}/backupSchedules","(google.api.method_signature)":"parent"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{parent=projects/*/databases/*}/backupSchedules"}},{"(google.api.method_signature)":"parent"}]},"UpdateBackupSchedule":{"requestType":"UpdateBackupScheduleRequest","responseType":"BackupSchedule","options":{"(google.api.http).patch":"/v1/{backup_schedule.name=projects/*/databases/*/backupSchedules/*}","(google.api.http).body":"backup_schedule","(google.api.method_signature)":"backup_schedule,update_mask"},"parsedOptions":[{"(google.api.http)":{"patch":"/v1/{backup_schedule.name=projects/*/databases/*/backupSchedules/*}","body":"backup_schedule"}},{"(google.api.method_signature)":"backup_schedule,update_mask"}]},"DeleteBackupSchedule":{"requestType":"DeleteBackupScheduleRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).delete":"/v1/{name=projects/*/databases/*/backupSchedules/*}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"delete":"/v1/{name=projects/*/databases/*/backupSchedules/*}"}},{"(google.api.method_signature)":"name"}]}}},"ListDatabasesRequest":{"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).child_type":"firestore.googleapis.com/Database"}},"showDeleted":{"type":"bool","id":4}}},"CreateDatabaseRequest":{"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).child_type":"firestore.googleapis.com/Database"}},"database":{"type":"Database","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}},"databaseId":{"type":"string","id":3,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"CreateDatabaseMetadata":{"fields":{}},"ListDatabasesResponse":{"fields":{"databases":{"rule":"repeated","type":"Database","id":1},"unreachable":{"rule":"repeated","type":"string","id":3}}},"GetDatabaseRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Database"}}}},"UpdateDatabaseRequest":{"fields":{"database":{"type":"Database","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"updateMask":{"type":"google.protobuf.FieldMask","id":2}}},"UpdateDatabaseMetadata":{"fields":{}},"DeleteDatabaseRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Database"}},"etag":{"type":"string","id":3}}},"DeleteDatabaseMetadata":{"fields":{}},"CreateBackupScheduleRequest":{"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Database"}},"backupSchedule":{"type":"BackupSchedule","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"GetBackupScheduleRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/BackupSchedule"}}}},"UpdateBackupScheduleRequest":{"fields":{"backupSchedule":{"type":"BackupSchedule","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"updateMask":{"type":"google.protobuf.FieldMask","id":2}}},"ListBackupSchedulesRequest":{"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Database"}}}},"ListBackupSchedulesResponse":{"fields":{"backupSchedules":{"rule":"repeated","type":"BackupSchedule","id":1}}},"DeleteBackupScheduleRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/BackupSchedule"}}}},"CreateIndexRequest":{"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/CollectionGroup"}},"index":{"type":"Index","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"ListIndexesRequest":{"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/CollectionGroup"}},"filter":{"type":"string","id":2},"pageSize":{"type":"int32","id":3},"pageToken":{"type":"string","id":4}}},"ListIndexesResponse":{"fields":{"indexes":{"rule":"repeated","type":"Index","id":1},"nextPageToken":{"type":"string","id":2}}},"GetIndexRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Index"}}}},"DeleteIndexRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Index"}}}},"UpdateFieldRequest":{"fields":{"field":{"type":"Field","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"updateMask":{"type":"google.protobuf.FieldMask","id":2}}},"GetFieldRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Field"}}}},"ListFieldsRequest":{"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/CollectionGroup"}},"filter":{"type":"string","id":2},"pageSize":{"type":"int32","id":3},"pageToken":{"type":"string","id":4}}},"ListFieldsResponse":{"fields":{"fields":{"rule":"repeated","type":"Field","id":1},"nextPageToken":{"type":"string","id":2}}},"ExportDocumentsRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Database"}},"collectionIds":{"rule":"repeated","type":"string","id":2},"outputUriPrefix":{"type":"string","id":3},"namespaceIds":{"rule":"repeated","type":"string","id":4},"snapshotTime":{"type":"google.protobuf.Timestamp","id":5}}},"ImportDocumentsRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Database"}},"collectionIds":{"rule":"repeated","type":"string","id":2},"inputUriPrefix":{"type":"string","id":3},"namespaceIds":{"rule":"repeated","type":"string","id":4}}},"BulkDeleteDocumentsRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Database"}},"collectionIds":{"rule":"repeated","type":"string","id":2,"options":{"(google.api.field_behavior)":"OPTIONAL"}},"namespaceIds":{"rule":"repeated","type":"string","id":3,"options":{"(google.api.field_behavior)":"OPTIONAL"}}}},"BulkDeleteDocumentsResponse":{"fields":{}},"GetBackupRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Backup"}}}},"ListBackupsRequest":{"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Location"}},"filter":{"type":"string","id":2}}},"ListBackupsResponse":{"fields":{"backups":{"rule":"repeated","type":"Backup","id":1},"unreachable":{"rule":"repeated","type":"string","id":3}}},"DeleteBackupRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Backup"}}}},"RestoreDatabaseRequest":{"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).child_type":"firestore.googleapis.com/Database"}},"databaseId":{"type":"string","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}},"backup":{"type":"string","id":3,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"firestore.googleapis.com/Backup"}},"encryptionConfig":{"type":"Database.EncryptionConfig","id":9,"options":{"(google.api.field_behavior)":"OPTIONAL"}}}},"IndexOperationMetadata":{"fields":{"startTime":{"type":"google.protobuf.Timestamp","id":1},"endTime":{"type":"google.protobuf.Timestamp","id":2},"index":{"type":"string","id":3},"state":{"type":"OperationState","id":4},"progressDocuments":{"type":"Progress","id":5},"progressBytes":{"type":"Progress","id":6}}},"FieldOperationMetadata":{"fields":{"startTime":{"type":"google.protobuf.Timestamp","id":1},"endTime":{"type":"google.protobuf.Timestamp","id":2},"field":{"type":"string","id":3},"indexConfigDeltas":{"rule":"repeated","type":"IndexConfigDelta","id":4},"state":{"type":"OperationState","id":5},"progressDocuments":{"type":"Progress","id":6},"progressBytes":{"type":"Progress","id":7},"ttlConfigDelta":{"type":"TtlConfigDelta","id":8}},"nested":{"IndexConfigDelta":{"fields":{"changeType":{"type":"ChangeType","id":1},"index":{"type":"Index","id":2}},"nested":{"ChangeType":{"values":{"CHANGE_TYPE_UNSPECIFIED":0,"ADD":1,"REMOVE":2}}}},"TtlConfigDelta":{"fields":{"changeType":{"type":"ChangeType","id":1}},"nested":{"ChangeType":{"values":{"CHANGE_TYPE_UNSPECIFIED":0,"ADD":1,"REMOVE":2}}}}}},"ExportDocumentsMetadata":{"fields":{"startTime":{"type":"google.protobuf.Timestamp","id":1},"endTime":{"type":"google.protobuf.Timestamp","id":2},"operationState":{"type":"OperationState","id":3},"progressDocuments":{"type":"Progress","id":4},"progressBytes":{"type":"Progress","id":5},"collectionIds":{"rule":"repeated","type":"string","id":6},"outputUriPrefix":{"type":"string","id":7},"namespaceIds":{"rule":"repeated","type":"string","id":8},"snapshotTime":{"type":"google.protobuf.Timestamp","id":9}}},"ImportDocumentsMetadata":{"fields":{"startTime":{"type":"google.protobuf.Timestamp","id":1},"endTime":{"type":"google.protobuf.Timestamp","id":2},"operationState":{"type":"OperationState","id":3},"progressDocuments":{"type":"Progress","id":4},"progressBytes":{"type":"Progress","id":5},"collectionIds":{"rule":"repeated","type":"string","id":6},"inputUriPrefix":{"type":"string","id":7},"namespaceIds":{"rule":"repeated","type":"string","id":8}}},"BulkDeleteDocumentsMetadata":{"fields":{"startTime":{"type":"google.protobuf.Timestamp","id":1},"endTime":{"type":"google.protobuf.Timestamp","id":2},"operationState":{"type":"OperationState","id":3},"progressDocuments":{"type":"Progress","id":4},"progressBytes":{"type":"Progress","id":5},"collectionIds":{"rule":"repeated","type":"string","id":6},"namespaceIds":{"rule":"repeated","type":"string","id":7},"snapshotTime":{"type":"google.protobuf.Timestamp","id":8}}},"ExportDocumentsResponse":{"fields":{"outputUriPrefix":{"type":"string","id":1}}},"RestoreDatabaseMetadata":{"fields":{"startTime":{"type":"google.protobuf.Timestamp","id":1},"endTime":{"type":"google.protobuf.Timestamp","id":2},"operationState":{"type":"OperationState","id":3},"database":{"type":"string","id":4,"options":{"(google.api.resource_reference).type":"firestore.googleapis.com/Database"}},"backup":{"type":"string","id":5,"options":{"(google.api.resource_reference).type":"firestore.googleapis.com/Backup"}},"progressPercentage":{"type":"Progress","id":8}}},"Progress":{"fields":{"estimatedWork":{"type":"int64","id":1},"completedWork":{"type":"int64","id":2}}},"OperationState":{"values":{"OPERATION_STATE_UNSPECIFIED":0,"INITIALIZING":1,"PROCESSING":2,"CANCELLING":3,"FINALIZING":4,"SUCCESSFUL":5,"FAILED":6,"CANCELLED":7}},"BackupSchedule":{"options":{"(google.api.resource).type":"firestore.googleapis.com/BackupSchedule","(google.api.resource).pattern":"projects/{project}/databases/{database}/backupSchedules/{backup_schedule}"},"oneofs":{"recurrence":{"oneof":["dailyRecurrence","weeklyRecurrence"]}},"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"createTime":{"type":"google.protobuf.Timestamp","id":3,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"updateTime":{"type":"google.protobuf.Timestamp","id":10,"options":{"(google.api.field_behavior)":"OUTPUT_ONLY"}},"retention":{"type":"google.protobuf.Duration","id":6},"dailyRecurrence":{"type":"DailyRecurrence","id":7},"weeklyRecurrence":{"type":"WeeklyRecurrence","id":8}}},"DailyRecurrence":{"fields":{}},"WeeklyRecurrence":{"fields":{"day":{"type":"google.type.DayOfWeek","id":2}}},"LocationMetadata":{"fields":{}}}}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api;api","java_multiple_files":true,"java_outer_classname":"LaunchStageProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"fieldBehavior":{"rule":"repeated","type":"google.api.FieldBehavior","id":1052,"extend":"google.protobuf.FieldOptions","options":{"packed":false}},"FieldBehavior":{"values":{"FIELD_BEHAVIOR_UNSPECIFIED":0,"OPTIONAL":1,"REQUIRED":2,"OUTPUT_ONLY":3,"INPUT_ONLY":4,"IMMUTABLE":5,"UNORDERED_LIST":6,"NON_EMPTY_DEFAULT":7,"IDENTIFIER":8}},"resourceReference":{"type":"google.api.ResourceReference","id":1055,"extend":"google.protobuf.FieldOptions"},"resourceDefinition":{"rule":"repeated","type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.FileOptions"},"resource":{"type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.MessageOptions"},"ResourceDescriptor":{"fields":{"type":{"type":"string","id":1},"pattern":{"rule":"repeated","type":"string","id":2},"nameField":{"type":"string","id":3},"history":{"type":"History","id":4},"plural":{"type":"string","id":5},"singular":{"type":"string","id":6},"style":{"rule":"repeated","type":"Style","id":10}},"nested":{"History":{"values":{"HISTORY_UNSPECIFIED":0,"ORIGINALLY_SINGLE_PATTERN":1,"FUTURE_MULTI_PATTERN":2}},"Style":{"values":{"STYLE_UNSPECIFIED":0,"DECLARATIVE_FRIENDLY":1}}}},"ResourceReference":{"fields":{"type":{"type":"string","id":1},"childType":{"type":"string","id":2}}},"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"},"apiVersion":{"type":"string","id":525000001,"extend":"google.protobuf.ServiceOptions"},"CommonLanguageSettings":{"fields":{"referenceDocsUri":{"type":"string","id":1,"options":{"deprecated":true}},"destinations":{"rule":"repeated","type":"ClientLibraryDestination","id":2},"selectiveGapicGeneration":{"type":"SelectiveGapicGeneration","id":3}}},"ClientLibrarySettings":{"fields":{"version":{"type":"string","id":1},"launchStage":{"type":"LaunchStage","id":2},"restNumericEnums":{"type":"bool","id":3},"javaSettings":{"type":"JavaSettings","id":21},"cppSettings":{"type":"CppSettings","id":22},"phpSettings":{"type":"PhpSettings","id":23},"pythonSettings":{"type":"PythonSettings","id":24},"nodeSettings":{"type":"NodeSettings","id":25},"dotnetSettings":{"type":"DotnetSettings","id":26},"rubySettings":{"type":"RubySettings","id":27},"goSettings":{"type":"GoSettings","id":28}}},"Publishing":{"fields":{"methodSettings":{"rule":"repeated","type":"MethodSettings","id":2},"newIssueUri":{"type":"string","id":101},"documentationUri":{"type":"string","id":102},"apiShortName":{"type":"string","id":103},"githubLabel":{"type":"string","id":104},"codeownerGithubTeams":{"rule":"repeated","type":"string","id":105},"docTagPrefix":{"type":"string","id":106},"organization":{"type":"ClientLibraryOrganization","id":107},"librarySettings":{"rule":"repeated","type":"ClientLibrarySettings","id":109},"protoReferenceDocumentationUri":{"type":"string","id":110},"restReferenceDocumentationUri":{"type":"string","id":111}}},"JavaSettings":{"fields":{"libraryPackage":{"type":"string","id":1},"serviceClassNames":{"keyType":"string","type":"string","id":2},"common":{"type":"CommonLanguageSettings","id":3}}},"CppSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1}}},"PhpSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1}}},"PythonSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1},"experimentalFeatures":{"type":"ExperimentalFeatures","id":2}},"nested":{"ExperimentalFeatures":{"fields":{"restAsyncIoEnabled":{"type":"bool","id":1},"protobufPythonicTypesEnabled":{"type":"bool","id":2}}}}},"NodeSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1}}},"DotnetSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1},"renamedServices":{"keyType":"string","type":"string","id":2},"renamedResources":{"keyType":"string","type":"string","id":3},"ignoredResources":{"rule":"repeated","type":"string","id":4},"forcedNamespaceAliases":{"rule":"repeated","type":"string","id":5},"handwrittenSignatures":{"rule":"repeated","type":"string","id":6}}},"RubySettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1}}},"GoSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1},"renamedServices":{"keyType":"string","type":"string","id":2}}},"MethodSettings":{"fields":{"selector":{"type":"string","id":1},"longRunning":{"type":"LongRunning","id":2},"autoPopulatedFields":{"rule":"repeated","type":"string","id":3}},"nested":{"LongRunning":{"fields":{"initialPollDelay":{"type":"google.protobuf.Duration","id":1},"pollDelayMultiplier":{"type":"float","id":2},"maxPollDelay":{"type":"google.protobuf.Duration","id":3},"totalPollTimeout":{"type":"google.protobuf.Duration","id":4}}}}},"ClientLibraryOrganization":{"values":{"CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED":0,"CLOUD":1,"ADS":2,"PHOTOS":3,"STREET_VIEW":4,"SHOPPING":5,"GEO":6,"GENERATIVE_AI":7}},"ClientLibraryDestination":{"values":{"CLIENT_LIBRARY_DESTINATION_UNSPECIFIED":0,"GITHUB":10,"PACKAGE_MANAGER":20}},"SelectiveGapicGeneration":{"fields":{"methods":{"rule":"repeated","type":"string","id":1},"generateOmittedAsInternal":{"type":"bool","id":2}}},"LaunchStage":{"values":{"LAUNCH_STAGE_UNSPECIFIED":0,"UNIMPLEMENTED":6,"PRELAUNCH":7,"EARLY_ACCESS":1,"ALPHA":2,"BETA":3,"GA":4,"DEPRECATED":5}}}},"protobuf":{"options":{"go_package":"google.golang.org/protobuf/types/descriptorpb","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"Edition":{"values":{"EDITION_UNKNOWN":0,"EDITION_PROTO2":998,"EDITION_PROTO3":999,"EDITION_2023":1000,"EDITION_2024":1001,"EDITION_1_TEST_ONLY":1,"EDITION_2_TEST_ONLY":2,"EDITION_99997_TEST_ONLY":99997,"EDITION_99998_TEST_ONLY":99998,"EDITION_99999_TEST_ONLY":99999,"EDITION_MAX":2147483647}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12},"edition":{"type":"Edition","id":14}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999},"declaration":{"rule":"repeated","type":"Declaration","id":2,"options":{"retention":"RETENTION_SOURCE"}},"features":{"type":"FeatureSet","id":50},"verification":{"type":"VerificationState","id":3,"options":{"default":"UNVERIFIED","retention":"RETENTION_SOURCE"}}},"extensions":[[1000,536870911]],"nested":{"Declaration":{"fields":{"number":{"type":"int32","id":1},"fullName":{"type":"string","id":2},"type":{"type":"string","id":3},"reserved":{"type":"bool","id":5},"repeated":{"type":"bool","id":6}},"reserved":[[4,4]]},"VerificationState":{"values":{"DECLARATION":0,"UNVERIFIED":1}}}},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REPEATED":3,"LABEL_REQUIRED":2}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"features":{"type":"FeatureSet","id":50},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[42,42],[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"deprecatedLegacyJsonFieldConflicts":{"type":"bool","id":11,"options":{"deprecated":true}},"features":{"type":"FeatureSet","id":12},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4],[5,5],[6,6],[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"unverifiedLazy":{"type":"bool","id":15,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"debugRedact":{"type":"bool","id":16,"options":{"default":false}},"retention":{"type":"OptionRetention","id":17},"targets":{"rule":"repeated","type":"OptionTargetType","id":19,"options":{"packed":false}},"editionDefaults":{"rule":"repeated","type":"EditionDefault","id":20},"features":{"type":"FeatureSet","id":21},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4],[18,18]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}},"OptionRetention":{"values":{"RETENTION_UNKNOWN":0,"RETENTION_RUNTIME":1,"RETENTION_SOURCE":2}},"OptionTargetType":{"values":{"TARGET_TYPE_UNKNOWN":0,"TARGET_TYPE_FILE":1,"TARGET_TYPE_EXTENSION_RANGE":2,"TARGET_TYPE_MESSAGE":3,"TARGET_TYPE_FIELD":4,"TARGET_TYPE_ONEOF":5,"TARGET_TYPE_ENUM":6,"TARGET_TYPE_ENUM_ENTRY":7,"TARGET_TYPE_SERVICE":8,"TARGET_TYPE_METHOD":9}},"EditionDefault":{"fields":{"edition":{"type":"Edition","id":3},"value":{"type":"string","id":2}}}}},"OneofOptions":{"fields":{"features":{"type":"FeatureSet","id":1},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"deprecatedLegacyJsonFieldConflicts":{"type":"bool","id":6,"options":{"deprecated":true}},"features":{"type":"FeatureSet","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"features":{"type":"FeatureSet","id":2},"debugRedact":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"features":{"type":"FeatureSet","id":34},"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"features":{"type":"FeatureSet","id":35},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"FeatureSet":{"fields":{"fieldPresence":{"type":"FieldPresence","id":1,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_2023","edition_defaults.value":"EXPLICIT"}},"enumType":{"type":"EnumType","id":2,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"OPEN"}},"repeatedFieldEncoding":{"type":"RepeatedFieldEncoding","id":3,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"PACKED"}},"utf8Validation":{"type":"Utf8Validation","id":4,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"VERIFY"}},"messageEncoding":{"type":"MessageEncoding","id":5,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO2","edition_defaults.value":"LENGTH_PREFIXED"}},"jsonFormat":{"type":"JsonFormat","id":6,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"ALLOW"}}},"extensions":[[1000,1000],[1001,1001],[1002,1002],[9995,9999],[10000,10000]],"reserved":[[999,999]],"nested":{"FieldPresence":{"values":{"FIELD_PRESENCE_UNKNOWN":0,"EXPLICIT":1,"IMPLICIT":2,"LEGACY_REQUIRED":3}},"EnumType":{"values":{"ENUM_TYPE_UNKNOWN":0,"OPEN":1,"CLOSED":2}},"RepeatedFieldEncoding":{"values":{"REPEATED_FIELD_ENCODING_UNKNOWN":0,"PACKED":1,"EXPANDED":2}},"Utf8Validation":{"values":{"UTF8_VALIDATION_UNKNOWN":0,"VERIFY":2,"NONE":3}},"MessageEncoding":{"values":{"MESSAGE_ENCODING_UNKNOWN":0,"LENGTH_PREFIXED":1,"DELIMITED":2}},"JsonFormat":{"values":{"JSON_FORMAT_UNKNOWN":0,"ALLOW":1,"LEGACY_BEST_EFFORT":2}}}},"FeatureSetDefaults":{"fields":{"defaults":{"rule":"repeated","type":"FeatureSetEditionDefault","id":1},"minimumEdition":{"type":"Edition","id":4},"maximumEdition":{"type":"Edition","id":5}},"nested":{"FeatureSetEditionDefault":{"fields":{"edition":{"type":"Edition","id":3},"features":{"type":"FeatureSet","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4},"semantic":{"type":"Semantic","id":5}},"nested":{"Semantic":{"values":{"NONE":0,"SET":1,"ALIAS":2}}}}}},"Timestamp":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}},"Duration":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"Empty":{"fields":{}},"FieldMask":{"fields":{"paths":{"rule":"repeated","type":"string","id":1}}},"Struct":{"fields":{"fields":{"keyType":"string","type":"Value","id":1}}},"Value":{"oneofs":{"kind":{"oneof":["nullValue","numberValue","stringValue","boolValue","structValue","listValue"]}},"fields":{"nullValue":{"type":"NullValue","id":1},"numberValue":{"type":"double","id":2},"stringValue":{"type":"string","id":3},"boolValue":{"type":"bool","id":4},"structValue":{"type":"Struct","id":5},"listValue":{"type":"ListValue","id":6}}},"NullValue":{"values":{"NULL_VALUE":0}},"ListValue":{"fields":{"values":{"rule":"repeated","type":"Value","id":1}}},"DoubleValue":{"fields":{"value":{"type":"double","id":1}}},"FloatValue":{"fields":{"value":{"type":"float","id":1}}},"Int64Value":{"fields":{"value":{"type":"int64","id":1}}},"UInt64Value":{"fields":{"value":{"type":"uint64","id":1}}},"Int32Value":{"fields":{"value":{"type":"int32","id":1}}},"UInt32Value":{"fields":{"value":{"type":"uint32","id":1}}},"BoolValue":{"fields":{"value":{"type":"bool","id":1}}},"StringValue":{"fields":{"value":{"type":"string","id":1}}},"BytesValue":{"fields":{"value":{"type":"bytes","id":1}}}}},"type":{"options":{"go_package":"google.golang.org/genproto/googleapis/type/latlng;latlng","java_multiple_files":true,"java_outer_classname":"LatLngProto","java_package":"com.google.type","objc_class_prefix":"GTP","cc_enable_arenas":true},"nested":{"DayOfWeek":{"values":{"DAY_OF_WEEK_UNSPECIFIED":0,"MONDAY":1,"TUESDAY":2,"WEDNESDAY":3,"THURSDAY":4,"FRIDAY":5,"SATURDAY":6,"SUNDAY":7}},"LatLng":{"fields":{"latitude":{"type":"double","id":1},"longitude":{"type":"double","id":2}}}}},"longrunning":{"options":{"cc_enable_arenas":true,"csharp_namespace":"Google.LongRunning","go_package":"cloud.google.com/go/longrunning/autogen/longrunningpb;longrunningpb","java_multiple_files":true,"java_outer_classname":"OperationsProto","java_package":"com.google.longrunning","objc_class_prefix":"GLRUN","php_namespace":"Google\\\\LongRunning"},"nested":{"operationInfo":{"type":"google.longrunning.OperationInfo","id":1049,"extend":"google.protobuf.MethodOptions"},"Operations":{"options":{"(google.api.default_host)":"longrunning.googleapis.com"},"methods":{"ListOperations":{"requestType":"ListOperationsRequest","responseType":"ListOperationsResponse","options":{"(google.api.http).get":"/v1/{name=operations}","(google.api.method_signature)":"name,filter"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=operations}"}},{"(google.api.method_signature)":"name,filter"}]},"GetOperation":{"requestType":"GetOperationRequest","responseType":"Operation","options":{"(google.api.http).get":"/v1/{name=operations/**}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=operations/**}"}},{"(google.api.method_signature)":"name"}]},"DeleteOperation":{"requestType":"DeleteOperationRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).delete":"/v1/{name=operations/**}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"delete":"/v1/{name=operations/**}"}},{"(google.api.method_signature)":"name"}]},"CancelOperation":{"requestType":"CancelOperationRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).post":"/v1/{name=operations/**}:cancel","(google.api.http).body":"*","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{name=operations/**}:cancel","body":"*"}},{"(google.api.method_signature)":"name"}]},"WaitOperation":{"requestType":"WaitOperationRequest","responseType":"Operation"}}},"Operation":{"oneofs":{"result":{"oneof":["error","response"]}},"fields":{"name":{"type":"string","id":1},"metadata":{"type":"google.protobuf.Any","id":2},"done":{"type":"bool","id":3},"error":{"type":"google.rpc.Status","id":4},"response":{"type":"google.protobuf.Any","id":5}}},"GetOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"ListOperationsRequest":{"fields":{"name":{"type":"string","id":4},"filter":{"type":"string","id":1},"pageSize":{"type":"int32","id":2},"pageToken":{"type":"string","id":3}}},"ListOperationsResponse":{"fields":{"operations":{"rule":"repeated","type":"Operation","id":1},"nextPageToken":{"type":"string","id":2}}},"CancelOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"DeleteOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"WaitOperationRequest":{"fields":{"name":{"type":"string","id":1},"timeout":{"type":"google.protobuf.Duration","id":2}}},"OperationInfo":{"fields":{"responseType":{"type":"string","id":1},"metadataType":{"type":"string","id":2}}}}},"rpc":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/rpc/status;status","java_multiple_files":true,"java_outer_classname":"StatusProto","java_package":"com.google.rpc","objc_class_prefix":"RPC"},"nested":{"Status":{"fields":{"code":{"type":"int32","id":1},"message":{"type":"string","id":2},"details":{"rule":"repeated","type":"google.protobuf.Any","id":3}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/protos/v1.json":
/*!*******************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/protos/v1.json ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"options":{"syntax":"proto3"},"nested":{"google":{"nested":{"firestore":{"nested":{"v1":{"options":{"csharp_namespace":"Google.Cloud.Firestore.V1","go_package":"cloud.google.com/go/firestore/apiv1/firestorepb;firestorepb","java_multiple_files":true,"java_outer_classname":"WriteProto","java_package":"com.google.firestore.v1","objc_class_prefix":"GCFS","php_namespace":"Google\\\\Cloud\\\\Firestore\\\\V1","ruby_package":"Google::Cloud::Firestore::V1"},"nested":{"AggregationResult":{"fields":{"aggregateFields":{"keyType":"string","type":"Value","id":2}}},"Document":{"fields":{"name":{"type":"string","id":1},"fields":{"keyType":"string","type":"Value","id":2},"createTime":{"type":"google.protobuf.Timestamp","id":3},"updateTime":{"type":"google.protobuf.Timestamp","id":4}}},"Value":{"oneofs":{"valueType":{"oneof":["nullValue","booleanValue","integerValue","doubleValue","timestampValue","stringValue","bytesValue","referenceValue","geoPointValue","arrayValue","mapValue"]}},"fields":{"nullValue":{"type":"google.protobuf.NullValue","id":11},"booleanValue":{"type":"bool","id":1},"integerValue":{"type":"int64","id":2},"doubleValue":{"type":"double","id":3},"timestampValue":{"type":"google.protobuf.Timestamp","id":10},"stringValue":{"type":"string","id":17},"bytesValue":{"type":"bytes","id":18},"referenceValue":{"type":"string","id":5},"geoPointValue":{"type":"google.type.LatLng","id":8},"arrayValue":{"type":"ArrayValue","id":9},"mapValue":{"type":"MapValue","id":6}}},"ArrayValue":{"fields":{"values":{"rule":"repeated","type":"Value","id":1}}},"MapValue":{"fields":{"fields":{"keyType":"string","type":"Value","id":1}}},"BitSequence":{"fields":{"bitmap":{"type":"bytes","id":1},"padding":{"type":"int32","id":2}}},"BloomFilter":{"fields":{"bits":{"type":"BitSequence","id":1},"hashCount":{"type":"int32","id":2}}},"DocumentMask":{"fields":{"fieldPaths":{"rule":"repeated","type":"string","id":1}}},"Precondition":{"oneofs":{"conditionType":{"oneof":["exists","updateTime"]}},"fields":{"exists":{"type":"bool","id":1},"updateTime":{"type":"google.protobuf.Timestamp","id":2}}},"TransactionOptions":{"oneofs":{"mode":{"oneof":["readOnly","readWrite"]}},"fields":{"readOnly":{"type":"ReadOnly","id":2},"readWrite":{"type":"ReadWrite","id":3}},"nested":{"ReadWrite":{"fields":{"retryTransaction":{"type":"bytes","id":1}}},"ReadOnly":{"oneofs":{"consistencySelector":{"oneof":["readTime"]}},"fields":{"readTime":{"type":"google.protobuf.Timestamp","id":2}}}}},"Firestore":{"options":{"(google.api.default_host)":"firestore.googleapis.com","(google.api.oauth_scopes)":"https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/datastore"},"methods":{"GetDocument":{"requestType":"GetDocumentRequest","responseType":"Document","options":{"(google.api.http).get":"/v1/{name=projects/*/databases/*/documents/*/**}"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=projects/*/databases/*/documents/*/**}"}}]},"ListDocuments":{"requestType":"ListDocumentsRequest","responseType":"ListDocumentsResponse","options":{"(google.api.http).get":"/v1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}","(google.api.http).additional_bindings.get":"/v1/{parent=projects/*/databases/*/documents}/{collection_id}"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}","additional_bindings":{"get":"/v1/{parent=projects/*/databases/*/documents}/{collection_id}"}}}]},"UpdateDocument":{"requestType":"UpdateDocumentRequest","responseType":"Document","options":{"(google.api.http).patch":"/v1/{document.name=projects/*/databases/*/documents/*/**}","(google.api.http).body":"document","(google.api.method_signature)":"document,update_mask"},"parsedOptions":[{"(google.api.http)":{"patch":"/v1/{document.name=projects/*/databases/*/documents/*/**}","body":"document"}},{"(google.api.method_signature)":"document,update_mask"}]},"DeleteDocument":{"requestType":"DeleteDocumentRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).delete":"/v1/{name=projects/*/databases/*/documents/*/**}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"delete":"/v1/{name=projects/*/databases/*/documents/*/**}"}},{"(google.api.method_signature)":"name"}]},"BatchGetDocuments":{"requestType":"BatchGetDocumentsRequest","responseType":"BatchGetDocumentsResponse","responseStream":true,"options":{"(google.api.http).post":"/v1/{database=projects/*/databases/*}/documents:batchGet","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{database=projects/*/databases/*}/documents:batchGet","body":"*"}}]},"BeginTransaction":{"requestType":"BeginTransactionRequest","responseType":"BeginTransactionResponse","options":{"(google.api.http).post":"/v1/{database=projects/*/databases/*}/documents:beginTransaction","(google.api.http).body":"*","(google.api.method_signature)":"database"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{database=projects/*/databases/*}/documents:beginTransaction","body":"*"}},{"(google.api.method_signature)":"database"}]},"Commit":{"requestType":"CommitRequest","responseType":"CommitResponse","options":{"(google.api.http).post":"/v1/{database=projects/*/databases/*}/documents:commit","(google.api.http).body":"*","(google.api.method_signature)":"database,writes"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{database=projects/*/databases/*}/documents:commit","body":"*"}},{"(google.api.method_signature)":"database,writes"}]},"Rollback":{"requestType":"RollbackRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).post":"/v1/{database=projects/*/databases/*}/documents:rollback","(google.api.http).body":"*","(google.api.method_signature)":"database,transaction"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{database=projects/*/databases/*}/documents:rollback","body":"*"}},{"(google.api.method_signature)":"database,transaction"}]},"RunQuery":{"requestType":"RunQueryRequest","responseType":"RunQueryResponse","responseStream":true,"options":{"(google.api.http).post":"/v1/{parent=projects/*/databases/*/documents}:runQuery","(google.api.http).body":"*","(google.api.http).additional_bindings.post":"/v1/{parent=projects/*/databases/*/documents/*/**}:runQuery","(google.api.http).additional_bindings.body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{parent=projects/*/databases/*/documents}:runQuery","body":"*","additional_bindings":{"post":"/v1/{parent=projects/*/databases/*/documents/*/**}:runQuery","body":"*"}}}]},"RunAggregationQuery":{"requestType":"RunAggregationQueryRequest","responseType":"RunAggregationQueryResponse","responseStream":true,"options":{"(google.api.http).post":"/v1/{parent=projects/*/databases/*/documents}:runAggregationQuery","(google.api.http).body":"*","(google.api.http).additional_bindings.post":"/v1/{parent=projects/*/databases/*/documents/*/**}:runAggregationQuery","(google.api.http).additional_bindings.body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{parent=projects/*/databases/*/documents}:runAggregationQuery","body":"*","additional_bindings":{"post":"/v1/{parent=projects/*/databases/*/documents/*/**}:runAggregationQuery","body":"*"}}}]},"PartitionQuery":{"requestType":"PartitionQueryRequest","responseType":"PartitionQueryResponse","options":{"(google.api.http).post":"/v1/{parent=projects/*/databases/*/documents}:partitionQuery","(google.api.http).body":"*","(google.api.http).additional_bindings.post":"/v1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery","(google.api.http).additional_bindings.body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{parent=projects/*/databases/*/documents}:partitionQuery","body":"*","additional_bindings":{"post":"/v1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery","body":"*"}}}]},"Write":{"requestType":"WriteRequest","requestStream":true,"responseType":"WriteResponse","responseStream":true,"options":{"(google.api.http).post":"/v1/{database=projects/*/databases/*}/documents:write","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{database=projects/*/databases/*}/documents:write","body":"*"}}]},"Listen":{"requestType":"ListenRequest","requestStream":true,"responseType":"ListenResponse","responseStream":true,"options":{"(google.api.http).post":"/v1/{database=projects/*/databases/*}/documents:listen","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{database=projects/*/databases/*}/documents:listen","body":"*"}}]},"ListCollectionIds":{"requestType":"ListCollectionIdsRequest","responseType":"ListCollectionIdsResponse","options":{"(google.api.http).post":"/v1/{parent=projects/*/databases/*/documents}:listCollectionIds","(google.api.http).body":"*","(google.api.http).additional_bindings.post":"/v1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds","(google.api.http).additional_bindings.body":"*","(google.api.method_signature)":"parent"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{parent=projects/*/databases/*/documents}:listCollectionIds","body":"*","additional_bindings":{"post":"/v1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds","body":"*"}}},{"(google.api.method_signature)":"parent"}]},"BatchWrite":{"requestType":"BatchWriteRequest","responseType":"BatchWriteResponse","options":{"(google.api.http).post":"/v1/{database=projects/*/databases/*}/documents:batchWrite","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{database=projects/*/databases/*}/documents:batchWrite","body":"*"}}]},"CreateDocument":{"requestType":"CreateDocumentRequest","responseType":"Document","options":{"(google.api.http).post":"/v1/{parent=projects/*/databases/*/documents/**}/{collection_id}","(google.api.http).body":"document"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{parent=projects/*/databases/*/documents/**}/{collection_id}","body":"document"}}]}}},"GetDocumentRequest":{"oneofs":{"consistencySelector":{"oneof":["transaction","readTime"]}},"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"mask":{"type":"DocumentMask","id":2},"transaction":{"type":"bytes","id":3},"readTime":{"type":"google.protobuf.Timestamp","id":5}}},"ListDocumentsRequest":{"oneofs":{"consistencySelector":{"oneof":["transaction","readTime"]}},"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"collectionId":{"type":"string","id":2,"options":{"(google.api.field_behavior)":"OPTIONAL"}},"pageSize":{"type":"int32","id":3,"options":{"(google.api.field_behavior)":"OPTIONAL"}},"pageToken":{"type":"string","id":4,"options":{"(google.api.field_behavior)":"OPTIONAL"}},"orderBy":{"type":"string","id":6,"options":{"(google.api.field_behavior)":"OPTIONAL"}},"mask":{"type":"DocumentMask","id":7,"options":{"(google.api.field_behavior)":"OPTIONAL"}},"transaction":{"type":"bytes","id":8},"readTime":{"type":"google.protobuf.Timestamp","id":10},"showMissing":{"type":"bool","id":12}}},"ListDocumentsResponse":{"fields":{"documents":{"rule":"repeated","type":"Document","id":1},"nextPageToken":{"type":"string","id":2}}},"CreateDocumentRequest":{"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"collectionId":{"type":"string","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}},"documentId":{"type":"string","id":3},"document":{"type":"Document","id":4,"options":{"(google.api.field_behavior)":"REQUIRED"}},"mask":{"type":"DocumentMask","id":5}}},"UpdateDocumentRequest":{"fields":{"document":{"type":"Document","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"updateMask":{"type":"DocumentMask","id":2},"mask":{"type":"DocumentMask","id":3},"currentDocument":{"type":"Precondition","id":4}}},"DeleteDocumentRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"currentDocument":{"type":"Precondition","id":2}}},"BatchGetDocumentsRequest":{"oneofs":{"consistencySelector":{"oneof":["transaction","newTransaction","readTime"]}},"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"documents":{"rule":"repeated","type":"string","id":2},"mask":{"type":"DocumentMask","id":3},"transaction":{"type":"bytes","id":4},"newTransaction":{"type":"TransactionOptions","id":5},"readTime":{"type":"google.protobuf.Timestamp","id":7}}},"BatchGetDocumentsResponse":{"oneofs":{"result":{"oneof":["found","missing"]}},"fields":{"found":{"type":"Document","id":1},"missing":{"type":"string","id":2},"transaction":{"type":"bytes","id":3},"readTime":{"type":"google.protobuf.Timestamp","id":4}}},"BeginTransactionRequest":{"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"options":{"type":"TransactionOptions","id":2}}},"BeginTransactionResponse":{"fields":{"transaction":{"type":"bytes","id":1}}},"CommitRequest":{"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"writes":{"rule":"repeated","type":"Write","id":2},"transaction":{"type":"bytes","id":3}}},"CommitResponse":{"fields":{"writeResults":{"rule":"repeated","type":"WriteResult","id":1},"commitTime":{"type":"google.protobuf.Timestamp","id":2}}},"RollbackRequest":{"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"transaction":{"type":"bytes","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"RunQueryRequest":{"oneofs":{"queryType":{"oneof":["structuredQuery"]},"consistencySelector":{"oneof":["transaction","newTransaction","readTime"]}},"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"structuredQuery":{"type":"StructuredQuery","id":2},"transaction":{"type":"bytes","id":5},"newTransaction":{"type":"TransactionOptions","id":6},"readTime":{"type":"google.protobuf.Timestamp","id":7},"explainOptions":{"type":"ExplainOptions","id":10,"options":{"(google.api.field_behavior)":"OPTIONAL"}}}},"RunQueryResponse":{"oneofs":{"continuationSelector":{"oneof":["done"]}},"fields":{"transaction":{"type":"bytes","id":2},"document":{"type":"Document","id":1},"readTime":{"type":"google.protobuf.Timestamp","id":3},"skippedResults":{"type":"int32","id":4},"done":{"type":"bool","id":6},"explainMetrics":{"type":"ExplainMetrics","id":11}}},"RunAggregationQueryRequest":{"oneofs":{"queryType":{"oneof":["structuredAggregationQuery"]},"consistencySelector":{"oneof":["transaction","newTransaction","readTime"]}},"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"structuredAggregationQuery":{"type":"StructuredAggregationQuery","id":2},"transaction":{"type":"bytes","id":4},"newTransaction":{"type":"TransactionOptions","id":5},"readTime":{"type":"google.protobuf.Timestamp","id":6},"explainOptions":{"type":"ExplainOptions","id":8,"options":{"(google.api.field_behavior)":"OPTIONAL"}}}},"RunAggregationQueryResponse":{"fields":{"result":{"type":"AggregationResult","id":1},"transaction":{"type":"bytes","id":2},"readTime":{"type":"google.protobuf.Timestamp","id":3},"explainMetrics":{"type":"ExplainMetrics","id":10}}},"PartitionQueryRequest":{"oneofs":{"queryType":{"oneof":["structuredQuery"]},"consistencySelector":{"oneof":["readTime"]}},"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"structuredQuery":{"type":"StructuredQuery","id":2},"partitionCount":{"type":"int64","id":3},"pageToken":{"type":"string","id":4},"pageSize":{"type":"int32","id":5},"readTime":{"type":"google.protobuf.Timestamp","id":6}}},"PartitionQueryResponse":{"fields":{"partitions":{"rule":"repeated","type":"Cursor","id":1},"nextPageToken":{"type":"string","id":2}}},"WriteRequest":{"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"streamId":{"type":"string","id":2},"writes":{"rule":"repeated","type":"Write","id":3},"streamToken":{"type":"bytes","id":4},"labels":{"keyType":"string","type":"string","id":5}}},"WriteResponse":{"fields":{"streamId":{"type":"string","id":1},"streamToken":{"type":"bytes","id":2},"writeResults":{"rule":"repeated","type":"WriteResult","id":3},"commitTime":{"type":"google.protobuf.Timestamp","id":4}}},"ListenRequest":{"oneofs":{"targetChange":{"oneof":["addTarget","removeTarget"]}},"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"addTarget":{"type":"Target","id":2},"removeTarget":{"type":"int32","id":3},"labels":{"keyType":"string","type":"string","id":4}}},"ListenResponse":{"oneofs":{"responseType":{"oneof":["targetChange","documentChange","documentDelete","documentRemove","filter"]}},"fields":{"targetChange":{"type":"TargetChange","id":2},"documentChange":{"type":"DocumentChange","id":3},"documentDelete":{"type":"DocumentDelete","id":4},"documentRemove":{"type":"DocumentRemove","id":6},"filter":{"type":"ExistenceFilter","id":5}}},"Target":{"oneofs":{"targetType":{"oneof":["query","documents"]},"resumeType":{"oneof":["resumeToken","readTime"]}},"fields":{"query":{"type":"QueryTarget","id":2},"documents":{"type":"DocumentsTarget","id":3},"resumeToken":{"type":"bytes","id":4},"readTime":{"type":"google.protobuf.Timestamp","id":11},"targetId":{"type":"int32","id":5},"once":{"type":"bool","id":6},"expectedCount":{"type":"google.protobuf.Int32Value","id":12}},"nested":{"DocumentsTarget":{"fields":{"documents":{"rule":"repeated","type":"string","id":2}}},"QueryTarget":{"oneofs":{"queryType":{"oneof":["structuredQuery"]}},"fields":{"parent":{"type":"string","id":1},"structuredQuery":{"type":"StructuredQuery","id":2}}}}},"TargetChange":{"fields":{"targetChangeType":{"type":"TargetChangeType","id":1},"targetIds":{"rule":"repeated","type":"int32","id":2},"cause":{"type":"google.rpc.Status","id":3},"resumeToken":{"type":"bytes","id":4},"readTime":{"type":"google.protobuf.Timestamp","id":6}},"nested":{"TargetChangeType":{"values":{"NO_CHANGE":0,"ADD":1,"REMOVE":2,"CURRENT":3,"RESET":4}}}},"ListCollectionIdsRequest":{"oneofs":{"consistencySelector":{"oneof":["readTime"]}},"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"pageSize":{"type":"int32","id":2},"pageToken":{"type":"string","id":3},"readTime":{"type":"google.protobuf.Timestamp","id":4}}},"ListCollectionIdsResponse":{"fields":{"collectionIds":{"rule":"repeated","type":"string","id":1},"nextPageToken":{"type":"string","id":2}}},"BatchWriteRequest":{"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"writes":{"rule":"repeated","type":"Write","id":2},"labels":{"keyType":"string","type":"string","id":3}}},"BatchWriteResponse":{"fields":{"writeResults":{"rule":"repeated","type":"WriteResult","id":1},"status":{"rule":"repeated","type":"google.rpc.Status","id":2}}},"StructuredQuery":{"fields":{"select":{"type":"Projection","id":1},"from":{"rule":"repeated","type":"CollectionSelector","id":2},"where":{"type":"Filter","id":3},"orderBy":{"rule":"repeated","type":"Order","id":4},"startAt":{"type":"Cursor","id":7},"endAt":{"type":"Cursor","id":8},"offset":{"type":"int32","id":6},"limit":{"type":"google.protobuf.Int32Value","id":5},"findNearest":{"type":"FindNearest","id":9,"options":{"(google.api.field_behavior)":"OPTIONAL"}}},"nested":{"CollectionSelector":{"fields":{"collectionId":{"type":"string","id":2},"allDescendants":{"type":"bool","id":3}}},"Filter":{"oneofs":{"filterType":{"oneof":["compositeFilter","fieldFilter","unaryFilter"]}},"fields":{"compositeFilter":{"type":"CompositeFilter","id":1},"fieldFilter":{"type":"FieldFilter","id":2},"unaryFilter":{"type":"UnaryFilter","id":3}}},"CompositeFilter":{"fields":{"op":{"type":"Operator","id":1},"filters":{"rule":"repeated","type":"Filter","id":2}},"nested":{"Operator":{"values":{"OPERATOR_UNSPECIFIED":0,"AND":1,"OR":2}}}},"FieldFilter":{"fields":{"field":{"type":"FieldReference","id":1},"op":{"type":"Operator","id":2},"value":{"type":"Value","id":3}},"nested":{"Operator":{"values":{"OPERATOR_UNSPECIFIED":0,"LESS_THAN":1,"LESS_THAN_OR_EQUAL":2,"GREATER_THAN":3,"GREATER_THAN_OR_EQUAL":4,"EQUAL":5,"NOT_EQUAL":6,"ARRAY_CONTAINS":7,"IN":8,"ARRAY_CONTAINS_ANY":9,"NOT_IN":10}}}},"UnaryFilter":{"oneofs":{"operandType":{"oneof":["field"]}},"fields":{"op":{"type":"Operator","id":1},"field":{"type":"FieldReference","id":2}},"nested":{"Operator":{"values":{"OPERATOR_UNSPECIFIED":0,"IS_NAN":2,"IS_NULL":3,"IS_NOT_NAN":4,"IS_NOT_NULL":5}}}},"Order":{"fields":{"field":{"type":"FieldReference","id":1},"direction":{"type":"Direction","id":2}}},"Direction":{"values":{"DIRECTION_UNSPECIFIED":0,"ASCENDING":1,"DESCENDING":2}},"FieldReference":{"fields":{"fieldPath":{"type":"string","id":2}}},"Projection":{"fields":{"fields":{"rule":"repeated","type":"FieldReference","id":2}}},"FindNearest":{"fields":{"vectorField":{"type":"FieldReference","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"queryVector":{"type":"Value","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}},"distanceMeasure":{"type":"DistanceMeasure","id":3,"options":{"(google.api.field_behavior)":"REQUIRED"}},"limit":{"type":"google.protobuf.Int32Value","id":4,"options":{"(google.api.field_behavior)":"REQUIRED"}},"distanceResultField":{"type":"string","id":5,"options":{"(google.api.field_behavior)":"OPTIONAL"}},"distanceThreshold":{"type":"google.protobuf.DoubleValue","id":6,"options":{"(google.api.field_behavior)":"OPTIONAL"}}},"nested":{"DistanceMeasure":{"values":{"DISTANCE_MEASURE_UNSPECIFIED":0,"EUCLIDEAN":1,"COSINE":2,"DOT_PRODUCT":3}}}}}},"StructuredAggregationQuery":{"oneofs":{"queryType":{"oneof":["structuredQuery"]}},"fields":{"structuredQuery":{"type":"StructuredQuery","id":1},"aggregations":{"rule":"repeated","type":"Aggregation","id":3,"options":{"(google.api.field_behavior)":"OPTIONAL"}}},"nested":{"Aggregation":{"oneofs":{"operator":{"oneof":["count","sum","avg"]}},"fields":{"count":{"type":"Count","id":1},"sum":{"type":"Sum","id":2},"avg":{"type":"Avg","id":3},"alias":{"type":"string","id":7,"options":{"(google.api.field_behavior)":"OPTIONAL"}}},"nested":{"Count":{"fields":{"upTo":{"type":"google.protobuf.Int64Value","id":1,"options":{"(google.api.field_behavior)":"OPTIONAL"}}}},"Sum":{"fields":{"field":{"type":"StructuredQuery.FieldReference","id":1}}},"Avg":{"fields":{"field":{"type":"StructuredQuery.FieldReference","id":1}}}}}}},"Cursor":{"fields":{"values":{"rule":"repeated","type":"Value","id":1},"before":{"type":"bool","id":2}}},"ExplainOptions":{"fields":{"analyze":{"type":"bool","id":1,"options":{"(google.api.field_behavior)":"OPTIONAL"}}}},"ExplainMetrics":{"fields":{"planSummary":{"type":"PlanSummary","id":1},"executionStats":{"type":"ExecutionStats","id":2}}},"PlanSummary":{"fields":{"indexesUsed":{"rule":"repeated","type":"google.protobuf.Struct","id":1}}},"ExecutionStats":{"fields":{"resultsReturned":{"type":"int64","id":1},"executionDuration":{"type":"google.protobuf.Duration","id":3},"readOperations":{"type":"int64","id":4},"debugStats":{"type":"google.protobuf.Struct","id":5}}},"Write":{"oneofs":{"operation":{"oneof":["update","delete","transform"]}},"fields":{"update":{"type":"Document","id":1},"delete":{"type":"string","id":2},"transform":{"type":"DocumentTransform","id":6},"updateMask":{"type":"DocumentMask","id":3},"updateTransforms":{"rule":"repeated","type":"DocumentTransform.FieldTransform","id":7},"currentDocument":{"type":"Precondition","id":4}}},"DocumentTransform":{"fields":{"document":{"type":"string","id":1},"fieldTransforms":{"rule":"repeated","type":"FieldTransform","id":2}},"nested":{"FieldTransform":{"oneofs":{"transformType":{"oneof":["setToServerValue","increment","maximum","minimum","appendMissingElements","removeAllFromArray"]}},"fields":{"fieldPath":{"type":"string","id":1},"setToServerValue":{"type":"ServerValue","id":2},"increment":{"type":"Value","id":3},"maximum":{"type":"Value","id":4},"minimum":{"type":"Value","id":5},"appendMissingElements":{"type":"ArrayValue","id":6},"removeAllFromArray":{"type":"ArrayValue","id":7}},"nested":{"ServerValue":{"values":{"SERVER_VALUE_UNSPECIFIED":0,"REQUEST_TIME":1}}}}}},"WriteResult":{"fields":{"updateTime":{"type":"google.protobuf.Timestamp","id":1},"transformResults":{"rule":"repeated","type":"Value","id":2}}},"DocumentChange":{"fields":{"document":{"type":"Document","id":1},"targetIds":{"rule":"repeated","type":"int32","id":5},"removedTargetIds":{"rule":"repeated","type":"int32","id":6}}},"DocumentDelete":{"fields":{"document":{"type":"string","id":1},"removedTargetIds":{"rule":"repeated","type":"int32","id":6},"readTime":{"type":"google.protobuf.Timestamp","id":4}}},"DocumentRemove":{"fields":{"document":{"type":"string","id":1},"removedTargetIds":{"rule":"repeated","type":"int32","id":2},"readTime":{"type":"google.protobuf.Timestamp","id":4}}},"ExistenceFilter":{"fields":{"targetId":{"type":"int32","id":1},"count":{"type":"int32","id":2},"unchangedNames":{"type":"BloomFilter","id":3}}}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ResourceProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"fieldBehavior":{"rule":"repeated","type":"google.api.FieldBehavior","id":1052,"extend":"google.protobuf.FieldOptions","options":{"packed":false}},"FieldBehavior":{"values":{"FIELD_BEHAVIOR_UNSPECIFIED":0,"OPTIONAL":1,"REQUIRED":2,"OUTPUT_ONLY":3,"INPUT_ONLY":4,"IMMUTABLE":5,"UNORDERED_LIST":6,"NON_EMPTY_DEFAULT":7,"IDENTIFIER":8}},"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"},"apiVersion":{"type":"string","id":525000001,"extend":"google.protobuf.ServiceOptions"},"CommonLanguageSettings":{"fields":{"referenceDocsUri":{"type":"string","id":1,"options":{"deprecated":true}},"destinations":{"rule":"repeated","type":"ClientLibraryDestination","id":2},"selectiveGapicGeneration":{"type":"SelectiveGapicGeneration","id":3}}},"ClientLibrarySettings":{"fields":{"version":{"type":"string","id":1},"launchStage":{"type":"LaunchStage","id":2},"restNumericEnums":{"type":"bool","id":3},"javaSettings":{"type":"JavaSettings","id":21},"cppSettings":{"type":"CppSettings","id":22},"phpSettings":{"type":"PhpSettings","id":23},"pythonSettings":{"type":"PythonSettings","id":24},"nodeSettings":{"type":"NodeSettings","id":25},"dotnetSettings":{"type":"DotnetSettings","id":26},"rubySettings":{"type":"RubySettings","id":27},"goSettings":{"type":"GoSettings","id":28}}},"Publishing":{"fields":{"methodSettings":{"rule":"repeated","type":"MethodSettings","id":2},"newIssueUri":{"type":"string","id":101},"documentationUri":{"type":"string","id":102},"apiShortName":{"type":"string","id":103},"githubLabel":{"type":"string","id":104},"codeownerGithubTeams":{"rule":"repeated","type":"string","id":105},"docTagPrefix":{"type":"string","id":106},"organization":{"type":"ClientLibraryOrganization","id":107},"librarySettings":{"rule":"repeated","type":"ClientLibrarySettings","id":109},"protoReferenceDocumentationUri":{"type":"string","id":110},"restReferenceDocumentationUri":{"type":"string","id":111}}},"JavaSettings":{"fields":{"libraryPackage":{"type":"string","id":1},"serviceClassNames":{"keyType":"string","type":"string","id":2},"common":{"type":"CommonLanguageSettings","id":3}}},"CppSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1}}},"PhpSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1}}},"PythonSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1},"experimentalFeatures":{"type":"ExperimentalFeatures","id":2}},"nested":{"ExperimentalFeatures":{"fields":{"restAsyncIoEnabled":{"type":"bool","id":1},"protobufPythonicTypesEnabled":{"type":"bool","id":2}}}}},"NodeSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1}}},"DotnetSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1},"renamedServices":{"keyType":"string","type":"string","id":2},"renamedResources":{"keyType":"string","type":"string","id":3},"ignoredResources":{"rule":"repeated","type":"string","id":4},"forcedNamespaceAliases":{"rule":"repeated","type":"string","id":5},"handwrittenSignatures":{"rule":"repeated","type":"string","id":6}}},"RubySettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1}}},"GoSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1},"renamedServices":{"keyType":"string","type":"string","id":2}}},"MethodSettings":{"fields":{"selector":{"type":"string","id":1},"longRunning":{"type":"LongRunning","id":2},"autoPopulatedFields":{"rule":"repeated","type":"string","id":3}},"nested":{"LongRunning":{"fields":{"initialPollDelay":{"type":"google.protobuf.Duration","id":1},"pollDelayMultiplier":{"type":"float","id":2},"maxPollDelay":{"type":"google.protobuf.Duration","id":3},"totalPollTimeout":{"type":"google.protobuf.Duration","id":4}}}}},"ClientLibraryOrganization":{"values":{"CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED":0,"CLOUD":1,"ADS":2,"PHOTOS":3,"STREET_VIEW":4,"SHOPPING":5,"GEO":6,"GENERATIVE_AI":7}},"ClientLibraryDestination":{"values":{"CLIENT_LIBRARY_DESTINATION_UNSPECIFIED":0,"GITHUB":10,"PACKAGE_MANAGER":20}},"SelectiveGapicGeneration":{"fields":{"methods":{"rule":"repeated","type":"string","id":1},"generateOmittedAsInternal":{"type":"bool","id":2}}},"LaunchStage":{"values":{"LAUNCH_STAGE_UNSPECIFIED":0,"UNIMPLEMENTED":6,"PRELAUNCH":7,"EARLY_ACCESS":1,"ALPHA":2,"BETA":3,"GA":4,"DEPRECATED":5}},"resourceReference":{"type":"google.api.ResourceReference","id":1055,"extend":"google.protobuf.FieldOptions"},"resourceDefinition":{"rule":"repeated","type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.FileOptions"},"resource":{"type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.MessageOptions"},"ResourceDescriptor":{"fields":{"type":{"type":"string","id":1},"pattern":{"rule":"repeated","type":"string","id":2},"nameField":{"type":"string","id":3},"history":{"type":"History","id":4},"plural":{"type":"string","id":5},"singular":{"type":"string","id":6},"style":{"rule":"repeated","type":"Style","id":10}},"nested":{"History":{"values":{"HISTORY_UNSPECIFIED":0,"ORIGINALLY_SINGLE_PATTERN":1,"FUTURE_MULTI_PATTERN":2}},"Style":{"values":{"STYLE_UNSPECIFIED":0,"DECLARATIVE_FRIENDLY":1}}}},"ResourceReference":{"fields":{"type":{"type":"string","id":1},"childType":{"type":"string","id":2}}}}},"protobuf":{"options":{"go_package":"google.golang.org/protobuf/types/descriptorpb","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"Edition":{"values":{"EDITION_UNKNOWN":0,"EDITION_PROTO2":998,"EDITION_PROTO3":999,"EDITION_2023":1000,"EDITION_2024":1001,"EDITION_1_TEST_ONLY":1,"EDITION_2_TEST_ONLY":2,"EDITION_99997_TEST_ONLY":99997,"EDITION_99998_TEST_ONLY":99998,"EDITION_99999_TEST_ONLY":99999,"EDITION_MAX":2147483647}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12},"edition":{"type":"Edition","id":14}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999},"declaration":{"rule":"repeated","type":"Declaration","id":2,"options":{"retention":"RETENTION_SOURCE"}},"features":{"type":"FeatureSet","id":50},"verification":{"type":"VerificationState","id":3,"options":{"default":"UNVERIFIED","retention":"RETENTION_SOURCE"}}},"extensions":[[1000,536870911]],"nested":{"Declaration":{"fields":{"number":{"type":"int32","id":1},"fullName":{"type":"string","id":2},"type":{"type":"string","id":3},"reserved":{"type":"bool","id":5},"repeated":{"type":"bool","id":6}},"reserved":[[4,4]]},"VerificationState":{"values":{"DECLARATION":0,"UNVERIFIED":1}}}},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REPEATED":3,"LABEL_REQUIRED":2}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"features":{"type":"FeatureSet","id":50},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[42,42],[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"deprecatedLegacyJsonFieldConflicts":{"type":"bool","id":11,"options":{"deprecated":true}},"features":{"type":"FeatureSet","id":12},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4],[5,5],[6,6],[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"unverifiedLazy":{"type":"bool","id":15,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"debugRedact":{"type":"bool","id":16,"options":{"default":false}},"retention":{"type":"OptionRetention","id":17},"targets":{"rule":"repeated","type":"OptionTargetType","id":19,"options":{"packed":false}},"editionDefaults":{"rule":"repeated","type":"EditionDefault","id":20},"features":{"type":"FeatureSet","id":21},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4],[18,18]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}},"OptionRetention":{"values":{"RETENTION_UNKNOWN":0,"RETENTION_RUNTIME":1,"RETENTION_SOURCE":2}},"OptionTargetType":{"values":{"TARGET_TYPE_UNKNOWN":0,"TARGET_TYPE_FILE":1,"TARGET_TYPE_EXTENSION_RANGE":2,"TARGET_TYPE_MESSAGE":3,"TARGET_TYPE_FIELD":4,"TARGET_TYPE_ONEOF":5,"TARGET_TYPE_ENUM":6,"TARGET_TYPE_ENUM_ENTRY":7,"TARGET_TYPE_SERVICE":8,"TARGET_TYPE_METHOD":9}},"EditionDefault":{"fields":{"edition":{"type":"Edition","id":3},"value":{"type":"string","id":2}}}}},"OneofOptions":{"fields":{"features":{"type":"FeatureSet","id":1},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"deprecatedLegacyJsonFieldConflicts":{"type":"bool","id":6,"options":{"deprecated":true}},"features":{"type":"FeatureSet","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"features":{"type":"FeatureSet","id":2},"debugRedact":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"features":{"type":"FeatureSet","id":34},"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"features":{"type":"FeatureSet","id":35},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"FeatureSet":{"fields":{"fieldPresence":{"type":"FieldPresence","id":1,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_2023","edition_defaults.value":"EXPLICIT"}},"enumType":{"type":"EnumType","id":2,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"OPEN"}},"repeatedFieldEncoding":{"type":"RepeatedFieldEncoding","id":3,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"PACKED"}},"utf8Validation":{"type":"Utf8Validation","id":4,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"VERIFY"}},"messageEncoding":{"type":"MessageEncoding","id":5,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO2","edition_defaults.value":"LENGTH_PREFIXED"}},"jsonFormat":{"type":"JsonFormat","id":6,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"ALLOW"}}},"extensions":[[1000,1000],[1001,1001],[1002,1002],[9995,9999],[10000,10000]],"reserved":[[999,999]],"nested":{"FieldPresence":{"values":{"FIELD_PRESENCE_UNKNOWN":0,"EXPLICIT":1,"IMPLICIT":2,"LEGACY_REQUIRED":3}},"EnumType":{"values":{"ENUM_TYPE_UNKNOWN":0,"OPEN":1,"CLOSED":2}},"RepeatedFieldEncoding":{"values":{"REPEATED_FIELD_ENCODING_UNKNOWN":0,"PACKED":1,"EXPANDED":2}},"Utf8Validation":{"values":{"UTF8_VALIDATION_UNKNOWN":0,"VERIFY":2,"NONE":3}},"MessageEncoding":{"values":{"MESSAGE_ENCODING_UNKNOWN":0,"LENGTH_PREFIXED":1,"DELIMITED":2}},"JsonFormat":{"values":{"JSON_FORMAT_UNKNOWN":0,"ALLOW":1,"LEGACY_BEST_EFFORT":2}}}},"FeatureSetDefaults":{"fields":{"defaults":{"rule":"repeated","type":"FeatureSetEditionDefault","id":1},"minimumEdition":{"type":"Edition","id":4},"maximumEdition":{"type":"Edition","id":5}},"nested":{"FeatureSetEditionDefault":{"fields":{"edition":{"type":"Edition","id":3},"features":{"type":"FeatureSet","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4},"semantic":{"type":"Semantic","id":5}},"nested":{"Semantic":{"values":{"NONE":0,"SET":1,"ALIAS":2}}}}}},"Struct":{"fields":{"fields":{"keyType":"string","type":"Value","id":1}}},"Value":{"oneofs":{"kind":{"oneof":["nullValue","numberValue","stringValue","boolValue","structValue","listValue"]}},"fields":{"nullValue":{"type":"NullValue","id":1},"numberValue":{"type":"double","id":2},"stringValue":{"type":"string","id":3},"boolValue":{"type":"bool","id":4},"structValue":{"type":"Struct","id":5},"listValue":{"type":"ListValue","id":6}}},"NullValue":{"values":{"NULL_VALUE":0}},"ListValue":{"fields":{"values":{"rule":"repeated","type":"Value","id":1}}},"Timestamp":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}},"Duration":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}},"DoubleValue":{"fields":{"value":{"type":"double","id":1}}},"FloatValue":{"fields":{"value":{"type":"float","id":1}}},"Int64Value":{"fields":{"value":{"type":"int64","id":1}}},"UInt64Value":{"fields":{"value":{"type":"uint64","id":1}}},"Int32Value":{"fields":{"value":{"type":"int32","id":1}}},"UInt32Value":{"fields":{"value":{"type":"uint32","id":1}}},"BoolValue":{"fields":{"value":{"type":"bool","id":1}}},"StringValue":{"fields":{"value":{"type":"string","id":1}}},"BytesValue":{"fields":{"value":{"type":"bytes","id":1}}},"Empty":{"fields":{}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"FieldMask":{"fields":{"paths":{"rule":"repeated","type":"string","id":1}}}}},"type":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/type/dayofweek;dayofweek","java_multiple_files":true,"java_outer_classname":"DayOfWeekProto","java_package":"com.google.type","objc_class_prefix":"GTP"},"nested":{"LatLng":{"fields":{"latitude":{"type":"double","id":1},"longitude":{"type":"double","id":2}}},"DayOfWeek":{"values":{"DAY_OF_WEEK_UNSPECIFIED":0,"MONDAY":1,"TUESDAY":2,"WEDNESDAY":3,"THURSDAY":4,"FRIDAY":5,"SATURDAY":6,"SUNDAY":7}}}},"rpc":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/rpc/status;status","java_multiple_files":true,"java_outer_classname":"StatusProto","java_package":"com.google.rpc","objc_class_prefix":"RPC"},"nested":{"Status":{"fields":{"code":{"type":"int32","id":1},"message":{"type":"string","id":2},"details":{"rule":"repeated","type":"google.protobuf.Any","id":3}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/protos/v1beta1.json":
/*!************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/protos/v1beta1.json ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"options":{"syntax":"proto3"},"nested":{"google":{"nested":{"protobuf":{"options":{"go_package":"google.golang.org/protobuf/types/descriptorpb","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"Timestamp":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}},"Struct":{"fields":{"fields":{"keyType":"string","type":"Value","id":1}}},"Value":{"oneofs":{"kind":{"oneof":["nullValue","numberValue","stringValue","boolValue","structValue","listValue"]}},"fields":{"nullValue":{"type":"NullValue","id":1},"numberValue":{"type":"double","id":2},"stringValue":{"type":"string","id":3},"boolValue":{"type":"bool","id":4},"structValue":{"type":"Struct","id":5},"listValue":{"type":"ListValue","id":6}}},"NullValue":{"values":{"NULL_VALUE":0}},"ListValue":{"fields":{"values":{"rule":"repeated","type":"Value","id":1}}},"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"Edition":{"values":{"EDITION_UNKNOWN":0,"EDITION_PROTO2":998,"EDITION_PROTO3":999,"EDITION_2023":1000,"EDITION_2024":1001,"EDITION_1_TEST_ONLY":1,"EDITION_2_TEST_ONLY":2,"EDITION_99997_TEST_ONLY":99997,"EDITION_99998_TEST_ONLY":99998,"EDITION_99999_TEST_ONLY":99999,"EDITION_MAX":2147483647}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12},"edition":{"type":"Edition","id":14}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999},"declaration":{"rule":"repeated","type":"Declaration","id":2,"options":{"retention":"RETENTION_SOURCE"}},"features":{"type":"FeatureSet","id":50},"verification":{"type":"VerificationState","id":3,"options":{"default":"UNVERIFIED","retention":"RETENTION_SOURCE"}}},"extensions":[[1000,536870911]],"nested":{"Declaration":{"fields":{"number":{"type":"int32","id":1},"fullName":{"type":"string","id":2},"type":{"type":"string","id":3},"reserved":{"type":"bool","id":5},"repeated":{"type":"bool","id":6}},"reserved":[[4,4]]},"VerificationState":{"values":{"DECLARATION":0,"UNVERIFIED":1}}}},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REPEATED":3,"LABEL_REQUIRED":2}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"features":{"type":"FeatureSet","id":50},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[42,42],[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"deprecatedLegacyJsonFieldConflicts":{"type":"bool","id":11,"options":{"deprecated":true}},"features":{"type":"FeatureSet","id":12},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4],[5,5],[6,6],[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"unverifiedLazy":{"type":"bool","id":15,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"debugRedact":{"type":"bool","id":16,"options":{"default":false}},"retention":{"type":"OptionRetention","id":17},"targets":{"rule":"repeated","type":"OptionTargetType","id":19,"options":{"packed":false}},"editionDefaults":{"rule":"repeated","type":"EditionDefault","id":20},"features":{"type":"FeatureSet","id":21},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4],[18,18]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}},"OptionRetention":{"values":{"RETENTION_UNKNOWN":0,"RETENTION_RUNTIME":1,"RETENTION_SOURCE":2}},"OptionTargetType":{"values":{"TARGET_TYPE_UNKNOWN":0,"TARGET_TYPE_FILE":1,"TARGET_TYPE_EXTENSION_RANGE":2,"TARGET_TYPE_MESSAGE":3,"TARGET_TYPE_FIELD":4,"TARGET_TYPE_ONEOF":5,"TARGET_TYPE_ENUM":6,"TARGET_TYPE_ENUM_ENTRY":7,"TARGET_TYPE_SERVICE":8,"TARGET_TYPE_METHOD":9}},"EditionDefault":{"fields":{"edition":{"type":"Edition","id":3},"value":{"type":"string","id":2}}}}},"OneofOptions":{"fields":{"features":{"type":"FeatureSet","id":1},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"deprecatedLegacyJsonFieldConflicts":{"type":"bool","id":6,"options":{"deprecated":true}},"features":{"type":"FeatureSet","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"features":{"type":"FeatureSet","id":2},"debugRedact":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"features":{"type":"FeatureSet","id":34},"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"features":{"type":"FeatureSet","id":35},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"FeatureSet":{"fields":{"fieldPresence":{"type":"FieldPresence","id":1,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_2023","edition_defaults.value":"EXPLICIT"}},"enumType":{"type":"EnumType","id":2,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"OPEN"}},"repeatedFieldEncoding":{"type":"RepeatedFieldEncoding","id":3,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"PACKED"}},"utf8Validation":{"type":"Utf8Validation","id":4,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"VERIFY"}},"messageEncoding":{"type":"MessageEncoding","id":5,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO2","edition_defaults.value":"LENGTH_PREFIXED"}},"jsonFormat":{"type":"JsonFormat","id":6,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"ALLOW"}}},"extensions":[[1000,1000],[1001,1001],[1002,1002],[9995,9999],[10000,10000]],"reserved":[[999,999]],"nested":{"FieldPresence":{"values":{"FIELD_PRESENCE_UNKNOWN":0,"EXPLICIT":1,"IMPLICIT":2,"LEGACY_REQUIRED":3}},"EnumType":{"values":{"ENUM_TYPE_UNKNOWN":0,"OPEN":1,"CLOSED":2}},"RepeatedFieldEncoding":{"values":{"REPEATED_FIELD_ENCODING_UNKNOWN":0,"PACKED":1,"EXPANDED":2}},"Utf8Validation":{"values":{"UTF8_VALIDATION_UNKNOWN":0,"VERIFY":2,"NONE":3}},"MessageEncoding":{"values":{"MESSAGE_ENCODING_UNKNOWN":0,"LENGTH_PREFIXED":1,"DELIMITED":2}},"JsonFormat":{"values":{"JSON_FORMAT_UNKNOWN":0,"ALLOW":1,"LEGACY_BEST_EFFORT":2}}}},"FeatureSetDefaults":{"fields":{"defaults":{"rule":"repeated","type":"FeatureSetEditionDefault","id":1},"minimumEdition":{"type":"Edition","id":4},"maximumEdition":{"type":"Edition","id":5}},"nested":{"FeatureSetEditionDefault":{"fields":{"edition":{"type":"Edition","id":3},"features":{"type":"FeatureSet","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4},"semantic":{"type":"Semantic","id":5}},"nested":{"Semantic":{"values":{"NONE":0,"SET":1,"ALIAS":2}}}}}},"Duration":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}},"DoubleValue":{"fields":{"value":{"type":"double","id":1}}},"FloatValue":{"fields":{"value":{"type":"float","id":1}}},"Int64Value":{"fields":{"value":{"type":"int64","id":1}}},"UInt64Value":{"fields":{"value":{"type":"uint64","id":1}}},"Int32Value":{"fields":{"value":{"type":"int32","id":1}}},"UInt32Value":{"fields":{"value":{"type":"uint32","id":1}}},"BoolValue":{"fields":{"value":{"type":"bool","id":1}}},"StringValue":{"fields":{"value":{"type":"string","id":1}}},"BytesValue":{"fields":{"value":{"type":"bytes","id":1}}},"Empty":{"fields":{}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"FieldMask":{"fields":{"paths":{"rule":"repeated","type":"string","id":1}}}}},"firestore":{"nested":{"v1beta1":{"options":{"csharp_namespace":"Google.Cloud.Firestore.V1Beta1","go_package":"cloud.google.com/go/firestore/apiv1beta1/firestorepb;firestorepb","java_multiple_files":true,"java_outer_classname":"UndeliverableFirstGenEventProto","java_package":"com.google.firestore.v1beta1","objc_class_prefix":"GCFS","php_namespace":"Google\\\\Cloud\\\\Firestore\\\\V1beta1","ruby_package":"Google::Cloud::Firestore::V1beta1"},"nested":{"DocumentMask":{"fields":{"fieldPaths":{"rule":"repeated","type":"string","id":1}}},"Precondition":{"oneofs":{"conditionType":{"oneof":["exists","updateTime"]}},"fields":{"exists":{"type":"bool","id":1},"updateTime":{"type":"google.protobuf.Timestamp","id":2}}},"TransactionOptions":{"oneofs":{"mode":{"oneof":["readOnly","readWrite"]}},"fields":{"readOnly":{"type":"ReadOnly","id":2},"readWrite":{"type":"ReadWrite","id":3}},"nested":{"ReadWrite":{"fields":{"retryTransaction":{"type":"bytes","id":1}}},"ReadOnly":{"oneofs":{"consistencySelector":{"oneof":["readTime"]}},"fields":{"readTime":{"type":"google.protobuf.Timestamp","id":2}}}}},"Document":{"fields":{"name":{"type":"string","id":1},"fields":{"keyType":"string","type":"Value","id":2},"createTime":{"type":"google.protobuf.Timestamp","id":3},"updateTime":{"type":"google.protobuf.Timestamp","id":4}}},"Value":{"oneofs":{"valueType":{"oneof":["nullValue","booleanValue","integerValue","doubleValue","timestampValue","stringValue","bytesValue","referenceValue","geoPointValue","arrayValue","mapValue"]}},"fields":{"nullValue":{"type":"google.protobuf.NullValue","id":11},"booleanValue":{"type":"bool","id":1},"integerValue":{"type":"int64","id":2},"doubleValue":{"type":"double","id":3},"timestampValue":{"type":"google.protobuf.Timestamp","id":10},"stringValue":{"type":"string","id":17},"bytesValue":{"type":"bytes","id":18},"referenceValue":{"type":"string","id":5},"geoPointValue":{"type":"google.type.LatLng","id":8},"arrayValue":{"type":"ArrayValue","id":9},"mapValue":{"type":"MapValue","id":6}}},"ArrayValue":{"fields":{"values":{"rule":"repeated","type":"Value","id":1}}},"MapValue":{"fields":{"fields":{"keyType":"string","type":"Value","id":1}}},"Firestore":{"options":{"(google.api.default_host)":"firestore.googleapis.com","(google.api.oauth_scopes)":"https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/datastore"},"methods":{"GetDocument":{"requestType":"GetDocumentRequest","responseType":"Document","options":{"(google.api.http).get":"/v1beta1/{name=projects/*/databases/*/documents/*/**}"},"parsedOptions":[{"(google.api.http)":{"get":"/v1beta1/{name=projects/*/databases/*/documents/*/**}"}}]},"ListDocuments":{"requestType":"ListDocumentsRequest","responseType":"ListDocumentsResponse","options":{"(google.api.http).get":"/v1beta1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}"},"parsedOptions":[{"(google.api.http)":{"get":"/v1beta1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}"}}]},"UpdateDocument":{"requestType":"UpdateDocumentRequest","responseType":"Document","options":{"(google.api.http).patch":"/v1beta1/{document.name=projects/*/databases/*/documents/*/**}","(google.api.http).body":"document","(google.api.method_signature)":"document,update_mask"},"parsedOptions":[{"(google.api.http)":{"patch":"/v1beta1/{document.name=projects/*/databases/*/documents/*/**}","body":"document"}},{"(google.api.method_signature)":"document,update_mask"}]},"DeleteDocument":{"requestType":"DeleteDocumentRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).delete":"/v1beta1/{name=projects/*/databases/*/documents/*/**}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"delete":"/v1beta1/{name=projects/*/databases/*/documents/*/**}"}},{"(google.api.method_signature)":"name"}]},"BatchGetDocuments":{"requestType":"BatchGetDocumentsRequest","responseType":"BatchGetDocumentsResponse","responseStream":true,"options":{"(google.api.http).post":"/v1beta1/{database=projects/*/databases/*}/documents:batchGet","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1beta1/{database=projects/*/databases/*}/documents:batchGet","body":"*"}}]},"BeginTransaction":{"requestType":"BeginTransactionRequest","responseType":"BeginTransactionResponse","options":{"(google.api.http).post":"/v1beta1/{database=projects/*/databases/*}/documents:beginTransaction","(google.api.http).body":"*","(google.api.method_signature)":"database"},"parsedOptions":[{"(google.api.http)":{"post":"/v1beta1/{database=projects/*/databases/*}/documents:beginTransaction","body":"*"}},{"(google.api.method_signature)":"database"}]},"Commit":{"requestType":"CommitRequest","responseType":"CommitResponse","options":{"(google.api.http).post":"/v1beta1/{database=projects/*/databases/*}/documents:commit","(google.api.http).body":"*","(google.api.method_signature)":"database,writes"},"parsedOptions":[{"(google.api.http)":{"post":"/v1beta1/{database=projects/*/databases/*}/documents:commit","body":"*"}},{"(google.api.method_signature)":"database,writes"}]},"Rollback":{"requestType":"RollbackRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).post":"/v1beta1/{database=projects/*/databases/*}/documents:rollback","(google.api.http).body":"*","(google.api.method_signature)":"database,transaction"},"parsedOptions":[{"(google.api.http)":{"post":"/v1beta1/{database=projects/*/databases/*}/documents:rollback","body":"*"}},{"(google.api.method_signature)":"database,transaction"}]},"RunQuery":{"requestType":"RunQueryRequest","responseType":"RunQueryResponse","responseStream":true,"options":{"(google.api.http).post":"/v1beta1/{parent=projects/*/databases/*/documents}:runQuery","(google.api.http).body":"*","(google.api.http).additional_bindings.post":"/v1beta1/{parent=projects/*/databases/*/documents/*/**}:runQuery","(google.api.http).additional_bindings.body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1beta1/{parent=projects/*/databases/*/documents}:runQuery","body":"*","additional_bindings":{"post":"/v1beta1/{parent=projects/*/databases/*/documents/*/**}:runQuery","body":"*"}}}]},"PartitionQuery":{"requestType":"PartitionQueryRequest","responseType":"PartitionQueryResponse","options":{"(google.api.http).post":"/v1beta1/{parent=projects/*/databases/*/documents}:partitionQuery","(google.api.http).body":"*","(google.api.http).additional_bindings.post":"/v1beta1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery","(google.api.http).additional_bindings.body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1beta1/{parent=projects/*/databases/*/documents}:partitionQuery","body":"*","additional_bindings":{"post":"/v1beta1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery","body":"*"}}}]},"Write":{"requestType":"WriteRequest","requestStream":true,"responseType":"WriteResponse","responseStream":true,"options":{"(google.api.http).post":"/v1beta1/{database=projects/*/databases/*}/documents:write","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1beta1/{database=projects/*/databases/*}/documents:write","body":"*"}}]},"Listen":{"requestType":"ListenRequest","requestStream":true,"responseType":"ListenResponse","responseStream":true,"options":{"(google.api.http).post":"/v1beta1/{database=projects/*/databases/*}/documents:listen","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1beta1/{database=projects/*/databases/*}/documents:listen","body":"*"}}]},"ListCollectionIds":{"requestType":"ListCollectionIdsRequest","responseType":"ListCollectionIdsResponse","options":{"(google.api.http).post":"/v1beta1/{parent=projects/*/databases/*/documents}:listCollectionIds","(google.api.http).body":"*","(google.api.http).additional_bindings.post":"/v1beta1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds","(google.api.http).additional_bindings.body":"*","(google.api.method_signature)":"parent"},"parsedOptions":[{"(google.api.http)":{"post":"/v1beta1/{parent=projects/*/databases/*/documents}:listCollectionIds","body":"*","additional_bindings":{"post":"/v1beta1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds","body":"*"}}},{"(google.api.method_signature)":"parent"}]},"BatchWrite":{"requestType":"BatchWriteRequest","responseType":"BatchWriteResponse","options":{"(google.api.http).post":"/v1beta1/{database=projects/*/databases/*}/documents:batchWrite","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1beta1/{database=projects/*/databases/*}/documents:batchWrite","body":"*"}}]},"CreateDocument":{"requestType":"CreateDocumentRequest","responseType":"Document","options":{"(google.api.http).post":"/v1beta1/{parent=projects/*/databases/*/documents/**}/{collection_id}","(google.api.http).body":"document"},"parsedOptions":[{"(google.api.http)":{"post":"/v1beta1/{parent=projects/*/databases/*/documents/**}/{collection_id}","body":"document"}}]}}},"GetDocumentRequest":{"oneofs":{"consistencySelector":{"oneof":["transaction","readTime"]}},"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"mask":{"type":"DocumentMask","id":2},"transaction":{"type":"bytes","id":3},"readTime":{"type":"google.protobuf.Timestamp","id":5}}},"ListDocumentsRequest":{"oneofs":{"consistencySelector":{"oneof":["transaction","readTime"]}},"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"collectionId":{"type":"string","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}},"pageSize":{"type":"int32","id":3},"pageToken":{"type":"string","id":4},"orderBy":{"type":"string","id":6},"mask":{"type":"DocumentMask","id":7},"transaction":{"type":"bytes","id":8},"readTime":{"type":"google.protobuf.Timestamp","id":10},"showMissing":{"type":"bool","id":12}}},"ListDocumentsResponse":{"fields":{"documents":{"rule":"repeated","type":"Document","id":1},"nextPageToken":{"type":"string","id":2}}},"CreateDocumentRequest":{"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"collectionId":{"type":"string","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}},"documentId":{"type":"string","id":3},"document":{"type":"Document","id":4,"options":{"(google.api.field_behavior)":"REQUIRED"}},"mask":{"type":"DocumentMask","id":5}}},"UpdateDocumentRequest":{"fields":{"document":{"type":"Document","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"updateMask":{"type":"DocumentMask","id":2},"mask":{"type":"DocumentMask","id":3},"currentDocument":{"type":"Precondition","id":4}}},"DeleteDocumentRequest":{"fields":{"name":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"currentDocument":{"type":"Precondition","id":2}}},"BatchGetDocumentsRequest":{"oneofs":{"consistencySelector":{"oneof":["transaction","newTransaction","readTime"]}},"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"documents":{"rule":"repeated","type":"string","id":2},"mask":{"type":"DocumentMask","id":3},"transaction":{"type":"bytes","id":4},"newTransaction":{"type":"TransactionOptions","id":5},"readTime":{"type":"google.protobuf.Timestamp","id":7}}},"BatchGetDocumentsResponse":{"oneofs":{"result":{"oneof":["found","missing"]}},"fields":{"found":{"type":"Document","id":1},"missing":{"type":"string","id":2},"transaction":{"type":"bytes","id":3},"readTime":{"type":"google.protobuf.Timestamp","id":4}}},"BeginTransactionRequest":{"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"options":{"type":"TransactionOptions","id":2}}},"BeginTransactionResponse":{"fields":{"transaction":{"type":"bytes","id":1}}},"CommitRequest":{"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"writes":{"rule":"repeated","type":"Write","id":2},"transaction":{"type":"bytes","id":3}}},"CommitResponse":{"fields":{"writeResults":{"rule":"repeated","type":"WriteResult","id":1},"commitTime":{"type":"google.protobuf.Timestamp","id":2}}},"RollbackRequest":{"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"transaction":{"type":"bytes","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"RunQueryRequest":{"oneofs":{"queryType":{"oneof":["structuredQuery"]},"consistencySelector":{"oneof":["transaction","newTransaction","readTime"]}},"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"structuredQuery":{"type":"StructuredQuery","id":2},"transaction":{"type":"bytes","id":5},"newTransaction":{"type":"TransactionOptions","id":6},"readTime":{"type":"google.protobuf.Timestamp","id":7}}},"RunQueryResponse":{"fields":{"transaction":{"type":"bytes","id":2},"document":{"type":"Document","id":1},"readTime":{"type":"google.protobuf.Timestamp","id":3},"skippedResults":{"type":"int32","id":4}}},"PartitionQueryRequest":{"oneofs":{"queryType":{"oneof":["structuredQuery"]}},"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"structuredQuery":{"type":"StructuredQuery","id":2},"partitionCount":{"type":"int64","id":3},"pageToken":{"type":"string","id":4},"pageSize":{"type":"int32","id":5}}},"PartitionQueryResponse":{"fields":{"partitions":{"rule":"repeated","type":"Cursor","id":1},"nextPageToken":{"type":"string","id":2}}},"WriteRequest":{"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"streamId":{"type":"string","id":2},"writes":{"rule":"repeated","type":"Write","id":3},"streamToken":{"type":"bytes","id":4},"labels":{"keyType":"string","type":"string","id":5}}},"WriteResponse":{"fields":{"streamId":{"type":"string","id":1},"streamToken":{"type":"bytes","id":2},"writeResults":{"rule":"repeated","type":"WriteResult","id":3},"commitTime":{"type":"google.protobuf.Timestamp","id":4}}},"ListenRequest":{"oneofs":{"targetChange":{"oneof":["addTarget","removeTarget"]}},"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"addTarget":{"type":"Target","id":2},"removeTarget":{"type":"int32","id":3},"labels":{"keyType":"string","type":"string","id":4}}},"ListenResponse":{"oneofs":{"responseType":{"oneof":["targetChange","documentChange","documentDelete","documentRemove","filter"]}},"fields":{"targetChange":{"type":"TargetChange","id":2},"documentChange":{"type":"DocumentChange","id":3},"documentDelete":{"type":"DocumentDelete","id":4},"documentRemove":{"type":"DocumentRemove","id":6},"filter":{"type":"ExistenceFilter","id":5}}},"Target":{"oneofs":{"targetType":{"oneof":["query","documents"]},"resumeType":{"oneof":["resumeToken","readTime"]}},"fields":{"query":{"type":"QueryTarget","id":2},"documents":{"type":"DocumentsTarget","id":3},"resumeToken":{"type":"bytes","id":4},"readTime":{"type":"google.protobuf.Timestamp","id":11},"targetId":{"type":"int32","id":5},"once":{"type":"bool","id":6}},"nested":{"DocumentsTarget":{"fields":{"documents":{"rule":"repeated","type":"string","id":2}}},"QueryTarget":{"oneofs":{"queryType":{"oneof":["structuredQuery"]}},"fields":{"parent":{"type":"string","id":1},"structuredQuery":{"type":"StructuredQuery","id":2}}}}},"TargetChange":{"fields":{"targetChangeType":{"type":"TargetChangeType","id":1},"targetIds":{"rule":"repeated","type":"int32","id":2},"cause":{"type":"google.rpc.Status","id":3},"resumeToken":{"type":"bytes","id":4},"readTime":{"type":"google.protobuf.Timestamp","id":6}},"nested":{"TargetChangeType":{"values":{"NO_CHANGE":0,"ADD":1,"REMOVE":2,"CURRENT":3,"RESET":4}}}},"ListCollectionIdsRequest":{"fields":{"parent":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"pageSize":{"type":"int32","id":2},"pageToken":{"type":"string","id":3}}},"ListCollectionIdsResponse":{"fields":{"collectionIds":{"rule":"repeated","type":"string","id":1},"nextPageToken":{"type":"string","id":2}}},"BatchWriteRequest":{"fields":{"database":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED"}},"writes":{"rule":"repeated","type":"Write","id":2},"labels":{"keyType":"string","type":"string","id":3}}},"BatchWriteResponse":{"fields":{"writeResults":{"rule":"repeated","type":"WriteResult","id":1},"status":{"rule":"repeated","type":"google.rpc.Status","id":2}}},"StructuredQuery":{"fields":{"select":{"type":"Projection","id":1},"from":{"rule":"repeated","type":"CollectionSelector","id":2},"where":{"type":"Filter","id":3},"orderBy":{"rule":"repeated","type":"Order","id":4},"startAt":{"type":"Cursor","id":7},"endAt":{"type":"Cursor","id":8},"offset":{"type":"int32","id":6},"limit":{"type":"google.protobuf.Int32Value","id":5}},"nested":{"CollectionSelector":{"fields":{"collectionId":{"type":"string","id":2},"allDescendants":{"type":"bool","id":3}}},"Filter":{"oneofs":{"filterType":{"oneof":["compositeFilter","fieldFilter","unaryFilter"]}},"fields":{"compositeFilter":{"type":"CompositeFilter","id":1},"fieldFilter":{"type":"FieldFilter","id":2},"unaryFilter":{"type":"UnaryFilter","id":3}}},"CompositeFilter":{"fields":{"op":{"type":"Operator","id":1},"filters":{"rule":"repeated","type":"Filter","id":2}},"nested":{"Operator":{"values":{"OPERATOR_UNSPECIFIED":0,"AND":1}}}},"FieldFilter":{"fields":{"field":{"type":"FieldReference","id":1},"op":{"type":"Operator","id":2},"value":{"type":"Value","id":3}},"nested":{"Operator":{"values":{"OPERATOR_UNSPECIFIED":0,"LESS_THAN":1,"LESS_THAN_OR_EQUAL":2,"GREATER_THAN":3,"GREATER_THAN_OR_EQUAL":4,"EQUAL":5,"NOT_EQUAL":6,"ARRAY_CONTAINS":7,"IN":8,"ARRAY_CONTAINS_ANY":9,"NOT_IN":10}}}},"UnaryFilter":{"oneofs":{"operandType":{"oneof":["field"]}},"fields":{"op":{"type":"Operator","id":1},"field":{"type":"FieldReference","id":2}},"nested":{"Operator":{"values":{"OPERATOR_UNSPECIFIED":0,"IS_NAN":2,"IS_NULL":3,"IS_NOT_NAN":4,"IS_NOT_NULL":5}}}},"FieldReference":{"fields":{"fieldPath":{"type":"string","id":2}}},"Order":{"fields":{"field":{"type":"FieldReference","id":1},"direction":{"type":"Direction","id":2}}},"Projection":{"fields":{"fields":{"rule":"repeated","type":"FieldReference","id":2}}},"Direction":{"values":{"DIRECTION_UNSPECIFIED":0,"ASCENDING":1,"DESCENDING":2}}}},"Cursor":{"fields":{"values":{"rule":"repeated","type":"Value","id":1},"before":{"type":"bool","id":2}}},"Write":{"oneofs":{"operation":{"oneof":["update","delete","transform"]}},"fields":{"update":{"type":"Document","id":1},"delete":{"type":"string","id":2},"transform":{"type":"DocumentTransform","id":6},"updateMask":{"type":"DocumentMask","id":3},"updateTransforms":{"rule":"repeated","type":"DocumentTransform.FieldTransform","id":7},"currentDocument":{"type":"Precondition","id":4}}},"DocumentTransform":{"fields":{"document":{"type":"string","id":1},"fieldTransforms":{"rule":"repeated","type":"FieldTransform","id":2}},"nested":{"FieldTransform":{"oneofs":{"transformType":{"oneof":["setToServerValue","increment","maximum","minimum","appendMissingElements","removeAllFromArray"]}},"fields":{"fieldPath":{"type":"string","id":1},"setToServerValue":{"type":"ServerValue","id":2},"increment":{"type":"Value","id":3},"maximum":{"type":"Value","id":4},"minimum":{"type":"Value","id":5},"appendMissingElements":{"type":"ArrayValue","id":6},"removeAllFromArray":{"type":"ArrayValue","id":7}},"nested":{"ServerValue":{"values":{"SERVER_VALUE_UNSPECIFIED":0,"REQUEST_TIME":1}}}}}},"WriteResult":{"fields":{"updateTime":{"type":"google.protobuf.Timestamp","id":1},"transformResults":{"rule":"repeated","type":"Value","id":2}}},"DocumentChange":{"fields":{"document":{"type":"Document","id":1},"targetIds":{"rule":"repeated","type":"int32","id":5},"removedTargetIds":{"rule":"repeated","type":"int32","id":6}}},"DocumentDelete":{"fields":{"document":{"type":"string","id":1},"removedTargetIds":{"rule":"repeated","type":"int32","id":6},"readTime":{"type":"google.protobuf.Timestamp","id":4}}},"DocumentRemove":{"fields":{"document":{"type":"string","id":1},"removedTargetIds":{"rule":"repeated","type":"int32","id":2},"readTime":{"type":"google.protobuf.Timestamp","id":4}}},"ExistenceFilter":{"fields":{"targetId":{"type":"int32","id":1},"count":{"type":"int32","id":2}}},"UndeliverableFirstGenEvent":{"fields":{"message":{"type":"string","id":1},"reason":{"type":"Reason","id":2},"documentName":{"type":"string","id":3},"documentChangeType":{"type":"DocumentChangeType","id":4},"functionName":{"rule":"repeated","type":"string","id":5},"triggeredTime":{"type":"google.protobuf.Timestamp","id":6}},"nested":{"Reason":{"values":{"REASON_UNSPECIFIED":0,"EXCEEDING_SIZE_LIMIT":1}},"DocumentChangeType":{"values":{"DOCUMENT_CHANGE_TYPE_UNSPECIFIED":0,"CREATE":1,"DELETE":2,"UPDATE":3}}}}}}}},"type":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/type/dayofweek;dayofweek","java_multiple_files":true,"java_outer_classname":"DayOfWeekProto","java_package":"com.google.type","objc_class_prefix":"GTP"},"nested":{"LatLng":{"fields":{"latitude":{"type":"double","id":1},"longitude":{"type":"double","id":2}}},"DayOfWeek":{"values":{"DAY_OF_WEEK_UNSPECIFIED":0,"MONDAY":1,"TUESDAY":2,"WEDNESDAY":3,"THURSDAY":4,"FRIDAY":5,"SATURDAY":6,"SUNDAY":7}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ResourceProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"},"apiVersion":{"type":"string","id":525000001,"extend":"google.protobuf.ServiceOptions"},"CommonLanguageSettings":{"fields":{"referenceDocsUri":{"type":"string","id":1,"options":{"deprecated":true}},"destinations":{"rule":"repeated","type":"ClientLibraryDestination","id":2},"selectiveGapicGeneration":{"type":"SelectiveGapicGeneration","id":3}}},"ClientLibrarySettings":{"fields":{"version":{"type":"string","id":1},"launchStage":{"type":"LaunchStage","id":2},"restNumericEnums":{"type":"bool","id":3},"javaSettings":{"type":"JavaSettings","id":21},"cppSettings":{"type":"CppSettings","id":22},"phpSettings":{"type":"PhpSettings","id":23},"pythonSettings":{"type":"PythonSettings","id":24},"nodeSettings":{"type":"NodeSettings","id":25},"dotnetSettings":{"type":"DotnetSettings","id":26},"rubySettings":{"type":"RubySettings","id":27},"goSettings":{"type":"GoSettings","id":28}}},"Publishing":{"fields":{"methodSettings":{"rule":"repeated","type":"MethodSettings","id":2},"newIssueUri":{"type":"string","id":101},"documentationUri":{"type":"string","id":102},"apiShortName":{"type":"string","id":103},"githubLabel":{"type":"string","id":104},"codeownerGithubTeams":{"rule":"repeated","type":"string","id":105},"docTagPrefix":{"type":"string","id":106},"organization":{"type":"ClientLibraryOrganization","id":107},"librarySettings":{"rule":"repeated","type":"ClientLibrarySettings","id":109},"protoReferenceDocumentationUri":{"type":"string","id":110},"restReferenceDocumentationUri":{"type":"string","id":111}}},"JavaSettings":{"fields":{"libraryPackage":{"type":"string","id":1},"serviceClassNames":{"keyType":"string","type":"string","id":2},"common":{"type":"CommonLanguageSettings","id":3}}},"CppSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1}}},"PhpSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1}}},"PythonSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1},"experimentalFeatures":{"type":"ExperimentalFeatures","id":2}},"nested":{"ExperimentalFeatures":{"fields":{"restAsyncIoEnabled":{"type":"bool","id":1},"protobufPythonicTypesEnabled":{"type":"bool","id":2}}}}},"NodeSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1}}},"DotnetSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1},"renamedServices":{"keyType":"string","type":"string","id":2},"renamedResources":{"keyType":"string","type":"string","id":3},"ignoredResources":{"rule":"repeated","type":"string","id":4},"forcedNamespaceAliases":{"rule":"repeated","type":"string","id":5},"handwrittenSignatures":{"rule":"repeated","type":"string","id":6}}},"RubySettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1}}},"GoSettings":{"fields":{"common":{"type":"CommonLanguageSettings","id":1},"renamedServices":{"keyType":"string","type":"string","id":2}}},"MethodSettings":{"fields":{"selector":{"type":"string","id":1},"longRunning":{"type":"LongRunning","id":2},"autoPopulatedFields":{"rule":"repeated","type":"string","id":3}},"nested":{"LongRunning":{"fields":{"initialPollDelay":{"type":"google.protobuf.Duration","id":1},"pollDelayMultiplier":{"type":"float","id":2},"maxPollDelay":{"type":"google.protobuf.Duration","id":3},"totalPollTimeout":{"type":"google.protobuf.Duration","id":4}}}}},"ClientLibraryOrganization":{"values":{"CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED":0,"CLOUD":1,"ADS":2,"PHOTOS":3,"STREET_VIEW":4,"SHOPPING":5,"GEO":6,"GENERATIVE_AI":7}},"ClientLibraryDestination":{"values":{"CLIENT_LIBRARY_DESTINATION_UNSPECIFIED":0,"GITHUB":10,"PACKAGE_MANAGER":20}},"SelectiveGapicGeneration":{"fields":{"methods":{"rule":"repeated","type":"string","id":1},"generateOmittedAsInternal":{"type":"bool","id":2}}},"LaunchStage":{"values":{"LAUNCH_STAGE_UNSPECIFIED":0,"UNIMPLEMENTED":6,"PRELAUNCH":7,"EARLY_ACCESS":1,"ALPHA":2,"BETA":3,"GA":4,"DEPRECATED":5}},"fieldBehavior":{"rule":"repeated","type":"google.api.FieldBehavior","id":1052,"extend":"google.protobuf.FieldOptions","options":{"packed":false}},"FieldBehavior":{"values":{"FIELD_BEHAVIOR_UNSPECIFIED":0,"OPTIONAL":1,"REQUIRED":2,"OUTPUT_ONLY":3,"INPUT_ONLY":4,"IMMUTABLE":5,"UNORDERED_LIST":6,"NON_EMPTY_DEFAULT":7,"IDENTIFIER":8}},"resourceReference":{"type":"google.api.ResourceReference","id":1055,"extend":"google.protobuf.FieldOptions"},"resourceDefinition":{"rule":"repeated","type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.FileOptions"},"resource":{"type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.MessageOptions"},"ResourceDescriptor":{"fields":{"type":{"type":"string","id":1},"pattern":{"rule":"repeated","type":"string","id":2},"nameField":{"type":"string","id":3},"history":{"type":"History","id":4},"plural":{"type":"string","id":5},"singular":{"type":"string","id":6},"style":{"rule":"repeated","type":"Style","id":10}},"nested":{"History":{"values":{"HISTORY_UNSPECIFIED":0,"ORIGINALLY_SINGLE_PATTERN":1,"FUTURE_MULTI_PATTERN":2}},"Style":{"values":{"STYLE_UNSPECIFIED":0,"DECLARATIVE_FRIENDLY":1}}}},"ResourceReference":{"fields":{"type":{"type":"string","id":1},"childType":{"type":"string","id":2}}}}},"rpc":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/rpc/status;status","java_multiple_files":true,"java_outer_classname":"StatusProto","java_package":"com.google.rpc","objc_class_prefix":"RPC"},"nested":{"Status":{"fields":{"code":{"type":"int32","id":1},"message":{"type":"string","id":2},"details":{"rule":"repeated","type":"google.protobuf.Any","id":3}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client_config.json":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client_config.json ***!
  \**********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"interfaces":{"google.firestore.admin.v1.FirestoreAdmin":{"retry_codes":{"non_idempotent":[],"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"],"deadline_exceeded_internal_unavailable":["DEADLINE_EXCEEDED","INTERNAL","UNAVAILABLE"]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":60000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":60000,"total_timeout_millis":600000}},"methods":{"CreateIndex":{"timeout_millis":60000,"retry_codes_name":"non_idempotent","retry_params_name":"default"},"ListIndexes":{"timeout_millis":60000,"retry_codes_name":"deadline_exceeded_internal_unavailable","retry_params_name":"default"},"GetIndex":{"timeout_millis":60000,"retry_codes_name":"deadline_exceeded_internal_unavailable","retry_params_name":"default"},"DeleteIndex":{"timeout_millis":60000,"retry_codes_name":"deadline_exceeded_internal_unavailable","retry_params_name":"default"},"GetField":{"timeout_millis":60000,"retry_codes_name":"deadline_exceeded_internal_unavailable","retry_params_name":"default"},"UpdateField":{"timeout_millis":60000,"retry_codes_name":"non_idempotent","retry_params_name":"default"},"ListFields":{"timeout_millis":60000,"retry_codes_name":"deadline_exceeded_internal_unavailable","retry_params_name":"default"},"ExportDocuments":{"timeout_millis":60000,"retry_codes_name":"non_idempotent","retry_params_name":"default"},"ImportDocuments":{"timeout_millis":60000,"retry_codes_name":"non_idempotent","retry_params_name":"default"},"BulkDeleteDocuments":{"timeout_millis":60000,"retry_codes_name":"non_idempotent","retry_params_name":"default"},"CreateDatabase":{"timeout_millis":120000,"retry_codes_name":"non_idempotent","retry_params_name":"default"},"GetDatabase":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"ListDatabases":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"UpdateDatabase":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"DeleteDatabase":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"GetBackup":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"ListBackups":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"DeleteBackup":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"RestoreDatabase":{"timeout_millis":120000,"retry_codes_name":"non_idempotent","retry_params_name":"default"},"CreateBackupSchedule":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"GetBackupSchedule":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"ListBackupSchedules":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"UpdateBackupSchedule":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"DeleteBackupSchedule":{"retry_codes_name":"non_idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/v1/firestore_client_config.json":
/*!****************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/v1/firestore_client_config.json ***!
  \****************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"interfaces":{"google.firestore.v1.Firestore":{"retry_codes":{"non_idempotent":[],"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"],"deadline_exceeded_resource_exhausted_internal_unavailable":["DEADLINE_EXCEEDED","RESOURCE_EXHAUSTED","INTERNAL","UNAVAILABLE"],"resource_exhausted_unavailable":["RESOURCE_EXHAUSTED","UNAVAILABLE"],"resource_exhausted_aborted_unavailable":["RESOURCE_EXHAUSTED","ABORTED","UNAVAILABLE"]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":60000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":60000,"total_timeout_millis":600000}},"methods":{"GetDocument":{"timeout_millis":60000,"retry_codes_name":"deadline_exceeded_resource_exhausted_internal_unavailable","retry_params_name":"default"},"ListDocuments":{"timeout_millis":60000,"retry_codes_name":"deadline_exceeded_resource_exhausted_internal_unavailable","retry_params_name":"default"},"UpdateDocument":{"timeout_millis":60000,"retry_codes_name":"resource_exhausted_unavailable","retry_params_name":"default"},"DeleteDocument":{"timeout_millis":60000,"retry_codes_name":"deadline_exceeded_resource_exhausted_internal_unavailable","retry_params_name":"default"},"BatchGetDocuments":{"timeout_millis":300000,"retry_codes_name":"deadline_exceeded_resource_exhausted_internal_unavailable","retry_params_name":"default"},"BeginTransaction":{"timeout_millis":60000,"retry_codes_name":"deadline_exceeded_resource_exhausted_internal_unavailable","retry_params_name":"default"},"Commit":{"timeout_millis":60000,"retry_codes_name":"resource_exhausted_unavailable","retry_params_name":"default"},"Rollback":{"timeout_millis":60000,"retry_codes_name":"deadline_exceeded_resource_exhausted_internal_unavailable","retry_params_name":"default"},"RunQuery":{"timeout_millis":300000,"retry_codes_name":"deadline_exceeded_resource_exhausted_internal_unavailable","retry_params_name":"default"},"RunAggregationQuery":{"timeout_millis":300000,"retry_codes_name":"deadline_exceeded_resource_exhausted_internal_unavailable","retry_params_name":"default"},"PartitionQuery":{"timeout_millis":300000,"retry_codes_name":"deadline_exceeded_resource_exhausted_internal_unavailable","retry_params_name":"default"},"Write":{"timeout_millis":86400000,"retry_codes_name":"non_idempotent","retry_params_name":"default"},"Listen":{"timeout_millis":86400000,"retry_codes_name":"deadline_exceeded_resource_exhausted_internal_unavailable","retry_params_name":"default"},"ListCollectionIds":{"timeout_millis":60000,"retry_codes_name":"deadline_exceeded_resource_exhausted_internal_unavailable","retry_params_name":"default"},"BatchWrite":{"timeout_millis":60000,"retry_codes_name":"resource_exhausted_aborted_unavailable","retry_params_name":"default"},"CreateDocument":{"timeout_millis":60000,"retry_codes_name":"resource_exhausted_unavailable","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client_config.json":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client_config.json ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"interfaces":{"google.firestore.v1beta1.Firestore":{"retry_codes":{"non_idempotent":[],"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":60000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":60000,"total_timeout_millis":600000}},"methods":{"GetDocument":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"ListDocuments":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"UpdateDocument":{"timeout_millis":60000,"retry_codes_name":"non_idempotent","retry_params_name":"default"},"DeleteDocument":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"BatchGetDocuments":{"timeout_millis":300000,"retry_codes_name":"idempotent","retry_params_name":"default"},"BeginTransaction":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"Commit":{"timeout_millis":60000,"retry_codes_name":"non_idempotent","retry_params_name":"default"},"Rollback":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"RunQuery":{"timeout_millis":300000,"retry_codes_name":"idempotent","retry_params_name":"default"},"PartitionQuery":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"Write":{"timeout_millis":86400000,"retry_codes_name":"non_idempotent","retry_params_name":"default"},"Listen":{"timeout_millis":86400000,"retry_codes_name":"idempotent","retry_params_name":"default"},"ListCollectionIds":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"BatchWrite":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"CreateDocument":{"timeout_millis":60000,"retry_codes_name":"non_idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/firestore/package.json":
/*!***********************************************************!*\
  !*** ./node_modules/@google-cloud/firestore/package.json ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@google-cloud/firestore","description":"Firestore Client Library for Node.js","version":"7.11.5","license":"Apache-2.0","author":"Google Inc.","engines":{"node":">=14.0.0"},"repository":"googleapis/nodejs-firestore","main":"./build/src/index.js","types":"./types/firestore.d.ts","files":["build/protos","build/src","!build/src/**/*.map","types"],"keywords":["google apis client","google api client","google apis","google api","google","google cloud platform","google cloud","cloud","firestore"],"scripts":{"precloud-rad":"npm run compile","cloud-rad":"NO_UPLOAD=1 npx @google-cloud/cloud-rad","preapi-report":"npm run compile","api-report":"node scripts/api-report.js","predocs":"npm run compile","docs":"jsdoc -c .jsdoc.js","system-test:rest":"FIRESTORE_PREFER_REST=true mocha build/system-test --timeout 1200000","system-test:named-db:rest":"FIRESTORE_NAMED_DATABASE=test-db FIRESTORE_PREFER_REST=true mocha build/system-test --timeout 1200000","system-test:grpc":"mocha build/system-test --timeout 1200000","system-test:named-db:grpc":"FIRESTORE_NAMED_DATABASE=test-db mocha build/system-test --timeout 1200000","system-test:emulator:rest":"FIRESTORE_EMULATOR_HOST=localhost:8080 FIRESTORE_PREFER_REST=true mocha build/system-test --timeout 1200000","system-test:named-db:emulator:rest":"FIRESTORE_NAMED_DATABASE=test-db FIRESTORE_EMULATOR_HOST=localhost:8080 FIRESTORE_PREFER_REST=true mocha build/system-test --timeout 1200000","system-test:emulator:grpc":"FIRESTORE_EMULATOR_HOST=localhost:8080 mocha build/system-test --timeout 1200000","system-test:named-db:emulator:grpc":"FIRESTORE_NAMED_DATABASE=test-db FIRESTORE_EMULATOR_HOST=localhost:8080 mocha build/system-test --timeout 1200000","system-test":"npm run system-test:grpc && npm run system-test:rest && npm run system-test:named-db:grpc && npm run system-test:named-db:rest","system-test:emulator":"npm run system-test:emulator:grpc && npm run system-test:emulator:rest && npm run system-test:named-db:emulator:grpc && npm run system-test:named-db:emulator:rest","presystem-test":"npm run compile","samples-test":"npm link && cd samples/ && npm link ../ && npm test && cd ../","conformance":"mocha build/conformance","preconformance":"npm run compile","test-only":"c8 mocha build/test","pretest-only":"npm run compile","test":"npm run test-only && npm run conformance","lint":"gts check","clean":"gts clean","compile":"tsc -p .","postcompile":"node scripts/init-directories.js && cp -r dev/protos build && cp dev/src/v1beta1/*.json build/src/v1beta1/ && cp dev/src/v1/*.json build/src/v1/ && cp dev/conformance/test-definition.proto build/conformance && cp dev/conformance/conformance-tests/*.json build/conformance/conformance-tests && minifyProtoJson","fix":"gts fix","prepare":"npm run compile","docs-test":"linkinator docs","predocs-test":"npm run docs","prelint":"cd samples; npm link ../; npm install","precompile":"gts clean"},"dependencies":{"@opentelemetry/api":"^1.3.0","fast-deep-equal":"^3.1.1","functional-red-black-tree":"^1.0.1","google-gax":"^4.3.3","protobufjs":"^7.2.6"},"devDependencies":{"@google-cloud/promisify":"legacy-14","@google-cloud/trace-agent":"^8.0.0","@googleapis/cloudtrace":"^1.1.2","@google-cloud/cloud-rad":"^0.4.0","@google-cloud/opentelemetry-cloud-trace-exporter":"^2.0.0","@opentelemetry/context-async-hooks":"^1.24.1","@opentelemetry/sdk-trace-node":"^1.24.1","@types/assert":"^1.4.0","@types/chai":"^4.2.7","@types/chai-as-promised":"^7.1.2","@types/duplexify":"^3.5.0","@types/extend":"^3.0.0","@types/mocha":"^9.0.0","@types/node":"^22.0.0","@types/sinon":"^17.0.0","@types/through2":"^2.0.34","c8":"^9.0.0","chai":"^4.1.2","chai-as-promised":"^7.1.1","codecov":"^3.6.1","duplexify":"^4.0.0","execa":"^5.1.1","extend":"^3.0.2","fs-extra":"10.1.0","gapic-tools":"^0.4.0","gts":"^5.0.1","jsdoc":"^4.0.0","jsdoc-fresh":"^3.0.0","jsdoc-region-tag":"^3.0.0","length-prefixed-json-stream":"^1.0.1","linkinator":"^3.0.0","mkdirp":"^3.0.0","mocha":"^9.2.2","protobufjs-cli":"^1.1.2","proxyquire":"^2.1.3","nise":"6.0.0","sinon":"^18.0.0","path-to-regexp":"^6.0.0","through2":"^4.0.0","ts-node":"^10.0.0","typescript":"^5.2.2"}}');

/***/ })

};
;