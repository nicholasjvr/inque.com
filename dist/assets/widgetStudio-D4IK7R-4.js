import"./modulepreload-polyfill-B5Qt9EMX.js";import{p as r,c}from"./cloud-upload-Bq9wGJN8.js";/* empty css                      */import{auth as p,db as h}from"./firebase-core-BO8UvLyb.js";import{getDoc as u,doc as g,collection as f,query as m,where as v,getDocs as y,updateDoc as w}from"https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-functions.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-app.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-analytics.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-auth.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-storage.js";class I{constructor(){this.currentUser=null,this.userProfile=null,this.slots=new Map,this.uploadingSlots=new Set,this.selectedFiles=new Map,console.log("[WIDGET STUDIO] Widget Studio Manager initialized")}log(e,t=null){console.log(`[WIDGET STUDIO] ${e}`,t||"")}error(e,t=null){console.error(`[WIDGET STUDIO ERROR] ${e}`,t||"")}async init(){try{this.log("Initializing Widget Studio page"),await this.waitForAuth(),await this.loadUserProfile(),this.setupEventListeners(),await this.loadExistingWidgets(),this.updateStudioStats(),await this.initializeProfileIntegration(),await this.testCloudUploadConnection(),this.log("Widget Studio page initialization complete")}catch(e){this.error("Failed to initialize Widget Studio page",e),this.showToast("Failed to initialize Widget Studio","error")}}async waitForAuth(){return new Promise(e=>{if(p.currentUser)e();else{const t=p.onAuthStateChanged(s=>{s&&(t(),e())})}})}async loadUserProfile(){try{if(this.currentUser=p.currentUser,!this.currentUser)throw new Error("No authenticated user");this.log("Loading user profile",{uid:this.currentUser.uid});const e=await u(g(h,"users",this.currentUser.uid));if(e.exists())this.userProfile=e.data(),this.updateUserDisplay(),this.log("User profile loaded successfully");else throw new Error("User profile not found")}catch(e){throw this.error("Failed to load user profile",e),e}}updateUserDisplay(){if(!this.userProfile)return;const e=document.getElementById("userName");e&&(e.textContent=this.userProfile.name||"User");const t=document.getElementById("userAvatar");t&&this.userProfile.photoURL&&(t.style.backgroundImage=`url(${this.userProfile.photoURL})`,t.innerHTML="")}async initializeProfileIntegration(){try{this.log("Initializing profile dashboard integration"),r?(await r.init(),this.log("Profile dashboard manager initialized"),this.applyDashboardStylingToPreviews()):this.log("Profile dashboard manager not available")}catch(e){this.error("Failed to initialize profile integration",e)}}async testCloudUploadConnection(){try{if(this.log("Testing cloud upload connection"),!c)throw new Error("Cloud upload manager not available");if(!c.functions)throw new Error("Firebase functions not initialized");this.log("Cloud upload connection test passed")}catch(e){this.error("Cloud upload connection test failed",e),this.showToast("Warning: Cloud upload may not work properly","warning")}}applyDashboardStylingToPreviews(){try{if(!r)return;const e=document.querySelectorAll(".preview-modal .widget-iframe");e.forEach(t=>{r.applyDashboardSettings(t)}),this.log("Applied dashboard styling to preview elements",{count:e.length})}catch(e){this.error("Failed to apply dashboard styling to previews",e)}}setupEventListeners(){this.log("Setting up event listeners");for(let o=1;o<=3;o++){const l=document.getElementById(`fileInput${o}`),a=document.getElementById(`uploadArea${o}`);l&&a&&(this.setupFileInput(l,a,o),this.setupDragAndDrop(a,o))}for(let o=1;o<=3;o++){const l=document.getElementById(`previewBtn${o}`);l&&l.addEventListener("click",()=>this.handlePreview(o))}for(let o=1;o<=3;o++){const l=document.getElementById(`uploadBtn${o}`);l&&l.addEventListener("click",()=>this.handleUpload(o))}document.querySelectorAll(".clear-files-btn").forEach(o=>{o.addEventListener("click",l=>{const a=l.target.dataset.slot;this.clearSlotFiles(a)})});const t=document.getElementById("saveAllBtn");t&&t.addEventListener("click",()=>this.saveAllChanges());const s=document.getElementById("refreshBtn");s&&s.addEventListener("click",()=>this.refreshStudio());const i=document.getElementById("previewModalClose");i&&i.addEventListener("click",()=>this.hidePreviewModal());const n=document.getElementById("previewModal");n&&n.addEventListener("click",o=>{o.target===n&&this.hidePreviewModal()}),this.log("Event listeners setup complete")}setupFileInput(e,t,s){e.addEventListener("change",i=>{this.log(`Files selected for slot ${s}`,{count:i.target.files.length}),this.handleFileSelection(i.target.files,s)}),t.addEventListener("click",i=>{i.target!==e&&(i.preventDefault(),e.click())}),e.addEventListener("click",i=>{i.stopPropagation()})}setupDragAndDrop(e,t){e.addEventListener("dragover",s=>{s.preventDefault(),e.classList.add("dragover")}),e.addEventListener("dragleave",s=>{s.preventDefault(),e.classList.remove("dragover")}),e.addEventListener("drop",s=>{s.preventDefault(),e.classList.remove("dragover");const i=Array.from(s.dataTransfer.files);this.log(`Files dropped on slot ${t}`,{count:i.length}),this.handleFileSelection(i,t)})}handleFileSelection(e,t){!e||e.length===0||(this.selectedFiles.set(t,Array.from(e)),this.updateFileDisplay(t,e),this.updateFileInputDisplay(t,e),this.updateSlotStatus(t,"Files Selected"),this.updateSlotButtons(t,!0),this.log(`Files processed for slot ${t}`,{count:e.length}))}updateFileDisplay(e,t){const s=document.getElementById(`selectedFiles${e}`),i=document.getElementById(`filesList${e}`),n=document.getElementById(`placeholder${e}`);!s||!i||!n||(n.style.display="none",s.style.display="block",i.innerHTML="",t.forEach(o=>{const l=this.createFileItem(o);i.appendChild(l)}))}updateFileInputDisplay(e,t){if(!document.getElementById(`fileInput${e}`))return;const i=Array.from(t).map(o=>o.name).join(", "),n=document.getElementById(`uploadArea${e}`);if(n){n.classList.add("has-files");const o=document.getElementById(`placeholder${e}`);o&&(o.innerHTML,o.innerHTML=`
          <span class="upload-icon">‚úÖ</span>
          <p>${t.length} file(s) selected</p>
          <span class="upload-hint">Click to change files</span>
        `)}this.log(`File input display updated for slot ${e}`,{fileCount:t.length,fileNames:i})}createFileItem(e){const t=document.createElement("div");t.className="file-item";const s=this.getFileIcon(e.name),i=this.formatFileSize(e.size);return t.innerHTML=`
      <div class="file-info">
        <span class="file-icon">${s}</span>
        <span class="file-name" title="${e.name}">${e.name}</span>
        <span class="file-size">${i}</span>
      </div>
      <button class="remove-file" title="Remove file">√ó</button>
    `,t.querySelector(".remove-file").addEventListener("click",()=>{this.removeFile(e,t)}),t}getFileIcon(e){const t=e.split(".").pop()?.toLowerCase();return{html:"üåê",css:"üé®",js:"‚ö°",png:"üñºÔ∏è",jpg:"üñºÔ∏è",jpeg:"üñºÔ∏è",gif:"üñºÔ∏è",svg:"üñºÔ∏è",json:"üìÑ",txt:"üìù",md:"üìù"}[t]||"üìÑ"}formatFileSize(e){if(e===0)return"0 Bytes";const t=1024,s=["Bytes","KB","MB","GB"],i=Math.floor(Math.log(e)/Math.log(t));return parseFloat((e/Math.pow(t,i)).toFixed(2))+" "+s[i]}removeFile(e,t){t.remove();const s=this.getSlotNumberFromFileItem(t);if(s){const n=(this.selectedFiles.get(s)||[]).filter(o=>o!==e);this.selectedFiles.set(s,n),n.length===0&&this.clearSlotFiles(s)}}getSlotNumberFromFileItem(e){for(let t=1;t<=3;t++){const s=document.getElementById(`filesList${t}`);if(s&&s.contains(e))return t}return null}clearSlotFiles(e){this.selectedFiles.delete(e);const t=document.getElementById(`selectedFiles${e}`),s=document.getElementById(`placeholder${e}`),i=document.getElementById(`uploadArea${e}`),n=document.getElementById(`fileInput${e}`);t&&(t.style.display="none"),s&&(s.style.display="block",s.innerHTML=`
        <span class="upload-icon">üìÅ</span>
        <p>Drop files here or click to upload</p>
        <span class="upload-hint">Supports HTML, CSS, JS, images, and more</span>
      `),i&&i.classList.remove("has-files"),n&&(n.value=""),this.updateSlotStatus(e,"Available"),this.updateSlotButtons(e,!1),this.log(`Slot ${e} files cleared`)}updateSlotStatus(e,t){const s=document.getElementById(`slot${e}Status`);s&&(s.textContent=t)}updateSlotButtons(e,t){const s=document.getElementById(`previewBtn${e}`),i=document.getElementById(`uploadBtn${e}`);s&&(s.disabled=!t),i&&(i.disabled=!t)}async handlePreview(e){try{const t=this.selectedFiles.get(e);if(!t||t.length===0){this.showToast("No files selected for preview","warning");return}this.log(`Showing preview for slot ${e}`,{fileCount:t.length}),this.showPreviewModal();const s=await this.generatePreviewContent(t),i=document.getElementById("previewModalBody");i&&(i.innerHTML=s,setTimeout(()=>{this.applyDashboardStylingToPreviews()},100))}catch(t){this.error("Failed to show preview",t),this.showToast("Failed to generate preview","error")}}async generatePreviewContent(e){let t='<div class="preview-content">';for(const s of e){const i=this.getFileIcon(s.name),n=this.formatFileSize(s.size);if(t+=`
        <div class="preview-file-item">
          <div class="preview-file-header">
            <span class="preview-file-icon">${i}</span>
            <span class="preview-file-name">${s.name}</span>
            <span class="preview-file-size">${n}</span>
          </div>
      `,s.type.startsWith("image/"))t+=`<img src="${URL.createObjectURL(s)}" alt="${s.name}" style="max-width: 100%; max-height: 300px; border-radius: 8px;">`;else if(s.type==="text/html"||s.type==="text/css"||s.type==="text/javascript"||s.type==="text/plain"){const o=await this.readFileAsText(s);t+=`<pre class="preview-code"><code>${this.escapeHtml(o)}</code></pre>`}else t+='<p class="preview-no-preview">Preview not available for this file type</p>';t+="</div>"}return t+="</div>",t}async readFileAsText(e){return new Promise(t=>{const s=new FileReader;s.onload=i=>t(i.target.result),s.readAsText(e)})}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}showPreviewModal(){const e=document.getElementById("previewModal");e&&e.classList.add("show")}hidePreviewModal(){const e=document.getElementById("previewModal");e&&e.classList.remove("show")}async handleUpload(e){try{const t=this.selectedFiles.get(e);if(!t||t.length===0){this.showToast("No files selected for upload","warning");return}if(this.uploadingSlots.has(e)){this.showToast("Upload already in progress for this slot","warning");return}this.log(`Starting upload for slot ${e}`,{fileCount:t.length}),this.uploadingSlots.add(e),this.updateSlotStatus(e,"Uploading..."),this.updateSlotButtons(e,!1),this.showUploadProgress(e);const s=document.getElementById(`title${e}`)?.value||`Widget ${e}`,i=document.getElementById(`description${e}`)?.value||"",n=document.getElementById(`tags${e}`)?.value||"",o=await c.uploadWidgetFiles(t,e,{title:s,description:i,tags:n,slot:e});if(this.log(`Upload result for slot ${e}`,o),o.success)this.log(`Upload successful for slot ${e}`,o),this.showToast(`Widget uploaded successfully to slot ${e}!`,"success"),this.updateSlotStatus(e,"Active"),this.slots.set(e,{widgetId:o.widgetId,title:s,description:i,tags:n,files:t.map(l=>({name:l.name,size:l.size,type:l.type})),uploadedAt:new Date,slot:e}),this.updateStudioStats();else throw this.error(`Upload failed for slot ${e}`,o),new Error(o.message||"Upload failed")}catch(t){this.error(`Upload failed for slot ${e}`,t),this.showToast(`Upload failed: ${t.message}`,"error"),this.updateSlotStatus(e,"Upload Failed"),this.updateSlotButtons(e,!0)}finally{this.hideUploadProgress(e),this.uploadingSlots.delete(e)}}showUploadProgress(e){const t=document.getElementById(`progress${e}`);if(t){t.style.display="block";let s=0;const i=document.getElementById(`progressFill${e}`),n=document.getElementById(`progressText${e}`),o=setInterval(()=>{s+=Math.random()*15,s>=90&&(s=90),i&&(i.style.width=`${s}%`),n&&(n.textContent=`${Math.round(s)}%`),s>=90&&clearInterval(o)},200);this.progressIntervals=this.progressIntervals||new Map,this.progressIntervals.set(e,o)}}hideUploadProgress(e){const t=document.getElementById(`progress${e}`);t&&(t.style.display="none");const s=document.getElementById(`progressFill${e}`),i=document.getElementById(`progressText${e}`);s&&(s.style.width="100%"),i&&(i.textContent="100%"),this.progressIntervals&&this.progressIntervals.has(e)&&(clearInterval(this.progressIntervals.get(e)),this.progressIntervals.delete(e))}async loadExistingWidgets(){try{if(!this.currentUser)return;this.log("Loading existing widgets");const e=f(h,"widgets"),t=m(e,v("userId","==",this.currentUser.uid));(await y(t)).forEach(i=>{const n=i.data(),o=n.slot;o&&o>=1&&o<=3&&(this.slots.set(o,n),this.updateSlotStatus(o,"Active"),this.updateSlotButtons(o,!1),this.updateSlotForm(o,n))}),this.log("Existing widgets loaded",{count:this.slots.size})}catch(e){this.error("Failed to load existing widgets",e)}}updateSlotForm(e,t){const s=document.getElementById(`title${e}`),i=document.getElementById(`description${e}`),n=document.getElementById(`tags${e}`);s&&(s.value=t.title||""),i&&(i.value=t.description||""),n&&(n.value=t.tags||"")}updateStudioStats(){const e=this.slots.size,t=Array.from(this.slots.values()).filter(l=>l.status!=="deleted").length,s=Array.from(this.slots.values()).reduce((l,a)=>l+(a.files?.length||0),0),i=document.getElementById("totalWidgets"),n=document.getElementById("activeSlots"),o=document.getElementById("totalFiles");i&&(i.textContent=e),n&&(n.textContent=t),o&&(o.textContent=s)}async saveAllChanges(){try{this.log("Saving all changes");const e=[];for(let t=1;t<=3;t++){const s=document.getElementById(`title${t}`)?.value||"",i=document.getElementById(`description${t}`)?.value||"",n=document.getElementById(`tags${t}`)?.value||"";if(this.slots.has(t)){const o=this.slots.get(t);(o.title!==s||o.description!==i||o.tags!==n)&&e.push({slot:t,title:s,description:i,tags:n,widgetId:o.widgetId})}}if(e.length===0){this.showToast("No changes to save","info");return}for(const t of e){await w(g(h,"widgets",t.widgetId),{title:t.title,description:t.description,tags:t.tags,updatedAt:new Date});const s=this.slots.get(t.slot);s&&(s.title=t.title,s.description=t.description,s.tags=t.tags)}this.showToast(`Saved ${e.length} changes successfully!`,"success"),this.log("All changes saved successfully")}catch(e){this.error("Failed to save changes",e),this.showToast("Failed to save changes","error")}}async refreshStudio(){try{this.log("Refreshing studio"),this.slots.clear(),this.selectedFiles.clear(),this.uploadingSlots.clear();for(let e=1;e<=3;e++)this.clearSlotFiles(e),this.updateSlotForm(e,{title:"",description:"",tags:""});await this.loadExistingWidgets(),this.updateStudioStats(),this.showToast("Studio refreshed successfully!","success"),this.log("Studio refresh complete")}catch(e){this.error("Failed to refresh studio",e),this.showToast("Failed to refresh studio","error")}}showToast(e,t="info"){const s=document.getElementById("toastContainer");if(!s)return;const i=document.createElement("div");i.className=`toast ${t}`,i.textContent=e,s.appendChild(i),setTimeout(()=>{i.parentNode&&i.parentNode.removeChild(i)},5e3)}}document.addEventListener("DOMContentLoaded",async()=>{console.log("[WIDGET STUDIO] DOM Content Loaded - Starting initialization");try{await new I().init(),console.log("[WIDGET STUDIO] Widget Studio page ready")}catch(d){console.error("[WIDGET STUDIO] Failed to initialize",d)}});
