import{getFunctions as g,httpsCallable as n}from"https://www.gstatic.com/firebasejs/11.10.0/firebase-functions.js";import{a as d}from"./auth-aW8ghBAp.js";class p{constructor(){this.functions=g(void 0,"us-central1"),this.log("Cloud Upload Manager initialized with region: us-central1")}log(t,o=null){console.log(`[CLOUD UPLOAD] ${t}`,o||"")}error(t,o=null){console.error(`[CLOUD UPLOAD ERROR] ${t}`,o||"")}async fileToBase64(t){return new Promise((o,i)=>{const e=new FileReader;e.onload=()=>{const a=e.result.split(",")[1];o({name:t.name,type:t.type,size:t.size,data:a})},e.onerror=i,e.readAsDataURL(t)})}async uploadWidgetFiles(t,o,i={}){try{if(this.log("Starting widget upload via Cloud Functions",{fileCount:t.length,slot:o,isZipUpload:i.isZipUpload}),!d.currentUser)throw new Error("User must be authenticated to upload files");if(i.isZipUpload&&t.length===1){const l=t[0];if(l.name.toLowerCase().endsWith(".zip")||l.type==="application/zip")return await this.uploadWidgetBundle(l,o,i)}const e=Array.from(t).map(l=>this.fileToBase64(l)),a=await Promise.all(e);this.log("Files converted to base64",{count:a.length});const r=await n(this.functions,"uploadWidgetFiles")({files:a,slot:o,widgetData:i});return this.log("Widget upload successful",r.data),r.data}catch(e){throw this.error("Widget upload failed",e),new Error(`Upload failed: ${e.message}`)}}async uploadWidgetBundle(t,o,i={},e=null){try{if(this.log("Starting widget bundle upload via Cloud Functions",{fileName:t.name,size:t.size,slot:o}),!d.currentUser)throw new Error("User must be authenticated to upload bundle");e&&e(10,"Converting file...");const a=await this.fileToBase64(t);e&&e(30,"Uploading to server..."),this.log("ZIP file converted to base64");const r=await n(this.functions,"uploadWidgetBundle")({zipFile:a,slot:o,widgetData:i});return e&&e(100,"Upload complete!"),this.log("Widget bundle upload successful",r.data),r.data}catch(a){throw this.error("Widget bundle upload failed",a),new Error(`Bundle upload failed: ${a.message}`)}}async uploadProfilePhoto(t){try{if(this.log("Starting profile photo upload via Cloud Functions"),!d.currentUser)throw new Error("User must be authenticated to upload profile photo");const o=await this.fileToBase64(t);this.log("Profile photo converted to base64");const e=await n(this.functions,"uploadProfilePhoto")({file:o});return this.log("Profile photo upload successful",e.data),e.data}catch(o){throw this.error("Profile photo upload failed",o),new Error(`Profile photo upload failed: ${o.message}`)}}async deleteWidget(t){try{if(this.log("Starting widget deletion via Cloud Functions",{widgetId:t}),!d.currentUser)throw new Error("User must be authenticated to delete widgets");const i=await n(this.functions,"deleteWidget")({widgetId:t});return this.log("Widget deletion successful",i.data),i.data}catch(o){throw this.error("Widget deletion failed",o),new Error(`Widget deletion failed: ${o.message}`)}}async getWidgetDownloadUrls(t){try{if(this.log("Getting widget download URLs via Cloud Functions",{widgetId:t}),!d.currentUser)throw new Error("User must be authenticated to access widget URLs");const i=await n(this.functions,"getWidgetDownloadUrls")({widgetId:t});return this.log("Download URLs retrieved successfully",i.data),i.data}catch(o){throw this.error("Failed to get download URLs",o),new Error(`Failed to get download URLs: ${o.message}`)}}async reuploadWidgetFiles(t,o){try{if(this.log("Starting widget reupload via Cloud Functions",{widgetId:t,fileCount:o.length}),!d.currentUser)throw new Error("User must be authenticated to reupload files");const i=Array.from(o).map(r=>this.fileToBase64(r)),e=await Promise.all(i),u=await n(this.functions,"reuploadWidgetFiles")({widgetId:t,files:e});return this.log("Widget reupload successful",u.data),u.data}catch(i){throw this.error("Widget reupload failed",i),new Error(`Reupload failed: ${i.message}`)}}validateFiles(t){const o=["text/html","text/css","application/javascript","application/json","image/png","image/jpeg","image/gif","image/svg+xml","text/javascript","application/x-javascript"],i=[".html",".js",".css",".png",".jpg",".jpeg",".gif",".svg",".json"];for(const e of t){const a=e.name.slice(e.name.lastIndexOf(".")).toLowerCase();if(!i.includes(a)||e.type&&!o.includes(e.type))return this.error("Invalid file type",{fileName:e.name,fileType:e.type}),!1}return!0}async uploadWithProgress(t,o,i={},e=null){try{if(e&&e(0,"Preparing files..."),!this.validateFiles(t))throw new Error("Invalid file types detected");e&&e(25,"Converting files...");const a=Array.from(t).map(l=>this.fileToBase64(l)),u=await Promise.all(a);e&&e(50,"Uploading to server...");const r=await this.uploadWidgetFiles(t,o,i);return e&&e(100,"Upload complete!"),r}catch(a){throw this.error("Upload with progress failed",a),a}}}const c=new p;window.cloudUploadManager=c;const w=s=>c.uploadProfilePhoto(s),m=s=>c.deleteWidget(s),U=s=>c.getWidgetDownloadUrls(s),W=(s,t)=>c.reuploadWidgetFiles(s,t);export{c,m as d,U as g,W as r,w as u};
