import{c as h}from"./cloud-upload-DzQTDkpW.js";import"./firebase-core-BO8UvLyb.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-functions.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-app.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-analytics.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-auth.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-storage.js";class y{constructor(){this.previewContainer=null,this.currentFiles=new Map,this.fullscreenModal=null,this.fullscreenBody=null,this.currentFullscreenUrl=null,this.log("Widget Preview Manager initialized")}log(e,t=null){console.log(`[WIDGET PREVIEW] ${e}`,t||"")}error(e,t=null){console.error(`[WIDGET PREVIEW ERROR] ${e}`,t||"")}async init(){try{return this.log("Initializing widget preview system"),this.setupPreviewContainer(),this.setupFullscreenModal(),this.setupEventListeners(),!0}catch(e){return this.error("Failed to initialize widget preview system",e),!1}}setupPreviewContainer(){this.previewContainer=document.getElementById("widgetPreviewContainer"),this.previewContainer||(this.previewContainer=document.createElement("div"),this.previewContainer.id="widgetPreviewContainer",this.previewContainer.className="widget-preview-container",this.previewContainer.innerHTML=`
        <div class="preview-header">
          <h3>File Preview</h3>
          <button class="preview-close-btn" id="previewCloseBtn">&times;</button>
        </div>
        <div class="preview-content" id="previewContent">
          <div class="preview-placeholder">
            <span class="preview-icon">üëÅÔ∏è</span>
            <p>Select files to preview your widget</p>
          </div>
        </div>
      `,document.body.appendChild(this.previewContainer))}setupFullscreenModal(){let e=document.getElementById("widgetFullscreenModal");e||(e=document.createElement("div"),e.id="widgetFullscreenModal",e.className="widget-fullscreen-modal",e.innerHTML=`
        <div class="fullscreen-inner">
          <div class="fullscreen-header">
            <h3 id="fullscreenTitle">Preview</h3>
            <div class="fullscreen-actions">
              <button class="fullscreen-open-tab-btn" id="fullscreenOpenTabBtn" title="Open in new tab">‚Üó</button>
              <button class="fullscreen-close-btn" id="fullscreenCloseBtn">&times;</button>
            </div>
          </div>
          <div class="fullscreen-body" id="fullscreenBody"></div>
        </div>
      `,document.body.appendChild(e)),this.fullscreenModal=e,this.fullscreenBody=e.querySelector("#fullscreenBody");const t=e.querySelector("#fullscreenCloseBtn");t&&!t._handlerBound&&(t.addEventListener("click",()=>this.hideFullscreen()),t._handlerBound=!0);const s=e.querySelector("#fullscreenOpenTabBtn");s&&!s._handlerBound&&(s.addEventListener("click",()=>{this.currentFullscreenUrl&&window.open(this.currentFullscreenUrl,"_blank")}),s._handlerBound=!0),e._backdropHandlerBound||(e.addEventListener("click",i=>{i.target===e&&this.hideFullscreen()}),e._backdropHandlerBound=!0),this._escHandlerBound||(document.addEventListener("keydown",i=>{i.key==="Escape"&&this.hideFullscreen()}),this._escHandlerBound=!0)}setupEventListeners(){const e=document.getElementById("previewCloseBtn");e&&e.addEventListener("click",()=>{this.hidePreview()}),this.previewContainer.addEventListener("click",t=>{t.target===this.previewContainer&&this.hidePreview()})}showPreview(){this.previewContainer&&(this.previewContainer.style.display="block",this.log("Preview shown"))}hidePreview(){this.previewContainer&&(this.previewContainer.style.display="none",this.clearPreview(),this.log("Preview hidden"))}clearPreview(){const e=document.getElementById("previewContent");e&&(e.innerHTML=`
        <div class="preview-placeholder">
          <span class="preview-icon">üëÅÔ∏è</span>
          <p>Select files to preview your widget</p>
        </div>
      `),this.currentFiles.clear()}async handleFiles(e){try{this.log("Handling files for preview",{count:e.length});const t=Array.from(e);this.currentFiles.clear(),t.forEach(i=>{this.currentFiles.set(i.name,i)});const s=t.filter(i=>i.name.match(/\.html?$/i));if(s.length>0)await this.showProjectPreview(t,s[0]);else for(const i of t)await this.showFilePreview(i);this.showPreview()}catch(t){this.error("Error handling files for preview",t),this.showError("Failed to preview files: "+t.message)}}async showFilePreview(e){const t=document.getElementById("previewContent");if(!t)return;const s=URL.createObjectURL(e);let i;try{if(e.type.startsWith("image/"))i=document.createElement("img"),i.src=s,i.className="preview-image",i.alt=e.name;else if(e.type.startsWith("audio/"))i=document.createElement("audio"),i.controls=!0,i.src=s,i.className="preview-audio";else if(e.type.startsWith("video/"))i=document.createElement("video"),i.controls=!0,i.src=s,i.className="preview-video";else if(e.name.match(/\.html?$/i))i=document.createElement("iframe"),i.src=s,i.className="preview-iframe",i.sandbox="allow-scripts allow-same-origin";else if(e.name.match(/\.(js|css|json|txt)$/i)){const n=await this.readFileAsText(e);i=this.createCodePreview(n,e.name)}else i=document.createElement("div"),i.className="preview-unsupported",i.innerHTML=`
          <span class="file-icon">üìÑ</span>
          <p>${e.name}</p>
          <small>File type not supported for preview</small>
        `;const r=document.createElement("div");r.className="file-info",r.innerHTML=`
        <span class="file-name">${e.name}</span>
        <span class="file-size">${this.formatFileSize(e.size)}</span>
      `;const l=document.createElement("div");l.className="preview-item",l.appendChild(r),l.appendChild(i);const a=document.createElement("div");a.className="preview-controls";const o=document.createElement("button");o.className="preview-fullscreen-btn",o.textContent="‚õ∂ Fullscreen",o.addEventListener("click",()=>{const n=`Preview: ${e.name}`;this.openFullscreenFromElement(i,n,i.src||s)}),a.appendChild(o),l.appendChild(a),t.appendChild(l)}catch(r){this.error("Error creating preview for file",{fileName:e.name,error:r})}}async showProjectPreview(e,t){const s=document.getElementById("previewContent");if(s)try{const i={};e.forEach(c=>i[c.name]=c);let l=await this.readFileAsText(t);l=l.replace(/<link[^>]+href="([^"]+\.css)"[^>]*>/gi,async(c,p)=>i[p]?`<style>${await this.readFileAsText(i[p])}</style>`:c),l=l.replace(/<script[^>]+src="([^"]+\.js)"[^>]*><\/script>/gi,async(c,p)=>i[p]?`<script>${await this.readFileAsText(i[p])}<\/script>`:c);const a=new Blob([l],{type:"text/html"}),o=URL.createObjectURL(a),n=document.createElement("iframe");n.src=o,n.className="preview-iframe project-preview",n.sandbox="allow-scripts allow-same-origin allow-forms",n.title="Widget Preview";const d=document.createElement("div");d.className="project-info",d.innerHTML=`
        <h4>Project Preview</h4>
        <p>${e.length} files loaded</p>
        <ul class="file-list">
          ${e.map(c=>`<li>${c.name} (${this.formatFileSize(c.size)})</li>`).join("")}
        </ul>
      `;const u=document.createElement("div");u.className="preview-item project-preview-item",u.appendChild(d),u.appendChild(n);const g=document.createElement("div");g.className="preview-controls";const f=document.createElement("button");f.className="preview-fullscreen-btn",f.textContent="‚õ∂ Fullscreen",f.addEventListener("click",()=>{this.openFullscreenFromElement(n,"Project Preview",o)}),g.appendChild(f),u.appendChild(g),s.appendChild(u)}catch(i){this.error("Error creating project preview",i),this.showError("Failed to preview project: "+i.message)}}openFullscreenFromElement(e,t="Preview",s=null){try{this.log("Opening fullscreen",{title:t,url:s}),this.fullscreenModal||this.setupFullscreenModal();const i=this.fullscreenModal.querySelector("#fullscreenTitle");i&&(i.textContent=t),this.fullscreenBody.innerHTML="";let r=null;const l=(e.tagName||"").toLowerCase();l==="iframe"?(r=document.createElement("iframe"),r.src=s||e.src,r.className="fullscreen-iframe",r.sandbox=e.sandbox||"allow-scripts allow-same-origin allow-forms"):l==="img"?(r=document.createElement("img"),r.src=s||e.src,r.className="fullscreen-image",r.alt=t):l==="video"?(r=document.createElement("video"),r.src=s||e.src,r.controls=!0,r.autoplay=!0,r.className="fullscreen-video"):l==="audio"?(r=document.createElement("audio"),r.src=s||e.src,r.controls=!0,r.autoplay=!0,r.className="fullscreen-audio"):(r=e.cloneNode(!0),r.classList.add("fullscreen-generic")),this.currentFullscreenUrl=s||e.src||null,this.fullscreenBody.appendChild(r),this.fullscreenModal.style.display="flex",document.body.style.overflow="hidden"}catch(i){this.error("Failed to open fullscreen",i)}}hideFullscreen(){this.fullscreenModal&&(this.fullscreenModal.style.display="none",this.fullscreenBody&&(this.fullscreenBody.innerHTML=""),document.body.style.overflow="",this.currentFullscreenUrl=null,this.log("Fullscreen closed"))}createCodePreview(e,t){const s=document.createElement("div");s.className="code-preview";const i=document.createElement("div");i.className="code-header",i.innerHTML=`
      <span class="file-name">${t}</span>
      <button class="copy-btn" onclick="navigator.clipboard.writeText(\`${e.replace(/`/g,"\\`")}\`)">üìã Copy</button>
    `;const r=document.createElement("pre");return r.className="code-content",r.textContent=e,s.appendChild(i),s.appendChild(r),s}async readFileAsText(e){return new Promise((t,s)=>{const i=new FileReader;i.onload=()=>t(i.result),i.onerror=()=>s(i.error),i.readAsText(e)})}formatFileSize(e){if(e===0)return"0 Bytes";const t=1024,s=["Bytes","KB","MB","GB"],i=Math.floor(Math.log(e)/Math.log(t));return parseFloat((e/Math.pow(t,i)).toFixed(2))+" "+s[i]}showError(e){const t=document.getElementById("previewContent");t&&(t.innerHTML=`
        <div class="preview-error">
          <span class="error-icon">‚ùå</span>
          <p>${e}</p>
        </div>
      `)}getCurrentFiles(){return Array.from(this.currentFiles.values())}clearFiles(){this.currentFiles.clear(),this.clearPreview()}}const w=new y;document.addEventListener("DOMContentLoaded",()=>{w.init(),window.widgetPreviewManager=w});class E{constructor(){this.uploadingSlots=new Set,this.log("Widget Upload Manager initialized with Cloud Functions")}log(e,t=null){console.log(`[WIDGET UPLOAD] ${e}`,t||"")}error(e,t=null){console.error(`[WIDGET UPLOAD ERROR] ${e}`,t||"")}async init(){try{return this.log("Initializing widget upload system"),this.log("Widget upload system initialized"),this.setupEventListeners(),!0}catch(e){return this.error("Failed to initialize widget upload system",e),!1}}setupEventListeners(){this.log("Setting up event listeners"),document.querySelectorAll(".upload-widget-btn").forEach(r=>{r.addEventListener("click",l=>{l.preventDefault(),l.stopPropagation(),this.handleUploadButtonClick(r)})}),document.querySelectorAll(".preview-widget-btn").forEach(r=>{r.addEventListener("click",l=>{l.preventDefault(),l.stopPropagation(),this.handlePreviewButtonClick(r)})}),document.querySelectorAll(".widget-file-input").forEach(r=>{r.addEventListener("change",l=>{this.handleFileInputChange(l.target)})}),document.querySelectorAll(".widget-upload-area").forEach(r=>{this.setupDragAndDrop(r)}),this.log("Event listeners setup complete")}setupDragAndDrop(e){const t=e.querySelector(".widget-file-input");e.addEventListener("dragover",s=>{s.preventDefault(),e.style.borderColor="var(--primary-color)",e.style.background="rgba(0, 240, 255, 0.1)"}),e.addEventListener("dragleave",s=>{s.preventDefault(),e.style.borderColor="#555",e.style.background="#0f0f0f"}),e.addEventListener("drop",s=>{s.preventDefault(),e.style.borderColor="#555",e.style.background="#0f0f0f";const i=s.dataTransfer.files;i.length>0&&(t.files=i,this.handleFileInputChange(t))}),e.addEventListener("click",s=>{s.target.closest(".file-list")||s.target.closest(".action-buttons")||(t.value="",t.click())})}handleFileInputChange(e){const t=e.files;t.length>0&&(this.log("Files selected",{count:t.length}),this.updateFileList(e,t),w.handleFiles(t))}updateFileList(e,t){const s=e.closest(".widget-upload-area"),i=s.querySelector(".upload-placeholder p");if(t.length>0){i.textContent=`${t.length} file(s) selected`;let r=s.querySelector(".file-list");r||(r=document.createElement("div"),r.className="file-list",s.appendChild(r)),r.innerHTML="",Array.from(t).forEach(l=>{const a=document.createElement("div");a.className="file-item",a.innerHTML=`
          <span class="file-name">${l.name}</span>
          <span class="file-size">${this.formatFileSize(l.size)}</span>
        `,r.appendChild(a)})}}formatFileSize(e){if(e===0)return"0 Bytes";const t=1024,s=["Bytes","KB","MB","GB"],i=Math.floor(Math.log(e)/Math.log(t));return parseFloat((e/Math.pow(t,i)).toFixed(2))+" "+s[i]}async handlePreviewButtonClick(e){const t=e.getAttribute("data-slot"),s=document.querySelector(`.widget-file-input[data-slot="${t}"]`);if(!s.files.length){this.showToast("Please select files to preview.","warning");return}this.log("Showing preview for slot",{slot:t}),await w.handleFiles(s.files)}async handleUploadButtonClick(e){const t=e.getAttribute("data-slot");if(this.uploadingSlots.has(t)){this.log("Upload already in progress for slot",{slot:t});return}const s=document.querySelector(`.widget-file-input[data-slot="${t}"]`),i=document.querySelector(`.widget-title-input[data-slot="${t}"]`),r=document.querySelector(`.widget-desc-input[data-slot="${t}"]`);if(!s.files.length){this.showToast("Please select files to upload.","warning");return}if(!h.validateFiles(s.files)){this.showToast("Invalid file type selected. Allowed: html, js, css, png, jpg, jpeg, gif, svg, json.","error");return}const l=i.value.trim()||"Untitled Widget",a=r.value.trim()||"";this.uploadingSlots.add(t),e.textContent="Uploading...",e.disabled=!0;try{this.log("Starting widget upload",{slot:t,fileCount:s.files.length});const o=await h.uploadWithProgress(s.files,t,{title:l,description:a},(n,d)=>{e.textContent=`${d} (${n}%)`});this.log("Widget upload successful",o),e.textContent=`Uploaded to Slot ${t}!`,e.style.background="linear-gradient(45deg, #4caf50, #45a049)",this.showToast(`Successfully uploaded ${o.files.length} files! üéâ`,"success"),window.widgetDisplay&&(this.log("Refreshing widget display..."),await window.widgetDisplay.loadUserWidgets(),window.widgetDisplay.setupWidgetSlots(),this.log("Widget display refreshed.")),setTimeout(()=>{e.textContent=`Upload to Slot ${t}`,e.disabled=!1,e.style.background="linear-gradient(45deg, #4caf50, #45a049)",s.value="",i.value="",r.value="";const n=s.closest(".widget-upload-area"),d=n.querySelector(".file-list");d&&d.remove();const u=n.querySelector(".upload-placeholder p");u.textContent="Drop files here or click to upload"},2e3)}catch(o){this.error("Widget upload failed",o),e.textContent="Upload Failed",e.style.background="linear-gradient(45deg, #f44336, #d32f2f)",this.showToast(`Upload failed: ${o.message}`,"error"),setTimeout(()=>{e.textContent=`Upload to Slot ${t}`,e.disabled=!1,e.style.background="linear-gradient(45deg, #4caf50, #45a049)"},2e3)}finally{this.uploadingSlots.delete(t)}}showToast(e,t="info"){window.showToast?window.showToast(e,t):console.log(`[TOAST ${t.toUpperCase()}] ${e}`)}async deleteWidget(e){try{this.log("Deleting widget",{widgetId:e});const t=await h.deleteWidget(e);return this.log("Widget deleted successfully",t),t}catch(t){throw this.error("Widget deletion failed",t),t}}async getWidgetDownloadUrls(e){try{this.log("Getting widget download URLs",{widgetId:e});const t=await h.getWidgetDownloadUrls(e);return this.log("Download URLs retrieved",t),t}catch(t){throw this.error("Failed to get download URLs",t),t}}async handleWidgetUpload(e){try{this.log("Handling widget upload from auth module",{title:e.title});const t=await h.uploadWidgetFiles(e.files,"slot-upload",{title:e.title,description:e.description||"",category:e.category||"general",tags:e.tags||[]});return this.log("Widget upload completed successfully",t),{success:!0,widgetId:t.widgetId,widget:t}}catch(t){return this.error("Widget upload failed",t),{success:!1,error:t.message}}}}const C=new E;document.addEventListener("DOMContentLoaded",()=>{C.init()});export{E as WidgetUploadManager,C as default};
