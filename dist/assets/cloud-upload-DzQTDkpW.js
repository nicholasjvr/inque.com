import{getFunctions as g,httpsCallable as s}from"https://www.gstatic.com/firebasejs/11.10.0/firebase-functions.js";import{auth as l}from"./firebase-core-BO8UvLyb.js";class h{constructor(){this.functions=g(void 0,"us-central1"),this.log("Cloud Upload Manager initialized with region: us-central1")}log(t,o=null){console.log(`[CLOUD UPLOAD] ${t}`,o||"")}error(t,o=null){console.error(`[CLOUD UPLOAD ERROR] ${t}`,o||"")}async fileToBase64(t){return new Promise((o,i)=>{const e=new FileReader;e.onload=()=>{const r=e.result.split(",")[1];o({name:t.name,type:t.type,size:t.size,data:r})},e.onerror=i,e.readAsDataURL(t)})}async uploadWidgetFiles(t,o,i={}){try{if(this.log("Starting widget upload via Cloud Functions",{fileCount:t.length,slot:o}),!l.currentUser)throw new Error("User must be authenticated to upload files");const e=Array.from(t).map(n=>this.fileToBase64(n)),r=await Promise.all(e);this.log("Files converted to base64",{count:r.length});const a=await s(this.functions,"uploadWidgetFiles")({files:r,slot:o,widgetData:i});return this.log("Widget upload successful",a.data),a.data}catch(e){throw this.error("Widget upload failed",e),new Error(`Upload failed: ${e.message}`)}}async uploadProfilePhoto(t){try{if(this.log("Starting profile photo upload via Cloud Functions"),!l.currentUser)throw new Error("User must be authenticated to upload profile photo");const o=await this.fileToBase64(t);this.log("Profile photo converted to base64");const e=await s(this.functions,"uploadProfilePhoto")({file:o});return this.log("Profile photo upload successful",e.data),e.data}catch(o){throw this.error("Profile photo upload failed",o),new Error(`Profile photo upload failed: ${o.message}`)}}async deleteWidget(t){try{if(this.log("Starting widget deletion via Cloud Functions",{widgetId:t}),!l.currentUser)throw new Error("User must be authenticated to delete widgets");const i=await s(this.functions,"deleteWidget")({widgetId:t});return this.log("Widget deletion successful",i.data),i.data}catch(o){throw this.error("Widget deletion failed",o),new Error(`Widget deletion failed: ${o.message}`)}}async getWidgetDownloadUrls(t){try{if(this.log("Getting widget download URLs via Cloud Functions",{widgetId:t}),!l.currentUser)throw new Error("User must be authenticated to access widget URLs");const i=await s(this.functions,"getWidgetDownloadUrls")({widgetId:t});return this.log("Download URLs retrieved successfully",i.data),i.data}catch(o){throw this.error("Failed to get download URLs",o),new Error(`Failed to get download URLs: ${o.message}`)}}validateFiles(t){const o=["text/html","text/css","application/javascript","application/json","image/png","image/jpeg","image/gif","image/svg+xml","text/javascript","application/x-javascript"],i=[".html",".js",".css",".png",".jpg",".jpeg",".gif",".svg",".json"];for(const e of t){const r=e.name.slice(e.name.lastIndexOf(".")).toLowerCase();if(!i.includes(r)||e.type&&!o.includes(e.type))return this.error("Invalid file type",{fileName:e.name,fileType:e.type}),!1}return!0}async uploadWithProgress(t,o,i={},e=null){try{if(e&&e(0,"Preparing files..."),!this.validateFiles(t))throw new Error("Invalid file types detected");e&&e(25,"Converting files...");const r=Array.from(t).map(n=>this.fileToBase64(n)),c=await Promise.all(r);e&&e(50,"Uploading to server...");const a=await this.uploadWidgetFiles(t,o,i);return e&&e(100,"Upload complete!"),a}catch(r){throw this.error("Upload with progress failed",r),r}}}const u=new h;window.cloudUploadManager=u;const w=d=>u.uploadProfilePhoto(d);export{u as c,w as u};
