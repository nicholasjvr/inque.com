import{auth as n,db as w}from"./firebase-core-BO8UvLyb.js";import{getDoc as S,doc as b,updateDoc as P,serverTimestamp as F}from"https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";import{getFunctions as W,httpsCallable as g}from"https://www.gstatic.com/firebasejs/11.10.0/firebase-functions.js";class R{constructor(){this.currentUser=null,this.userProfile=null,this.dashboardSettings=null,this.debugMode=!0,console.log("[PROFILE DASHBOARD] Profile Dashboard Manager initialized")}log(t,e=null){this.debugMode&&console.log(`[PROFILE DASHBOARD] ${t}`,e||"")}error(t,e=null){console.error(`[PROFILE DASHBOARD ERROR] ${t}`,e||"")}async init(){try{this.log("Initializing Profile Dashboard Manager"),await this.waitForAuth(),await this.loadUserProfile(),this.log("Profile Dashboard Manager initialization complete")}catch(t){this.error("Failed to initialize Profile Dashboard Manager",t)}}async waitForAuth(){return new Promise(t=>{if(n.currentUser)t();else{const e=n.onAuthStateChanged(r=>{r&&(e(),t())})}})}async loadUserProfile(){try{if(this.currentUser=n.currentUser,!this.currentUser){this.log("No authenticated user, using default settings"),this.dashboardSettings=this.getDefaultDashboardSettings();return}this.log("Loading user profile",{uid:this.currentUser.uid});const t=await S(b(w,"users",this.currentUser.uid));t.exists()?(this.userProfile=t.data(),this.dashboardSettings=this.userProfile.dashboardSettings||this.getDefaultDashboardSettings(),this.log("User profile and dashboard settings loaded successfully")):(this.log("User profile not found, using default settings"),this.dashboardSettings=this.getDefaultDashboardSettings())}catch(t){this.error("Failed to load user profile",t),this.dashboardSettings=this.getDefaultDashboardSettings()}}getDefaultDashboardSettings(){return{layout:"grid",theme:"neo-brutalist",customColors:{primary:"#00ffff",secondary:"#ff00ff",accent:"#ffff00",background:"#0a0a0a",text:"#ffffff"},widgetDefaults:{borderColor:"#00ffff",borderWidth:"3px",borderRadius:"0px",width:"100%",height:"300px",shadow:"0 0 20px rgba(0, 255, 255, 0.3)"},spacing:{widgetGap:"24px",sectionPadding:"40px",cardPadding:"24px"},animations:{enabled:!0,duration:"0.3s",easing:"ease-out"}}}applyDashboardSettings(t,e={}){if(!(!t||!this.dashboardSettings))try{const r={...this.dashboardSettings.widgetDefaults,...e};t.style.borderColor=r.borderColor,t.style.borderWidth=r.borderWidth,t.style.borderRadius=r.borderRadius,t.style.boxShadow=r.shadow,r.width&&(t.style.width=r.width),r.height&&(t.style.height=r.height),this.dashboardSettings.animations.enabled&&(t.style.transition=`all ${this.dashboardSettings.animations.duration} ${this.dashboardSettings.animations.easing}`),this.log("Applied dashboard settings to widget",{borderColor:r.borderColor,borderWidth:r.borderWidth,borderRadius:r.borderRadius})}catch(r){this.error("Failed to apply dashboard settings",r)}}createCustomWidgetIframe(t,e){try{if(!e||!t)return null;const r=document.createElement("iframe");return r.className="widget-iframe custom-styled",r.title=`Widget Preview - ${t.title||"Untitled Widget"}`,r.setAttribute("sandbox","allow-scripts allow-same-origin allow-forms"),this.applyDashboardSettings(r),this.loadWidgetIntoIframe(t,r).catch(s=>{this.error("Failed to load widget into iframe",s),r.replaceWith(Object.assign(document.createElement("div"),{className:"widget-preview-error",textContent:"Failed to load widget preview",style:"padding: 20px; text-align: center; color: #ff4444;"}))}),r}catch(r){return this.error("Failed to create custom widget iframe",r),null}}async loadWidgetIntoIframe(t,e){try{const r=Array.isArray(t.files)?t.files:[];if(r.length===0){this.log("Project has no files",{projectId:t.id});return}const s={};r.forEach(o=>{o&&o.fileName&&o.downloadURL&&(s[o.fileName]=o.downloadURL)}),this.log("File map created",{fileCount:Object.keys(s).length,files:Object.keys(s)});const i=Object.keys(s).find(o=>/index\.html?$/i.test(o))||Object.keys(s).find(o=>/\.html?$/i.test(o));if(!i){this.log("No HTML file found for widget",{projectId:t.id});return}this.log("Loading widget HTML",{htmlFileName:i});const l=await(await fetch(s[i])).text(),c=o=>{if(!o)return null;const h=o.replace(/^\.\//,"").replace(/^\//,"");if(s[h])return s[h];const f=h.split("/").pop();return s[f]||null},y=l.replace(/(href|src)=["']([^"']+)["']/gi,(o,h,f)=>{const p=c(f);return p?`${h}="${p}"`:o}),D=new Blob([y],{type:"text/html"}),U=URL.createObjectURL(D);e.src=U,this.log("Widget iframe set with blob URL")}catch(r){throw this.error("Error preparing widget iframe",r),r}}async updateDashboardSettings(t){try{if(!this.currentUser)throw new Error("User must be authenticated to update dashboard settings");this.log("Updating dashboard settings",t);const e=b(w,"users",this.currentUser.uid);return await P(e,{dashboardSettings:t,updatedAt:F()}),this.dashboardSettings=t,this.log("Dashboard settings updated successfully"),this.applySettingsToAllWidgets(),{success:!0}}catch(e){return this.error("Failed to update dashboard settings",e),{success:!1,error:e.message}}}applySettingsToAllWidgets(){try{const t=document.querySelectorAll(".widget-iframe, .timeline-event-card .widget-iframe");t.forEach(e=>{this.applyDashboardSettings(e)}),this.log("Applied settings to all widgets",{count:t.length})}catch(t){this.error("Failed to apply settings to all widgets",t)}}getDashboardSettings(){return this.dashboardSettings||this.getDefaultDashboardSettings()}previewDashboardSettings(t){try{const e=document.querySelectorAll(".widget-iframe, .timeline-event-card .widget-iframe");e.forEach(r=>{const s={...this.dashboardSettings.widgetDefaults,...t};this.applyDashboardSettings(r,s)}),this.log("Preview applied to widgets",{count:e.length})}catch(e){this.error("Failed to preview dashboard settings",e)}}resetToDefaults(){try{const t=this.getDefaultDashboardSettings();this.previewDashboardSettings(t),this.log("Reset to default settings")}catch(t){this.error("Failed to reset to default settings",t)}}exportSettings(){try{const t=this.getDashboardSettings(),e={version:"1.0",timestamp:new Date().toISOString(),settings:t},r=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),s=URL.createObjectURL(r),i=document.createElement("a");i.href=s,i.download=`dashboard-settings-${Date.now()}.json`,i.click(),URL.revokeObjectURL(s),this.log("Settings exported successfully")}catch(t){this.error("Failed to export settings",t)}}async importSettings(t){try{const e=await t.text(),r=JSON.parse(e);if(r.settings)return await this.updateDashboardSettings(r.settings),this.log("Settings imported successfully"),{success:!0};throw new Error("Invalid settings file format")}catch(e){return this.error("Failed to import settings",e),{success:!1,error:e.message}}}}const m=new R;window.profileDashboardManager=m;document.addEventListener("DOMContentLoaded",()=>{m.init()});class v{constructor(){this.functions=W(void 0,"us-central1"),this.log("Cloud Upload Manager initialized with region: us-central1")}log(t,e=null){console.log(`[CLOUD UPLOAD] ${t}`,e||"")}error(t,e=null){console.error(`[CLOUD UPLOAD ERROR] ${t}`,e||"")}async fileToBase64(t){return new Promise((e,r)=>{const s=new FileReader;s.onload=()=>{const i=s.result.split(",")[1];e({name:t.name,type:t.type,size:t.size,data:i})},s.onerror=r,s.readAsDataURL(t)})}async uploadWidgetFiles(t,e,r={}){try{if(this.log("Starting widget upload via Cloud Functions",{fileCount:t.length,slot:e}),!n.currentUser)throw new Error("User must be authenticated to upload files");const s=Array.from(t).map(c=>this.fileToBase64(c)),i=await Promise.all(s);this.log("Files converted to base64",{count:i.length});const l=await g(this.functions,"uploadWidgetFiles")({files:i,slot:e,widgetData:r});return this.log("Widget upload successful",l.data),l.data}catch(s){throw this.error("Widget upload failed",s),new Error(`Upload failed: ${s.message}`)}}async uploadProfilePhoto(t){try{if(this.log("Starting profile photo upload via Cloud Functions"),!n.currentUser)throw new Error("User must be authenticated to upload profile photo");const e=await this.fileToBase64(t);this.log("Profile photo converted to base64");const s=await g(this.functions,"uploadProfilePhoto")({file:e});return this.log("Profile photo upload successful",s.data),s.data}catch(e){throw this.error("Profile photo upload failed",e),new Error(`Profile photo upload failed: ${e.message}`)}}async deleteWidget(t){try{if(this.log("Starting widget deletion via Cloud Functions",{widgetId:t}),!n.currentUser)throw new Error("User must be authenticated to delete widgets");const r=await g(this.functions,"deleteWidget")({widgetId:t});return this.log("Widget deletion successful",r.data),r.data}catch(e){throw this.error("Widget deletion failed",e),new Error(`Widget deletion failed: ${e.message}`)}}async getWidgetDownloadUrls(t){try{if(this.log("Getting widget download URLs via Cloud Functions",{widgetId:t}),!n.currentUser)throw new Error("User must be authenticated to access widget URLs");const r=await g(this.functions,"getWidgetDownloadUrls")({widgetId:t});return this.log("Download URLs retrieved successfully",r.data),r.data}catch(e){throw this.error("Failed to get download URLs",e),new Error(`Failed to get download URLs: ${e.message}`)}}async reuploadWidgetFiles(t,e){try{if(this.log("Starting widget reupload via Cloud Functions",{widgetId:t,fileCount:e.length}),!n.currentUser)throw new Error("User must be authenticated to reupload files");const r=Array.from(e).map(l=>this.fileToBase64(l)),s=await Promise.all(r),d=await g(this.functions,"reuploadWidgetFiles")({widgetId:t,files:s});return this.log("Widget reupload successful",d.data),d.data}catch(r){throw this.error("Widget reupload failed",r),new Error(`Reupload failed: ${r.message}`)}}validateFiles(t){const e=["text/html","text/css","application/javascript","application/json","image/png","image/jpeg","image/gif","image/svg+xml","text/javascript","application/x-javascript"],r=[".html",".js",".css",".png",".jpg",".jpeg",".gif",".svg",".json"];for(const s of t){const i=s.name.slice(s.name.lastIndexOf(".")).toLowerCase();if(!r.includes(i)||s.type&&!e.includes(s.type))return this.error("Invalid file type",{fileName:s.name,fileType:s.type}),!1}return!0}async uploadWithProgress(t,e,r={},s=null){try{if(s&&s(0,"Preparing files..."),!this.validateFiles(t))throw new Error("Invalid file types detected");s&&s(25,"Converting files...");const i=Array.from(t).map(c=>this.fileToBase64(c)),d=await Promise.all(i);s&&s(50,"Uploading to server...");const l=await this.uploadWidgetFiles(t,e,r);return s&&s(100,"Upload complete!"),l}catch(i){throw this.error("Upload with progress failed",i),i}}}const u=new v;window.cloudUploadManager=u;const O=a=>u.uploadProfilePhoto(a),E=a=>u.deleteWidget(a),C=a=>u.getWidgetDownloadUrls(a),M=(a,t)=>u.reuploadWidgetFiles(a,t);export{u as c,E as d,C as g,m as p,M as r,O as u};
