import{a as c,d as p}from"./auth-aW8ghBAp.js";import{p as d}from"./profile-dashboard-manager-CTm1Hklp.js";/* empty css                       *//* empty css                      */import{c as h}from"./cloud-upload-BtBOMbGt.js";import"./css-analyzer-DJZTM973.js";import{getDoc as f,doc as g,collection as m,query as v,where as w,getDocs as y,updateDoc as I}from"https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";import"./profile_banner-20qet_68.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-app.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-analytics.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-auth.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-storage.js";import"https://www.gstatic.com/firebasejs/11.10.0/firebase-functions.js";class S{constructor(){this.currentUser=null,this.userProfile=null,this.slots=new Map,this.uploadingSlots=new Set,this.selectedFiles=new Map,console.log("[WIDGET STUDIO] Widget Studio Manager initialized")}log(e,t=null){console.log(`[WIDGET STUDIO] ${e}`,t||"")}error(e,t=null){console.error(`[WIDGET STUDIO ERROR] ${e}`,t||"")}async init(){try{this.log("Initializing Widget Studio page"),await this.waitForAuth(),await this.loadUserProfile(),this.setupEventListeners(),await this.loadExistingWidgets(),this.updateStudioStats(),await this.initializeProfileIntegration(),await this.testCloudUploadConnection(),this.log("Widget Studio page initialization complete")}catch(e){this.error("Failed to initialize Widget Studio page",e),this.showToast("Failed to initialize Widget Studio","error")}}async waitForAuth(){return new Promise(e=>{if(c.currentUser)e();else{const t=c.onAuthStateChanged(i=>{i&&(t(),e())})}})}async loadUserProfile(){try{if(this.currentUser=c.currentUser,!this.currentUser)throw new Error("No authenticated user");this.log("Loading user profile",{uid:this.currentUser.uid});const e=await f(g(p,"users",this.currentUser.uid));if(e.exists())this.userProfile=e.data(),this.updateUserDisplay(),this.log("User profile loaded successfully");else throw new Error("User profile not found")}catch(e){throw this.error("Failed to load user profile",e),e}}updateUserDisplay(){if(!this.userProfile)return;const e=document.getElementById("userName");e&&(e.textContent=this.userProfile.name||"User");const t=document.getElementById("userAvatar");t&&this.userProfile.photoURL&&(t.style.backgroundImage=`url(${this.userProfile.photoURL})`,t.innerHTML="")}async initializeProfileIntegration(){try{this.log("Initializing profile dashboard integration"),d?(await d.init(),this.log("Profile dashboard manager initialized"),this.applyDashboardStylingToPreviews()):this.log("Profile dashboard manager not available")}catch(e){this.error("Failed to initialize profile integration",e)}}isPremiumUser(){const e=this.userProfile||{};return e.isPremium||e.level>=3||!1}async testCloudUploadConnection(){try{if(this.log("Testing cloud upload connection"),!h)throw new Error("Cloud upload manager not available");if(!h.functions)throw new Error("Firebase functions not initialized");this.log("Cloud upload connection test passed")}catch(e){this.error("Cloud upload connection test failed",e),this.showToast("Warning: Cloud upload may not work properly","warning")}}applyDashboardStylingToPreviews(){try{if(!d)return;const e=document.querySelectorAll(".preview-modal .widget-iframe");e.forEach(t=>{d.applyDashboardSettings(t)}),this.log("Applied dashboard styling to preview elements",{count:e.length})}catch(e){this.error("Failed to apply dashboard styling to previews",e)}}setupEventListeners(){this.log("Setting up event listeners");for(let o=1;o<=3;o++){const l=document.getElementById(`fileInput${o}`),a=document.getElementById(`uploadArea${o}`);this.log(`Looking for elements for slot ${o}`,{fileInput:!!l,uploadArea:!!a,fileInputElement:l,uploadAreaElement:a}),l&&a?(this.setupFileInput(l,a,o),this.setupDragAndDrop(a,o)):this.error(`Missing elements for slot ${o}`,{fileInput:!!l,uploadArea:!!a})}for(let o=1;o<=3;o++){const l=document.getElementById(`previewBtn${o}`);l&&l.addEventListener("click",()=>this.handlePreview(o))}for(let o=1;o<=3;o++){const l=document.getElementById(`uploadBtn${o}`);l&&l.addEventListener("click",()=>this.handleUpload(o))}document.querySelectorAll(".clear-files-btn").forEach(o=>{o.addEventListener("click",l=>{const a=l.target.dataset.slot;this.clearSlotFiles(a)})});const t=document.getElementById("saveAllBtn");t&&t.addEventListener("click",()=>this.saveAllChanges());const i=document.getElementById("refreshBtn");i&&i.addEventListener("click",()=>this.refreshStudio());const s=document.getElementById("previewModalClose");s&&s.addEventListener("click",()=>this.hidePreviewModal());const n=document.getElementById("previewModal");n&&n.addEventListener("click",o=>{o.target===n&&this.hidePreviewModal()}),this.log("Event listeners setup complete")}setupFileInput(e,t,i){this.log(`Setting up file input for slot ${i}`,{fileInput:!!e,uploadArea:!!t,fileInputId:e?.id,uploadAreaId:t?.id}),e.addEventListener("change",s=>{this.log(`Files selected for slot ${i}`,{count:s.target.files.length,files:Array.from(s.target.files).map(n=>n.name)}),this.handleFileSelection(s.target.files,i)}),t.addEventListener("click",s=>{this.log(`Upload area clicked for slot ${i}`,{target:s.target.tagName,isFileInput:s.target===e}),s.target!==e&&(s.preventDefault(),this.log(`Triggering file input click for slot ${i}`),e.click())}),t.addEventListener("mousedown",s=>{s.target!==e&&(s.preventDefault(),e.focus())}),this.testFileInput=()=>{this.log(`Testing file input for slot ${i}`),e.click()}}setupDragAndDrop(e,t){e.addEventListener("dragover",i=>{i.preventDefault(),e.classList.add("dragover")}),e.addEventListener("dragleave",i=>{i.preventDefault(),e.classList.remove("dragover")}),e.addEventListener("drop",i=>{i.preventDefault(),e.classList.remove("dragover");const s=Array.from(i.dataTransfer.files);this.log(`Files dropped on slot ${t}`,{count:s.length}),this.handleFileSelection(s,t)})}handleFileSelection(e,t){if(!e||e.length===0)return;const i=e[0];if(!i.name.toLowerCase().endsWith(".zip")&&i.type!=="application/zip"){this.showToast("Please select a valid ZIP file","error");return}this.selectedFiles.set(t,[i]),this.updateZipFileDisplay(t,i),this.updateSlotStatus(t,"ZIP Selected"),this.updateSlotButtons(t,!0),this.log(`ZIP file selected for slot ${t}`,{fileName:i.name,size:i.size})}updateZipFileDisplay(e,t){const i=document.getElementById(`selectedFiles${e}`),s=document.getElementById(`filesList${e}`),n=document.getElementById(`placeholder${e}`);if(!i||!s||!n)return;n.style.display="none",i.style.display="block",s.innerHTML="";const o=this.createZipFileItem(t);s.appendChild(o)}updateFileDisplay(e,t){t.length===1&&(t[0].name.toLowerCase().endsWith(".zip")||t[0].type==="application/zip")&&this.updateZipFileDisplay(e,t[0])}updateFileInputDisplay(e,t){if(!document.getElementById(`fileInput${e}`))return;const s=Array.from(t).map(o=>o.name).join(", "),n=document.getElementById(`uploadArea${e}`);if(n){n.classList.add("has-files");const o=document.getElementById(`placeholder${e}`);o&&(o.innerHTML,o.innerHTML=`
          <span class="upload-icon">‚úÖ</span>
          <p>${t.length} file(s) selected</p>
          <span class="upload-hint">Click to change files</span>
        `)}this.log(`File input display updated for slot ${e}`,{fileCount:t.length,fileNames:s})}createZipFileItem(e){const t=document.createElement("div");t.className="zip-file-item";const i=this.formatFileSize(e.size);return t.innerHTML=`
      <div class="zip-file-info">
        <span class="zip-file-icon">üì¶</span>
        <div class="zip-file-details">
          <span class="zip-file-name" title="${e.name}">${e.name}</span>
          <span class="zip-file-size">${i}</span>
          <span class="zip-file-type">ZIP Archive</span>
        </div>
      </div>
      <button class="remove-zip-file" title="Remove zip file">√ó</button>
    `,t.querySelector(".remove-zip-file").addEventListener("click",()=>{this.removeZipFile(e,t)}),t}createFileItem(e){const t=document.createElement("div");t.className="file-item";const i=this.getFileIcon(e.name),s=this.formatFileSize(e.size);return t.innerHTML=`
      <div class="file-info">
        <span class="file-icon">${i}</span>
        <span class="file-name" title="${e.name}">${e.name}</span>
        <span class="file-size">${s}</span>
      </div>
      <button class="remove-file" title="Remove file">√ó</button>
    `,t.querySelector(".remove-file").addEventListener("click",()=>{this.removeFile(e,t)}),t}getFileIcon(e){const t=e.split(".").pop()?.toLowerCase();return{html:"üåê",css:"üé®",js:"‚ö°",png:"üñºÔ∏è",jpg:"üñºÔ∏è",jpeg:"üñºÔ∏è",gif:"üñºÔ∏è",svg:"üñºÔ∏è",json:"üìÑ",txt:"üìù",md:"üìù"}[t]||"üìÑ"}formatFileSize(e){if(e===0)return"0 Bytes";const t=1024,i=["Bytes","KB","MB","GB"],s=Math.floor(Math.log(e)/Math.log(t));return parseFloat((e/Math.pow(t,s)).toFixed(2))+" "+i[s]}removeZipFile(e,t){t.remove();const i=this.getSlotNumberFromFileItem(t);i&&(this.selectedFiles.delete(i),this.clearSlotFiles(i))}removeFile(e,t){t.remove();const i=this.getSlotNumberFromFileItem(t);if(i){const n=(this.selectedFiles.get(i)||[]).filter(o=>o!==e);this.selectedFiles.set(i,n),n.length===0&&this.clearSlotFiles(i)}}getSlotNumberFromFileItem(e){for(let t=1;t<=3;t++){const i=document.getElementById(`filesList${t}`);if(i&&i.contains(e))return t}return null}clearSlotFiles(e){this.selectedFiles.delete(e);const t=document.getElementById(`selectedFiles${e}`),i=document.getElementById(`placeholder${e}`),s=document.getElementById(`uploadArea${e}`),n=document.getElementById(`fileInput${e}`);t&&(t.style.display="none"),i&&(i.style.display="block",i.innerHTML=`
        <span class="upload-icon">üìÅ</span>
        <p>Drop files here or click to upload</p>
        <span class="upload-hint">Supports HTML, CSS, JS, images, and more</span>
      `),s&&s.classList.remove("has-files"),n&&(n.value=""),this.updateSlotStatus(e,"Available"),this.updateSlotButtons(e,!1),this.log(`Slot ${e} files cleared`)}updateSlotStatus(e,t){const i=document.getElementById(`slot${e}Status`);i&&(i.textContent=t)}updateSlotButtons(e,t){const i=document.getElementById(`previewBtn${e}`),s=document.getElementById(`uploadBtn${e}`);i&&(i.disabled=!t),s&&(s.disabled=!t)}async handlePreview(e){try{const t=this.selectedFiles.get(e);if(!t||t.length===0){this.showToast("No zip file selected for preview","warning");return}const i=t[0];if(!i.name.toLowerCase().endsWith(".zip")){this.showToast("Please select a zip file to preview","warning");return}this.log(`Showing preview for zip file in slot ${e}`,{fileName:i.name,size:i.size}),this.showPreviewModal();const s=await this.generateZipPreviewContent(i),n=document.getElementById("previewModalBody");n&&(n.innerHTML=s,setTimeout(()=>{this.applyDashboardStylingToPreviews()},100))}catch(t){this.error("Failed to show preview",t),this.showToast("Failed to generate preview","error")}}async generateZipPreviewContent(e){try{const t=this.formatFileSize(e.size);return`
        <div class="zip-preview-content">
          <div class="zip-info">
            <div class="zip-icon">üì¶</div>
            <h3>ZIP File Preview</h3>
            <div class="zip-details">
              <p><strong>Filename:</strong> ${e.name}</p>
              <p><strong>Size:</strong> ${t}</p>
              <p><strong>Type:</strong> ZIP Archive</p>
            </div>
          </div>

          <div class="zip-processing-info">
            <h4>üìã Processing Information</h4>
            <p>This ZIP file will be processed when uploaded:</p>
            <ul>
              <li>‚úÖ Extract all files and validate structure</li>
              <li>üîç Look for manifest.json (recommended)</li>
              <li>üéØ Find HTML entry point (index.html)</li>
              <li>üé® Analyze CSS dependencies</li>
              <li>‚ö° Optimize assets for performance</li>
              <li>üöÄ Generate preview and full-view URLs</li>
            </ul>
          </div>

          <div class="zip-manifest-hint">
            <h4>üí° Pro Tip: Add manifest.json</h4>
            <p>For better processing results, include a manifest.json file in your zip:</p>
            <div class="manifest-example">
              <pre><code>{
  "name": "My Awesome Widget",
  "version": "1.0.0",
  "entry": "index.html",
  "description": "A cool interactive widget"
}</code></pre>
            </div>
          </div>
        </div>
      `}catch(t){return this.error("Failed to generate zip preview content",t),`
        <div class="preview-error">
          <span class="error-icon">‚ùå</span>
          <p>Failed to preview ZIP file: ${t.message}</p>
        </div>
      `}}async generatePreviewContent(e){let t='<div class="preview-content">';for(const i of e){const s=this.getFileIcon(i.name),n=this.formatFileSize(i.size);if(t+=`
        <div class="preview-file-item">
          <div class="preview-file-header">
            <span class="preview-file-icon">${s}</span>
            <span class="preview-file-name">${i.name}</span>
            <span class="preview-file-size">${n}</span>
          </div>
      `,i.type.startsWith("image/"))t+=`<img src="${URL.createObjectURL(i)}" alt="${i.name}" style="max-width: 100%; max-height: 300px; border-radius: 8px;">`;else if(i.type==="text/html"||i.type==="text/css"||i.type==="text/javascript"||i.type==="text/plain"){const o=await this.readFileAsText(i);t+=`<pre class="preview-code"><code>${this.escapeHtml(o)}</code></pre>`}else t+='<p class="preview-no-preview">Preview not available for this file type</p>';t+="</div>"}return t+="</div>",t}async readFileAsText(e){return new Promise(t=>{const i=new FileReader;i.onload=s=>t(s.target.result),i.readAsText(e)})}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}showPreviewModal(){const e=document.getElementById("previewModal");e&&e.classList.add("show")}hidePreviewModal(){const e=document.getElementById("previewModal");e&&e.classList.remove("show")}async handleUpload(e){try{const t=this.selectedFiles.get(e);if(!t||t.length===0){this.showToast("No zip file selected for upload","warning");return}const i=t[0];if(!i.name.toLowerCase().endsWith(".zip")){this.showToast("Please select a zip file to upload","warning");return}if(this.uploadingSlots.has(e)){this.showToast("Upload already in progress for this slot","warning");return}this.log(`Starting zip upload for slot ${e}`,{fileName:i.name,size:i.size}),this.uploadingSlots.add(e),this.updateSlotStatus(e,"Processing ZIP..."),this.updateSlotButtons(e,!1),this.showUploadProgress(e);const s=document.getElementById(`title${e}`)?.value||`Widget ${e}`,n=document.getElementById(`description${e}`)?.value||"",o=document.getElementById(`tags${e}`)?.value||"",l=await h.uploadWidgetBundle(i,e,{title:s,description:n,tags:o,slot:e},(a,u)=>{this.updateUploadProgress(e,a,u)});if(this.log(`Upload result for slot ${e}`,l),l.success)this.log(`Zip upload successful for slot ${e}`,l),this.showToast(`Widget uploaded successfully to slot ${e}!`,"success"),this.updateSlotStatus(e,"Active"),this.slots.set(e,{widgetId:l.widgetId,title:s,description:n,tags:o,files:[{name:i.name,size:i.size,type:i.type}],uploadedAt:new Date,slot:e,isZipUpload:!0}),this.updateStudioStats();else throw this.error(`Zip upload failed for slot ${e}`,l),new Error(l.message||"Upload failed")}catch(t){this.error(`Zip upload failed for slot ${e}`,t),this.showToast(`Upload failed: ${t.message}`,"error"),this.updateSlotStatus(e,"Upload Failed"),this.updateSlotButtons(e,!0)}finally{this.hideUploadProgress(e),this.uploadingSlots.delete(e)}}updateUploadProgress(e,t,i){const s=document.getElementById(`progress${e}`),n=document.getElementById(`progressFill${e}`),o=document.getElementById(`progressText${e}`);s&&n&&o&&(s.style.display="block",n.style.width=`${t}%`,o.textContent=i||`${Math.round(t)}%`)}showUploadProgress(e){const t=document.getElementById(`progress${e}`);if(t){t.style.display="block";let i=0;const s=document.getElementById(`progressFill${e}`),n=document.getElementById(`progressText${e}`),o=setInterval(()=>{i+=Math.random()*15,i>=90&&(i=90),s&&(s.style.width=`${i}%`),n&&(n.textContent=`${Math.round(i)}%`),i>=90&&clearInterval(o)},200);this.progressIntervals=this.progressIntervals||new Map,this.progressIntervals.set(e,o)}}hideUploadProgress(e){const t=document.getElementById(`progress${e}`);t&&(t.style.display="none");const i=document.getElementById(`progressFill${e}`),s=document.getElementById(`progressText${e}`);i&&(i.style.width="100%"),s&&(s.textContent="100%"),this.progressIntervals&&this.progressIntervals.has(e)&&(clearInterval(this.progressIntervals.get(e)),this.progressIntervals.delete(e))}async loadExistingWidgets(){try{if(!this.currentUser)return;this.log("Loading existing widgets");const e=m(p,"widgets"),t=v(e,w("userId","==",this.currentUser.uid));(await y(t)).forEach(s=>{const n=s.data(),o=n.slot;o&&o>=1&&o<=3&&(this.slots.set(o,n),this.updateSlotStatus(o,"Active"),this.updateSlotButtons(o,!1),this.updateSlotForm(o,n))}),this.log("Existing widgets loaded",{count:this.slots.size})}catch(e){this.error("Failed to load existing widgets",e)}}updateSlotForm(e,t){const i=document.getElementById(`title${e}`),s=document.getElementById(`description${e}`),n=document.getElementById(`tags${e}`);i&&(i.value=t.title||""),s&&(s.value=t.description||""),n&&(n.value=t.tags||"")}updateStudioStats(){const e=this.slots.size,t=Array.from(this.slots.values()).filter(l=>l.status!=="deleted").length,i=Array.from(this.slots.values()).reduce((l,a)=>l+(a.files?.length||0),0),s=document.getElementById("totalWidgets"),n=document.getElementById("activeSlots"),o=document.getElementById("totalFiles");s&&(s.textContent=e),n&&(n.textContent=t),o&&(o.textContent=i)}async saveAllChanges(){try{this.log("Saving all changes");const e=[];for(let t=1;t<=3;t++){const i=document.getElementById(`title${t}`)?.value||"",s=document.getElementById(`description${t}`)?.value||"",n=document.getElementById(`tags${t}`)?.value||"";if(this.slots.has(t)){const o=this.slots.get(t);(o.title!==i||o.description!==s||o.tags!==n)&&e.push({slot:t,title:i,description:s,tags:n,widgetId:o.widgetId})}}if(e.length===0){this.showToast("No changes to save","info");return}for(const t of e){await I(g(p,"widgets",t.widgetId),{title:t.title,description:t.description,tags:t.tags,updatedAt:new Date});const i=this.slots.get(t.slot);i&&(i.title=t.title,i.description=t.description,i.tags=t.tags)}this.showToast(`Saved ${e.length} changes successfully!`,"success"),this.log("All changes saved successfully")}catch(e){this.error("Failed to save changes",e),this.showToast("Failed to save changes","error")}}async refreshStudio(){try{this.log("Refreshing studio"),this.slots.clear(),this.selectedFiles.clear(),this.uploadingSlots.clear();for(let e=1;e<=3;e++)this.clearSlotFiles(e),this.updateSlotForm(e,{title:"",description:"",tags:""});await this.loadExistingWidgets(),this.updateStudioStats(),this.showToast("Studio refreshed successfully!","success"),this.log("Studio refresh complete")}catch(e){this.error("Failed to refresh studio",e),this.showToast("Failed to refresh studio","error")}}showToast(e,t="info"){const i=document.getElementById("toastContainer");if(!i)return;const s=document.createElement("div");s.className=`toast ${t}`,s.textContent=e,i.appendChild(s),setTimeout(()=>{s.parentNode&&s.parentNode.removeChild(s)},5e3)}testFileInputs(){this.log("Testing all file inputs");for(let e=1;e<=3;e++){const t=document.getElementById(`fileInput${e}`);t?(this.log(`Testing file input ${e}`,{element:t}),t.click()):this.error(`File input ${e} not found`)}}}document.addEventListener("DOMContentLoaded",async()=>{console.log("[WIDGET STUDIO] DOM Content Loaded - Starting initialization");try{const r=new S;await r.init(),window.widgetStudio=r,console.log("[WIDGET STUDIO] Widget Studio page ready"),console.log("[WIDGET STUDIO] Debug: Use window.widgetStudio.testFileInputs() to test file inputs")}catch(r){console.error("[WIDGET STUDIO] Failed to initialize",r)}});
