import{a as d,d as h}from"./auth-DH1qQlSb.js";import{getDoc as w,doc as g,updateDoc as y,serverTimestamp as S}from"https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";class D{constructor(){this.currentUser=null,this.userProfile=null,this.dashboardSettings=null,this.debugMode=!0,console.log("[PROFILE DASHBOARD] Profile Dashboard Manager initialized")}log(t,s=null){this.debugMode&&console.log(`[PROFILE DASHBOARD] ${t}`,s||"")}error(t,s=null){console.error(`[PROFILE DASHBOARD ERROR] ${t}`,s||"")}async init(){try{this.log("Initializing Profile Dashboard Manager"),await this.waitForAuth(),await this.loadUserProfile(),this.log("Profile Dashboard Manager initialization complete")}catch(t){this.error("Failed to initialize Profile Dashboard Manager",t)}}async waitForAuth(){return new Promise(t=>{if(d.currentUser)t();else{const s=d.onAuthStateChanged(e=>{e&&(s(),t())})}})}async loadUserProfile(){try{if(this.currentUser=d.currentUser,!this.currentUser){this.log("No authenticated user, using default settings"),this.dashboardSettings=this.getDefaultDashboardSettings();return}this.log("Loading user profile",{uid:this.currentUser.uid});const t=await w(g(h,"users",this.currentUser.uid));t.exists()?(this.userProfile=t.data(),this.dashboardSettings=this.userProfile.dashboardSettings||this.getDefaultDashboardSettings(),this.log("User profile and dashboard settings loaded successfully")):(this.log("User profile not found, using default settings"),this.dashboardSettings=this.getDefaultDashboardSettings())}catch(t){this.error("Failed to load user profile",t),this.dashboardSettings=this.getDefaultDashboardSettings()}}getDefaultDashboardSettings(){return{layout:"grid",theme:"neo-brutalist",customColors:{primary:"#00ffff",secondary:"#ff00ff",accent:"#ffff00",background:"#0a0a0a",text:"#ffffff"},widgetDefaults:{borderColor:"#00ffff",borderWidth:"3px",borderRadius:"0px",width:"100%",height:"300px",shadow:"0 0 20px rgba(0, 255, 255, 0.3)"},spacing:{widgetGap:"24px",sectionPadding:"40px",cardPadding:"24px"},animations:{enabled:!0,duration:"0.3s",easing:"ease-out"}}}applyDashboardSettings(t,s={}){if(!(!t||!this.dashboardSettings))try{const e={...this.dashboardSettings.widgetDefaults,...s};t.style.borderColor=e.borderColor,t.style.borderWidth=e.borderWidth,t.style.borderRadius=e.borderRadius,t.style.boxShadow=e.shadow,e.width&&(t.style.width=e.width),e.height&&(t.style.height=e.height),this.dashboardSettings.animations.enabled&&(t.style.transition=`all ${this.dashboardSettings.animations.duration} ${this.dashboardSettings.animations.easing}`),this.log("Applied dashboard settings to widget",{borderColor:e.borderColor,borderWidth:e.borderWidth,borderRadius:e.borderRadius})}catch(e){this.error("Failed to apply dashboard settings",e)}}createCustomWidgetIframe(t,s){try{if(!s||!t)return null;const e=document.createElement("iframe");return e.className="widget-iframe custom-styled",e.title=`Widget Preview - ${t.title||"Untitled Widget"}`,e.setAttribute("sandbox","allow-scripts allow-same-origin allow-forms"),this.applyDashboardSettings(e),this.loadWidgetIntoIframe(t,e).catch(r=>{this.error("Failed to load widget into iframe",r),e.replaceWith(Object.assign(document.createElement("div"),{className:"widget-preview-error",textContent:"Failed to load widget preview",style:"padding: 20px; text-align: center; color: #ff4444;"}))}),e}catch(e){return this.error("Failed to create custom widget iframe",e),null}}async loadWidgetIntoIframe(t,s){try{const e=Array.isArray(t.files)?t.files:[];if(e.length===0){this.log("Project has no files",{projectId:t.id});return}const r={};e.forEach(i=>{i&&i.fileName&&i.downloadURL&&(r[i.fileName]=i.downloadURL)}),this.log("File map created",{fileCount:Object.keys(r).length,files:Object.keys(r)});const a=Object.keys(r).find(i=>/index\.html?$/i.test(i))||Object.keys(r).find(i=>/\.html?$/i.test(i));if(!a){this.log("No HTML file found for widget",{projectId:t.id});return}this.log("Loading widget HTML",{htmlFileName:a});const u=await(await fetch(r[a])).text(),f=i=>{if(!i)return null;const o=i.replace(/^\.\//,"").replace(/^\//,"");if(r[o])return r[o];const n=o.split("/").pop();return r[n]||null},b=u.replace(/(href|src)=["']([^"']+)["']/gi,(i,o,n)=>{const l=f(n);return l?`${o}="${l}"`:i}),p=new Blob([b],{type:"text/html"}),m=URL.createObjectURL(p);s.src=m,this.log("Widget iframe set with blob URL")}catch(e){throw this.error("Error preparing widget iframe",e),e}}async updateDashboardSettings(t){try{if(!this.currentUser)throw new Error("User must be authenticated to update dashboard settings");this.log("Updating dashboard settings",t);const s=g(h,"users",this.currentUser.uid);return await y(s,{dashboardSettings:t,updatedAt:S()}),this.dashboardSettings=t,this.log("Dashboard settings updated successfully"),this.applySettingsToAllWidgets(),{success:!0}}catch(s){return this.error("Failed to update dashboard settings",s),{success:!1,error:s.message}}}applySettingsToAllWidgets(){try{const t=document.querySelectorAll(".widget-iframe, .timeline-event-card .widget-iframe");t.forEach(s=>{this.applyDashboardSettings(s)}),this.log("Applied settings to all widgets",{count:t.length})}catch(t){this.error("Failed to apply settings to all widgets",t)}}getDashboardSettings(){return this.dashboardSettings||this.getDefaultDashboardSettings()}previewDashboardSettings(t){try{const s=document.querySelectorAll(".widget-iframe, .timeline-event-card .widget-iframe");s.forEach(e=>{const r={...this.dashboardSettings.widgetDefaults,...t};this.applyDashboardSettings(e,r)}),this.log("Preview applied to widgets",{count:s.length})}catch(s){this.error("Failed to preview dashboard settings",s)}}resetToDefaults(){try{const t=this.getDefaultDashboardSettings();this.previewDashboardSettings(t),this.log("Reset to default settings")}catch(t){this.error("Failed to reset to default settings",t)}}exportSettings(){try{const t=this.getDashboardSettings(),s={version:"1.0",timestamp:new Date().toISOString(),settings:t},e=new Blob([JSON.stringify(s,null,2)],{type:"application/json"}),r=URL.createObjectURL(e),a=document.createElement("a");a.href=r,a.download=`dashboard-settings-${Date.now()}.json`,a.click(),URL.revokeObjectURL(r),this.log("Settings exported successfully")}catch(t){this.error("Failed to export settings",t)}}async importSettings(t){try{const s=await t.text(),e=JSON.parse(s);if(e.settings)return await this.updateDashboardSettings(e.settings),this.log("Settings imported successfully"),{success:!0};throw new Error("Invalid settings file format")}catch(s){return this.error("Failed to import settings",s),{success:!1,error:s.message}}}}const c=new D;window.profileDashboardManager=c;document.addEventListener("DOMContentLoaded",()=>{c.init()});export{c as p};
